{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "mdw-df-nala-dev"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pp_pbi_refresh_api')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "loopStatusCheck",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(variables('loopUntil'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "bufferTime",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 120
									}
								},
								{
									"name": "checkSuccessRefresh",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "dataset_refresh_status",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(activity('dataset_refresh_status').output.value[0].status, 'Completed')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "disableLoop_success_fullrefresh",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dataset_refresh_pbi_succeeded",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "loopUntil",
													"value": true
												}
											},
											{
												"name": "dataset_refresh_pbi_succeeded",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "pp_pbi_notification",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"runId": {
															"value": "@coalesce(pipeline().RunId, -1)",
															"type": "Expression"
														},
														"name": {
															"value": "@pipeline().parameters.p_dataset_nm",
															"type": "Expression"
														},
														"triggerTime": {
															"value": "@activity('dataset_refresh_status').output.value[0].startTime",
															"type": "Expression"
														},
														"status": {
															"value": "@concat(activity('dataset_refresh_status').output.value[0].status,' - PBI success')",
															"type": "Expression"
														},
														"message": {
															"value": "@activity('dataset_refresh_status').output.value[0].status",
															"type": "Expression"
														},
														"executionEndTime": {
															"value": "@activity('dataset_refresh_status').output.value[0].endTime",
															"type": "Expression"
														},
														"teamWebhookUrl": {
															"value": "@pipeline().parameters.p_webhook_url",
															"type": "Expression"
														},
														"notificationTime": {
															"value": "@utcNow()",
															"type": "Expression"
														},
														"extendedStatus": {
															"value": "@coalesce(activity('dataset_refresh_status').output.value[0]?.extendedStatus,'Success')",
															"type": "Expression"
														},
														"color": "008000",
														"refreshType": {
															"value": "@pipeline().parameters.p_refreshType",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "dataset_refresh_status",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "bufferTime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {},
										"url": {
											"value": "@concat('https://api.powerbi.com/v1.0/myorg/groups/',pipeline().parameters.p_group_id,'/datasets/',pipeline().parameters.p_dataset_id,'/refreshes/?$top=1')",
											"type": "Expression"
										},
										"connectVia": {
											"referenceName": "IR-Snowflake-NALA",
											"type": "IntegrationRuntimeReference"
										},
										"authentication": {
											"type": "ServicePrincipal",
											"userTenant": {
												"value": "@pipeline().globalParameters.pbi_tenant_id",
												"type": "Expression"
											},
											"username": {
												"value": "@pipeline().globalParameters.pbi_service_principal_id",
												"type": "Expression"
											},
											"resource": "https://analysis.windows.net/powerbi/api",
											"password": {
												"type": "AzureKeyVaultSecret",
												"store": {
													"referenceName": "ls_key_vault",
													"type": "LinkedServiceReference"
												},
												"secretName": "PowerBI-SnowflakeADF-DEV"
											}
										}
									}
								},
								{
									"name": "checkFailureRefresh",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "checkSuccessRefresh",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(activity('dataset_refresh_status').output.value[0].status, 'Failed')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "disableLoopFailure_PbiFail",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "dataset_refresh_pbi_failed",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "loopUntil",
													"value": true
												}
											},
											{
												"name": "dataset_refresh_pbi_failed",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "pp_pbi_notification",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"runId": {
															"value": "@coalesce(pipeline().RunId, -1)",
															"type": "Expression"
														},
														"name": {
															"value": "@pipeline().parameters.p_dataset_nm",
															"type": "Expression"
														},
														"triggerTime": {
															"value": "@activity('dataset_refresh_status').output.value[0].startTime",
															"type": "Expression"
														},
														"status": {
															"value": "@concat(activity('dataset_refresh_status').output.value[0].status, ' - PBI Failure')",
															"type": "Expression"
														},
														"message": {
															"value": "@json(activity('dataset_refresh_status').output.value[0]?.serviceExceptionJson)?.errorDescription",
															"type": "Expression"
														},
														"executionEndTime": {
															"value": "@activity('dataset_refresh_status').output.value[0].endTime",
															"type": "Expression"
														},
														"teamWebhookUrl": {
															"value": "@pipeline().parameters.p_webhook_url",
															"type": "Expression"
														},
														"notificationTime": {
															"value": "@utcNow()",
															"type": "Expression"
														},
														"extendedStatus": {
															"value": "@activity('dataset_refresh_status').output.value[0].extendedStatus",
															"type": "Expression"
														},
														"color": "FF0000",
														"refreshType": {
															"value": "@pipeline().parameters.p_refreshType",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "Fail1",
												"type": "Fail",
												"dependsOn": [
													{
														"activity": "dataset_refresh_pbi_failed",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"message": "PowerBi Failure",
													"errorCode": "100100"
												}
											}
										]
									}
								},
								{
									"name": "disableLoopFailure_AdfFail",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "dataset_refresh_status",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "loopUntil",
										"value": true
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "dataset_refresh",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": {
								"value": "@concat('https://api.powerbi.com/v1.0/myorg/groups/',pipeline().parameters.p_group_id,'/datasets/',pipeline().parameters.p_dataset_id,'/refreshes')",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "IR-Snowflake-NALA",
								"type": "IntegrationRuntimeReference"
							},
							"body": {
								"value": "@json(pipeline().parameters.p_web_body)",
								"type": "Expression"
							},
							"authentication": {
								"type": "ServicePrincipal",
								"userTenant": {
									"value": "@pipeline().globalParameters.pbi_tenant_id",
									"type": "Expression"
								},
								"username": {
									"value": "@pipeline().globalParameters.pbi_service_principal_id",
									"type": "Expression"
								},
								"resource": "https://analysis.windows.net/powerbi/api",
								"password": {
									"type": "AzureKeyVaultSecret",
									"store": {
										"referenceName": "ls_key_vault",
										"type": "LinkedServiceReference"
									},
									"secretName": "PowerBI-SnowflakeADF-DEV"
								}
							}
						}
					},
					{
						"name": "TokenExpired_or_not",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "dataset_refresh",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\n    if(and(and(contains(activity('dataset_refresh').Error['message'],'{'),contains(activity('dataset_refresh').Error['message'],'}')),contains(activity('dataset_refresh').Error['message'],':')), \n       json(activity('dataset_refresh')?.Error['message'])?.error?.code ,\n       activity('dataset_refresh').Error['message']) \n    ,'TokenExpired' )",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "web_activity_fail_post",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "dataset_refresh_failed_post",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": "Web activity POST failed",
										"errorCode": "1010"
									}
								},
								{
									"name": "dataset_refresh_failed_post",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_pbi_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().parameters.p_dataset_nm",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@concat(activity('dataset_refresh').Status,'-','ADF activity failure')",
												"type": "Expression"
											},
											"message": {
												"value": "@replace(\n    if(and(and(contains(activity('dataset_refresh').Error['message'],'{'),contains(activity('dataset_refresh').Error['message'],'}')),contains(activity('dataset_refresh').Error['message'],':')), \n       json(activity('dataset_refresh')?.Error['message'])?.error?.message ,\n       activity('dataset_refresh').Error['message'])\n    ,'\"','''')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('dataset_refresh').ExecutionEndTime",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().parameters.p_webhook_url",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"extendedStatus": {
												"value": "@activity('dataset_refresh').Status",
												"type": "Expression"
											},
											"color": "FF0000",
											"refreshType": {
												"value": "@pipeline().parameters.p_refreshType",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_group_id": {
						"type": "string"
					},
					"p_dataset_id": {
						"type": "string"
					},
					"p_web_body": {
						"type": "string"
					},
					"p_dataset_nm": {
						"type": "string"
					},
					"p_webhook_url": {
						"type": "string"
					},
					"p_refreshType": {
						"type": "string"
					}
				},
				"variables": {
					"loopUntil": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "pbi_incremental_refresh/pbi_reusables"
				},
				"annotations": [],
				"lastPublishTime": "2024-10-21T13:41:47Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_pbi_refresh_stored_procedure')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "pbi_refresh_sp_call",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'_DATASET_REFRESH','''',',','98',')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_tgt_curate_table_nm": {
						"type": "string"
					}
				},
				"folder": {
					"name": "pbi_incremental_refresh"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ca_sql_server')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_CA_AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_delimited_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_directory": {
						"type": "string"
					},
					"p_file_nm": {
						"type": "string"
					},
					"p_root_system": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Reusable_Datasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().p_file_nm",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().p_directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().p_root_system",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_excel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_src_directory": {
						"type": "string"
					},
					"p_src_file_name": {
						"type": "string"
					},
					"p_src_root_system": {
						"type": "string"
					},
					"p_sheet_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Reusable_Datasets"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": {
						"value": "@dataset().p_sheet_name",
						"type": "Expression"
					},
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().p_src_file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().p_src_directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().p_src_root_system",
							"type": "Expression"
						}
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_fabric_wh')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_fabricwh",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Reusable_Datasets"
				},
				"annotations": [],
				"type": "WarehouseTable",
				"schema": [],
				"typeProperties": {
					"table": ""
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_fipszipxref_excel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "FipsZipsXref",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "FipsZipXref.xlsx",
						"folderPath": "business_files",
						"container": "stage"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "FIPSCode",
						"type": "String"
					},
					{
						"name": "Zipcode",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_geoxref_excel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "GeoXref",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "GeoXref.xlsx",
						"folderPath": "business_files",
						"container": "stage"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "RegionLongName",
						"type": "String"
					},
					{
						"name": "RegionShortName",
						"type": "String"
					},
					{
						"name": "RegionCode",
						"type": "String"
					},
					{
						"name": "DistrictLongName",
						"type": "String"
					},
					{
						"name": "DistrictShortName",
						"type": "String"
					},
					{
						"name": "DistrictCode",
						"type": "String"
					},
					{
						"name": "SMACode",
						"type": "String"
					},
					{
						"name": "SMALongName",
						"type": "String"
					},
					{
						"name": "BTACode",
						"type": "String"
					},
					{
						"name": "BTALongName",
						"type": "String"
					},
					{
						"name": "FIPSCode",
						"type": "String"
					},
					{
						"name": "MsCntyLongName",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_isparegion_excel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "ISPA Region",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ISPA Regions.xlsx",
						"folderPath": "business_files",
						"container": "stage"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "State",
						"type": "String"
					},
					{
						"name": "ISPA region ID",
						"type": "String"
					},
					{
						"name": "ISPA region Description",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_opsfinance_excel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_src_directory": {
						"type": "string",
						"defaultValue": "business_files"
					},
					"p_src_file_name": {
						"type": "string",
						"defaultValue": "OpsFinance_mapping.xlsx"
					},
					"p_src_root_system": {
						"type": "string",
						"defaultValue": "stage"
					},
					"p_sheet_name": {
						"type": "string",
						"defaultValue": "BU_Mapping"
					}
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": {
						"value": "@dataset().p_sheet_name",
						"type": "Expression"
					},
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().p_src_file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().p_src_directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().p_src_root_system",
							"type": "Expression"
						}
					},
					"range": "",
					"firstRowAsHeader": false
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_parq_edw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_root_system": {
						"type": "string"
					},
					"p_directory": {
						"type": "string"
					},
					"p_file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().p_file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().p_directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().p_root_system",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_directory": {
						"type": "string"
					},
					"p_root_system": {
						"type": "string"
					},
					"p_file_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Reusable_Datasets"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().p_file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().p_directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().p_root_system",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "RECID",
						"type": "INT64"
					},
					{
						"name": "CITY",
						"type": "UTF8"
					},
					{
						"name": "COUNTY",
						"type": "UTF8"
					},
					{
						"name": "COUNTRYREGIONID",
						"type": "UTF8"
					},
					{
						"name": "LATITUDE",
						"type": "DECIMAL",
						"precision": 32,
						"scale": 16
					},
					{
						"name": "LONGITUDE",
						"type": "DECIMAL",
						"precision": 32,
						"scale": 16
					},
					{
						"name": "ZIPCODE",
						"type": "UTF8"
					},
					{
						"name": "STATE",
						"type": "UTF8"
					},
					{
						"name": "STREET",
						"type": "UTF8"
					},
					{
						"name": "ISPRIVATE",
						"type": "INT32"
					},
					{
						"name": "MODIFIEDDATETIME",
						"type": "INT96"
					},
					{
						"name": "LOCATIONID",
						"type": "UTF8"
					},
					{
						"name": "DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "LOGISTICSLOCATION_MODIFIEDDATETIME",
						"type": "INT96"
					},
					{
						"name": "TIMEZONEKEYNAME",
						"type": "UTF8"
					},
					{
						"name": "HK_JOB_RUN_ID",
						"type": "UTF8"
					},
					{
						"name": "HK_SOURCE_NAME",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_returnreasongrpmap_excel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob_storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ReturnReasonGroupMapping.xlsx",
						"folderPath": "business_files",
						"container": "stage"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "ReturnReasonGroupID",
						"type": "String"
					},
					{
						"name": "ReturnReasonGroup",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_snowflake')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_snowflake",
					"type": "LinkedServiceReference",
					"parameters": {
						"ls_DbName": {
							"value": "@dataset().p_ls_DbName",
							"type": "Expression"
						},
						"ls_Env": {
							"value": "@dataset().p_ls_Env",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"p_tgt_table_name": {
						"type": "string"
					},
					"p_tgt_schema_name": {
						"type": "string"
					},
					"p_ls_DbName": {
						"type": "string"
					},
					"p_ls_Env": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Reusable_Datasets"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().p_tgt_schema_name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().p_tgt_table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/NALA-CA-Pipeline-Incremental')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MetadataLookup",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "StartEmail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM [DataFactory].[Vw_GetSnowflakeLookupConfig]",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_ca_sql_server",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "''",
									"TableName": "''"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "MetadataLookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('MetadataLookup').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "LoadData",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeSource",
											"query": {
												"value": "@item().SourceQuery",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@{concat('TRUNCATE TABLE ', item().SchemaName,'_Wrk.',item().TableName)}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "ls_blob_storage",
												"type": "LinkedServiceReference"
											},
											"path": {
												"value": "@pipeline().globalParameters.rootDir",
												"type": "Expression"
											},
											"enableCompression": true
										}
									},
									"inputs": [
										{
											"referenceName": "ds_snowflake",
											"type": "DatasetReference",
											"parameters": {
												"p_tgt_table_name": "''",
												"p_tgt_schema_name": "''",
												"p_ls_DbName": {
													"value": "@pipeline().parameters.ls_Dbname",
													"type": "Expression"
												},
												"p_ls_Env": {
													"value": "@pipeline().globalParameters.environment",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_ca_sql_server",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": {
													"value": "@concat(item().SchemaName,'_Wrk')",
													"type": "Expression"
												},
												"TableName": {
													"value": "@item().TableName",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "UpdateAudit",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "LoadData",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "ls_CA_AzureSqlDatabase",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"parameters": [
													{
														"name": "SName",
														"type": "String",
														"value": {
															"value": "@item().SchemaName",
															"type": "Expression"
														},
														"direction": "Input"
													},
													{
														"name": "TName",
														"type": "String",
														"value": {
															"value": "@item().TableName",
															"type": "Expression"
														},
														"direction": "Input"
													},
													{
														"name": "CCount",
														"type": "Int64",
														"value": {
															"value": "@activity('LoadData').output.rowsCopied",
															"type": "Expression"
														},
														"direction": "Input"
													},
													{
														"name": "CDuration",
														"type": "Int32",
														"value": {
															"value": "@activity('LoadData').output.copyDuration",
															"type": "Expression"
														},
														"direction": "Input"
													},
													{
														"name": "CSize",
														"type": "Int64",
														"value": {
															"value": "@activity('LoadData').output.dataWritten",
															"type": "Expression"
														},
														"direction": "Input"
													}
												],
												"type": "NonQuery",
												"text": {
													"value": "EXECUTE Datafactory.usp_UpdateAuditValues @SName,@TName,@CCount,@CDuration,@CSize",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "AppendTableName",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "LoadMainTable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "TablesList",
										"value": {
											"value": "@item().TableName",
											"type": "Expression"
										}
									}
								},
								{
									"name": "LoadMainTable",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "UpdateAudit",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "DataFactory.usp_RefreshSnowflakeTables",
										"storedProcedureParameters": {
											"SchemaName": {
												"value": {
													"value": "@item().SchemaName",
													"type": "Expression"
												},
												"type": "String"
											},
											"TableName": {
												"value": {
													"value": "@item().TableName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_CA_AzureSqlDatabase",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "StartEmail",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://prod-25.centralus.logic.azure.com:443/workflows/3b03be0230f8431eb88d7d144e0546bb/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=C0LfCFLYpk2WnlFLp6551I96WUg-cXcdb_wMyoxHyaI",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"body": {
								"value": "{\n    \"cc\":\"prince.a@customeranalytics.com,pokuri.t@customeranalytics.com\",\n    \"sender\":\"TSIdata-noreply@customeranalytics.com\",\n    \"to\":\"ca_tsidatawarehouse@customeranalytics.com\",\n    \"message\":\"MDW ingestion process has been started\",\n    \"sub\": \"Alert! MDW Data Ingestion started\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "FailureEmail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://prod-25.centralus.logic.azure.com:443/workflows/3b03be0230f8431eb88d7d144e0546bb/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=C0LfCFLYpk2WnlFLp6551I96WUg-cXcdb_wMyoxHyaI",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"body": {
								"value": "{\n    \"cc\":\"prince.a@customeranalytics.com,pokuri.t@customeranalytics.com\",\n    \"sender\":\"TSIdata-noreply@customeranalytics.com\",\n    \"to\":\"ca_tsidatawarehouse@customeranalytics.com\",\n    \"message\":\"MDW ingestion has been failed.\",\n    \"sub\": \"Failure! MDW Data Ingestion Failed\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupForEmail",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[Developer].[usp_MDWRefreshedtableInHTML]",
								"storedProcedureParameters": {
									"TablesList": {
										"type": "String",
										"value": {
											"value": "@String(variables('TablesList'))",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_ca_sql_server",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "''",
									"TableName": "''"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "OnSuccess",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "LookupForEmail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://prod-25.centralus.logic.azure.com:443/workflows/3b03be0230f8431eb88d7d144e0546bb/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=C0LfCFLYpk2WnlFLp6551I96WUg-cXcdb_wMyoxHyaI",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"body": {
								"value": "{\n    \"cc\":\"prince.a@customeranalytics.com,pokuri.t@customeranalytics.com\",\n    \"sender\":\"TSIdata-noreply@customeranalytics.com\",\n    \"to\":\"ca_tsidatawarehouse@customeranalytics.com\",\n    \"message\":\"@{activity('LookupForEmail').output.value[0].HTMLOutput}\",\n    \"sub\": \"Alert! MDW Data Ingestion Completed\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ls_Dbname": {
						"type": "string",
						"defaultValue": "PUBLISH"
					}
				},
				"variables": {
					"TablesList": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "NALA-CA-Pipeline"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_ca_sql_server')]",
				"[concat(variables('factoryId'), '/datasets/ds_snowflake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_budgetmodel_to_dim_budget_model')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": "select\r\nbm1.DATAAREAID,\r\nbm1.MODELID,\r\nbm1.SUBMODELID,\r\nbm1.TYPE,\r\nbm1.TXT,\r\ntet1.ENUMVALUELABEL as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_BUDGETMODELTYPE\r\nfrom\r\ndbo.BUDGETMODEL bm1\r\nleft join (select ENUMNAME, ENUMVALUE\r\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\r\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\r\n\t\twhere ENUMNAME = 'HeadingSub'\r\n\t\tgroup by ENUMNAME, ENUMVALUE) tet1 on\r\n\tbm1.TYPE = tet1.ENUMVALUE",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "MODELID",
																"type": "String"
															},
															"sink": {
																"name": "MODELID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SUBMODELID",
																"type": "String"
															},
															"sink": {
																"name": "SUBMODELID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "TYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TXT",
																"type": "String"
															},
															"sink": {
																"name": "TXT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_BUDGETMODELTYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_BUDGETMODELTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('select\nbm1.dataareaid As DATAAREAID,\nbm1.modelid As MODELID,\nbm1.submodelid As SUBMODELID,\nbm1.type As TYPE,\nbm1.txt As TXT,\ntet1.ENUMVALUELABEL as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_BUDGETMODELTYPE\nfrom '\n,pipeline().globalParameters.d365_dbName,'.','budgetmodel bm1\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as ENUMVALUELABEL\n\t\tfrom '\n,pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n\t\twhere enumname = ''HeadingSub''\n\t\tgroup by enumname, enumvalue) tet1 on\n\tbm1.type = tet1.enumvalue')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "MODELID",
																"type": "String"
															},
															"sink": {
																"name": "MODELID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SUBMODELID",
																"type": "String"
															},
															"sink": {
																"name": "SUBMODELID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "TYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TXT",
																"type": "String"
															},
															"sink": {
																"name": "TXT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_BUDGETMODELTYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_BUDGETMODELTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification_copy1",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail_copy1",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification_copy1",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "BUDGETMODEL"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "BUDGETMODEL"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_BUDGET_MODEL"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T10:58:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_snowflake')]",
				"[concat(variables('factoryId'), '/datasets/ds_fabric_wh')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_budgettransactionline_to_fact_budget_transactions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_retail_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prev_max_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')\n\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "switch_nala_retail_d365",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_to_raw_nala",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "SELECT\nbtl1.recid as RECID\n,btl1.budgettransactionheader as BUDGETTRANSACTIONHEADER\n,btl1.transactioncurrency as TRANSACTIONCURRENCY\n,btl1.ledgerdimension as LEDGERDIMENSION\n,btl1.date as DATE\n,btl1.quantity as QUANTITY\n,btl1.accountingcurrencyamount as ACCOUNTINGCURRENCYAMOUNT\n,btl1.transactioncurrencyamount as TRANSACTIONCURRENCYAMOUNT\n,btl1.modifieddatetime as MODIFIEDDATETIME\n,bth1.budgetmodelid as BUDGETTRANSACTIONHEADER_BUDGETMODELID\n,bth1.budgetsubmodelid as BUDGETTRANSACTIONHEADER_BUDGETSUBMODELID\n,bth1.budgetmodeltype as BUDGETTRANSACTIONHEADER_BUDGETMODELTYPE\n,bth1.primaryledger as BUDGETTRANSACTIONHEADER_PRIMARYLEDGER\n,bth1.budgetmodeldataareaid as BUDGETTRANSACTIONHEADER_BUDGETMODELDATAAREAID\n,bth1.modifieddatetime as BUDGETTRANSACTIONHEADER_MODIFIEDDATETIME\n,davc1.mainaccount as DIMENSIONATTRIBUTEVALUECOMBINATION_MAINACCOUNT\n,davc1.modifieddatetime as DIMENSIONATTRIBUTEVALUECOMBINATION_MODIFIEDDATETIME\n,tet1.enumvaluelabel as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_BUDGETMODELTYPE\n,(SELECT MAX(LastUpdateDate)\n FROM (VALUES (btl1.modifieddatetime),\n  (isnull(bth1.modifieddatetime, '1950-01-01'))\n  , (isnull(davc1.MODIFIEDDATETIME, '1950-01-01'))\n) AS UpdateDate(LastUpdateDate)) as LATEST_MODIFIEDDATETIME\nFROM\ndbo.BUDGETTRANSACTIONLINE btl1\nleft join dbo.BUDGETTRANSACTIONHEADER bth1 on\n\tbtl1.BUDGETTRANSACTIONHEADER = bth1.RECID\nleft join dbo.DIMENSIONATTRIBUTEVALUECOMBINATION davc1 on\n\tbtl1.LEDGERDIMENSION = davc1.RECID\nleft join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\n\t\twhere ENUMNAME = 'HeadingSub'\n\t\tgroup by ENUMNAME, ENUMVALUE) tet1 on\n\tbth1.BUDGETMODELTYPE = tet1.ENUMVALUE\nWHERE (SELECT MAX(LastUpdateDate)\n FROM (VALUES (btl1.modifieddatetime),\n  (isnull(bth1.modifieddatetime, '1950-01-01'))\n  , (isnull(davc1.MODIFIEDDATETIME, '1950-01-01'))\n) AS UpdateDate(LastUpdateDate)) > '@{variables('v_prev_max_timestamp')}' ",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "Int64"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "BUDGETTRANSACTIONHEADER",
																"type": "Int64"
															},
															"sink": {
																"name": "BUDGETTRANSACTIONHEADER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TRANSACTIONCURRENCY",
																"type": "String"
															},
															"sink": {
																"name": "TRANSACTIONCURRENCY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LEDGERDIMENSION",
																"type": "Int64"
															},
															"sink": {
																"name": "LEDGERDIMENSION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "DATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "DATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "QUANTITY",
																"type": "Decimal"
															},
															"sink": {
																"name": "QUANTITY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "ACCOUNTINGCURRENCYAMOUNT",
																"type": "Decimal"
															},
															"sink": {
																"name": "ACCOUNTINGCURRENCYAMOUNT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TRANSACTIONCURRENCYAMOUNT",
																"type": "Decimal"
															},
															"sink": {
																"name": "TRANSACTIONCURRENCYAMOUNT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "BUDGETTRANSACTIONHEADER_BUDGETMODELID",
																"type": "String"
															},
															"sink": {
																"name": "BUDGETTRANSACTIONHEADER_BUDGETMODELID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "BUDGETTRANSACTIONHEADER_BUDGETSUBMODELID",
																"type": "String"
															},
															"sink": {
																"name": "BUDGETTRANSACTIONHEADER_BUDGETSUBMODELID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "BUDGETTRANSACTIONHEADER_BUDGETMODELTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "BUDGETTRANSACTIONHEADER_BUDGETMODELTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "BUDGETTRANSACTIONHEADER_PRIMARYLEDGER",
																"type": "Int64"
															},
															"sink": {
																"name": "BUDGETTRANSACTIONHEADER_PRIMARYLEDGER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "BUDGETTRANSACTIONHEADER_BUDGETMODELDATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "BUDGETTRANSACTIONHEADER_BUDGETMODELDATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "BUDGETTRANSACTIONHEADER_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "BUDGETTRANSACTIONHEADER_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DIMENSIONATTRIBUTEVALUECOMBINATION_MAINACCOUNT",
																"type": "Int64"
															},
															"sink": {
																"name": "DIMENSIONATTRIBUTEVALUECOMBINATION_MAINACCOUNT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "DIMENSIONATTRIBUTEVALUECOMBINATION_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "DIMENSIONATTRIBUTEVALUECOMBINATION_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_BUDGETMODELTYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_BUDGETMODELTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_to_raw_nala",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_to_raw_nala').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_to_raw_nala').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_to_raw_nala').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_to_raw_nala').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_to_raw_nala').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_to_raw_d365",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@Concat('SELECT\nbtl1.recid as RECID\n,btl1.budgettransactionheader as BUDGETTRANSACTIONHEADER\n,btl1.transactioncurrency as TRANSACTIONCURRENCY\n,btl1.ledgerdimension as LEDGERDIMENSION\n,btl1.date as DATE\n,btl1.quantity as QUANTITY\n,btl1.accountingcurrencyamount as ACCOUNTINGCURRENCYAMOUNT\n,btl1.transactioncurrencyamount as TRANSACTIONCURRENCYAMOUNT\n,btl1.modifieddatetime as MODIFIEDDATETIME\n,bth1.budgetmodelid as BUDGETTRANSACTIONHEADER_BUDGETMODELID\n,bth1.budgetsubmodelid as BUDGETTRANSACTIONHEADER_BUDGETSUBMODELID\n,bth1.budgetmodeltype as BUDGETTRANSACTIONHEADER_BUDGETMODELTYPE\n,bth1.primaryledger as BUDGETTRANSACTIONHEADER_PRIMARYLEDGER\n,bth1.budgetmodeldataareaid as BUDGETTRANSACTIONHEADER_BUDGETMODELDATAAREAID\n,bth1.modifieddatetime as BUDGETTRANSACTIONHEADER_MODIFIEDDATETIME\n,davc1.mainaccount as DIMENSIONATTRIBUTEVALUECOMBINATION_MAINACCOUNT\n,davc1.modifieddatetime as DIMENSIONATTRIBUTEVALUECOMBINATION_MODIFIEDDATETIME\n,tet1.ENUMVALUELABEL as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_BUDGETMODELTYPE\n,(SELECT MAX(lastupdatedate)\n FROM (VALUES (btl1.modifieddatetime),\n  (isnull(bth1.modifieddatetime, ''1950-01-01''))\n  , (isnull(davc1.modifieddatetime, ''1950-01-01''))\n) AS UpdateDate(lastupdatedate)) as LATEST_MODIFIEDDATETIME\nFROM\ndataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.budgettransactionline btl1\nLeft Join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.budgettransactionheader bth1 On\n\tbtl1.budgettransactionheader = bth1.recid\nLeft Join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattributevaluecombination davc1 On\n\tbtl1.ledgerdimension = davc1.recid\nLeft Join (Select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) As ENUMVALUELABEL\n\t\tFrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\n\t\tWhere enumname = ''HeadingSub''\n\t\tGroup By enumname, enumvalue) tet1 On\n\tbth1.budgetmodeltype = tet1.enumvalue\nWhere (Select max(LastUpdateDate)\n FROM (VALUES (btl1.modifieddatetime),\n  (isnull(bth1.modifieddatetime, ''1950-01-01''))\n  , (isnull(davc1.modifieddatetime, ''1950-01-01''))\n) AS UpdateDate(LastUpdateDate)) > ','''',variables('v_prev_max_timestamp'),'''')\n",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "Int64"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "BUDGETTRANSACTIONHEADER",
																"type": "Int64"
															},
															"sink": {
																"name": "BUDGETTRANSACTIONHEADER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TRANSACTIONCURRENCY",
																"type": "String"
															},
															"sink": {
																"name": "TRANSACTIONCURRENCY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LEDGERDIMENSION",
																"type": "Int64"
															},
															"sink": {
																"name": "LEDGERDIMENSION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "DATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "DATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "QUANTITY",
																"type": "Decimal"
															},
															"sink": {
																"name": "QUANTITY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "ACCOUNTINGCURRENCYAMOUNT",
																"type": "Decimal"
															},
															"sink": {
																"name": "ACCOUNTINGCURRENCYAMOUNT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TRANSACTIONCURRENCYAMOUNT",
																"type": "Decimal"
															},
															"sink": {
																"name": "TRANSACTIONCURRENCYAMOUNT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "BUDGETTRANSACTIONHEADER_BUDGETMODELID",
																"type": "String"
															},
															"sink": {
																"name": "BUDGETTRANSACTIONHEADER_BUDGETMODELID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "BUDGETTRANSACTIONHEADER_BUDGETSUBMODELID",
																"type": "String"
															},
															"sink": {
																"name": "BUDGETTRANSACTIONHEADER_BUDGETSUBMODELID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "BUDGETTRANSACTIONHEADER_BUDGETMODELTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "BUDGETTRANSACTIONHEADER_BUDGETMODELTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "BUDGETTRANSACTIONHEADER_PRIMARYLEDGER",
																"type": "Int64"
															},
															"sink": {
																"name": "BUDGETTRANSACTIONHEADER_PRIMARYLEDGER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "BUDGETTRANSACTIONHEADER_BUDGETMODELDATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "BUDGETTRANSACTIONHEADER_BUDGETMODELDATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "BUDGETTRANSACTIONHEADER_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "BUDGETTRANSACTIONHEADER_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DIMENSIONATTRIBUTEVALUECOMBINATION_MAINACCOUNT",
																"type": "Int64"
															},
															"sink": {
																"name": "DIMENSIONATTRIBUTEVALUECOMBINATION_MAINACCOUNT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "DIMENSIONATTRIBUTEVALUECOMBINATION_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "DIMENSIONATTRIBUTEVALUECOMBINATION_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_BUDGETMODELTYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_BUDGETMODELTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_to_raw_d365",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_to_raw_d365').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_to_raw_d365').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_to_raw_d365').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_to_raw_d365').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_to_raw_d365').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "FACT_BUDGET_TRANSACTIONS"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "BUDGETTRANSACTIONLINE"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "BUDGETTRANSACTIONLINE"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prev_max_timestamp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-04T13:47:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_snowflake')]",
				"[concat(variables('factoryId'), '/datasets/ds_fabric_wh')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_cashdisc_to_dim_cash_discount')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "switch_nala",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId,-1)",
																"type": "Expression"
															}
														},
														{
															"name": "LATEST_MODIFIEDDATETIME",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": "select cd1.DATAAREAID as DATAAREAID\r\n, cd1.CASHDISCCODE as CASHDISCCODE\r\n, cd1.DESCRIPTION as DESCRIPTION \r\nfrom dbo.CASHDISC cd1;",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CASHDISCCODE",
																"type": "String"
															},
															"sink": {
																"name": "CASHDISCCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId,-1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId,-1)",
																"type": "Expression"
															}
														},
														{
															"name": "LATEST_MODIFIEDDATETIME",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('select cd1.dataareaid as DATAAREAID\n, cd1.cashdisccode as CASHDISCCODE\n, cd1.description as DESCRIPTION \nfrom ',pipeline().globalParameters.d365_dbName,'.','cashdisc cd1;')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CASHDISCCODE",
																"type": "String"
															},
															"sink": {
																"name": "CASHDISCCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId,-1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId,-1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId,-1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "CASHDISC"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_CASH_DISCOUNT"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "CASHDISC"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_snowflake')]",
				"[concat(variables('factoryId'), '/datasets/ds_fabric_wh')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_commissioncustrgrp_to_dim_commission_group')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LATEST_MODIFIEDDATETIME",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select \nccg1.DATAAREAID,\nccg1.GROUPID,\nccg1.NAME\nfrom\ndbo.COMMISSIONCUSTOMERGROUP ccg1",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "GROUPID",
																"type": "String"
															},
															"sink": {
																"name": "GROUPID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LATEST_MODIFIEDDATETIME",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('select \nccg1.dataareaid AS DATAAREAID,\nccg1.groupid AS GROUPID,\nccg1.name AS NAME\nfrom ',pipeline().globalParameters.d365_dbName,'.',toLower(pipeline().parameters.p_src_table_nm),' ccg1')\n\n\n",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String",
																"physicalType": "VARCHAR"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String",
																"physicalType": "VARCHAR"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String",
																"physicalType": "VARCHAR"
															}
														},
														{
															"source": {
																"name": "GROUPID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "GROUPID",
																"type": "String",
																"physicalType": "VARCHAR"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "NAME",
																"type": "String",
																"physicalType": "VARCHAR"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "TIMESTAMP_TZ"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@activity('d365_to_raw').Error['message']",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "COMMISSIONCUSTOMERGROUP"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "COMMISSIONCUSTOMERGROUP"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_COMMISSION_GROUP"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"pipeline_start_time": {
						"type": "String"
					},
					"pipeline_end_time": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-05T05:40:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_snowflake')]",
				"[concat(variables('factoryId'), '/datasets/ds_fabric_wh')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_commissionsalesgroup_to_dim_sales_group')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": "SELECT\r\ncsg1.dataareaid as DATAAREAID\r\n,csg1.groupid as GROUPID\r\n,csg1.name as NAME\r\nFROM dbo.COMMISSIONSALESGROUP csg1",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "GROUPID",
																"type": "String"
															},
															"sink": {
																"name": "GROUPID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('select\ncsg1.dataareaid as DATAAREAID\n,csg1.groupid as GROUPID\n,csg1.name as NAME\nfrom ',pipeline().globalParameters.d365_dbName,'.',' commissionsalesgroup csg1'\n)\n",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "GROUPID",
																"type": "String"
															},
															"sink": {
																"name": "GROUPID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "COMMISSIONSALESGROUP"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "COMMISSIONSALESGROUP"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_SALES_GROUP"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T10:58:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_snowflake')]",
				"[concat(variables('factoryId'), '/datasets/ds_fabric_wh')]"
			]
		}
	]
}