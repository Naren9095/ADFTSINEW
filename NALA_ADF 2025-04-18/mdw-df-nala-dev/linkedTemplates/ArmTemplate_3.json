{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "mdw-df-nala-dev"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_inventitemgtin_to_dim_global_trade_item_number')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prv_max_upd_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select \niig1.DATAAREAID as DATAAREAID,\niig1.INVENTDIMID as INVENTDIMID,\niig1.ITEMID as ITEMID,\niig1.GLOBALTRADEITEMNUMBER as GLOBALTRADEITEMNUMBER,\niig1.GTINSETUP as GTINSETUP,\niig1.MODIFIEDDATETIME as MODIFIEDDATETIME,\nid1.CONFIGID as INVENTDIM_CONFIGID,\nid1.MODIFIEDDATETIME as INVENTDIM_MODIFIEDDATETIME,\ntet1.ENUMVALUELABEL as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_GTINSETUP,\n(SELECT MAX(LastUpdateDate) FROM (VALUES (iig1.MODIFIEDDATETIME),\n\t\t\t\t\t(isnull(id1.MODIFIEDDATETIME,'1950-01-01'))) AS UpdateDate(LastUpdateDate)) AS LATEST_MODIFIEDDATETIME\nfrom \ndbo.INVENTITEMGTIN iig1\nleft join dbo.INVENTDIM id1 on\n\tiig1.DATAAREAID = id1.DATAAREAID and\n\tiig1.INVENTDIMID = id1.INVENTDIMID\nleft join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\n\t\twhere ENUMNAME = 'GTINSetup'\n\t\tgroup by ENUMNAME, ENUMVALUE) tet1 on\n\tiig1.GTINSETUP = tet1.ENUMVALUE\nwhere isnull(iig1.DATAAREAID, '') != ''\nand isnull(iig1.INVENTDIMID, '') != ''\nand isnull(iig1.ITEMID, '') != ''\nand (SELECT MAX(LastUpdateDate) FROM (VALUES (iig1.MODIFIEDDATETIME),\n\t\t\t\t\t(isnull(id1.MODIFIEDDATETIME,'1950-01-01'))) AS UpdateDate(LastUpdateDate))\n> '@{variables('v_prv_max_upd_timestamp')}' \n\n",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDIMID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTDIMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ITEMID",
																"type": "String"
															},
															"sink": {
																"name": "ITEMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "GLOBALTRADEITEMNUMBER",
																"type": "String"
															},
															"sink": {
																"name": "GLOBALTRADEITEMNUMBER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "GTINSETUP",
																"type": "Int32"
															},
															"sink": {
																"name": "GTINSETUP",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTDIM_CONFIGID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTDIM_CONFIGID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDIM_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTDIM_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_GTINSETUP",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_GTINSETUP",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('select \niig1.dataareaid as DATAAREAID,\niig1.inventdimid as INVENTDIMID,\niig1.itemid as ITEMID,\niig1.globaltradeitemnumber as GLOBALTRADEITEMNUMBER,\niig1.gtinsetup as GTINSETUP,\niig1.modifieddatetime as MODIFIEDDATETIME,\nid1.configid as INVENTDIM_CONFIGID,\nid1.modifieddatetime as INVENTDIM_MODIFIEDDATETIME,\ntet1.ENUMVALUELABEL as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_GTINSETUP,\n(SELECT MAX(LastUpdateDate) FROM (VALUES (iig1.modifieddatetime),\n\t\t\t\t\t(isnull(id1.modifieddatetime,''1950-01-01''))) AS UpdateDate(LastUpdateDate)) AS LATEST_MODIFIEDDATETIME\nfrom ' \n,pipeline().globalParameters.d365_dbName,'.','inventitemgtin iig1\nleft join ' \n,pipeline().globalParameters.d365_dbName,'.','inventdim id1 on\n\tiig1.dataareaid = id1.dataareaid and\n\tiig1.inventdimid = id1.inventdimid\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as ENUMVALUELABEL\n\t\tfrom ' \n,pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n\t\twhere enumname = ''GTINSetup''\n\t\tgroup by enumname, enumvalue) tet1 on\n\tiig1.gtinsetup = tet1.enumvalue\nwhere isnull(iig1.dataareaid, '''') != ''''\nand isnull(iig1.inventdimid, '''') != ''''\nand isnull(iig1.itemid, '''') != ''''\nand (SELECT MAX(LastUpdateDate) FROM (VALUES (iig1.modifieddatetime),\n\t\t\t\t\t(isnull(id1.modifieddatetime,''1950-01-01''))) AS UpdateDate(LastUpdateDate))\n> ','''',variables('v_prv_max_upd_timestamp'),'''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDIMID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTDIMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ITEMID",
																"type": "String"
															},
															"sink": {
																"name": "ITEMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "GLOBALTRADEITEMNUMBER",
																"type": "String"
															},
															"sink": {
																"name": "GLOBALTRADEITEMNUMBER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "GTINSETUP",
																"type": "Int32"
															},
															"sink": {
																"name": "GTINSETUP",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTDIM_CONFIGID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTDIM_CONFIGID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDIM_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTDIM_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_GTINSETUP",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_GTINSETUP",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_GLOBAL_TRADE_ITEM_NUMBER"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "INVENTITEMGTIN"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "INVENTITEMGTIN"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prv_max_upd_timestamp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T10:51:02Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_inventitemprice_to_dim_cost')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_retail_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prev_max_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')\n\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "switch_nala_retail_d365",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_to_raw_nala",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "SELECT\niip1.dataareaid as DATAAREAID\n,iip1.inventdimid as INVENTDIMID\n,iip1.itemid as ITEMID\n,iip1.pricetype as PRICETYPE\n,iip1.activationdate as ACTIVATIONDATE\n,iip1.createddatetime as CREATEDDATETIME\n,iip1.costingtype as COSTINGTYPE\n,iip1.versionid as VERSIONID\n,iip1.price as PRICE\n,iip1.markup as MARKUP\n,iip1.priceqty as PRICEQTY\n,iip1.priceunit as PRICEUNIT\n,iip1.unitid as UNITID\n,iip1.modifieddatetime as MODIFIEDDATETIME\n,uom1.symbol as UNITOFMEASURE_SYMBOL\n,uom1.modifieddatetime as UNITOFMEASURE_MODIFIEDDATETIME\n,uomt1.description as UNITOFMEASURETRANSLATION_DESCRIPTION\n,uomt1.modifieddatetime as UNITOFMEASURETRANSLATION_MODIFIEDDATETIME\n,tet1.enumvaluelabel as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PRICETYPE\n,tet2.enumvaluelabel as TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_COSTINGTYPE\n,id1.configid as INVENTDIM_CONFIGID\n,id1.inventsiteid as INVENTDIM_INVENTSITEID\n,id1.modifieddatetime as INVENTDIM_MODIFIEDDATETIME\n,idc1.pdmstatus as INVENTDIMCOMBINATION_PDMSTATUS\n,idc1.modifieddatetime as INVENTDIMCOMBINATION_MODIFIEDDATETIME\n,ps1.name as PDMSTATUS_NAME\n,(SELECT MAX(LastUpdateDate)\nFROM ( \t\t\t\tVALUES\n        (iip1.modifieddatetime),\n        ( isnull( uom1.modifieddatetime, '1950-01-01' )),\n        ( isnull( uomt1.modifieddatetime, '1950-01-01' )),\n        ( isnull( id1.modifieddatetime, '1950-01-01' )),\n        ( isnull( idc1.modifieddatetime, '1950-01-01' ))) AS UpdateDate(LastUpdateDate)\n) AS LATEST_MODIFIEDDATETIME \nFROM\ndbo.INVENTITEMPRICE iip1\nleft join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\n\t\twhere ENUMNAME = 'CostingVersionPriceType'\n\t\tgroup by ENUMNAME, ENUMVALUE) tet1 on\n\tiip1.PRICETYPE = tet1.ENUMVALUE\nleft join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\n\t\twhere ENUMNAME = 'InventItemCostingType'\n\t\tgroup by ENUMNAME, ENUMVALUE) tet2 on\n\tiip1.COSTINGTYPE = tet2.ENUMVALUE\nleft join dbo.UNITOFMEASURE uom1 on\n\tiip1.UNITID = uom1.SYMBOL\nleft join dbo.UNITOFMEASURETRANSLATION uomt1 on\n\tuomt1.LANGUAGEID = 'en-us' and\n\tuom1.RECID = uomt1.UNITOFMEASURE\nleft join dbo.INVENTDIM id1 on\n\tiip1.DATAAREAID = id1.DATAAREAID and\n\tiip1.INVENTDIMID = id1.INVENTDIMID\nleft join (select idc10.DATAAREAID, idc10.ITEMID, id10.CONFIGID, idc10.PDMSTATUS\n\t\t\t, max(id10.MODIFIEDDATETIME) as MODIFIEDDATETIME\n\t\tfrom dbo.INVENTDIMCOMBINATION idc10\n\t\tleft join dbo.INVENTDIM id10 on\n\t\t\tidc10.DATAAREAID = id10.DATAAREAID and\n\t\t\tidc10.INVENTDIMID = id10.INVENTDIMID\n\t\tgroup by idc10.DATAAREAID, idc10.ITEMID, id10.CONFIGID, idc10.PDMSTATUS) idc1 on\n\tiip1.DATAAREAID = idc1.DATAAREAID and\n\tid1.CONFIGID = idc1.CONFIGID and\n\tiip1.ITEMID = idc1.ITEMID\nleft join dbo.PDMSTATUS ps1 on\n            idc1.PDMSTATUS = ps1.RECID\nwhere \nisnull(iip1.itemid, '') != ''\n and (SELECT MAX(LastUpdateDate)\nFROM ( \t\t\t\tVALUES\n        (iip1.modifieddatetime),\n        ( isnull( uom1.modifieddatetime, '1950-01-01' )),\n        ( isnull( uomt1.modifieddatetime, '1950-01-01' )),\n        ( isnull( id1.modifieddatetime, '1950-01-01' )),\n        ( isnull( idc1.modifieddatetime, '1950-01-01' ))) AS UpdateDate(LastUpdateDate)\n) > '@{variables('v_prev_max_timestamp')}' ",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDIMID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTDIMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ITEMID",
																"type": "String"
															},
															"sink": {
																"name": "ITEMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PRICETYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "PRICETYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "ACTIVATIONDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "ACTIVATIONDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "CREATEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "CREATEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "COSTINGTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "COSTINGTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "VERSIONID",
																"type": "String"
															},
															"sink": {
																"name": "VERSIONID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PRICE",
																"type": "Decimal"
															},
															"sink": {
																"name": "PRICE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MARKUP",
																"type": "Decimal"
															},
															"sink": {
																"name": "MARKUP",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PRICEQTY",
																"type": "Decimal"
															},
															"sink": {
																"name": "PRICEQTY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PRICEUNIT",
																"type": "Decimal"
															},
															"sink": {
																"name": "PRICEUNIT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "UNITID",
																"type": "String"
															},
															"sink": {
																"name": "UNITID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "UNITOFMEASURE_SYMBOL",
																"type": "String"
															},
															"sink": {
																"name": "UNITOFMEASURE_SYMBOL",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "UNITOFMEASURE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "UNITOFMEASURE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "UNITOFMEASURETRANSLATION_DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "UNITOFMEASURETRANSLATION_DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "UNITOFMEASURETRANSLATION_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "UNITOFMEASURETRANSLATION_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PRICETYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PRICETYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_COSTINGTYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_COSTINGTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDIM_CONFIGID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTDIM_CONFIGID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDIM_INVENTSITEID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTDIM_INVENTSITEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDIM_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTDIM_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTDIMCOMBINATION_PDMSTATUS",
																"type": "Int64"
															},
															"sink": {
																"name": "INVENTDIMCOMBINATION_PDMSTATUS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDIMCOMBINATION_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTDIMCOMBINATION_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "PDMSTATUS_NAME",
																"type": "String"
															},
															"sink": {
																"name": "PDMSTATUS_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_to_raw_nala",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_to_raw_nala').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_to_raw_nala').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_to_raw_nala').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_to_raw_nala').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_to_raw_nala').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_to_raw_d365",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('select\niip1.dataareaid as dataareaid\n,iip1.inventdimid as inventdimid\n,iip1.itemid as itemid\n,iip1.pricetype as pricetype\n,iip1.activationdate as activationdate\n,iip1.createddatetime as createddatetime\n,iip1.costingtype as costingtype\n,iip1.versionid as versionid\n,iip1.price as price\n,iip1.markup as markup\n,iip1.priceqty as priceqty\n,iip1.priceunit as priceunit\n,iip1.unitid as unitid\n,iip1.modifieddatetime as modifieddatetime\n,uom1.symbol as unitofmeasure_symbol\n,uom1.modifieddatetime as unitofmeasure_modifieddatetime\n,uomt1.description as unitofmeasuretranslation_description\n,uomt1.modifieddatetime as unitofmeasuretranslation_modifieddatetime\n,tet1.enumvaluelabel as timextenderenumtable1_enumvaluelabel_pricetype\n,tet2.enumvaluelabel as timextenderenumtable2_enumvaluelabel_costingtype\n,id1.configid as inventdim_configid\n,id1.inventsiteid as inventdim_inventsiteid\n,id1.modifieddatetime as inventdim_modifieddatetime\n--,idc1.pdmstatus as inventdimcombination_pdmstatus\n,idp.productlifecyclestateid AS inventdimcombination_pdmstatus --renamed so Snowflake proc picks it up\n,idc1.modifieddatetime as inventdimcombination_modifieddatetime\n,idp.productlifecyclestateid AS PDMSTATUS_NAME \n,(select max(lastupdatedate)\nfrom ( \t\t\t\tvalues\n        (iip1.modifieddatetime),\n        ( isnull( uom1.modifieddatetime, ''1950-01-01'' )),\n        ( isnull( uomt1.modifieddatetime, ''1950-01-01'' )),\n        ( isnull( id1.modifieddatetime, ''1950-01-01'' )),\n        ( isnull( idc1.modifieddatetime, ''1950-01-01'' ))) as updatedate(lastupdatedate)\n) as latest_modifieddatetime \n\nFROM ',pipeline().globalParameters.d365_dbName,'.','inventitemprice iip1\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as enumvaluelabel\n\t\tfrom ',pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n\t\twhere enumname = ''costingversionpricetype''\n\t\tgroup by enumname, enumvalue) tet1 on\n\tiip1.pricetype = tet1.enumvalue\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as enumvaluelabel\n\t\tfrom ',pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n\t\twhere enumname = ''inventitemcostingtype''\n\t\tgroup by enumname, enumvalue) tet2 on\n\tiip1.costingtype = tet2.enumvalue\nleft join ',pipeline().globalParameters.d365_dbName,'.','unitofmeasure uom1 on\n\tiip1.unitid = uom1.symbol\nleft join ',pipeline().globalParameters.d365_dbName,'.','unitofmeasuretranslation uomt1 on\n\tuomt1.languageid = ''en-us'' and\n\tuom1.recid = uomt1.unitofmeasure\nleft join ',pipeline().globalParameters.d365_dbName,'.','inventdim id1 on\n\tiip1.dataareaid = id1.dataareaid and\n\tiip1.inventdimid = id1.inventdimid\nleft join (select idc10.dataareaid, idc10.itemid, id10.configid--, idc10.pdmstatus\n\t\t\t, max(id10.modifieddatetime) as modifieddatetime\n\t\tfrom  ',pipeline().globalParameters.d365_dbName,'.','inventdimcombination idc10\n\t\tleft join ',pipeline().globalParameters.d365_dbName,'.','inventdim id10 on\n\t\t\tidc10.dataareaid = id10.dataareaid and\n\t\t\tidc10.inventdimid = id10.inventdimid\n\t\tgroup by idc10.dataareaid, idc10.itemid, id10.configid/*, idc10.pdmstatus*/) idc1 on\n\tiip1.dataareaid = idc1.dataareaid and\n\tid1.configid = idc1.configid and\n\tiip1.itemid = idc1.itemid\nLEFT OUTER JOIN ',pipeline().globalParameters.d365_dbName,'.','inventdistinctproduct idp ON iip1.dataareaid = idp.dataareaid\n\tAND id1.configid = idp.configid\n\tAND iip1.itemid = idp.itemid\nWHERE isnull(iip1.itemid, '''') != '''' and (select max(lastupdatedate)\nfrom ( \t\t\t\tvalues\n        (iip1.modifieddatetime),\n        ( isnull( uom1.modifieddatetime, ''1950-01-01'' )),\n        ( isnull( uomt1.modifieddatetime, ''1950-01-01'' )),\n        ( isnull( id1.modifieddatetime, ''1950-01-01'' )),\n        ( isnull( idc1.modifieddatetime, ''1950-01-01'' ))) as updatedate(lastupdatedate)\n) > ','''',variables('v_prev_max_timestamp'),'''')\n",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String",
																"physicalType": "VARCHAR"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String",
																"physicalType": "VARCHAR"
															}
														},
														{
															"source": {
																"name": "dataareaid",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String",
																"physicalType": "VARCHAR"
															}
														},
														{
															"source": {
																"name": "inventdimid",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "INVENTDIMID",
																"type": "String",
																"physicalType": "VARCHAR"
															}
														},
														{
															"source": {
																"name": "itemid",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "ITEMID",
																"type": "String",
																"physicalType": "VARCHAR"
															}
														},
														{
															"source": {
																"name": "pricetype",
																"type": "Int64",
																"physicalType": "bigint"
															},
															"sink": {
																"name": "PRICETYPE",
																"type": "Int64",
																"physicalType": "NUMBER"
															}
														},
														{
															"source": {
																"name": "activationdate",
																"type": "DateTime",
																"physicalType": "datetime2"
															},
															"sink": {
																"name": "ACTIVATIONDATE",
																"type": "DateTime",
																"physicalType": "DATE"
															}
														},
														{
															"source": {
																"name": "createddatetime",
																"type": "DateTime",
																"physicalType": "datetime2"
															},
															"sink": {
																"name": "CREATEDDATETIME",
																"type": "DateTime",
																"physicalType": "TIMESTAMP_TZ"
															}
														},
														{
															"source": {
																"name": "costingtype",
																"type": "Int64",
																"physicalType": "bigint"
															},
															"sink": {
																"name": "COSTINGTYPE",
																"type": "Int64",
																"physicalType": "NUMBER"
															}
														},
														{
															"source": {
																"name": "versionid",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "VERSIONID",
																"type": "String",
																"physicalType": "VARCHAR"
															}
														},
														{
															"source": {
																"name": "price",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 16,
																"precision": 38
															},
															"sink": {
																"name": "PRICE",
																"type": "Int64",
																"physicalType": "NUMBER"
															}
														},
														{
															"source": {
																"name": "markup",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 16,
																"precision": 38
															},
															"sink": {
																"name": "MARKUP",
																"type": "Int64",
																"physicalType": "NUMBER"
															}
														},
														{
															"source": {
																"name": "priceqty",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 6,
																"precision": 38
															},
															"sink": {
																"name": "PRICEQTY",
																"type": "Int64",
																"physicalType": "NUMBER"
															}
														},
														{
															"source": {
																"name": "priceunit",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 12,
																"precision": 38
															},
															"sink": {
																"name": "PRICEUNIT",
																"type": "Int64",
																"physicalType": "NUMBER"
															}
														},
														{
															"source": {
																"name": "unitid",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "UNITID",
																"type": "String",
																"physicalType": "VARCHAR"
															}
														},
														{
															"source": {
																"name": "modifieddatetime",
																"type": "DateTime",
																"physicalType": "datetime2"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "TIMESTAMP_TZ"
															}
														},
														{
															"source": {
																"name": "unitofmeasure_symbol",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "UNITOFMEASURE_SYMBOL",
																"type": "String",
																"physicalType": "VARCHAR"
															}
														},
														{
															"source": {
																"name": "unitofmeasure_modifieddatetime",
																"type": "DateTime",
																"physicalType": "datetime2"
															},
															"sink": {
																"name": "UNITOFMEASURE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "TIMESTAMP_TZ"
															}
														},
														{
															"source": {
																"name": "unitofmeasuretranslation_description",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "UNITOFMEASURETRANSLATION_DESCRIPTION",
																"type": "String",
																"physicalType": "VARCHAR"
															}
														},
														{
															"source": {
																"name": "unitofmeasuretranslation_modifieddatetime",
																"type": "DateTime",
																"physicalType": "datetime2"
															},
															"sink": {
																"name": "UNITOFMEASURETRANSLATION_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "TIMESTAMP_TZ"
															}
														},
														{
															"source": {
																"name": "timextenderenumtable1_enumvaluelabel_pricetype",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PRICETYPE",
																"type": "String",
																"physicalType": "VARCHAR"
															}
														},
														{
															"source": {
																"name": "timextenderenumtable2_enumvaluelabel_costingtype",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_COSTINGTYPE",
																"type": "String",
																"physicalType": "VARCHAR"
															}
														},
														{
															"source": {
																"name": "inventdim_configid",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "INVENTDIM_CONFIGID",
																"type": "String",
																"physicalType": "VARCHAR"
															}
														},
														{
															"source": {
																"name": "inventdim_inventsiteid",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "INVENTDIM_INVENTSITEID",
																"type": "String",
																"physicalType": "VARCHAR"
															}
														},
														{
															"source": {
																"name": "inventdim_modifieddatetime",
																"type": "DateTime",
																"physicalType": "datetime2"
															},
															"sink": {
																"name": "INVENTDIM_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "TIMESTAMP_TZ"
															}
														},
														{
															"source": {
																"name": "inventdimcombination_pdmstatus",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "INVENTDIMCOMBINATION_PDMSTATUS",
																"type": "String",
																"physicalType": "VARCHAR"
															}
														},
														{
															"source": {
																"name": "inventdimcombination_modifieddatetime",
																"type": "DateTime",
																"physicalType": "datetime2"
															},
															"sink": {
																"name": "INVENTDIMCOMBINATION_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "TIMESTAMP_TZ"
															}
														},
														{
															"source": {
																"name": "PDMSTATUS_NAME",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "PDMSTATUS_NAME",
																"type": "String",
																"physicalType": "VARCHAR"
															}
														},
														{
															"source": {
																"name": "latest_modifieddatetime",
																"type": "DateTime",
																"physicalType": "datetime2"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "TIMESTAMP_TZ"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_to_raw_d365",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_to_raw_d365').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_to_raw_d365').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_to_raw_d365').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_to_raw_d365').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_to_raw_d365').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_COST"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "INVENTITEMPRICE"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "INVENTITEMPRICE"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prev_max_timestamp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-04T13:47:58Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_inventjournalname_to_dim_inventory_journal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId,-1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId,-1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										},
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId,-1)",
																"type": "Expression"
															}
														},
														{
															"name": "LATEST_MODIFIEDDATETIME",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": "select\n    ijn.DATAAREAID as DATAAREAID,\n    ijn.JOURNALNAMEID as JOURNALNAMEID,\n    ijn.DESCRIPTION as DESCRIPTION,\n    ijn.DETAILSUMMARY as INVENTJOURNALNAME_DETAILSUMMARY,\n    ijn.JOURNALTYPE as INVENTJOURNALNAME_JOURNALTYPE,\n    ds.ENUMVALUELABEL AS JOURNALSUMMATIONLEVEL,\n    ijt.ENUMVALUELABEL AS JOURNALTYPE\nFROM\n    dbo.INVENTJOURNALNAME ijn\n    left join (\n        select\n            ENUMNAME,\n            ENUMVALUE,\n            max(ENUMVALUELABEL) as ENUMVALUELABEL\n        from\n            dbo.TIMEXTENDERENUMTABLE\n        where\n            ENUMNAME = 'DetailSummary'\n        group by\n            ENUMNAME,\n            ENUMVALUE\n    ) ds on (ijn.DETAILSUMMARY = ds.ENUMVALUE)\n    left join (\n        select\n            ENUMNAME,\n            ENUMVALUE,\n            max(ENUMVALUELABEL) as ENUMVALUELABEL\n        from\n            dbo.TIMEXTENDERENUMTABLE\n        where\n            ENUMNAME = 'InventJournalType'\n        group by\n            ENUMNAME,\n            ENUMVALUE\n    ) ijt on (ijn.JOURNALTYPE = ijt.ENUMVALUE);",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "JOURNALNAMEID",
																"type": "String"
															},
															"sink": {
																"name": "JOURNALNAMEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTJOURNALNAME_DETAILSUMMARY",
																"type": "Int32"
															},
															"sink": {
																"name": "INVENTJOURNALNAME_DETAILSUMMARY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTJOURNALNAME_JOURNALTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "INVENTJOURNALNAME_JOURNALTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "JOURNALSUMMATIONLEVEL",
																"type": "String"
															},
															"sink": {
																"name": "JOURNALSUMMATIONLEVEL",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "JOURNALTYPE",
																"type": "String"
															},
															"sink": {
																"name": "JOURNALTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId,-1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										},
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId,-1)",
																"type": "Expression"
															}
														},
														{
															"name": "LATEST_MODIFIEDDATETIME",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('select\n    ijn.dataareaid as DATAAREAID,\n    ijn.journalnameid as JOURNALNAMEID,\n    ijn.description as DESCRIPTION,\n    ijn.detailsummary as INVENTJOURNALNAME_DETAILSUMMARY,\n    ijn.journaltype as INVENTJOURNALNAME_JOURNALTYPE,\n    ds.ENUMVALUELABEL AS JOURNALSUMMATIONLEVEL,\n    ijt.ENUMVALUELABEL AS JOURNALTYPE\nFROM \n    ',pipeline().globalParameters.d365_dbName,'.','inventjournalname ijn\n    left join (\n        select\n            enumname,\n            enumvalue,\n            max(enumvaluelabel) as ENUMVALUELABEL\n        from \n        ',pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n        where\n            enumname = ''DetailSummary''\n        group by\n            enumname,\n            enumvalue\n    ) ds on (ijn.detailsummary = ds.enumvalue)\n    left join (\n        select\n            enumname,\n            enumvalue,\n            max(enumvaluelabel) as ENUMVALUELABEL\n        from \n            ',pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n        where\n            enumname = ''InventJournalType''\n        group by\n            enumname,\n            enumvalue\n    ) ijt on (ijn.journaltype = ijt.enumvalue);')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "JOURNALNAMEID",
																"type": "String"
															},
															"sink": {
																"name": "JOURNALNAMEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTJOURNALNAME_DETAILSUMMARY",
																"type": "Int32"
															},
															"sink": {
																"name": "INVENTJOURNALNAME_DETAILSUMMARY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTJOURNALNAME_JOURNALTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "INVENTJOURNALNAME_JOURNALTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "JOURNALSUMMATIONLEVEL",
																"type": "String"
															},
															"sink": {
																"name": "JOURNALSUMMATIONLEVEL",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "JOURNALTYPE",
																"type": "String"
															},
															"sink": {
																"name": "JOURNALTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "INVENTJOURNALNAME"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_INVENTORY_JOURNAL"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "INVENTJOURNALNAME"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prv_max_upd_timestamp": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_inventjournaltrans_to_fact_inventory_journal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prv_max_upd_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId,-1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId,-1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select\n    ijt1.DATAAREAID as DATAAREAID,\n    ijt1.JOURNALID as JOURNALID,\n    ijt1.LINENUM as LINENUM,\n    ijt1.DEFAULTDIMENSION as DEFAULTDIMENSION,\n    ijt1.VOUCHER as VOUCHER,\n    ijt1.QTY as QTY,\n    ijt1.COUNTED as COUNTED,\n    ijt1.INVENTONHAND as INVENTONHAND,\n    ijt1.COSTAMOUNT as COSTAMOUNT,\n    ijt1.COSTPRICE as COSTPRICE,\n    ijt1.PRICEUNIT as PRICEUNIT,\n    ijt1.INVENTDIMID as INVENTDIMID,\n    ijt1.ITEMID as ITEMID,\n    ijt1.LEDGERDIMENSION as LEDGERDIMENSION,\n    ijt1.TOINVENTDIMID as TOINVENTDIMID,\n    ijt1.TRANSDATE as TRANSDATE,\n    ijt1.MODIFIEDDATETIME as INVENTJOURNALTRANS_MODIFIEDDATETIME,\n    ij1.POSTEDDATETIME as POSTEDDATETIME,\n    ij1.JOURNALNAMEID as JOURNALNAMEID,\n    ijt1.JOURNALTYPE as JOURNALTYPE,\n    ij1.POSTED as POSTED,\n    ij1.SYSTEMBLOCKED as SYSTEMBLOCKED,\n    ij1.POSTEDUSERID as POSTEDUSERID,\n    ij1.POSTEDDATETIMETZID as POSTEDDATETIMETZID,\n    ij1.MODIFIEDDATETIME as INVENTJOURNALTABLE_MODIFIEDDATETIME,\n    tzi1.TIMEBIAS as TIMEBIAS,\n    it1.DROPSHIPMENT as DROPSHIPMENT,\n    it1.MODIFIEDDATETIME as INVENTTABLE_MODIFIEDDATETIME,\n    tet1.ENUMVALUELABEL as JOURNALTYPEDESCRIPTION,\n    tet2.ENUMVALUELABEL as ISINVENTORYJOURNALPOSTED,\n    tet3.ENUMVALUELABEL as ISINVENTORYJOURNALBLOCKED,\n    (\n        select\n            max(LASTUPDATEDATE)\n        from\n            (\n                values\n                    (ijt1.MODIFIEDDATETIME),\n                    (isnull (ij1.MODIFIEDDATETIME, '1950-01-01')),\n\t\t\t\t\t(isnull (it1.MODIFIEDDATETIME, '1950-01-01'))\n            ) as UpdateDate (LASTUPDATEDATE)\n    ) as LATEST_MODIFIEDDATETIME\nfrom\n    dbo.INVENTJOURNALTRANS ijt1\n    left join dbo.INVENTJOURNALTABLE ij1 on ijt1.JOURNALID = ij1.JOURNALID\n    and ijt1.DATAAREAID = ij1.DATAAREAID\n    left join (\n        select\n            it1.RECID,\n            it1.DATAAREAID,\n            it1.ITEMID,\n            mit1.DROPSHIPMENT,\n\t\t\tit1.MODIFIEDDATETIME\n        from\n            dbo.INVENTTABLE it1\n            left join dbo.MCRINVENTTABLE mit1 on it1.RECID = mit1.RECID\n    ) it1 on ijt1.ITEMID = it1.ITEMID\n    and ijt1.DATAAREAID = it1.DATAAREAID\n    left join (\n        select\n            ENUMNAME,\n            ENUMVALUE,\n            max(ENUMVALUELABEL) as ENUMVALUELABEL\n        from\n            dbo.TIMEXTENDERENUMTABLE\n        where\n            ENUMNAME = 'InventJournalType'\n        group by\n            ENUMNAME,\n            ENUMVALUE\n    ) tet1 on ij1.JOURNALTYPE = tet1.ENUMVALUE --JournalTypeDescription\n    left join (\n        select\n            ENUMNAME,\n            ENUMVALUE,\n            max(ENUMVALUELABEL) as ENUMVALUELABEL\n        from\n            dbo.TIMEXTENDERENUMTABLE\n        where\n            ENUMNAME = 'NoYes'\n        group by\n            ENUMNAME,\n            ENUMVALUE\n    ) tet2 on ij1.POSTED = tet2.ENUMVALUE --IsInventoryJournalPosted\n    left join (\n        select\n            ENUMNAME,\n            ENUMVALUE,\n            max(ENUMVALUELABEL) as ENUMVALUELABEL\n        from\n            dbo.TIMEXTENDERENUMTABLE\n        where\n            ENUMNAME = 'NoYes'\n        group by\n            ENUMNAME,\n            ENUMVALUE\n    ) tet3 on ij1.SYSTEMBLOCKED = tet3.ENUMVALUE --IsInventoryJournalBlocked\t\t\t\t\t\n    left join dbo.TIMEZONEINFO tzi1 on ij1.CREATEDDATETIME >= tzi1.STARTDATE\n    and ij1.CREATEDDATETIME < tzi1.ENDDATE\n    and ij1.POSTEDDATETIMETZID = tzi1.TIMEZONEID\nwhere\n    (\n        select\n            max(LASTUPDATEDATE)\n        from\n            (\n                values\n                    (ijt1.MODIFIEDDATETIME),\n                    (isnull (ij1.MODIFIEDDATETIME, '1950-01-01')),\n\t\t\t\t\t(isnull (it1.MODIFIEDDATETIME, '1950-01-01'))\n            ) as UpdateDate (LASTUPDATEDATE)\n    ) > '@{variables('v_prv_max_upd_timestamp')}' ",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "JOURNALID",
																"type": "String"
															},
															"sink": {
																"name": "JOURNALID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LINENUM",
																"type": "Decimal"
															},
															"sink": {
																"name": "LINENUM",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "DEFAULTDIMENSION",
																"type": "Int64"
															},
															"sink": {
																"name": "DEFAULTDIMENSION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "VOUCHER",
																"type": "String"
															},
															"sink": {
																"name": "VOUCHER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "QTY",
																"type": "Decimal"
															},
															"sink": {
																"name": "QTY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "COUNTED",
																"type": "Decimal"
															},
															"sink": {
																"name": "COUNTED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTONHAND",
																"type": "Decimal"
															},
															"sink": {
																"name": "INVENTONHAND",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "COSTAMOUNT",
																"type": "Decimal"
															},
															"sink": {
																"name": "COSTAMOUNT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "COSTPRICE",
																"type": "Decimal"
															},
															"sink": {
																"name": "COSTPRICE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PRICEUNIT",
																"type": "Decimal"
															},
															"sink": {
																"name": "PRICEUNIT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTDIMID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTDIMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ITEMID",
																"type": "String"
															},
															"sink": {
																"name": "ITEMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LEDGERDIMENSION",
																"type": "Int64"
															},
															"sink": {
																"name": "LEDGERDIMENSION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TOINVENTDIMID",
																"type": "String"
															},
															"sink": {
																"name": "TOINVENTDIMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TRANSDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "TRANSDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTJOURNALTRANS_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTJOURNALTRANS_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "POSTEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "POSTEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "JOURNALNAMEID",
																"type": "String"
															},
															"sink": {
																"name": "JOURNALNAMEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "JOURNALTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "JOURNALTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "POSTED",
																"type": "Int32"
															},
															"sink": {
																"name": "POSTED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "SYSTEMBLOCKED",
																"type": "Int32"
															},
															"sink": {
																"name": "SYSTEMBLOCKED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "POSTEDUSERID",
																"type": "String"
															},
															"sink": {
																"name": "POSTEDUSERID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "POSTEDDATETIMETZID",
																"type": "Int32"
															},
															"sink": {
																"name": "POSTEDDATETIMETZID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTJOURNALTABLE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTJOURNALTABLE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TIMEBIAS",
																"type": "Int32"
															},
															"sink": {
																"name": "TIMEBIAS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "DROPSHIPMENT",
																"type": "Int32"
															},
															"sink": {
																"name": "DROPSHIPMENT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTTABLE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTTABLE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "JOURNALTYPEDESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "JOURNALTYPEDESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ISINVENTORYJOURNALPOSTED",
																"type": "String"
															},
															"sink": {
																"name": "ISINVENTORYJOURNALPOSTED",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ISINVENTORYJOURNALBLOCKED",
																"type": "String"
															},
															"sink": {
																"name": "ISINVENTORYJOURNALBLOCKED",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId,-1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId,-1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('Select \n    ijt1.dataareaid as DATAAREAID,\n    ijt1.journalid as JOURNALID,\n    ijt1.linenum as LINENUM,\n    ijt1.defaultdimension as DEFAULTDIMENSION,\n    ijt1.voucher as VOUCHER,\n    ijt1.qty as QTY,\n    ijt1.counted as COUNTED,\n    ijt1.inventonhand as INVENTONHAND,\n    ijt1.costamount as COSTAMOUNT,\n    ijt1.costprice as COSTPRICE,\n    ijt1.priceunit as PRICEUNIT,\n    ijt1.inventdimid as INVENTDIMID,\n    ijt1.itemid as ITEMID,\n    ijt1.ledgerdimension as LEDGERDIMENSION,\n    ijt1.toinventdimid as TOINVENTDIMID,\n    ijt1.transdate as TRANSDATE,\n    ijt1.modifieddatetime as INVENTJOURNALTRANS_MODIFIEDDATETIME,\n    ij1.posteddatetime as POSTEDDATETIME,\n    ij1.journalnameid as JOURNALNAMEID,\n    ijt1.journaltype as JOURNALTYPE,\n    ij1.posted as POSTED,\n    ij1.systemblocked as SYSTEMBLOCKED,\n    ij1.posteduserid as POSTEDUSERID,\n    '''' as POSTEDDATETIMETZID,\n    --ij1.posteddatetimetzid \n    ij1.modifieddatetime as INVENTJOURNALTABLE_MODIFIEDDATETIME,\n    tzi1.timebias as TIMEBIAS,\n    it1.dropshipment as DROPSHIPMENT,\n    it1.modifieddatetime as INVENTTABLE_MODIFIEDDATETIME,\n    tet1.ENUMVALUELABEL as JOURNALTYPEDESCRIPTION,\n    tet2.ENUMVALUELABEL as ISINVENTORYJOURNALPOSTED,\n    tet3.ENUMVALUELABEL as ISINVENTORYJOURNALBLOCKED,\n    (\n        SELECT\n            MAX(LastUpdateDate)\n        FROM\n            (\n                VALUES\n                    (ijt1.modifieddatetime),\n                    (isnull (ij1.modifieddatetime, ''1950-01-01'')),\n\t\t\t\t\t(isnull (it1.modifieddatetime, ''1950-01-01''))\n            ) AS UpdateDate (LastUpdateDate)\n    ) AS LATEST_MODIFIEDDATETIME\nfrom\n    ',pipeline().globalParameters.d365_dbName,'.','inventjournaltrans ijt1\n    LEFT JOIN ',pipeline().globalParameters.d365_dbName,'.','inventjournaltable ij1 On ijt1.journalid = ij1.journalid\n    And ijt1.dataareaid = ij1.dataareaid\n    Left Join (\n        Select\n            it1.recid,\n            it1.dataareaid,\n            it1.itemid,\n            mit1.dropshipment,\n\t\t\tit1.modifieddatetime\n        From\n            ',pipeline().globalParameters.d365_dbName,'.','inventtable it1\n            Left Join ',pipeline().globalParameters.d365_dbName,'.','mcrinventtable mit1 On it1.recid = mit1.recid\n    ) it1 On ijt1.itemid = it1.itemid\n    And ijt1.dataareaid = it1.dataareaid\n    Left Join (\n        Select\n            enumname,\n            enumvalue,\n            max(enumvaluelabel) As ENUMVALUELABEL\n        From\n            ',pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n        Where\n            enumname = ''InventJournalType''\n        Group By\n            enumname,\n            enumvalue\n    ) tet1 On ij1.journaltype = tet1.enumvalue --JournalTypeDescription\n    Left Join (\n        Select\n            enumname,\n            enumvalue,\n            max(enumvaluelabel) As ENUMVALUELABEL\n        From\n            ',pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n        Where\n            enumname = ''NoYes''\n        Group By\n            enumname,\n            enumvalue\n    ) tet2 On ij1.posted = tet2.enumvalue --IsInventoryJournalPosted\n    Left Join (\n        Select\n            enumname,\n            enumvalue,\n            max(enumvaluelabel) as ENUMVALUELABEL\n        from\n            ',pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n        where\n            enumname = ''NoYes''\n        group By\n            enumname,\n            enumvalue\n    ) tet3 on ij1.systemblocked = tet3.enumvalue --IsInventoryJournalBlocked\t\t\t\t\t\n    left join ',pipeline().globalParameters.d365_dbName,'.','timezoneinfo tzi1 on ij1.createddatetime >= tzi1.startdate\n    and ij1.createddatetime < tzi1.enddate\n --   and ij1.posteddatetimetzid = tzi1.timezoneid\nwhere\n    (\n        SELECT\n            MAX(LastUpdateDate)\n        FROM\n            (\n                VALUES\n                    (ijt1.modifieddatetime),\n                    (isnull (ij1.modifieddatetime, ''1950-01-01'')),\n\t\t\t\t\t(isnull (it1.modifieddatetime, ''1950-01-01''))\n            ) AS UpdateDate (LastUpdateDate)\n    ) > ','''',variables('v_prv_max_upd_timestamp'),'''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "JOURNALID",
																"type": "String"
															},
															"sink": {
																"name": "JOURNALID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LINENUM",
																"type": "Decimal"
															},
															"sink": {
																"name": "LINENUM",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "DEFAULTDIMENSION",
																"type": "Int64"
															},
															"sink": {
																"name": "DEFAULTDIMENSION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "VOUCHER",
																"type": "String"
															},
															"sink": {
																"name": "VOUCHER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "QTY",
																"type": "Decimal"
															},
															"sink": {
																"name": "QTY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "COUNTED",
																"type": "Decimal"
															},
															"sink": {
																"name": "COUNTED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTONHAND",
																"type": "Decimal"
															},
															"sink": {
																"name": "INVENTONHAND",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "COSTAMOUNT",
																"type": "Decimal"
															},
															"sink": {
																"name": "COSTAMOUNT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "COSTPRICE",
																"type": "Decimal"
															},
															"sink": {
																"name": "COSTPRICE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PRICEUNIT",
																"type": "Decimal"
															},
															"sink": {
																"name": "PRICEUNIT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTDIMID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTDIMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ITEMID",
																"type": "String"
															},
															"sink": {
																"name": "ITEMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LEDGERDIMENSION",
																"type": "Int64"
															},
															"sink": {
																"name": "LEDGERDIMENSION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TOINVENTDIMID",
																"type": "String"
															},
															"sink": {
																"name": "TOINVENTDIMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TRANSDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "TRANSDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTJOURNALTRANS_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTJOURNALTRANS_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "POSTEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "POSTEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "JOURNALNAMEID",
																"type": "String"
															},
															"sink": {
																"name": "JOURNALNAMEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "JOURNALTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "JOURNALTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "POSTED",
																"type": "Int32"
															},
															"sink": {
																"name": "POSTED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "SYSTEMBLOCKED",
																"type": "Int32"
															},
															"sink": {
																"name": "SYSTEMBLOCKED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "POSTEDUSERID",
																"type": "String"
															},
															"sink": {
																"name": "POSTEDUSERID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "POSTEDDATETIMETZID",
																"type": "Int32"
															},
															"sink": {
																"name": "POSTEDDATETIMETZID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTJOURNALTABLE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTJOURNALTABLE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TIMEBIAS",
																"type": "Int32"
															},
															"sink": {
																"name": "TIMEBIAS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "DROPSHIPMENT",
																"type": "Int32"
															},
															"sink": {
																"name": "DROPSHIPMENT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTTABLE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTTABLE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "JOURNALTYPEDESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "JOURNALTYPEDESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ISINVENTORYJOURNALPOSTED",
																"type": "String"
															},
															"sink": {
																"name": "ISINVENTORYJOURNALPOSTED",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ISINVENTORYJOURNALBLOCKED",
																"type": "String"
															},
															"sink": {
																"name": "ISINVENTORYJOURNALBLOCKED",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId,-1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "INVENTJOURNALTRANS"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "FACT_INVENTORY_JOURNAL"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "INVENTJOURNALTRANS"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prv_max_upd_timestamp": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_inventlocation_to_dim_warehouse')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prv_max_upd_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_retail_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_retail_d365",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select\nil1.DATAAREAID\n,il1.INVENTLOCATIONID\n,il1.NAME\n,il1.INVENTLOCATIONIDQUARANTINE\n,il2.NAME as NAME_QUARANTINE\n,il1.INVENTLOCATIONIDTRANSIT\n,il3.NAME as NAME_TRANSIT\n,il1.INVENTSITEID\n,il1.INVENTLOCATIONTYPE\n,il1.MANUAL\n,is1.NAME as NAME_SITE\n,il1.MODIFIEDDATETIME\nfrom\ndbo.INVENTLOCATION il1\nleft join dbo.INVENTLOCATION il2 on\n    il1.DATAAREAID = il2.DATAAREAID and\n    il1.INVENTLOCATIONIDQUARANTINE = il2.INVENTLOCATIONID\nleft join dbo.INVENTLOCATION il3 on\n    il1.DATAAREAID = il2.DATAAREAID and\n    il1.INVENTLOCATIONIDTRANSIT = il2.INVENTLOCATIONID\nleft join dbo.INVENTSITE is1 on\n    il1.DATAAREAID = is1.DATAAREAID and\n    il1.INVENTSITEID = is1.SITEID\nwhere convert(varchar(25), isnull(il1.MODIFIEDDATETIME, '1950-01-01'), 120) > '@{variables('v_prv_max_upd_timestamp')}'",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTLOCATIONID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTLOCATIONID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTLOCATIONIDQUARANTINE",
																"type": "String"
															},
															"sink": {
																"name": "INVENTLOCATIONIDQUARANTINE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME_QUARANTINE",
																"type": "String"
															},
															"sink": {
																"name": "NAME_QUARANTINE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTLOCATIONIDTRANSIT",
																"type": "String"
															},
															"sink": {
																"name": "INVENTLOCATIONIDTRANSIT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME_TRANSIT",
																"type": "String"
															},
															"sink": {
																"name": "NAME_TRANSIT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTSITEID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTSITEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTLOCATIONTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "INVENTLOCATIONTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MANUAL",
																"type": "Int32"
															},
															"sink": {
																"name": "MANUAL",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "NAME_SITE",
																"type": "String"
															},
															"sink": {
																"name": "NAME_SITE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "2",
									"activities": [
										{
											"name": "sql_retail_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select\nil1.DATAAREAID\n,il1.INVENTLOCATIONID\n,il1.NAME\n,il1.INVENTLOCATIONIDQUARANTINE\n,il2.NAME as NAME_QUARANTINE\n,il1.INVENTLOCATIONIDTRANSIT\n,il3.NAME as NAME_TRANSIT\n,il1.INVENTSITEID\n,il1.INVENTLOCATIONTYPE\n,il1.MANUAL\n,is1.NAME as NAME_SITE\n,il1.MODIFIEDDATETIME\nfrom\ndbo.INVENTLOCATION il1\nleft join dbo.INVENTLOCATION il2 on\n    il1.DATAAREAID = il2.DATAAREAID and\n    il1.INVENTLOCATIONIDQUARANTINE = il2.INVENTLOCATIONID\nleft join dbo.INVENTLOCATION il3 on\n    il1.DATAAREAID = il2.DATAAREAID and\n    il1.INVENTLOCATIONIDTRANSIT = il2.INVENTLOCATIONID\nleft join dbo.INVENTSITE is1 on\n    il1.DATAAREAID = is1.DATAAREAID and\n    il1.INVENTSITEID = is1.SITEID\nwhere convert(varchar(25), isnull(il1.MODIFIEDDATETIME, '1950-01-01'), 120) > '@{variables('v_prv_max_upd_timestamp')}'",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTLOCATIONID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTLOCATIONID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTLOCATIONIDQUARANTINE",
																"type": "String"
															},
															"sink": {
																"name": "INVENTLOCATIONIDQUARANTINE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME_QUARANTINE",
																"type": "String"
															},
															"sink": {
																"name": "NAME_QUARANTINE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTLOCATIONIDTRANSIT",
																"type": "String"
															},
															"sink": {
																"name": "INVENTLOCATIONIDTRANSIT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME_TRANSIT",
																"type": "String"
															},
															"sink": {
																"name": "NAME_TRANSIT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTSITEID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTSITEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTLOCATIONTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "INVENTLOCATIONTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MANUAL",
																"type": "Int32"
															},
															"sink": {
																"name": "MANUAL",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "NAME_SITE",
																"type": "String"
															},
															"sink": {
																"name": "NAME_SITE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.retail_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.retail_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "sql_retail_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_retail_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_retail_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@activity('sql_retail_to_raw').Error['message']",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_retail_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_retail_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_retail_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "sql_retail_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_retail_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "d365_to_raw",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "WarehouseSource",
											"additionalColumns": [
												{
													"name": "HK_JOB_RUN_ID",
													"value": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													}
												},
												{
													"name": "HK_SOURCE_NAME",
													"value": {
														"value": "@pipeline().parameters.p_src_nm",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "@concat('select\nil1.dataareaid as DATAAREAID\n,il1.inventlocationid as INVENTLOCATIONID\n,il1.name as NAME\n,il1.inventlocationidquarantine as INVENTLOCATIONIDQUARANTINE\n,il2.name as NAME_QUARANTINE\n,il1.inventlocationidtransit as INVENTLOCATIONIDTRANSIT\n,il3.name as NAME_TRANSIT\n,il1.inventsiteid as INVENTSITEID\n,il1.inventlocationtype as INVENTLOCATIONTYPE\n,il1.manual as MANUAL\n,is1.name as NAME_SITE\n,il1.modifieddatetime as MODIFIEDDATETIME\nfrom ',pipeline().globalParameters.d365_dbName,'.','inventlocation il1 left join ',pipeline().globalParameters.d365_dbName,'.','inventlocation il2 on\nil1.dataareaid = il2.dataareaid and\nil1.inventlocationidquarantine = il2.inventlocationid\nleft join ',pipeline().globalParameters.d365_dbName,'.','inventlocation il3 on\nil1.dataareaid = il2.dataareaid and\nil1.inventlocationidtransit = il2.inventlocationid\nleft join ',pipeline().globalParameters.d365_dbName,'.','inventsite is1 on\nil1.dataareaid = is1.dataareaid and\nil1.inventsiteid = is1.siteid where convert(varchar(25), isnull(il1.modifieddatetime, ''1950-01-01''), 120) > ','''',variables('v_prv_max_upd_timestamp'),'''')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeSink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "ls_blob_storage",
												"type": "LinkedServiceReference"
											},
											"path": {
												"value": "@pipeline().globalParameters.rootDir",
												"type": "Expression"
											},
											"enableCompression": true
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "HK_SOURCE_NAME",
														"type": "String"
													},
													"sink": {
														"name": "HK_SOURCE_NAME",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "HK_JOB_RUN_ID",
														"type": "String"
													},
													"sink": {
														"name": "HK_JOB_RUN_ID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DATAAREAID",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DATAAREAID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "INVENTLOCATIONID",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "INVENTLOCATIONID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "NAME",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "NAME",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "INVENTLOCATIONIDQUARANTINE",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "INVENTLOCATIONIDQUARANTINE",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "NAME_QUARANTINE",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "NAME_QUARANTINE",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "INVENTLOCATIONIDTRANSIT",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "INVENTLOCATIONIDTRANSIT",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "NAME_TRANSIT",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "NAME_TRANSIT",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "INVENTSITEID",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "INVENTSITEID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "INVENTLOCATIONTYPE",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "INVENTLOCATIONTYPE",
														"type": "Int64",
														"physicalType": "NUMBER"
													}
												},
												{
													"source": {
														"name": "MANUAL",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "MANUAL",
														"type": "Int64",
														"physicalType": "NUMBER"
													}
												},
												{
													"source": {
														"name": "NAME_SITE",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "NAME_SITE",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "LATEST_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "TIMESTAMP_TZ"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_fabric_wh",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_snowflake",
											"type": "DatasetReference",
											"parameters": {
												"p_tgt_table_name": {
													"value": "@pipeline().parameters.p_tgt_raw_table_nm",
													"type": "Expression"
												},
												"p_tgt_schema_name": {
													"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
													"type": "Expression"
												},
												"p_ls_DbName": {
													"value": "@pipeline().globalParameters.snow_rawDb",
													"type": "Expression"
												},
												"p_ls_Env": {
													"value": "@pipeline().globalParameters.environment",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "d365_raw_load_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "d365_to_raw",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('d365_to_raw').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('d365_to_raw').Error['message']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('d365_to_raw').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('d365_to_raw').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "d365_load_to_raw_fail",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "d365_raw_load_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('d365_to_raw').Error['message']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							]
						}
					},
					{
						"name": "raw_load_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "switch_nala_retail_d365",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('switch_nala_retail_d365').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('switch_nala_retail_d365').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('switch_nala_retail_d365').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('switch_nala_retail_d365').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_WAREHOUSE"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "INVENTLOCATION"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "INVENTLOCATION"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					}
				},
				"variables": {
					"v_prv_max_upd_timestamp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-05T05:38:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_inventsite_to_dim_site')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_retail_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prev_max_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')\n\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "switch_nala_retail_d365",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "inventsite_to_raw_nala",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('select \tis1.DATAAREAID, \tis1.SITEID, \tis1.NAME, \tis1.DEFAULTDIMENSION, \tis1.TIMEZONE, \tis1.MODIFIEDDATETIME, \tdef1.DISPLAYVALUE_BUSINESS_UNIT, \tdef1.DEFAULTDIMENSION_MODIFIEDDATETIME, \tdpt1.NAME as DIRPARTYTABLE_NAME_BUSINESS_UNIT, \ttzl1.TIMEZONEKEYNAME as TIMEZONELIST_TIMEZONEKEYNAME, \t( \t\tSELECT \t\t\tMAX(LastUpdateDate) \t\tFROM \t\t\t( \t\t\t\tVALUES \t\t\t\t\t(is1.MODIFIEDDATETIME), \t\t\t\t\t( \t\t\t\t\t\tisnull( \t\t\t\t\t\t\tdef1.DEFAULTDIMENSION_MODIFIEDDATETIME, \t\t\t\t\t\t\t''1950-01-01'' \t\t\t\t\t\t) \t\t\t\t\t) \t\t\t) AS UpdateDate(LastUpdateDate) \t) AS LATEST_MODIFIEDDATETIME from \tdbo.INVENTSITE is1 \tleft join ( \t\tselect \t\t\tdistinct davsi1.DIMENSIONATTRIBUTEVALUESET, \t\t\tmax( \t\t\t\tcase \t\t\t\t\twhen da1.NAME = ''BusinessUnit'' then davsi1.DISPLAYVALUE \t\t\t\t\telse null \t\t\t\tend \t\t\t) over (partition by davsi1.DIMENSIONATTRIBUTEVALUESET) as DISPLAYVALUE_BUSINESS_UNIT, \t\t\tmax( \t\t\t\t( \t\t\t\t\tselect \t\t\t\t\t\tmax(i) \t\t\t\t\tfrom \t\t\t\t\t\t( \t\t\t\t\t\t\tvalues \t\t\t\t\t\t\t\t(davsi1.modifieddatetime), \t\t\t\t\t\t\t\t(dav1.modifieddatetime), \t\t\t\t\t\t\t\t(da1.modifieddatetime), \t\t\t\t\t\t\t\t(desc1.DESC_MODIFIEDDATETIME) \t\t\t\t\t\t) as t(i) \t\t\t\t) \t\t\t) over (partition by davsi1.DIMENSIONATTRIBUTEVALUESET) as DEFAULTDIMENSION_MODIFIEDDATETIME \t\tfrom \t\t\tdbo.DIMENSIONATTRIBUTEVALUESETITEM davsi1 \t\t\tleft join dbo.DIMENSIONATTRIBUTEVALUE dav1 on davsi1.DIMENSIONATTRIBUTEVALUE = dav1.RECID \t\t\tleft join dbo.DIMENSIONATTRIBUTE da1 on dav1.DIMENSIONATTRIBUTE = da1.RECID \t\t\tleft join ( \t\t\t\tselect \t\t\t\t\tdft1.VALUE, \t\t\t\t\tda2.NAME, \t\t\t\t\tdft1.DESCRIPTION, \t\t\t\t\t( \t\t\t\t\t\tselect \t\t\t\t\t\t\tmax(i) \t\t\t\t\t\tfrom \t\t\t\t\t\t\t( \t\t\t\t\t\t\t\tvalues \t\t\t\t\t\t\t\t\t(dft1.MODIFIEDDATETIME), \t\t\t\t\t\t\t\t\t(dadc1.MODIFIEDDATETIME), \t\t\t\t\t\t\t\t\t(da2.MODIFIEDDATETIME) \t\t\t\t\t\t\t) AS T(i) \t\t\t\t\t) as DESC_MODIFIEDDATETIME \t\t\t\tfrom \t\t\t\t\tdbo.DIMENSIONFINANCIALTAG dft1 \t\t\t\t\tleft join dbo.DIMENSIONATTRIBUTEDIRCATEGORY dadc1 on dft1.FINANCIALTAGCATEGORY = dadc1.DIRCATEGORY \t\t\t\t\tleft join dbo.DIMENSIONATTRIBUTE da2 on dadc1.DIMENSIONATTRIBUTE = da2.RECID \t\t\t) desc1 on davsi1.DISPLAYVALUE = desc1.VALUE \t\t\tand da1.NAME = desc1.NAME \t) def1 on is1.DEFAULTDIMENSION = def1.DIMENSIONATTRIBUTEVALUESET \tleft join ( \t\tselect \t\t\tOMOPERATINGUNITNUMBER, \t\t\tmax(NAME) as NAME \t\tfrom \t\t\tdbo.DIRPARTYTABLE \t\tgroup by \t\t\tOMOPERATINGUNITNUMBER \t) dpt1 on def1.DISPLAYVALUE_BUSINESS_UNIT = dpt1.OMOPERATINGUNITNUMBER \tleft join dbo.TIMEZONESLIST tzl1 on is1.TIMEZONE = tzl1.TZENUM \twhere (SELECT \t\t\tMAX(LastUpdateDate) \t\tFROM \t\t\t( \t\t\t\tVALUES \t\t\t\t\t(is1.MODIFIEDDATETIME), \t\t\t\t\t( \t\t\t\t\t\tisnull( \t\t\t\t\t\t\tdef1.DEFAULTDIMENSION_MODIFIEDDATETIME, \t\t\t\t\t\t\t''1950-01-01'' \t\t\t\t\t\t) \t\t\t\t\t) \t\t\t) AS UpdateDate(LastUpdateDate))  >','''',variables('v_prev_max_timestamp'),'''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SITEID",
																"type": "String"
															},
															"sink": {
																"name": "SITEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DEFAULTDIMENSION",
																"type": "Int64"
															},
															"sink": {
																"name": "DEFAULTDIMENSION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TIMEZONE",
																"type": "Int32"
															},
															"sink": {
																"name": "TIMEZONE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DISPLAYVALUE_BUSINESS_UNIT",
																"type": "String"
															},
															"sink": {
																"name": "DISPLAYVALUE_BUSINESS_UNIT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DEFAULTDIMENSION_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "DEFAULTDIMENSION_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DIRPARTYTABLE_NAME_BUSINESS_UNIT",
																"type": "String"
															},
															"sink": {
																"name": "DIRPARTYTABLE_NAME_BUSINESS_UNIT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEZONELIST_TIMEZONEKEYNAME",
																"type": "String"
															},
															"sink": {
																"name": "TIMEZONELIST_TIMEZONEKEYNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "inventsite_to_raw_nala",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('inventsite_to_raw_nala').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('inventsite_to_raw_nala').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('inventsite_to_raw_nala').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('inventsite_to_raw_nala').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('inventsite_to_raw_nala').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "2",
									"activities": [
										{
											"name": "inventsite_to_raw_retail",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('select \tis1.DATAAREAID, \tis1.SITEID, \tis1.NAME, \tis1.DEFAULTDIMENSION, \tis1.TIMEZONE, \tis1.MODIFIEDDATETIME, \tdef1.DISPLAYVALUE_BUSINESS_UNIT, \tdef1.DEFAULTDIMENSION_MODIFIEDDATETIME, \tdpt1.NAME as DIRPARTYTABLE_NAME_BUSINESS_UNIT, \ttzl1.TIMEZONEKEYNAME as TIMEZONELIST_TIMEZONEKEYNAME, \t( \t\tSELECT \t\t\tMAX(LastUpdateDate) \t\tFROM \t\t\t( \t\t\t\tVALUES \t\t\t\t\t(is1.MODIFIEDDATETIME), \t\t\t\t\t( \t\t\t\t\t\tisnull( \t\t\t\t\t\t\tdef1.DEFAULTDIMENSION_MODIFIEDDATETIME, \t\t\t\t\t\t\t''1950-01-01'' \t\t\t\t\t\t) \t\t\t\t\t) \t\t\t) AS UpdateDate(LastUpdateDate) \t) AS LATEST_MODIFIEDDATETIME from \tdbo.INVENTSITE is1 \tleft join ( \t\tselect \t\t\tdistinct davsi1.DIMENSIONATTRIBUTEVALUESET, \t\t\tmax( \t\t\t\tcase \t\t\t\t\twhen da1.NAME = ''BusinessUnit'' then davsi1.DISPLAYVALUE \t\t\t\t\telse null \t\t\t\tend \t\t\t) over (partition by davsi1.DIMENSIONATTRIBUTEVALUESET) as DISPLAYVALUE_BUSINESS_UNIT, \t\t\tmax( \t\t\t\t( \t\t\t\t\tselect \t\t\t\t\t\tmax(i) \t\t\t\t\tfrom \t\t\t\t\t\t( \t\t\t\t\t\t\tvalues \t\t\t\t\t\t\t\t(davsi1.modifieddatetime), \t\t\t\t\t\t\t\t(dav1.modifieddatetime), \t\t\t\t\t\t\t\t(da1.modifieddatetime), \t\t\t\t\t\t\t\t(desc1.DESC_MODIFIEDDATETIME) \t\t\t\t\t\t) as t(i) \t\t\t\t) \t\t\t) over (partition by davsi1.DIMENSIONATTRIBUTEVALUESET) as DEFAULTDIMENSION_MODIFIEDDATETIME \t\tfrom \t\t\tdbo.DIMENSIONATTRIBUTEVALUESETITEM davsi1 \t\t\tleft join dbo.DIMENSIONATTRIBUTEVALUE dav1 on davsi1.DIMENSIONATTRIBUTEVALUE = dav1.RECID \t\t\tleft join dbo.DIMENSIONATTRIBUTE da1 on dav1.DIMENSIONATTRIBUTE = da1.RECID \t\t\tleft join ( \t\t\t\tselect \t\t\t\t\tdft1.VALUE, \t\t\t\t\tda2.NAME, \t\t\t\t\tdft1.DESCRIPTION, \t\t\t\t\t( \t\t\t\t\t\tselect \t\t\t\t\t\t\tmax(i) \t\t\t\t\t\tfrom \t\t\t\t\t\t\t( \t\t\t\t\t\t\t\tvalues \t\t\t\t\t\t\t\t\t(dft1.MODIFIEDDATETIME), \t\t\t\t\t\t\t\t\t(dadc1.MODIFIEDDATETIME), \t\t\t\t\t\t\t\t\t(da2.MODIFIEDDATETIME) \t\t\t\t\t\t\t) AS T(i) \t\t\t\t\t) as DESC_MODIFIEDDATETIME \t\t\t\tfrom \t\t\t\t\tdbo.DIMENSIONFINANCIALTAG dft1 \t\t\t\t\tleft join dbo.DIMENSIONATTRIBUTEDIRCATEGORY dadc1 on dft1.FINANCIALTAGCATEGORY = dadc1.DIRCATEGORY \t\t\t\t\tleft join dbo.DIMENSIONATTRIBUTE da2 on dadc1.DIMENSIONATTRIBUTE = da2.RECID \t\t\t) desc1 on davsi1.DISPLAYVALUE = desc1.VALUE \t\t\tand da1.NAME = desc1.NAME \t) def1 on is1.DEFAULTDIMENSION = def1.DIMENSIONATTRIBUTEVALUESET \tleft join ( \t\tselect \t\t\tOMOPERATINGUNITNUMBER, \t\t\tmax(NAME) as NAME \t\tfrom \t\t\tdbo.DIRPARTYTABLE \t\tgroup by \t\t\tOMOPERATINGUNITNUMBER \t) dpt1 on def1.DISPLAYVALUE_BUSINESS_UNIT = dpt1.OMOPERATINGUNITNUMBER \tleft join dbo.TIMEZONESLIST tzl1 on is1.TIMEZONE = tzl1.TZENUM \twhere (SELECT \t\t\tMAX(LastUpdateDate) \t\tFROM \t\t\t( \t\t\t\tVALUES \t\t\t\t\t(is1.MODIFIEDDATETIME), \t\t\t\t\t( \t\t\t\t\t\tisnull( \t\t\t\t\t\t\tdef1.DEFAULTDIMENSION_MODIFIEDDATETIME, \t\t\t\t\t\t\t''1950-01-01'' \t\t\t\t\t\t) \t\t\t\t\t) \t\t\t) AS UpdateDate(LastUpdateDate))  >','''',variables('v_prev_max_timestamp'),'''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SITEID",
																"type": "String"
															},
															"sink": {
																"name": "SITEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DEFAULTDIMENSION",
																"type": "Int64"
															},
															"sink": {
																"name": "DEFAULTDIMENSION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TIMEZONE",
																"type": "Int32"
															},
															"sink": {
																"name": "TIMEZONE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DISPLAYVALUE_BUSINESS_UNIT",
																"type": "String"
															},
															"sink": {
																"name": "DISPLAYVALUE_BUSINESS_UNIT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DEFAULTDIMENSION_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "DEFAULTDIMENSION_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DIRPARTYTABLE_NAME_BUSINESS_UNIT",
																"type": "String"
															},
															"sink": {
																"name": "DIRPARTYTABLE_NAME_BUSINESS_UNIT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEZONELIST_TIMEZONEKEYNAME",
																"type": "String"
															},
															"sink": {
																"name": "TIMEZONELIST_TIMEZONEKEYNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.retail_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.retail_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "retail_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "inventsite_to_raw_retail",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('inventsite_to_raw_retail').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('inventsite_to_raw_retail').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('inventsite_to_raw_retail').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('inventsite_to_raw_retail').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_retail_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "retail_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('inventsite_to_raw_retail').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "inventsite_to_raw_d365",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "WarehouseSource",
											"additionalColumns": [
												{
													"name": "HK_JOB_RUN_ID",
													"value": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													}
												},
												{
													"name": "HK_SOURCE_NAME",
													"value": {
														"value": "@pipeline().parameters.p_src_nm",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "@concat('select \tis1.dataareaid as DATAAREAID, \tis1.siteid as SITEID, \tis1.name as NAME, \tis1.defaultdimension as DEFAULTDIMENSION, \tis1.timezone as TIMEZONE, \tis1.modifieddatetime MODIFIEDDATETIME, \tdef1.DISPLAYVALUE_BUSINESS_UNIT, \tdef1.DEFAULTDIMENSION_MODIFIEDDATETIME, \tdpt1.NAME as DIRPARTYTABLE_NAME_BUSINESS_UNIT, \ttzl1.timezonekeyname as TIMEZONELIST_TIMEZONEKEYNAME, \t( \t\tSELECT \t\t\tMAX(LastUpdateDate) \t\tFROM \t\t\t( \t\t\t\tVALUES \t\t\t\t\t(is1.modifieddatetime), \t\t\t\t\t( \t\t\t\t\t\tisnull( \t\t\t\t\t\t\tdef1.DEFAULTDIMENSION_MODIFIEDDATETIME, \t\t\t\t\t\t\t''1950-01-01'' \t\t\t\t\t\t) \t\t\t\t\t) \t\t\t) AS UpdateDate(LastUpdateDate) \t) AS LATEST_MODIFIEDDATETIME from \t',pipeline().globalParameters.d365_dbName,'.','inventsite is1 left join (select distinct davsi1.dimensionattributevalueset \t\t, max( \t\t\tcase when da1.name = ''BusinessUnit'' then davsi1.displayvalue \t\t\t\telse null \t\t\t\tend \t\t\t) over (partition by davsi1.dimensionattributevalueset) as DISPLAYVALUE_BUSINESS_UNIT \t\t, max( \t\t\t(select max(i) from (values (davsi1.modifieddatetime), (dav1.modifieddatetime), (da1.modifieddatetime), (desc1.DESC_MODIFIEDDATETIME)) as t(i)) \t\t\t) over (partition by davsi1.dimensionattributevalueset) as DEFAULTDIMENSION_MODIFIEDDATETIME \tfrom ',pipeline().globalParameters.d365_dbName,'.','dimensionattributevaluesetitem davsi1 \tleft join ',pipeline().globalParameters.d365_dbName,'.','dimensionattributevalue dav1 on \t\tdavsi1.dimensionattributevalue = dav1.recid \tleft join ',pipeline().globalParameters.d365_dbName,'.','dimensionattribute da1 on \t\tdav1.dimensionattribute = da1.recid \tleft join (select dft1.value, da2.name, dft1.description \t\t\t\t\t, (select max(i) from (values (dft1.modifieddatetime), (dadc1.modifieddatetime), (da2.modifieddatetime)) as t(i)) as DESC_MODIFIEDDATETIME \t\t\t\tfrom ',pipeline().globalParameters.d365_dbName,'.','dimensionfinancialtag dft1 \t\t\t\tleft join ',pipeline().globalParameters.d365_dbName,'.','dimensionattributedircategory dadc1 on \t\t\t\t\tdft1.financialtagcategory = dadc1.dircategory \t\t\t\tleft join ',pipeline().globalParameters.d365_dbName,'.','dimensionattribute da2 on \t\t\t\t\tdadc1.dimensionattribute = da2.recid) desc1 on \t\tdavsi1.displayvalue = desc1.value and \t\tda1.name = desc1.name) def1 on \tis1.defaultdimension = def1.dimensionattributevalueset left join (select oou1.omoperatingunitnumber \t\t\t, max(dpt1.name) as NAME \t\tfrom ',pipeline().globalParameters.d365_dbName,'.','dirpartytable dpt1 \t\tinner join ',pipeline().globalParameters.d365_dbName,'.','omoperatingunit oou1 on \t\t\tdpt1.recid = oou1.recid \t\twhere oou1.omoperatingunitnumber is not null \t\tgroup by oou1.omoperatingunitnumber) dpt1 on \tdef1.DISPLAYVALUE_BUSINESS_UNIT = dpt1.omoperatingunitnumber left join (select tzenum, timezonekeyname                            , row_number() over (partition by tzenum order by Id desc) as ROW_NUM                      from ',pipeline().globalParameters.d365_dbName,'.','timezoneslist) tzl1 on        tzl1.ROW_NUM = 1 and        is1.timezone = tzl1.tzenum \twhere (SELECT \t\t\tMAX(LastUpdateDate) \t\tFROM \t\t\t( \t\t\t\tVALUES \t\t\t\t\t(is1.modifieddatetime), \t\t\t\t\t( \t\t\t\t\t\tisnull( \t\t\t\t\t\t\tdef1.DEFAULTDIMENSION_MODIFIEDDATETIME, \t\t\t\t\t\t\t''1950-01-01'' \t\t\t\t\t\t) \t\t\t\t\t) \t\t\t) AS UpdateDate(LastUpdateDate))  >','''',variables('v_prev_max_timestamp'),'''')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeSink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "ls_blob_storage",
												"type": "LinkedServiceReference"
											},
											"path": {
												"value": "@pipeline().globalParameters.rootDir",
												"type": "Expression"
											},
											"enableCompression": true
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "HK_SOURCE_NAME",
														"type": "String"
													},
													"sink": {
														"name": "HK_SOURCE_NAME",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "HK_JOB_RUN_ID",
														"type": "String"
													},
													"sink": {
														"name": "HK_JOB_RUN_ID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DATAAREAID",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DATAAREAID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "SITEID",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "SITEID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "NAME",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "NAME",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DEFAULTDIMENSION",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "DEFAULTDIMENSION",
														"type": "Int64",
														"physicalType": "NUMBER"
													}
												},
												{
													"source": {
														"name": "TIMEZONE",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "TIMEZONE",
														"type": "Int64",
														"physicalType": "NUMBER"
													}
												},
												{
													"source": {
														"name": "MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "TIMESTAMP_TZ"
													}
												},
												{
													"source": {
														"name": "DISPLAYVALUE_BUSINESS_UNIT",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DISPLAYVALUE_BUSINESS_UNIT",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DEFAULTDIMENSION_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "DEFAULTDIMENSION_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "TIMESTAMP_TZ"
													}
												},
												{
													"source": {
														"name": "DIRPARTYTABLE_NAME_BUSINESS_UNIT",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DIRPARTYTABLE_NAME_BUSINESS_UNIT",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "TIMEZONELIST_TIMEZONEKEYNAME",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "TIMEZONELIST_TIMEZONEKEYNAME",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "LATEST_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "LATEST_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "TIMESTAMP_TZ"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_fabric_wh",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_snowflake",
											"type": "DatasetReference",
											"parameters": {
												"p_tgt_table_name": {
													"value": "@pipeline().parameters.p_tgt_raw_table_nm",
													"type": "Expression"
												},
												"p_tgt_schema_name": {
													"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
													"type": "Expression"
												},
												"p_ls_DbName": {
													"value": "@pipeline().globalParameters.snow_rawDb",
													"type": "Expression"
												},
												"p_ls_Env": {
													"value": "@pipeline().globalParameters.environment",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "d365_raw_load_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "inventsite_to_raw_d365",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('inventsite_to_raw_d365').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('inventsite_to_raw_d365').Error['message']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('inventsite_to_raw_d365').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('inventsite_to_raw_d365').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "d365_load_to_raw_fail",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "d365_raw_load_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('inventsite_to_raw_d365').Error['message']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_SITE"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "INVENTSITE"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "INVENTSITE"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prev_max_timestamp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-04T13:47:58Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_inventsum_to_fact_inventory_summary')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prev_max_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')\n\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_to_raw_nala",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select\nis1.DATAAREAID,\nis1.INVENTDIMID,\nis1.ITEMID,\nis1.CLOSED,\nis1.CLOSEDQTY,\nis1.ARRIVED,\nis1.AVAILORDERED,\nis1.AVAILPHYSICAL,\nis1.DEDUCTED,\nis1.ONORDER,\nis1.ORDERED,\nis1.PICKED,\nis1.POSTEDQTY,\nis1.RECEIVED,\nis1.REGISTERED,\nis1.RESERVORDERED,\nis1.RESERVPHYSICAL,\nis1.MODIFIEDDATETIME,\nid1.CONFIGID as INVENTDIM_CONFIGID,\nid1.MODIFIEDDATETIME as INVENTDIM_MODIFIEDDATETIME,\nidc1.PDMSTATUS as INVENTDIMCOMBINATION_PDMSTATUS,\nidc1.MODIFIEDDATETIME as INVENTDIMCOMBINATION_MODIFIEDDATETIME,\nps1.NAME as PDMSTATUS_NAME,\n(SELECT MAX(LastUpdateDate) FROM ( VALUES\n                    (is1.MODIFIEDDATETIME),\n    \t\t\t\t(isnull(id1.MODIFIEDDATETIME,'1950-01-01')),\n                    (isnull(idc1.MODIFIEDDATETIME, '1950-01-01'))) AS UpdateDate(LastUpdateDate)) AS LATEST_MODIFIEDDATETIME\nfrom\ndbo.INVENTSUM is1\nleft join dbo.INVENTDIM id1 on\n\tis1.DATAAREAID = id1.DATAAREAID and\n\tis1.INVENTDIMID = id1.INVENTDIMID\nleft join (select idc10.DATAAREAID, idc10.ITEMID, id10.CONFIGID, idc10.PDMSTATUS\n\t\t\t, max(id10.MODIFIEDDATETIME) as MODIFIEDDATETIME\n\t\tfrom dbo.INVENTDIMCOMBINATION idc10\n\t\tleft join dbo.INVENTDIM id10 on\n\t\t\tidc10.DATAAREAID = id10.DATAAREAID and\n\t\t\tidc10.INVENTDIMID = id10.INVENTDIMID\n\t\tgroup by idc10.DATAAREAID, idc10.ITEMID, id10.CONFIGID, idc10.PDMSTATUS) idc1 on\n\tis1.DATAAREAID = idc1.DATAAREAID and\n\tid1.CONFIGID = idc1.CONFIGID and\n\tis1.ITEMID = idc1.ITEMID\nleft join dbo.PDMSTATUS ps1 on\n            idc1.PDMSTATUS = ps1.RECID\n\twhere isnull(is1.DATAAREAID, '') != ''\n\tand isnull(is1.INVENTDIMID, '') != ''\n\tand isnull(is1.ITEMID, '') != ''\n\tand (SELECT MAX(LastUpdateDate) FROM ( VALUES\n                    (is1.MODIFIEDDATETIME),\n    \t\t\t\t(isnull(id1.MODIFIEDDATETIME,'1950-01-01')),\n                    (isnull(idc1.MODIFIEDDATETIME, '1950-01-01'))) AS UpdateDate(LastUpdateDate)) > '@{variables('v_prev_max_timestamp')}'",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDIMID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTDIMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ITEMID",
																"type": "String"
															},
															"sink": {
																"name": "ITEMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CLOSED",
																"type": "Int32"
															},
															"sink": {
																"name": "CLOSED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "CLOSEDQTY",
																"type": "Int32"
															},
															"sink": {
																"name": "CLOSEDQTY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "ARRIVED",
																"type": "Decimal"
															},
															"sink": {
																"name": "ARRIVED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "AVAILORDERED",
																"type": "Decimal"
															},
															"sink": {
																"name": "AVAILORDERED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "AVAILPHYSICAL",
																"type": "Decimal"
															},
															"sink": {
																"name": "AVAILPHYSICAL",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "DEDUCTED",
																"type": "Decimal"
															},
															"sink": {
																"name": "DEDUCTED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "ONORDER",
																"type": "Decimal"
															},
															"sink": {
																"name": "ONORDER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "ORDERED",
																"type": "Decimal"
															},
															"sink": {
																"name": "ORDERED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PICKED",
																"type": "Decimal"
															},
															"sink": {
																"name": "PICKED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "POSTEDQTY",
																"type": "Decimal"
															},
															"sink": {
																"name": "POSTEDQTY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "RECEIVED",
																"type": "Decimal"
															},
															"sink": {
																"name": "RECEIVED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "REGISTERED",
																"type": "Decimal"
															},
															"sink": {
																"name": "REGISTERED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "RESERVORDERED",
																"type": "Decimal"
															},
															"sink": {
																"name": "RESERVORDERED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "RESERVPHYSICAL",
																"type": "Decimal"
															},
															"sink": {
																"name": "RESERVPHYSICAL",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTDIM_CONFIGID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTDIM_CONFIGID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDIM_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTDIM_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTDIMCOMBINATION_PDMSTATUS",
																"type": "Int64"
															},
															"sink": {
																"name": "INVENTDIMCOMBINATION_PDMSTATUS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDIMCOMBINATION_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTDIMCOMBINATION_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "PDMSTATUS_NAME",
																"type": "String"
															},
															"sink": {
																"name": "PDMSTATUS_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_to_raw_nala",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_to_raw_nala').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_to_raw_nala').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_to_raw_nala').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_to_raw_nala').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_to_raw_nala').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_to_raw_d365",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('SELECT is1.dataareaid\n     , is1.inventdimid\n     , is1.itemid\n     , is1.closed\n     , is1.closedqty\n     , is1.arrived\n     , is1.availordered\n     , is1.availphysical\n     , is1.deducted\n     , is1.onorder\n     , is1.ordered\n     , is1.picked\n     , is1.postedqty\n     , is1.received\n     , is1.registered\n     , is1.reservordered\n     , is1.reservphysical\n     , is1.modifieddatetime\n     , id1.configid          AS inventdim_configid\n     , id1.modifieddatetime  AS inventdim_modifieddatetime\n     --, idc1.pdmstatus        AS inventdimcombination_pdmstatus\n\t ,idp.productlifecyclestateid AS inventdimcombination_pdmstatus --renamed so Snowflake proc picks it up\n     , idc1.modifieddatetime AS inventdimcombination_modifieddatetime\n     ,idp.productlifecyclestateid AS pdmstatus_name\n     , (\n           SELECT MAX(lastupdatedate)\n           FROM\n           (\n               VALUES\n                   (is1.modifieddatetime)\n                 , (ISNULL(id1.modifieddatetime, ''1950-01-01''))\n                 , (ISNULL(idc1.modifieddatetime, ''1950-01-01''))\n           ) AS updatedate (lastupdatedate)\n       )                     AS latest_modifieddatetime\nFROM ',pipeline().globalParameters.d365_dbName,'.','inventsum      is1\nLEFT JOIN ',pipeline().globalParameters.d365_dbName,'.','inventdim id1\n          ON is1.dataareaid = id1.dataareaid\n              AND is1.inventdimid = id1.inventdimid\nLEFT JOIN\n(\n    SELECT idc10.dataareaid\n         , idc10.itemid\n         , id10.configid\n         --, idc10.pdmstatus\n         , MAX(id10.modifieddatetime) AS modifieddatetime\n    FROM ',pipeline().globalParameters.d365_dbName,'.','inventdimcombination idc10\n    LEFT JOIN ',pipeline().globalParameters.d365_dbName,'.','inventdim       id10\n              ON idc10.dataareaid = id10.dataareaid\n                  AND idc10.inventdimid = id10.inventdimid\n    GROUP BY idc10.dataareaid\n           , idc10.itemid\n           , id10.configid\n           --, idc10.pdmstatus\n)                       idc1\nON is1.dataareaid = idc1.dataareaid\n    AND id1.configid = idc1.configid\n    AND is1.itemid = idc1.itemid\nLEFT OUTER JOIN ',pipeline().globalParameters.d365_dbName,'.','inventdistinctproduct idp ON is1.dataareaid = idp.dataareaid\n\tAND id1.configid = idp.configid\n\tAND is1.itemid = idp.itemid\nWHERE ISNULL(is1.dataareaid, '''') != ''''\n    AND ISNULL(is1.inventdimid, '''') != ''''\n    AND ISNULL(is1.itemid, '''') != ''''\n    AND\n    (\n        SELECT MAX(lastupdatedate)\n        FROM\n        (\n            VALUES\n                (is1.modifieddatetime)\n              , (ISNULL(id1.modifieddatetime, ''1950-01-01''))\n              , (ISNULL(idc1.modifieddatetime, ''1950-01-01''))\n        ) AS updatedate (lastupdatedate)\n    ) > ','''',variables('v_prev_max_timestamp'),'''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String",
																"physicalType": "VARCHAR"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String",
																"physicalType": "VARCHAR"
															}
														},
														{
															"source": {
																"name": "dataareaid",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String",
																"physicalType": "VARCHAR"
															}
														},
														{
															"source": {
																"name": "inventdimid",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "INVENTDIMID",
																"type": "String",
																"physicalType": "VARCHAR"
															}
														},
														{
															"source": {
																"name": "itemid",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "ITEMID",
																"type": "String",
																"physicalType": "VARCHAR"
															}
														},
														{
															"source": {
																"name": "closed",
																"type": "Int64",
																"physicalType": "bigint"
															},
															"sink": {
																"name": "CLOSED",
																"type": "Int64",
																"physicalType": "NUMBER"
															}
														},
														{
															"source": {
																"name": "closedqty",
																"type": "Int64",
																"physicalType": "bigint"
															},
															"sink": {
																"name": "CLOSEDQTY",
																"type": "Int64",
																"physicalType": "NUMBER"
															}
														},
														{
															"source": {
																"name": "arrived",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 6,
																"precision": 38
															},
															"sink": {
																"name": "ARRIVED",
																"type": "Int64",
																"physicalType": "NUMBER"
															}
														},
														{
															"source": {
																"name": "availordered",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 6,
																"precision": 38
															},
															"sink": {
																"name": "AVAILORDERED",
																"type": "Int64",
																"physicalType": "NUMBER"
															}
														},
														{
															"source": {
																"name": "availphysical",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 6,
																"precision": 38
															},
															"sink": {
																"name": "AVAILPHYSICAL",
																"type": "Int64",
																"physicalType": "NUMBER"
															}
														},
														{
															"source": {
																"name": "deducted",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 6,
																"precision": 38
															},
															"sink": {
																"name": "DEDUCTED",
																"type": "Int64",
																"physicalType": "NUMBER"
															}
														},
														{
															"source": {
																"name": "onorder",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 6,
																"precision": 38
															},
															"sink": {
																"name": "ONORDER",
																"type": "Int64",
																"physicalType": "NUMBER"
															}
														},
														{
															"source": {
																"name": "ordered",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 6,
																"precision": 38
															},
															"sink": {
																"name": "ORDERED",
																"type": "Int64",
																"physicalType": "NUMBER"
															}
														},
														{
															"source": {
																"name": "picked",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 6,
																"precision": 38
															},
															"sink": {
																"name": "PICKED",
																"type": "Int64",
																"physicalType": "NUMBER"
															}
														},
														{
															"source": {
																"name": "postedqty",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 6,
																"precision": 38
															},
															"sink": {
																"name": "POSTEDQTY",
																"type": "Int64",
																"physicalType": "NUMBER"
															}
														},
														{
															"source": {
																"name": "received",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 6,
																"precision": 38
															},
															"sink": {
																"name": "RECEIVED",
																"type": "Int64",
																"physicalType": "NUMBER"
															}
														},
														{
															"source": {
																"name": "registered",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 6,
																"precision": 38
															},
															"sink": {
																"name": "REGISTERED",
																"type": "Int64",
																"physicalType": "NUMBER"
															}
														},
														{
															"source": {
																"name": "reservordered",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 6,
																"precision": 38
															},
															"sink": {
																"name": "RESERVORDERED",
																"type": "Int64",
																"physicalType": "NUMBER"
															}
														},
														{
															"source": {
																"name": "reservphysical",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 6,
																"precision": 38
															},
															"sink": {
																"name": "RESERVPHYSICAL",
																"type": "Int64",
																"physicalType": "NUMBER"
															}
														},
														{
															"source": {
																"name": "modifieddatetime",
																"type": "DateTime",
																"physicalType": "datetime2"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "TIMESTAMP_TZ"
															}
														},
														{
															"source": {
																"name": "inventdim_configid",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "INVENTDIM_CONFIGID",
																"type": "String",
																"physicalType": "VARCHAR"
															}
														},
														{
															"source": {
																"name": "inventdim_modifieddatetime",
																"type": "DateTime",
																"physicalType": "datetime2"
															},
															"sink": {
																"name": "INVENTDIM_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "TIMESTAMP_TZ"
															}
														},
														{
															"source": {
																"name": "inventdimcombination_pdmstatus",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "INVENTDIMCOMBINATION_PDMSTATUS",
																"type": "String",
																"physicalType": "VARCHAR"
															}
														},
														{
															"source": {
																"name": "inventdimcombination_modifieddatetime",
																"type": "DateTime",
																"physicalType": "datetime2"
															},
															"sink": {
																"name": "INVENTDIMCOMBINATION_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "TIMESTAMP_TZ"
															}
														},
														{
															"source": {
																"name": "pdmstatus_name",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "PDMSTATUS_NAME",
																"type": "String",
																"physicalType": "VARCHAR"
															}
														},
														{
															"source": {
																"name": "latest_modifieddatetime",
																"type": "DateTime",
																"physicalType": "datetime2"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "TIMESTAMP_TZ"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_to_raw_d365",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_to_raw_d365').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_to_raw_d365').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_to_raw_d365').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_to_raw_d365').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_to_raw_d365').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "FACT_INVENTORY_SUMMARY"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "INVENTSUM"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "INVENTSUM"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prev_max_timestamp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-04T13:47:58Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_inventtrans_to_fact_inventory_transactions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prv_max_upd_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId,-1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId,-1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select\n    it1.RECID as RECID,\n    replace(it1.CURRENCYCODE,'\\','\\\\') as CURRENCYCODE,\n    replace(it1.INVENTDIMID,'\\','\\\\') as INVENTDIMID,\n    replace(it1.ITEMID,'\\','\\\\') as ITEMID,\n    it1.VALUEOPEN as VALUEOPEN,\n    it1.STATUSISSUE as STATUSISSUE,\n    it1.STATUSRECEIPT as STATUSRECEIPT,\n    it1.DATECLOSED as DATECLOSED,\n    it1.DATEEXPECTED as DATEEXPECTED,\n    it1.DATEFINANCIAL as DATEFINANCIAL,\n    it1.DATEPHYSICAL as DATEPHYSICAL,\n    it1.DATEINVENT as DATEINVENT,\n    it1.SHIPPINGDATECONFIRMED as SHIPPINGDATECONFIRMED,\n    it1.SHIPPINGDATEREQUESTED as SHIPPINGDATEREQUESTED,\n    it1.DATESTATUS as DATESTATUS,\n    replace(it1.INVOICEID,'\\','\\\\') as INVOICEID,\n    it1.DATAAREAID as DATAAREAID,\n    replace(it1.PACKINGSLIPID,'\\','\\\\') as PACKINGSLIPID,\n    replace(it1.PICKINGROUTEID,'\\','\\\\') as PICKINGROUTEID,\n    replace(it1.VOUCHER,'\\','\\\\') as VOUCHER,\n    replace(it1.VOUCHERPHYSICAL,'\\','\\\\') as VOUCHERPHYSICAL,\n    it1.QTY as QTY,\n    it1.QTYSETTLED as QTYSETTLED,\n    it1.COSTAMOUNTADJUSTMENT as COSTAMOUNTADJUSTMENT,\n    it1.COSTAMOUNTOPERATIONS as COSTAMOUNTOPERATIONS,\n    it1.COSTAMOUNTPHYSICAL as COSTAMOUNTPHYSICAL,\n    it1.COSTAMOUNTPOSTED as COSTAMOUNTPOSTED,\n    it1.COSTAMOUNTSETTLED as COSTAMOUNTSETTLED,\n    it1.COSTAMOUNTSTD as COSTAMOUNTSTD,\n    it1.MODIFIEDDATETIME as MODIFIEDDATETIME,\n    ito1.REFERENCECATEGORY as INVENTTRANSORIGIN_REFERENCECATEGORY,\n    replace(ito1.INVENTTRANSID,'\\','\\\\') as INVENTTRANSORIGIN_INVENTTRANSID,\n    replace(ito1.REFERENCEID,'\\','\\\\') as INVENTTRANSORIGIN_REFERENCEID,\n    ito1.MODIFIEDDATETIME as INVENTTRANSORIGIN_MODIFIEDDATETIME,\n    replace(tet1.ENUMVALUELABEL,'\\','\\\\') as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_FINANCIALSTATUS,\n    replace(tet2.ENUMVALUELABEL,'\\','\\\\') as TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_REFERENCECATEGORY,\n    replace(tet3.ENUMVALUELABEL,'\\','\\\\') as TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_STATUSISSUE,\n    replace(tet4.ENUMVALUELABEL,'\\','\\\\') as TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_STATUSRECEIPT,\n    (\n        select\n            max(LASTUPDATEDATE)\n        from\n            (\n                values\n                    (it1.MODIFIEDDATETIME),\n                    (isnull (ito1.MODIFIEDDATETIME, '1950-01-01'))\n            ) as UpdateDate (LASTUPDATEDATE)\n    ) as LATEST_MODIFIEDDATETIME\nfrom\n    dbo.INVENTTRANS it1\n    left join dbo.INVENTTRANSORIGIN ito1 on it1.INVENTTRANSORIGIN = ito1.RECID\n    left join (\n        select\n            ENUMNAME,\n            ENUMVALUE,\n            max(ENUMVALUELABEL) as ENUMVALUELABEL\n        from\n            dbo.TIMEXTENDERENUMTABLE\n        where\n            ENUMNAME = 'InventTransOpen'\n        group by\n            ENUMNAME,\n            ENUMVALUE\n    ) tet1 on it1.VALUEOPEN = tet1.ENUMVALUE\n    left join (\n        select\n            ENUMNAME,\n            ENUMVALUE,\n            max(ENUMVALUELABEL) as ENUMVALUELABEL\n        from\n            dbo.TIMEXTENDERENUMTABLE\n        where\n            ENUMNAME = 'InventTransType'\n        group by\n            ENUMNAME,\n            ENUMVALUE\n    ) tet2 on ito1.REFERENCECATEGORY = tet2.ENUMVALUE\n    left join (\n        select\n            ENUMNAME,\n            ENUMVALUE,\n            max(ENUMVALUELABEL) as ENUMVALUELABEL\n        from\n            dbo.TIMEXTENDERENUMTABLE\n        where\n            ENUMNAME = 'StatusIssue'\n        group by\n            ENUMNAME,\n            ENUMVALUE\n    ) tet3 on it1.STATUSISSUE = tet3.ENUMVALUE\n    left join (\n        select\n            ENUMNAME,\n            ENUMVALUE,\n            max(ENUMVALUELABEL) as ENUMVALUELABEL\n        from\n            dbo.TIMEXTENDERENUMTABLE\n        where\n            ENUMNAME = 'StatusReceipt'\n        group by\n            ENUMNAME,\n            ENUMVALUE\n    ) tet4 on it1.STATUSRECEIPT = tet4.ENUMVALUE\nwhere\n    (\n        select\n            max(LASTUPDATEDATE)\n        from\n            (\n                values\n                    (it1.MODIFIEDDATETIME),\n                    (isnull (ito1.MODIFIEDDATETIME, '1950-01-01'))\n            ) as UpdateDate (LASTUPDATEDATE)\n    ) > '@{variables('v_prv_max_upd_timestamp')}' ",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "Int64"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "CURRENCYCODE",
																"type": "String"
															},
															"sink": {
																"name": "CURRENCYCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDIMID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTDIMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ITEMID",
																"type": "String"
															},
															"sink": {
																"name": "ITEMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "VALUEOPEN",
																"type": "Int32"
															},
															"sink": {
																"name": "VALUEOPEN",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "STATUSISSUE",
																"type": "Int32"
															},
															"sink": {
																"name": "STATUSISSUE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "STATUSRECEIPT",
																"type": "Int32"
															},
															"sink": {
																"name": "STATUSRECEIPT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "DATECLOSED",
																"type": "DateTime"
															},
															"sink": {
																"name": "DATECLOSED",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DATEEXPECTED",
																"type": "DateTime"
															},
															"sink": {
																"name": "DATEEXPECTED",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DATEFINANCIAL",
																"type": "DateTime"
															},
															"sink": {
																"name": "DATEFINANCIAL",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DATEPHYSICAL",
																"type": "DateTime"
															},
															"sink": {
																"name": "DATEPHYSICAL",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DATEINVENT",
																"type": "DateTime"
															},
															"sink": {
																"name": "DATEINVENT",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "SHIPPINGDATECONFIRMED",
																"type": "DateTime"
															},
															"sink": {
																"name": "SHIPPINGDATECONFIRMED",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "SHIPPINGDATEREQUESTED",
																"type": "DateTime"
															},
															"sink": {
																"name": "SHIPPINGDATEREQUESTED",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DATESTATUS",
																"type": "DateTime"
															},
															"sink": {
																"name": "DATESTATUS",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVOICEID",
																"type": "String"
															},
															"sink": {
																"name": "INVOICEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PACKINGSLIPID",
																"type": "String"
															},
															"sink": {
																"name": "PACKINGSLIPID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PICKINGROUTEID",
																"type": "String"
															},
															"sink": {
																"name": "PICKINGROUTEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "VOUCHER",
																"type": "String"
															},
															"sink": {
																"name": "VOUCHER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "VOUCHERPHYSICAL",
																"type": "String"
															},
															"sink": {
																"name": "VOUCHERPHYSICAL",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "QTY",
																"type": "Decimal"
															},
															"sink": {
																"name": "QTY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "QTYSETTLED",
																"type": "Decimal"
															},
															"sink": {
																"name": "QTYSETTLED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "COSTAMOUNTADJUSTMENT",
																"type": "Decimal"
															},
															"sink": {
																"name": "COSTAMOUNTADJUSTMENT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "COSTAMOUNTOPERATIONS",
																"type": "Decimal"
															},
															"sink": {
																"name": "COSTAMOUNTOPERATIONS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "COSTAMOUNTPHYSICAL",
																"type": "Decimal"
															},
															"sink": {
																"name": "COSTAMOUNTPHYSICAL",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "COSTAMOUNTPOSTED",
																"type": "Decimal"
															},
															"sink": {
																"name": "COSTAMOUNTPOSTED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "COSTAMOUNTSETTLED",
																"type": "Decimal"
															},
															"sink": {
																"name": "COSTAMOUNTSETTLED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "COSTAMOUNTSTD",
																"type": "Decimal"
															},
															"sink": {
																"name": "COSTAMOUNTSTD",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTTRANSORIGIN_REFERENCECATEGORY",
																"type": "Int32"
															},
															"sink": {
																"name": "INVENTTRANSORIGIN_REFERENCECATEGORY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTTRANSORIGIN_INVENTTRANSID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTTRANSORIGIN_INVENTTRANSID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTTRANSORIGIN_REFERENCEID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTTRANSORIGIN_REFERENCEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTTRANSORIGIN_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTTRANSORIGIN_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_FINANCIALSTATUS",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_FINANCIALSTATUS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_REFERENCECATEGORY",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_REFERENCECATEGORY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_STATUSISSUE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_STATUSISSUE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_STATUSRECEIPT",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_STATUSRECEIPT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId,-1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId,-1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat ('Select \n    it1.recid as RECID,\n    replace(it1.currencycode,''\\'',''\\\\'') as CURRENCYCODE,\n    replace(it1.inventdimid,''\\'',''\\\\'') as INVENTDIMID,\n    replace(it1.itemid,''\\'',''\\\\'') as ITEMID,\n    it1.valueopen as VALUEOPEN,\n    it1.statusissue as STATUSISSUE,\n    it1.statusreceipt as STATUSRECEIPT,\n    it1.dateclosed as DATECLOSED,\n    it1.dateexpected as DATEEXPECTED,\n    it1.datefinancial as DATEFINANCIAL,\n    it1.datephysical as DATEPHYSICAL,\n    it1.dateinvent as DATEINVENT,\n    it1.shippingdateconfirmed as SHIPPINGDATECONFIRMED,\n    it1.shippingdaterequested as SHIPPINGDATEREQUESTED,\n    it1.datestatus as DATESTATUS,\n    replace(it1.invoiceid,''\\'',''\\\\'') as INVOICEID,\n    it1.dataareaid as DATAAREAID,\n    replace(it1.packingslipid,''\\'',''\\\\'') as PACKINGSLIPID,\n    replace(it1.pickingrouteid,''\\'',''\\\\'') as PICKINGROUTEID,\n    replace(it1.voucher,''\\'',''\\\\'') as VOUCHER,\n    replace(it1.voucherphysical,''\\'',''\\\\'') as VOUCHERPHYSICAL,\n    it1.qty as QTY,\n    it1.qtysettled as QTYSETTLED,\n    it1.costamountadjustment as COSTAMOUNTADJUSTMENT,\n    it1.costamountoperations as COSTAMOUNTOPERATIONS,\n    it1.costamountphysical as COSTAMOUNTPHYSICAL,\n    it1.costamountposted as COSTAMOUNTPOSTED,\n    it1.costamountsettled as COSTAMOUNTSETTLED,\n    it1.costamountstd as COSTAMOUNTSTD,\n    it1.modifieddatetime as MODIFIEDDATETIME,\n    ito1.referencecategory as INVENTTRANSORIGIN_REFERENCECATEGORY,\n    replace(ito1.inventtransid,''\\'',''\\\\'') as INVENTTRANSORIGIN_INVENTTRANSID,\n    replace(ito1.referenceid,''\\'',''\\\\'') as INVENTTRANSORIGIN_REFERENCEID,\n    ito1.modifieddatetime as INVENTTRANSORIGIN_MODIFIEDDATETIME,\n    replace(tet1.ENUMVALUELABEL,''\\'',''\\\\'') as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_FINANCIALSTATUS,\n    replace(tet2.ENUMVALUELABEL,''\\'',''\\\\'') as TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_REFERENCECATEGORY,\n    replace(tet3.ENUMVALUELABEL,''\\'',''\\\\'') as TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_STATUSISSUE,\n    replace(tet4.ENUMVALUELABEL,''\\'',''\\\\'') as TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_STATUSRECEIPT,\n    (\n        SELECT\n            MAX(LastUpdateDate)\n        FROM\n            (\n                VALUES\n                    (it1.modifieddatetime),\n                    (isnull (ito1.modifieddatetime, ''1950-01-01''))\n            ) AS UpdateDate (LastUpdateDate)\n    ) AS LATEST_MODIFIEDDATETIME\nfrom\n    ',pipeline().globalParameters.d365_dbName,'.','inventtrans it1\n    left join ',pipeline().globalParameters.d365_dbName,'.','inventtransorigin ito1 on it1.inventtransorigin = ito1.recid\n    left join (\n        select\n            enumname,\n            enumvalue,\n            max(enumvaluelabel) as ENUMVALUELABEL\n        from\n            ',pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n        where\n            enumname = ''InventTransOpen''\n        group by\n            enumname,\n            enumvalue\n    ) tet1 on it1.valueopen = tet1.enumvalue\n    left join (\n        select\n            enumname,\n            enumvalue,\n            max(enumvaluelabel) as ENUMVALUELABEL\n        from\n            ',pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n        where\n            enumname = ''InventTransType''\n        group by\n            enumname,\n            enumvalue\n    ) tet2 on ito1.referencecategory = tet2.enumvalue\n    left join (\n        select\n            enumname,\n            enumvalue,\n            max(enumvaluelabel) as ENUMVALUELABEL\n        from\n            ',pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n        where\n            enumname = ''StatusIssue''\n        group by\n            enumname,\n            enumvalue\n    ) tet3 on it1.statusissue = tet3.enumvalue\n    left join (\n        select\n            enumname,\n            enumvalue,\n            max(enumvaluelabel) as ENUMVALUELABEL\n        from\n            ',pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n        where\n            enumname = ''StatusReceipt''\n        group by\n            enumname,\n            enumvalue\n    ) tet4 on it1.statusreceipt = tet4.enumvalue\nwhere\n    (\n        SELECT\n            MAX(LastUpdateDate)\n        FROM\n            (\n                VALUES\n                    (it1.modifieddatetime),\n                    (isnull (ito1.modifieddatetime, ''1950-01-01''))\n            ) AS UpdateDate (LastUpdateDate)\n    )   > ','''',variables('v_prv_max_upd_timestamp'),'''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "Int64"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "CURRENCYCODE",
																"type": "String"
															},
															"sink": {
																"name": "CURRENCYCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDIMID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTDIMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ITEMID",
																"type": "String"
															},
															"sink": {
																"name": "ITEMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "VALUEOPEN",
																"type": "Int32"
															},
															"sink": {
																"name": "VALUEOPEN",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "STATUSISSUE",
																"type": "Int32"
															},
															"sink": {
																"name": "STATUSISSUE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "STATUSRECEIPT",
																"type": "Int32"
															},
															"sink": {
																"name": "STATUSRECEIPT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "DATECLOSED",
																"type": "DateTime"
															},
															"sink": {
																"name": "DATECLOSED",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DATEEXPECTED",
																"type": "DateTime"
															},
															"sink": {
																"name": "DATEEXPECTED",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DATEFINANCIAL",
																"type": "DateTime"
															},
															"sink": {
																"name": "DATEFINANCIAL",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DATEPHYSICAL",
																"type": "DateTime"
															},
															"sink": {
																"name": "DATEPHYSICAL",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DATEINVENT",
																"type": "DateTime"
															},
															"sink": {
																"name": "DATEINVENT",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "SHIPPINGDATECONFIRMED",
																"type": "DateTime"
															},
															"sink": {
																"name": "SHIPPINGDATECONFIRMED",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "SHIPPINGDATEREQUESTED",
																"type": "DateTime"
															},
															"sink": {
																"name": "SHIPPINGDATEREQUESTED",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DATESTATUS",
																"type": "DateTime"
															},
															"sink": {
																"name": "DATESTATUS",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVOICEID",
																"type": "String"
															},
															"sink": {
																"name": "INVOICEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PACKINGSLIPID",
																"type": "String"
															},
															"sink": {
																"name": "PACKINGSLIPID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PICKINGROUTEID",
																"type": "String"
															},
															"sink": {
																"name": "PICKINGROUTEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "VOUCHER",
																"type": "String"
															},
															"sink": {
																"name": "VOUCHER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "VOUCHERPHYSICAL",
																"type": "String"
															},
															"sink": {
																"name": "VOUCHERPHYSICAL",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "QTY",
																"type": "Decimal"
															},
															"sink": {
																"name": "QTY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "QTYSETTLED",
																"type": "Decimal"
															},
															"sink": {
																"name": "QTYSETTLED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "COSTAMOUNTADJUSTMENT",
																"type": "Decimal"
															},
															"sink": {
																"name": "COSTAMOUNTADJUSTMENT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "COSTAMOUNTOPERATIONS",
																"type": "Decimal"
															},
															"sink": {
																"name": "COSTAMOUNTOPERATIONS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "COSTAMOUNTPHYSICAL",
																"type": "Decimal"
															},
															"sink": {
																"name": "COSTAMOUNTPHYSICAL",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "COSTAMOUNTPOSTED",
																"type": "Decimal"
															},
															"sink": {
																"name": "COSTAMOUNTPOSTED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "COSTAMOUNTSETTLED",
																"type": "Decimal"
															},
															"sink": {
																"name": "COSTAMOUNTSETTLED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "COSTAMOUNTSTD",
																"type": "Decimal"
															},
															"sink": {
																"name": "COSTAMOUNTSTD",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTTRANSORIGIN_REFERENCECATEGORY",
																"type": "Int32"
															},
															"sink": {
																"name": "INVENTTRANSORIGIN_REFERENCECATEGORY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTTRANSORIGIN_INVENTTRANSID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTTRANSORIGIN_INVENTTRANSID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTTRANSORIGIN_REFERENCEID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTTRANSORIGIN_REFERENCEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTTRANSORIGIN_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTTRANSORIGIN_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_FINANCIALSTATUS",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_FINANCIALSTATUS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_REFERENCECATEGORY",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_REFERENCECATEGORY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_STATUSISSUE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_STATUSISSUE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_STATUSRECEIPT",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_STATUSRECEIPT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId,-1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "INVENTTRANS"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "FACT_INVENTORY_TRANSACTIONS"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "INVENTTRANS"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prv_max_upd_timestamp": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_ledger_to_dim_ledger')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prv_max_upd_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId,-1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId,-1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select\n    l.RECID as RECID,\n    l.NAME as LEDGERNAME,\n    l.DESCRIPTION as DESCRIPTION,\n    l.ACCOUNTINGCURRENCY as ACCOUNTINGCURRENCY,\n    c.TXT as ACCOUNTINGCURRENCYNAME,\n    l.BUDGETEXCHANGERATETYPE as BUDGETEXCHANGERATETYPE,\n    ert.NAME as BUDGETEXCHANGERATENAME,\n    ert.DESCRIPTION as BUDGETEXCHANGERATEDESCRIPTION,\n    l.DEFAULTEXCHANGERATETYPE as DEFAULTEXCHANGERATETYPE,\n    ert1.NAME as DEFAULTEXCHANGERATENAME,\n    ert1.DESCRIPTION as DEFAULTEXCHANGERATEDESCRIPTION,\n    l.FISCALCALENDAR as FISCALCALENDAR,\n    f.CALENDARID as CALENDARID,\n    f.DESCRIPTION as CALENDARDESCRIPTION,\n    l.REPORTINGCURRENCY as REPORTINGCURRENCY,\n    c1.TXT as REPORTINGCURRENCYNAME,\n    (\n        select\n            max(LASTUPDATEDATE)\n        from\n            (\n                values\n                    (l.MODIFIEDDATETIME),\n                    (isnull (c.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull (f.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull (c1.MODIFIEDDATETIME, '1950-01-01'))\n            ) as UpdateDate (LASTUPDATEDATE)\n    ) as LATEST_MODIFIEDDATETIME\nfrom\n    dbo.LEDGER l\n    left join dbo.CURRENCY c on l.ACCOUNTINGCURRENCY = c.CURRENCYCODE\n    left join dbo.EXCHANGERATETYPE ert on l.BUDGETEXCHANGERATETYPE = ert.RECID\n    left join dbo.EXCHANGERATETYPE ert1 on l.DEFAULTEXCHANGERATETYPE = ert1.RECID\n    left join dbo.FISCALCALENDAR f on l.FISCALCALENDAR = f.RECID\n    left join dbo.CURRENCY c1 on l.REPORTINGCURRENCY = c1.CURRENCYCODE\nwhere\n    (\n        select\n            max(LASTUPDATEDATE)\n        from\n            (\n                values\n                    (l.MODIFIEDDATETIME),\n                    (isnull (c.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull (f.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull (c1.MODIFIEDDATETIME, '1950-01-01'))\n            ) as UpdateDate (LASTUPDATEDATE)\n    ) > '@{variables('v_prv_max_upd_timestamp')}'",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "Int64"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LEDGERNAME",
																"type": "String"
															},
															"sink": {
																"name": "LEDGERNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ACCOUNTINGCURRENCY",
																"type": "String"
															},
															"sink": {
																"name": "ACCOUNTINGCURRENCY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ACCOUNTINGCURRENCYNAME",
																"type": "String"
															},
															"sink": {
																"name": "ACCOUNTINGCURRENCYNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "BUDGETEXCHANGERATETYPE",
																"type": "Int64"
															},
															"sink": {
																"name": "BUDGETEXCHANGERATETYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "BUDGETEXCHANGERATENAME",
																"type": "String"
															},
															"sink": {
																"name": "BUDGETEXCHANGERATENAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "BUDGETEXCHANGERATEDESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "BUDGETEXCHANGERATEDESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DEFAULTEXCHANGERATETYPE",
																"type": "Int64"
															},
															"sink": {
																"name": "DEFAULTEXCHANGERATETYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "DEFAULTEXCHANGERATENAME",
																"type": "String"
															},
															"sink": {
																"name": "DEFAULTEXCHANGERATENAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DEFAULTEXCHANGERATEDESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "DEFAULTEXCHANGERATEDESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "FISCALCALENDAR",
																"type": "Int64"
															},
															"sink": {
																"name": "FISCALCALENDAR",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "CALENDARID",
																"type": "String"
															},
															"sink": {
																"name": "CALENDARID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CALENDARDESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "CALENDARDESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "REPORTINGCURRENCY",
																"type": "String"
															},
															"sink": {
																"name": "REPORTINGCURRENCY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "REPORTINGCURRENCYNAME",
																"type": "String"
															},
															"sink": {
																"name": "REPORTINGCURRENCYNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId,-1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId,-1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@Concat('Select\n   l.recid as RECID,\n    l.name as LEDGERNAME,\n    l.description as DESCRIPTION,\n    l.accountingcurrency as ACCOUNTINGCURRENCY,\n    c.txt as ACCOUNTINGCURRENCYNAME,\n    l.budgetexchangeratetype as BUDGETEXCHANGERATETYPE,\n    ert.name as BUDGETEXCHANGERATENAME,\n    ert.description as BUDGETEXCHANGERATEDESCRIPTION,\n    l.defaultexchangeratetype as DEFAULTEXCHANGERATETYPE,\n    ert1.name as DEFAULTEXCHANGERATENAME,\n    ert1.description as DEFAULTEXCHANGERATEDESCRIPTION,\n    l.fiscalcalendar as FISCALCALENDAR,\n    f.calendarid as CALENDARID,\n    f.description as CALENDARDESCRIPTION,\n    l.reportingcurrency as REPORTINGCURRENCY,\n    c1.txt as REPORTINGCURRENCYNAME,\n    (\n        select\n            max(lastupdatedate)\n        from\n            (\n                values\n                    (l.modifieddatetime),\n                    (isnull (c.modifieddatetime, ''1950-01-01'')),\n                    (isnull (f.modifieddatetime, ''1950-01-01'')),\n                    (isnull (c1.modifieddatetime, ''1950-01-01''))\n            ) as updatedate (lastupdatedate)\n    ) as   LATEST_MODIFIEDDATETIME\nfrom\n    ',pipeline().globalParameters.d365_dbName,'.','ledger l\n    left join ',pipeline().globalParameters.d365_dbName,'.','currency c on l.accountingcurrency = c.currencycode\n    left join ',pipeline().globalParameters.d365_dbName,'.','exchangeratetype ert on l.budgetexchangeratetype = ert.recid\n    left join ',pipeline().globalParameters.d365_dbName,'.','exchangeratetype ert1 on l.defaultexchangeratetype = ert1.recid\n    left join ',pipeline().globalParameters.d365_dbName,'.','fiscalcalendar f on l.fiscalcalendar = f.recid\n    left join ',pipeline().globalParameters.d365_dbName,'.','currency c1 on l.reportingcurrency = c1.currencycode\nwhere\n    (\n        select\n            max(lastupdatedate)\n        from\n            (\n                values\n                    (l.modifieddatetime),\n                    (isnull (c.modifieddatetime, ''1950-01-01'')),\n                    (isnull (f.modifieddatetime, ''1950-01-01'')),\n                    (isnull (c1.modifieddatetime, ''1950-01-01''))\n            ) as updatedate (lastupdatedate)\n    ) > ','''',variables('v_prv_max_upd_timestamp'),'''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "Int64"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LEDGERNAME",
																"type": "String"
															},
															"sink": {
																"name": "LEDGERNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ACCOUNTINGCURRENCY",
																"type": "String"
															},
															"sink": {
																"name": "ACCOUNTINGCURRENCY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ACCOUNTINGCURRENCYNAME",
																"type": "String"
															},
															"sink": {
																"name": "ACCOUNTINGCURRENCYNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "BUDGETEXCHANGERATETYPE",
																"type": "Int64"
															},
															"sink": {
																"name": "BUDGETEXCHANGERATETYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "BUDGETEXCHANGERATENAME",
																"type": "String"
															},
															"sink": {
																"name": "BUDGETEXCHANGERATENAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "BUDGETEXCHANGERATEDESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "BUDGETEXCHANGERATEDESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DEFAULTEXCHANGERATETYPE",
																"type": "Int64"
															},
															"sink": {
																"name": "DEFAULTEXCHANGERATETYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "DEFAULTEXCHANGERATENAME",
																"type": "String"
															},
															"sink": {
																"name": "DEFAULTEXCHANGERATENAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DEFAULTEXCHANGERATEDESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "DEFAULTEXCHANGERATEDESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "FISCALCALENDAR",
																"type": "Int64"
															},
															"sink": {
																"name": "FISCALCALENDAR",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "CALENDARID",
																"type": "String"
															},
															"sink": {
																"name": "CALENDARID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CALENDARDESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "CALENDARDESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "REPORTINGCURRENCY",
																"type": "String"
															},
															"sink": {
																"name": "REPORTINGCURRENCY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "REPORTINGCURRENCYNAME",
																"type": "String"
															},
															"sink": {
																"name": "REPORTINGCURRENCYNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId,-1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "LEDGER"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_LEDGER"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "LEDGER"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prv_max_upd_timestamp": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_markupgroup_to_dim_customer_markup_group')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": "select mg1.DATAAREAID,mg1.GROUPID,mg1.TXT from dbo.MARKUPGROUP mg1 where mg1.MODULE = 1",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "GROUPID",
																"type": "String"
															},
															"sink": {
																"name": "GROUPID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TXT",
																"type": "String"
															},
															"sink": {
																"name": "TXT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('Select mg1.dataareaid AS DATAAREAID\n     , mg1.groupid AS GROUPID\n     , mg1.txt AS TXT\n From '\n,pipeline().globalParameters.d365_dbName,'.','markupgroup mg1\n Where\n    mg1.module = 1;')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "GROUPID",
																"type": "String"
															},
															"sink": {
																"name": "GROUPID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TXT",
																"type": "String"
															},
															"sink": {
																"name": "TXT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "MARKUPGROUP"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "MARKUPGROUP"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_CUSTOMER_MARKUP_GROUP"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T10:58:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_mcstrailers_to_dim_trailers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": "select \r\nmt1.DATAAREAID,\r\nmt1.TRAILERNO,\r\nmt1.CARRIERID,\r\nmt1.CUBICVOLUME,\r\nmt1.TRAILERCUBICVOLUME,\r\nmt1.TRAILERLENGTH\r\nfrom\r\ndbo.MCSTRAILERS mt1",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TRAILERNO",
																"type": "String"
															},
															"sink": {
																"name": "TRAILERNO",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CARRIERID",
																"type": "String"
															},
															"sink": {
																"name": "CARRIERID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CUBICVOLUME",
																"type": "String"
															},
															"sink": {
																"name": "CUBICVOLUME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TRAILERCUBICVOLUME",
																"type": "String"
															},
															"sink": {
																"name": "TRAILERCUBICVOLUME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TRAILERLENGTH",
																"type": "Int32"
															},
															"sink": {
																"name": "TRAILERLENGTH",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('select \r\nmt1.dataareaid,\r\nmt1.trailerno,\r\nmt1.carrierid,\r\nmt1.cubicvolume,\r\nmt1.trailercubicvolume,\r\nmt1.trailerlength\r\nFROM ',pipeline().globalParameters.d365_dbName,'.','mcstrailers mt1')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TRAILERNO",
																"type": "String"
															},
															"sink": {
																"name": "TRAILERNO",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CARRIERID",
																"type": "String"
															},
															"sink": {
																"name": "CARRIERID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CUBICVOLUME",
																"type": "String"
															},
															"sink": {
																"name": "CUBICVOLUME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TRAILERCUBICVOLUME",
																"type": "String"
															},
															"sink": {
																"name": "TRAILERCUBICVOLUME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TRAILERLENGTH",
																"type": "Int32"
															},
															"sink": {
																"name": "TRAILERLENGTH",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "MCSTRAILERS"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "MCSTRAILERS"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_TRAILERS"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T10:58:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_paymterm_to_dim_payment_terms')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": "select \r\npt1.DATAAREAID as DATAAREAID,\r\npt1.PAYMTERMID as PAYMTERMID,\r\npt1.DESCRIPTION as DESCRIPTION,\r\npt1.NUMOFDAYS as NUMOFDAYS,\r\npt1.NUMOFMONTHS as NUMOFMONTHS,\r\npt1.PAYMSCHED as PAYMSCHED,\r\npt1.PAYMMETHOD as PAYMMETHOD,\r\npt1.PREPAID as PREPAID,\r\nps1.NUMOFPAYMENT as PAYMSCHED_NUMOFPAYMENT,\r\nps1.DESCRIPTION as PAYMSCHED_DESCRIPTION,\r\ntet1.ENUMVALUELABEL as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PAYMMETHOD\r\nfrom\r\ndbo.PAYMTERM pt1\r\nleft join dbo.PAYMSCHED ps1 on\r\n\tpt1.DATAAREAID = ps1.DATAAREAID and\r\n\tpt1.PAYMSCHED = ps1.NAME\r\nleft join (select ENUMNAME, ENUMVALUE\r\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\r\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\r\n\t\twhere ENUMNAME = 'NetCurrent'\r\n\t\tgroup by ENUMNAME, ENUMVALUE) tet1 on\r\n\tpt1.PAYMMETHOD = tet1.ENUMVALUE",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PAYMTERMID",
																"type": "String"
															},
															"sink": {
																"name": "PAYMTERMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NUMOFDAYS",
																"type": "Int32"
															},
															"sink": {
																"name": "NUMOFDAYS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "NUMOFMONTHS",
																"type": "Int32"
															},
															"sink": {
																"name": "NUMOFMONTHS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PAYMSCHED",
																"type": "String"
															},
															"sink": {
																"name": "PAYMSCHED",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PAYMMETHOD",
																"type": "Int32"
															},
															"sink": {
																"name": "PAYMMETHOD",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PREPAID",
																"type": "Int32"
															},
															"sink": {
																"name": "PREPAID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PAYMSCHED_NUMOFPAYMENT",
																"type": "Int32"
															},
															"sink": {
																"name": "PAYMSCHED_NUMOFPAYMENT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PAYMSCHED_DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "PAYMSCHED_DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PAYMMETHOD",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PAYMMETHOD",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('select \npt1.dataareaid as DATAAREAID,\npt1.paymtermid as PAYMTERMID,\npt1.description as DESCRIPTION,\npt1.numofdays as NUMOFDAYS,\npt1.numofmonths as NUMOFMONTHS,\npt1.paymsched as PAYMSCHED,\npt1.paymmethod as PAYMMETHOD,\npt1.prepaid as PREPAID,\nps1.numofpayment as PAYMSCHED_NUMOFPAYMENT,\nps1.description as PAYMSCHED_DESCRIPTION,\ntet1.ENUMVALUELABEL as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PAYMMETHOD\nfrom ' \n,pipeline().globalParameters.d365_dbName,'.','paymterm pt1\nleft join ' \n,pipeline().globalParameters.d365_dbName,'.','paymsched ps1 on\n\tpt1.dataareaid = ps1.dataareaid and\n\tpt1.paymsched = ps1.name\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvalue) as ENUMVALUELABEL\n\t\tfrom ' \n,pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n\t\twhere enumname = ''NetCurrent''\n\t\tgroup by enumname, enumvalue) tet1 on\n\tpt1.paymmethod = tet1.enumvalue')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PAYMTERMID",
																"type": "String"
															},
															"sink": {
																"name": "PAYMTERMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NUMOFDAYS",
																"type": "Int32"
															},
															"sink": {
																"name": "NUMOFDAYS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "NUMOFMONTHS",
																"type": "Int32"
															},
															"sink": {
																"name": "NUMOFMONTHS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PAYMSCHED",
																"type": "String"
															},
															"sink": {
																"name": "PAYMSCHED",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PAYMMETHOD",
																"type": "Int32"
															},
															"sink": {
																"name": "PAYMMETHOD",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PREPAID",
																"type": "Int32"
															},
															"sink": {
																"name": "PREPAID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PAYMSCHED_NUMOFPAYMENT",
																"type": "Int32"
															},
															"sink": {
																"name": "PAYMSCHED_NUMOFPAYMENT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PAYMSCHED_DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "PAYMSCHED_DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PAYMMETHOD",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PAYMMETHOD",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "PAYMTERM"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "PAYMTERM"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_PAYMENT_TERMS"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T10:58:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_pdsrebate_to_dim_rebate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_retail_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prev_max_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')\n\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "switch_nala_retail_d365",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_to_raw_nala",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "SELECT\npr1.dataareaid as DATAAREAID\n,pr1.pdsrebatetype as PDSREBATETYPE\n,pr1.description as DESCRIPTION\n,pr1.pdsrebateprogramtype as PDSREBATEPROGRAMTYPE\n,pr1.modifieddatetime as MODIFIEDDATETIME\n,tet1.enumvaluelabel as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PDSREBATEPROGRAMTYPE\n,pr1.modifieddatetime as LATEST_MODIFIEDDATETIME\nFROM\ndbo.PDSREBATE pr1\nleft join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\n\t\twhere ENUMNAME = 'PdsRebateProgramType'\n\t\tgroup by ENUMNAME, ENUMVALUE) tet1 on\n\tpr1.PDSREBATEPROGRAMTYPE = tet1.ENUMVALUE where pr1.modifieddatetime > '@{variables('v_prev_max_timestamp')}' ",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PDSREBATETYPE",
																"type": "String"
															},
															"sink": {
																"name": "PDSREBATETYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PDSREBATEPROGRAMTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "PDSREBATEPROGRAMTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PDSREBATEPROGRAMTYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PDSREBATEPROGRAMTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_to_raw_nala",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_to_raw_nala').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_to_raw_nala').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_to_raw_nala').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_to_raw_nala').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_to_raw_nala').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_to_raw_d365",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('SELECT\npr1.dataareaid as DATAAREAID\n,pr1.pdsrebatetype as PDSREBATETYPE\n,pr1.description as DESCRIPTION\n,pr1.pdsrebateprogramtype as PDSREBATEPROGRAMTYPE\n,pr1.modifieddatetime as MODIFIEDDATETIME\n,tet1.ENUMVALUELABEL as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PDSREBATEPROGRAMTYPE\n,pr1.modifieddatetime as LATEST_MODIFIEDDATETIME\nFROM '\n,pipeline().globalParameters.d365_dbName,'.','pdsrebate pr1\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as ENUMVALUELABEL\n\t\tfrom ',pipeline().globalParameters.d365_dbName,'.', 'timextenderenumtable\n\t\twhere enumname = ''pdsrebateprogramtype''\n\t\tgroup by enumname, enumvalue) tet1 on\n\tpr1.pdsrebateprogramtype = tet1.enumvalue where pr1.modifieddatetime > ','''',variables('v_prev_max_timestamp'),'''')\n\n",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PDSREBATETYPE",
																"type": "String"
															},
															"sink": {
																"name": "PDSREBATETYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PDSREBATEPROGRAMTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "PDSREBATEPROGRAMTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PDSREBATEPROGRAMTYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PDSREBATEPROGRAMTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_to_raw_d365",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_to_raw_d365').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_to_raw_d365').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_to_raw_d365').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_to_raw_d365').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_to_raw_d365').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_REBATE"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "PDSREBATE"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "PDSREBATE"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prev_max_timestamp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-04T13:47:58Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_pdsrebatetable_to_fact_rebate_transactions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_retail_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prev_max_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')\n\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "switch_nala_retail_d365",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_to_raw_nala",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "SELECT\nprt1.dataareaid as DATAAREAID\n,prt1.pdsrebateid as PDSREBATEID\n,prt1.custaccount as CUSTACCOUNT\n,prt1.custinvoicetransrefrecid as CUSTINVOICETRANSREFRECID\n,prt1.currencycode as CURRENCYCODE\n,prt1.defaultdimension as DEFAULTDIMENSION\n,prt1.offsetdefaultdimension as OFFSETDEFAULTDIMENSION\n,prt1.itemid as ITEMID\n,prt1.ledgerdimension as LEDGERDIMENSION\n,prt1.offsetledgerdimension as OFFSETLEDGERDIMENSION\n,prt1.tammerchandisingeventid as TAMMERCHANDISINGEVENTID\n,prt1.pdsrebatetype as PDSREBATETYPE\n,prt1.pdsrebateamttype as PDSREBATEAMTTYPE\n,prt1.pdspaymttype as PDSPAYMTTYPE\n,prt1.pdsrebatestatus as PDSREBATESTATUS\n,prt1.pdsprocessdate as PDSPROCESSDATE\n,prt1.rebatecalcdate as REBATECALCDATE\n,prt1.pdsstartingrebateamt as PDSSTARTINGREBATEAMT\n,prt1.modifieddatetime as MODIFIEDDATETIME\n,cit1.dataareaid as CUSTINVOICETRANS_DATAAREAID\n,cit1.numbersequencegroup as CUSTINVOICETRANS_NUMBERSEQUENCEGROUP\n,cit1.salesid as CUSTINVOICETRANS_SALESID\n,cit1.invoicedate as CUSTINVOICETRANS_INVOICEDATE\n,cit1.invoiceid as CUSTINVOICETRANS_INVOICEID\n,cit1.modifieddatetime as CUSTINVOICETRANS_MODIFIEDDATETIME\n,cij1.orderaccount as CUSTINVOICEJOUR_ORDERACCOUNT\n,cij1.modifieddatetime as CUSTINVOICEJOUR_MODIFIEDDATETIME\n,tme1.promotionid as TAMMERCHANDISINGEVENT_PROMOTIONID\n,tme1.modifieddatetime as TAMMERCHANDISINGEVENT_MODIFIEDDATETIME\n,tet1.enumvaluelabel as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PDSREBATEAMTTYPE\n,tet2.enumvaluelabel as TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_PDSPAYMTTYPE\n,tet3.enumvaluelabel as TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_PDSREBATESTATUS\n,(SELECT MAX(LastUpdateDate) \n FROM (VALUES (prt1.modifieddatetime),\n  (isnull(cit1.modifieddatetime, '1950-01-01'))\n  , (isnull(cij1.modifieddatetime, '1950-01-01'))\n  , (isnull(tme1.modifieddatetime, '1950-01-01'))\n ) AS UpdateDate(LastUpdateDate)) AS LATEST_MODIFIEDDATETIME\nFROM\ndbo.PDSREBATETABLE prt1\nleft join dbo.CUSTINVOICETRANS cit1 on\n\tprt1.CUSTINVOICETRANSREFRECID = cit1.RECID\nleft join (select DATAAREAID, NUMBERSEQUENCEGROUP, SALESID, INVOICEDATE, INVOICEID\n\t\t\t, ORDERACCOUNT\n\t\t\t, MODIFIEDDATETIME\n\t\tfrom dbo.CUSTINVOICEJOUR cij10\n\t\tinner join (select RECID\n\t\t\t\t\t, row_number() over (partition by DATAAREAID, NUMBERSEQUENCEGROUP, SALESID, INVOICEDATE, INVOICEID order by MODIFIEDDATETIME desc) as ROW_NUM\n\t\t\t\tfrom dbo.CUSTINVOICEJOUR) cij11 on\n\t\t\tcij11.ROW_NUM = 1 and\n\t\t\tcij10.RECID = cij11.RECID) cij1 on\n\tcit1.DATAAREAID = cij1.DATAAREAID and\n\tcit1.NUMBERSEQUENCEGROUP = cij1.NUMBERSEQUENCEGROUP and\n\tcit1.SALESID = cij1.SALESID and\n\tcit1.INVOICEDATE = cij1.INVOICEDATE and\n\tcit1.INVOICEID = cij1.INVOICEID\nleft join dbo.TAMMERCHANDISINGEVENT tme1 on\n\tprt1.DATAAREAID = tme1.DATAAREAID and\n\tprt1.TAMMERCHANDISINGEVENTID = tme1.MERCHANDISINGEVENTID\nleft join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\n\t\twhere ENUMNAME = 'PdsRebateAmtType'\n\t\tgroup by ENUMNAME, ENUMVALUE) tet1 on\n\tprt1.PDSREBATEAMTTYPE = tet1.ENUMVALUE\nleft join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\n\t\twhere ENUMNAME = 'PdsPaymtType'\n\t\tgroup by ENUMNAME, ENUMVALUE) tet2 on\n\tprt1.PDSPAYMTTYPE = tet2.ENUMVALUE\nleft join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\n\t\twhere ENUMNAME = 'PdsRebateStatus'\n\t\tgroup by ENUMNAME, ENUMVALUE) tet3 on\n\tprt1.PDSREBATESTATUS = tet3.ENUMVALUE WHERE (SELECT MAX(LastUpdateDate) \n FROM (VALUES (prt1.modifieddatetime),\n  (isnull(cit1.modifieddatetime, '1950-01-01'))\n  , (isnull(cij1.modifieddatetime, '1950-01-01'))\n  , (isnull(tme1.modifieddatetime, '1950-01-01'))\n ) AS UpdateDate(LastUpdateDate)) > '@{variables('v_prev_max_timestamp')}' ",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PDSREBATEID",
																"type": "String"
															},
															"sink": {
																"name": "PDSREBATEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CUSTACCOUNT",
																"type": "String"
															},
															"sink": {
																"name": "CUSTACCOUNT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CUSTINVOICETRANSREFRECID",
																"type": "Int64"
															},
															"sink": {
																"name": "CUSTINVOICETRANSREFRECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "CURRENCYCODE",
																"type": "String"
															},
															"sink": {
																"name": "CURRENCYCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DEFAULTDIMENSION",
																"type": "Int64"
															},
															"sink": {
																"name": "DEFAULTDIMENSION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "OFFSETDEFAULTDIMENSION",
																"type": "Int64"
															},
															"sink": {
																"name": "OFFSETDEFAULTDIMENSION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "ITEMID",
																"type": "String"
															},
															"sink": {
																"name": "ITEMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LEDGERDIMENSION",
																"type": "Int64"
															},
															"sink": {
																"name": "LEDGERDIMENSION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "OFFSETLEDGERDIMENSION",
																"type": "Int64"
															},
															"sink": {
																"name": "OFFSETLEDGERDIMENSION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TAMMERCHANDISINGEVENTID",
																"type": "String"
															},
															"sink": {
																"name": "TAMMERCHANDISINGEVENTID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PDSREBATETYPE",
																"type": "String"
															},
															"sink": {
																"name": "PDSREBATETYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PDSREBATEAMTTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "PDSREBATEAMTTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PDSPAYMTTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "PDSPAYMTTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PDSREBATESTATUS",
																"type": "Int32"
															},
															"sink": {
																"name": "PDSREBATESTATUS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PDSPROCESSDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "PDSPROCESSDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "REBATECALCDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "REBATECALCDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "PDSSTARTINGREBATEAMT",
																"type": "Decimal"
															},
															"sink": {
																"name": "PDSSTARTINGREBATEAMT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "CUSTINVOICETRANS_DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "CUSTINVOICETRANS_DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CUSTINVOICETRANS_NUMBERSEQUENCEGROUP",
																"type": "String"
															},
															"sink": {
																"name": "CUSTINVOICETRANS_NUMBERSEQUENCEGROUP",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CUSTINVOICETRANS_SALESID",
																"type": "String"
															},
															"sink": {
																"name": "CUSTINVOICETRANS_SALESID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CUSTINVOICETRANS_INVOICEDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "CUSTINVOICETRANS_INVOICEDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "CUSTINVOICETRANS_INVOICEID",
																"type": "String"
															},
															"sink": {
																"name": "CUSTINVOICETRANS_INVOICEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CUSTINVOICETRANS_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "CUSTINVOICETRANS_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "CUSTINVOICEJOUR_ORDERACCOUNT",
																"type": "String"
															},
															"sink": {
																"name": "CUSTINVOICEJOUR_ORDERACCOUNT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CUSTINVOICEJOUR_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "CUSTINVOICEJOUR_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TAMMERCHANDISINGEVENT_PROMOTIONID",
																"type": "String"
															},
															"sink": {
																"name": "TAMMERCHANDISINGEVENT_PROMOTIONID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TAMMERCHANDISINGEVENT_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "TAMMERCHANDISINGEVENT_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PDSREBATEAMTTYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PDSREBATEAMTTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_PDSPAYMTTYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_PDSPAYMTTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_PDSREBATESTATUS",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_PDSREBATESTATUS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_to_raw_nala",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_to_raw_nala').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_to_raw_nala').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_to_raw_nala').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_to_raw_nala').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_to_raw_nala').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_to_raw_d365",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('select\nprt1.dataareaid as DATAAREAID\n,prt1.pdsrebateid as PDSREBATEID\n,prt1.custaccount as CUSTACCOUNT\n,prt1.custinvoicetransrefrecid as CUSTINVOICETRANSREFRECID\n,prt1.currencycode as CURRENCYCODE\n,prt1.defaultdimension as DEFAULTDIMENSION\n,prt1.offsetdefaultdimension as OFFSETDEFAULTDIMENSION\n,prt1.itemid as ITEMID\n,prt1.ledgerdimension as LEDGERDIMENSION\n,prt1.offsetledgerdimension as OFFSETLEDGERDIMENSION\n,prt1.tammerchandisingeventid as TAMMERCHANDISINGEVENTID\n,prt1.pdsrebatetype as PDSREBATETYPE\n,prt1.pdsrebateamttype as PDSREBATEAMTTYPE\n,prt1.pdspaymttype as PDSPAYMTTYPE\n,prt1.pdsrebatestatus as PDSREBATESTATUS\n,prt1.pdsprocessdate as PDSPROCESSDATE\n,prt1.rebatecalcdate as REBATECALCDATE\n,prt1.pdsstartingrebateamt as PDSSTARTINGREBATEAMT\n,prt1.modifieddatetime as MODIFIEDDATETIME\n,cit1.dataareaid as CUSTINVOICETRANS_DATAAREAID\n,cit1.numbersequencegroup as CUSTINVOICETRANS_NUMBERSEQUENCEGROUP\n,cit1.salesid as CUSTINVOICETRANS_SALESID\n,cit1.invoicedate as CUSTINVOICETRANS_INVOICEDATE\n,cit1.invoiceid as CUSTINVOICETRANS_INVOICEID\n,cit1.modifieddatetime as CUSTINVOICETRANS_MODIFIEDDATETIME\n,cij1.orderaccount as CUSTINVOICEJOUR_ORDERACCOUNT\n,cij1.modifieddatetime as CUSTINVOICEJOUR_MODIFIEDDATETIME\n,tme1.promotionid as TAMMERCHANDISINGEVENT_PROMOTIONID\n,tme1.modifieddatetime as TAMMERCHANDISINGEVENT_MODIFIEDDATETIME\n,tet1.enumvaluelabel as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PDSREBATEAMTTYPE\n,tet2.enumvaluelabel as TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_PDSPAYMTTYPE\n,tet3.enumvaluelabel as TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_PDSREBATESTATUS\n,(select max(lastupdatedate) \n from (values (prt1.modifieddatetime),\n  (isnull(cit1.modifieddatetime, ''1950-01-01''))\n  , (isnull(cij1.modifieddatetime, ''1950-01-01''))\n  , (isnull(tme1.modifieddatetime, ''1950-01-01''))\n ) as updatedate(lastupdatedate)) as LATEST_MODIFIEDDATETIME\nfrom '\n,pipeline().globalParameters.d365_dbName,'.','pdsrebatetable prt1\nleft join  '\n,pipeline().globalParameters.d365_dbName,'.','custinvoicetrans cit1 on\n\tprt1.custinvoicetransrefrecid = cit1.recid\nleft join (select dataareaid, numbersequencegroup, salesid, invoicedate, invoiceid\n\t\t\t, orderaccount\n\t\t\t, modifieddatetime\n\t\tfrom  '\n,pipeline().globalParameters.d365_dbName,'.','custinvoicejour cij10\n\t\tinner join (select recid\n\t\t\t\t\t, row_number() over (partition by dataareaid, numbersequencegroup, salesid, invoicedate, invoiceid order by modifieddatetime desc) as row_num\n\t\t\t\tfrom  '\n,pipeline().globalParameters.d365_dbName,'.','custinvoicejour) cij11 on\n\t\t\tcij11.row_num = 1 and\n\t\t\tcij10.recid = cij11.recid) cij1 on\n\tcit1.dataareaid = cij1.dataareaid and\n\tcit1.numbersequencegroup = cij1.numbersequencegroup and\n\tcit1.salesid = cij1.salesid and\n\tcit1.invoicedate = cij1.invoicedate and\n\tcit1.invoiceid = cij1.invoiceid\nleft join  '\n,pipeline().globalParameters.d365_dbName,'.','tammerchandisingevent tme1 on\n\tprt1.dataareaid = tme1.dataareaid and\n\tprt1.tammerchandisingeventid = tme1.merchandisingeventid\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as enumvaluelabel\n\t\tfrom  '\n,pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n\t\twhere enumname = ''pdsrebateamttype''\n\t\tgroup by enumname, enumvalue) tet1 on\n\tprt1.pdsrebateamttype = tet1.enumvalue\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as enumvaluelabel\n\t\tfrom  '\n,pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n\t\twhere enumname = ''pdspaymttype''\n\t\tgroup by enumname, enumvalue) tet2 on\n\tprt1.pdspaymttype = tet2.enumvalue\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as enumvaluelabel\n\t\tfrom  '\n,pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n\t\twhere enumname = ''pdsrebatestatus''\n\t\tgroup by enumname, enumvalue) tet3 on\n\tprt1.pdsrebatestatus = tet3.enumvalue where (select max(lastupdatedate) \n from (values (prt1.modifieddatetime),\n  (isnull(cit1.modifieddatetime, ''1950-01-01''))\n  , (isnull(cij1.modifieddatetime, ''1950-01-01''))\n  , (isnull(tme1.modifieddatetime, ''1950-01-01''))\n ) as updatedate(lastupdatedate)) > ','''',variables('v_prev_max_timestamp'),'''')\n\n \n \n ",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PDSREBATEID",
																"type": "String"
															},
															"sink": {
																"name": "PDSREBATEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CUSTACCOUNT",
																"type": "String"
															},
															"sink": {
																"name": "CUSTACCOUNT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CUSTINVOICETRANSREFRECID",
																"type": "Int64"
															},
															"sink": {
																"name": "CUSTINVOICETRANSREFRECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "CURRENCYCODE",
																"type": "String"
															},
															"sink": {
																"name": "CURRENCYCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DEFAULTDIMENSION",
																"type": "Int64"
															},
															"sink": {
																"name": "DEFAULTDIMENSION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "OFFSETDEFAULTDIMENSION",
																"type": "Int64"
															},
															"sink": {
																"name": "OFFSETDEFAULTDIMENSION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "ITEMID",
																"type": "String"
															},
															"sink": {
																"name": "ITEMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LEDGERDIMENSION",
																"type": "Int64"
															},
															"sink": {
																"name": "LEDGERDIMENSION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "OFFSETLEDGERDIMENSION",
																"type": "Int64"
															},
															"sink": {
																"name": "OFFSETLEDGERDIMENSION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TAMMERCHANDISINGEVENTID",
																"type": "String"
															},
															"sink": {
																"name": "TAMMERCHANDISINGEVENTID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PDSREBATETYPE",
																"type": "String"
															},
															"sink": {
																"name": "PDSREBATETYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PDSREBATEAMTTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "PDSREBATEAMTTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PDSPAYMTTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "PDSPAYMTTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PDSREBATESTATUS",
																"type": "Int32"
															},
															"sink": {
																"name": "PDSREBATESTATUS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PDSPROCESSDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "PDSPROCESSDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "REBATECALCDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "REBATECALCDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "PDSSTARTINGREBATEAMT",
																"type": "Decimal"
															},
															"sink": {
																"name": "PDSSTARTINGREBATEAMT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "CUSTINVOICETRANS_DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "CUSTINVOICETRANS_DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CUSTINVOICETRANS_NUMBERSEQUENCEGROUP",
																"type": "String"
															},
															"sink": {
																"name": "CUSTINVOICETRANS_NUMBERSEQUENCEGROUP",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CUSTINVOICETRANS_SALESID",
																"type": "String"
															},
															"sink": {
																"name": "CUSTINVOICETRANS_SALESID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CUSTINVOICETRANS_INVOICEDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "CUSTINVOICETRANS_INVOICEDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "CUSTINVOICETRANS_INVOICEID",
																"type": "String"
															},
															"sink": {
																"name": "CUSTINVOICETRANS_INVOICEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CUSTINVOICETRANS_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "CUSTINVOICETRANS_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "CUSTINVOICEJOUR_ORDERACCOUNT",
																"type": "String"
															},
															"sink": {
																"name": "CUSTINVOICEJOUR_ORDERACCOUNT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CUSTINVOICEJOUR_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "CUSTINVOICEJOUR_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TAMMERCHANDISINGEVENT_PROMOTIONID",
																"type": "String"
															},
															"sink": {
																"name": "TAMMERCHANDISINGEVENT_PROMOTIONID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TAMMERCHANDISINGEVENT_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "TAMMERCHANDISINGEVENT_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PDSREBATEAMTTYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PDSREBATEAMTTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_PDSPAYMTTYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_PDSPAYMTTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_PDSREBATESTATUS",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_PDSREBATESTATUS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_to_raw_d365",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_to_raw_d365').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_to_raw_d365').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_to_raw_d365').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_to_raw_d365').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_to_raw_d365').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "FACT_REBATE_TRANSACTIONS"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "PDSREBATETABLE"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "PDSREBATETABLE"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prev_max_timestamp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-04T13:47:58Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_pricediscgroup_to_dim_sales_line_discount_group')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": "select \r\npdg1.DATAAREAID,\r\npdg1.GROUPID,\r\npdg1.NAME\r\nfrom\r\ndbo.PRICEDISCGROUP pdg1\r\nwhere pdg1.MODULE = 1\r\nand pdg1.TYPE = 1",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "GROUPID",
																"type": "String"
															},
															"sink": {
																"name": "GROUPID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('select \npdg1.dataareaid AS DATAAREAID, \npdg1.groupid AS GROUPID,\npdg1.name AS NAME\nfrom  ' \n,pipeline().globalParameters.d365_dbName,'.','pricediscgroup pdg1\nwhere pdg1.module = 1\nand pdg1.type = 1')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "GROUPID",
																"type": "String"
															},
															"sink": {
																"name": "GROUPID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "PRICEDISCGROUP"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "PRICEDISCGROUP_SLDG"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_SALES_LINE_DISCOUNT_GROUP"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T10:58:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_pricediscgroup_to_dim_sales_price_group')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": "select \r\npdg1.DATAAREAID,\r\npdg1.GROUPID,\r\npdg1.NAME\r\nfrom\r\ndbo.PRICEDISCGROUP pdg1\r\nwhere pdg1.MODULE = 1\r\nand pdg1.TYPE = 0",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "GROUPID",
																"type": "String"
															},
															"sink": {
																"name": "GROUPID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('select \npdg1.dataareaid AS DATAAREAID,\npdg1.groupid AS GROUPID,\npdg1.name AS NAME\nfrom ' \n,pipeline().globalParameters.d365_dbName,'.','pricediscgroup pdg1\nwhere pdg1.module = 1\nand pdg1.type = 0')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "GROUPID",
																"type": "String"
															},
															"sink": {
																"name": "GROUPID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "PRICEDISCGROUP"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "PRICEDISCGROUP_SPG"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_SALES_PRICE_GROUP"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T10:58:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_prodjournalprod_to_fact_production_journal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_retail_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prv_max_upd_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_curate_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_curate_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "notify_stored_prc_failure",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_retail_d365",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "SELECT pjp1.DATAAREAID,\npjp1.JOURNALID,\npjp1.LINENUM,\npjp1.TRANSDATE,\npjp1.INVENTTRANSID,\npjp1.QTYGOOD,\npjp1.ITEMID,\npjp1.INVENTDIMID,\npjt1.POSTED,\npjp1.PRODFINISHED,\npjp1.MODIFIEDDATETIME\nFROM dbo.PRODJOURNALPROD pjp1\nleft join dbo.PRODJOURNALTABLE pjt1 on pjp1.DATAAREAID = pjt1.DATAAREAID and pjp1.JOURNALID = pjt1.JOURNALID\nwhere convert(varchar(25), pjp1.MODIFIEDDATETIME, 120) > '@{variables('v_prv_max_upd_timestamp')}'",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "JOURNALID",
																"type": "String"
															},
															"sink": {
																"name": "JOURNALID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LINENUM",
																"type": "Decimal"
															},
															"sink": {
																"name": "LINENUM",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TRANSDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "TRANSDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTTRANSID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTTRANSID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "QTYGOOD",
																"type": "Decimal"
															},
															"sink": {
																"name": "QTYGOOD",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "ITEMID",
																"type": "String"
															},
															"sink": {
																"name": "ITEMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDIMID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTDIMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "POSTED",
																"type": "Int32"
															},
															"sink": {
																"name": "POSTED",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PRODFINISHED",
																"type": "Int32"
															},
															"sink": {
																"name": "PRODFINISHED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "2",
									"activities": [
										{
											"name": "sql_retail_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "SELECT pjp1.DATAAREAID,\npjp1.JOURNALID,\npjp1.LINENUM,\npjp1.TRANSDATE,\npjp1.INVENTTRANSID,\npjp1.QTYGOOD,\npjp1.ITEMID,\npjp1.INVENTDIMID,\npjt1.POSTED,\npjp1.PRODFINISHED,\npjp1.MODIFIEDDATETIME\nFROM dbo.PRODJOURNALPROD pjp1\nleft join dbo.PRODJOURNALTABLE pjt1 on pjp1.DATAAREAID = pjt1.DATAAREAID and pjp1.JOURNALID = pjt1.JOURNALID\nwhere convert(varchar(25), pjp1.MODIFIEDDATETIME, 120) > '@{variables('v_prv_max_upd_timestamp')}'",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "JOURNALID",
																"type": "String"
															},
															"sink": {
																"name": "JOURNALID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LINENUM",
																"type": "Decimal"
															},
															"sink": {
																"name": "LINENUM",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TRANSDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "TRANSDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTTRANSID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTTRANSID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "QTYGOOD",
																"type": "Decimal"
															},
															"sink": {
																"name": "QTYGOOD",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "ITEMID",
																"type": "String"
															},
															"sink": {
																"name": "ITEMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDIMID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTDIMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "POSTED",
																"type": "Int32"
															},
															"sink": {
																"name": "POSTED",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PRODFINISHED",
																"type": "Int32"
															},
															"sink": {
																"name": "PRODFINISHED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.retail_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.retail_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "sql_retail_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_retail_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_retail_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_retail_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_retail_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_retail_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_retail_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "sql_retail_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_retail_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "d365_to_raw",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "WarehouseSource",
											"additionalColumns": [
												{
													"name": "HK_SOURCE_NAME",
													"value": {
														"value": "@pipeline().parameters.p_src_nm",
														"type": "Expression"
													}
												},
												{
													"name": "HK_JOB_RUN_ID",
													"value": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "@concat('select pjp1.dataareaid as DATAAREAID,\npjp1.journalid as JOURNALID ,\npjp1.linenum as LINENUM,\npjp1.transdate as TRANSDATE,\npjp1.inventtransid as INVENTTRANSID,\npjp1.qtygood as QTYGOOD,\npjp1.itemid as ITEMID,\npjp1.inventdimid as INVENTDIMID,\npjt1.posted as POSTED,\npjp1.prodfinished as PRODFINISHED,\npjp1.modifieddatetime as MODIFIEDDATETIME\nfrom ',pipeline().globalParameters.d365_dbName,'.','prodjournalprod pjp1\nleft join ',pipeline().globalParameters.d365_dbName,'.','prodjournaltable pjt1 on pjp1.dataareaid = pjt1.dataareaid and pjp1.journalid = pjt1.journalid\nwhere convert(varchar(25), pjp1.modifieddatetime, 120) > ','''',variables('v_prv_max_upd_timestamp'),'''')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeSink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "ls_blob_storage",
												"type": "LinkedServiceReference"
											},
											"path": {
												"value": "@pipeline().globalParameters.rootDir",
												"type": "Expression"
											},
											"enableCompression": true
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "HK_SOURCE_NAME",
														"type": "String"
													},
													"sink": {
														"name": "HK_SOURCE_NAME",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "HK_JOB_RUN_ID",
														"type": "String"
													},
													"sink": {
														"name": "HK_JOB_RUN_ID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DATAAREAID",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DATAAREAID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "JOURNALID",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "JOURNALID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "LINENUM",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 6,
														"precision": 38
													},
													"sink": {
														"name": "LINENUM",
														"type": "Int64",
														"physicalType": "NUMBER"
													}
												},
												{
													"source": {
														"name": "TRANSDATE",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "TRANSDATE",
														"type": "DateTime",
														"physicalType": "DATE"
													}
												},
												{
													"source": {
														"name": "INVENTTRANSID",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "INVENTTRANSID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "QTYGOOD",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 6,
														"precision": 38
													},
													"sink": {
														"name": "QTYGOOD",
														"type": "Int64",
														"physicalType": "NUMBER"
													}
												},
												{
													"source": {
														"name": "ITEMID",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "ITEMID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "INVENTDIMID",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "INVENTDIMID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "POSTED",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "POSTED",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "PRODFINISHED",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "PRODFINISHED",
														"type": "Int64",
														"physicalType": "NUMBER"
													}
												},
												{
													"source": {
														"name": "MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "LATEST_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "TIMESTAMP_TZ"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_fabric_wh",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_snowflake",
											"type": "DatasetReference",
											"parameters": {
												"p_tgt_table_name": {
													"value": "@pipeline().parameters.p_tgt_raw_table_nm",
													"type": "Expression"
												},
												"p_tgt_schema_name": {
													"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
													"type": "Expression"
												},
												"p_ls_DbName": {
													"value": "@pipeline().globalParameters.snow_rawDb",
													"type": "Expression"
												},
												"p_ls_Env": {
													"value": "@pipeline().globalParameters.environment",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "d365_raw_load_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "d365_to_raw",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('d365_to_raw').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('d365_to_raw').Error['message']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('d365_to_raw').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('d365_to_raw').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "d365_load_to_raw_fail",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "d365_raw_load_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('d365_to_raw').Error['message']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "PRODJOURNALPROD"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "PRODJOURNALPROD"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "FACT_PRODUCTION_JOURNAL"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prv_max_upd_timestamp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T11:17:08Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_purchline_to_fact_purchase_orders')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lkp_curate_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_curate_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prv_max_upd_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_curate_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "switch_nala",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId,-1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "Select \n  pl1.DATAAREAID as DATAAREAID, \n  pl1.INVENTTRANSID, \n  pl1.PURCHID, \n  pl1.LINENUMBER, \n  pl1.QTYORDERED as QTYINVENTORYUNIT, \n  pl1.ITEMID, \n  itm1.UNITID as INVENTTABLEMODULE_UNITID, \n  pl1.PURCHQTY, \n  pl1.PURCHUNIT, \n  pl1.PRICEUNIT, \n  pl1.PURCHPRICE, \n  pl1.LINEAMOUNT, \n  pt1.ACCOUNTINGDATE, \n  pt1.CONFIRMEDDLVEARLIEST as EARLIEST_CONFIRMED_DATE, \n  pl1.INVENTDIMID as INVENTORY_DIMENSION_ID, \n  id2.TIMEZONE, \n  tzi1.TIMEBIAS, \n  pl1.CREATEDDATETIME as PURCHLINE_CREATEDDATETIME, \n  pt1.CREATEDDATETIME as PURCHTABLE_CREATEDDATETIME, \n  pt1.DELIVERYDATE as PURCHTABLE_DELIVERYDATE, \n  pt1.DXCSHIPBYDATE as PURCHTABLE_DXCSHIPBYDATE, \n  pt1.DLVMODE as DELIVERY_MODE_ID, \n  pt1.RETURNREASONCODEID as PURCHTABLE_RETURNREASONCODEID, \n  pt1.WORKERPURCHPLACER as PURCHTABLE_WORKERPURCHPLACER, \n  pt1.REQUESTER as PURCHTABLE_REQUESTER, \n  pt1.INVOICEACCOUNT as PURCHTABLE_INVOICEACCOUNT, \n  pt1.ORDERACCOUNT as PURCHTABLE_ORDERACCOUNT, \n  pt1.INVENTLOCATIONID as PURCHTABLE_INVENTLOCATIONID, \n  pl1.DELIVERYDATE as PURCHLINE_DELIVERYDATE, \n  pl1.DXCSHIPBYDATE as PURCHLINE_DXCSHIPBYDATE, \n  pl1.CURRENCYCODE, \n  pl1.DEFAULTDIMENSION, \n  itm1.MODIFIEDDATETIME as INVENTTABLEMODULE_MODIFIEDDATETIME, \n  pl1.ASSETTRANSTYPEPURCH as PURCHLINE_ASSETTRANSTYPEPURCH, \n  pl1.DELIVERYTYPE as PURCHLINE_DELIVERYTYPE, \n  pl1.STOCKEDPRODUCT as PURCHLINE_STOCKEDPRODUCT, \n  pl1.PURCHSTATUS as PURCHLINE_PURCHSTATUS, \n  pl1.PURCHASETYPE as PURCHLINE_PURCHASETYPE, \n  pl1.MCRDROPSHIPMENT, \n  pl1.DELIVERYPOSTALADDRESS, \n  pl1.MODIFIEDDATETIME as PURCHLINE_MODIFIEDDATETIME, \n  tet1.ENUMVALUELABEL as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_ASSET_TRANSACTION_TYPE, \n  tet2.ENUMVALUELABEL as TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_DELIVERY_TYPE, \n  tet3.ENUMVALUELABEL as TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_DOCUMENT_STATUS, \n  tet4.ENUMVALUELABEL as TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_PURCH_LINE_STATUS, \n  tet5.ENUMVALUELABEL as TIMEXTENDERENUMTABLE5_ENUMVALUELABEL_PURCH_HEADER_STATUS, \n  tet6.ENUMVALUELABEL as TIMEXTENDERENUMTABLE6_ENUMVALUELABEL_PURCHASE_TYPE, \n  tet7.ENUMVALUELABEL as TIMEXTENDERENUMTABLE7_ENUMVALUELABEL_DROP_SHIPMENT, \n  vit1.INVOICEDATE, \n  vit1.INVENTDATE, \n  pl1.TRANSACTIONCODE, \n  pl1.PROCUREMENTCATEGORY, \n  pl1.TAXITEMGROUP, \n  (\n    SELECT \n      MAX(LastUpdateDate) \n    FROM \n      (\n        VALUES \n          (pt1.MODIFIEDDATETIME), \n          (\n            isnull (\n              itm1.MODIFIEDDATETIME, '1950-01-01'\n            )\n          ), \n          (\n            isnull (\n              pl1.MODIFIEDDATETIME, '1950-01-01'\n            )\n          ), \n          (\n            isnull (\n              vit1.MODIFIEDDATETIME, '1950-01-01'\n            )\n          ), \n          (\n            isnull (\n              id2.INVENTDIM_MODIFIEDDATETIME, \n              '1950-01-01'\n            )\n          )\n      ) AS UpdateDate (LastUpdateDate)\n  ) AS LATEST_MODIFIEDDATETIME \nfrom \n  dbo.PURCHLINE pl1 \n  left join dbo.PURCHTABLE pt1 on pl1.DATAAREAID = pt1.DATAAREAID \n  and pl1.PURCHID = pt1.PURCHID \n  left join dbo.INVENTTABLEMODULE itm1 on itm1.MODULETYPE = 0 \n  and pl1.DATAAREAID = itm1.DATAAREAID \n  and pl1.ITEMID = itm1.ITEMID \n  left join (\n    select \n      ENUMNAME, \n      ENUMVALUE, \n      max(ENUMVALUELABEL) as ENUMVALUELABEL \n    from \n      dbo.TIMEXTENDERENUMTABLE \n    where \n      ENUMNAME = 'AssetTransTypePurch' \n    group by \n      ENUMNAME, \n      ENUMVALUE\n  ) tet1 on pl1.ASSETTRANSTYPEPURCH = tet1.ENUMVALUE \n  left join (\n    select \n      ENUMNAME, \n      ENUMVALUE, \n      max(ENUMVALUELABEL) as ENUMVALUELABEL \n    from \n      dbo.TIMEXTENDERENUMTABLE \n    where \n      ENUMNAME = 'TradeLineDlvType' \n    group by \n      ENUMNAME, \n      ENUMVALUE\n  ) tet2 on pl1.DELIVERYTYPE = tet2.ENUMVALUE \n  left join (\n    select \n      ENUMNAME, \n      ENUMVALUE, \n      max(ENUMVALUELABEL) as ENUMVALUELABEL \n    from \n      dbo.TIMEXTENDERENUMTABLE \n    where \n      ENUMNAME = 'DocumentStatus' \n    group by \n      ENUMNAME, \n      ENUMVALUE\n  ) tet3 on pt1.DOCUMENTSTATUS = tet3.ENUMVALUE \n  left join (\n    select \n      ENUMNAME, \n      ENUMVALUE, \n      max(ENUMVALUELABEL) as ENUMVALUELABEL \n    from \n      dbo.TIMEXTENDERENUMTABLE \n    where \n      ENUMNAME = 'PurchStatus' \n    group by \n      ENUMNAME, \n      ENUMVALUE\n  ) tet4 on pl1.PURCHSTATUS = tet4.ENUMVALUE \n  left join (\n    select \n      ENUMNAME, \n      ENUMVALUE, \n      max(ENUMVALUELABEL) as ENUMVALUELABEL \n    from \n      dbo.TIMEXTENDERENUMTABLE \n    where \n      ENUMNAME = 'PurchStatus' \n    group by \n      ENUMNAME, \n      ENUMVALUE\n  ) tet5 on pt1.PURCHSTATUS = tet5.ENUMVALUE \n  left join (\n    select \n      ENUMNAME, \n      ENUMVALUE, \n      max(ENUMVALUELABEL) as ENUMVALUELABEL \n    from \n      dbo.TIMEXTENDERENUMTABLE \n    where \n      ENUMNAME = 'PurchaseType' \n    group by \n      ENUMNAME, \n      ENUMVALUE\n  ) tet6 on pl1.PURCHASETYPE = tet6.ENUMVALUE \n  left join (\n    select \n      ENUMNAME, \n      ENUMVALUE, \n      max(ENUMVALUELABEL) as ENUMVALUELABEL \n    from \n      dbo.TIMEXTENDERENUMTABLE \n    where \n      ENUMNAME = 'NoYes' \n    group by \n      ENUMNAME, \n      ENUMVALUE\n  ) tet7 on pl1.MCRDROPSHIPMENT = tet7.ENUMVALUE \n  left join (\n    select \n      id20.DATAAREAID, \n      id20.INVENTDIMID, \n      max(is20.TIMEZONE) over (\n        partition by id20.DATAAREAID, id20.INVENTDIMID\n      ) as TIMEZONE, \n      max(id20.MODIFIEDDATETIME) over (\n        partition by id20.DATAAREAID, id20.INVENTDIMID\n      ) as INVENTDIM_MODIFIEDDATETIME, \n      max(is20.MODIFIEDDATETIME) over (\n        partition by id20.DATAAREAID, id20.INVENTDIMID\n      ) as INVENTSITE_MODIFIEDDATETIME \n    from \n      dbo.INVENTDIM id20 \n      left join dbo.INVENTSITE is20 on id20.DATAAREAID = is20.DATAAREAID \n      and id20.INVENTSITEID = is20.SITEID\n  ) id2 on pl1.DATAAREAID = id2.DATAAREAID \n  and pl1.INVENTDIMID = id2.INVENTDIMID \n  left join dbo.DATAAREA da1 on pl1.DATAAREAID = da1.ID \n  left join dbo.TIMEZONEINFO tzi1 on pl1.CREATEDDATETIME >= tzi1.STARTDATE \n  and pl1.CREATEDDATETIME < tzi1.ENDDATE \n  and isnull(id2.TIMEZONE, da1.TIMEZONE) = tzi1.TIMEZONEID \n  left join dbo.DATAAREA da3 on pl1.DATAAREAID = da3.ID \n  left join dbo.TIMEZONEINFO tzi3 on pl1.CREATEDDATETIME >= tzi3.STARTDATE \n  and pl1.CREATEDDATETIME < tzi3.ENDDATE \n  and da3.TIMEZONE = tzi3.TIMEZONEID \n  left join (\n    select \n      DATAAREAID, \n      INVENTTRANSID, \n      max(invoicedate) invoicedate, \n      max(INVENTDATE) INVENTDATE, \n      max(MODIFIEDDATETIME) MODIFIEDDATETIME \n    from \n      dbo.VENDINVOICETRANS \n    group by \n      DATAAREAID, \n      INVENTTRANSID\n  ) vit1 on pl1.DATAAREAID = vit1.DATAAREAID \n  and pl1.INVENTTRANSID = vit1.INVENTTRANSID \nwhere \n  (\n    SELECT \n      MAX(LastUpdateDate) \n    FROM \n      (\n        VALUES \n          (pt1.MODIFIEDDATETIME), \n          (\n            isnull (\n              itm1.MODIFIEDDATETIME, '1950-01-01'\n            )\n          ), \n          (\n            isnull (\n              pl1.MODIFIEDDATETIME, '1950-01-01'\n            )\n          ), \n          (\n            isnull (\n              vit1.MODIFIEDDATETIME, '1950-01-01'\n            )\n          ), \n          (\n            isnull (\n              id2.INVENTDIM_MODIFIEDDATETIME, \n              '1950-01-01'\n            )\n          )\n      ) AS UpdateDate (LastUpdateDate)\n  ) > '@{variables('v_prv_max_upd_timestamp')}'\n",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTTRANSID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTTRANSID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PURCHID",
																"type": "String"
															},
															"sink": {
																"name": "PURCHID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LINENUMBER",
																"type": "Int64"
															},
															"sink": {
																"name": "LINENUMBER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "QTYINVENTORYUNIT",
																"type": "Decimal"
															},
															"sink": {
																"name": "QTYINVENTORYUNIT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "ITEMID",
																"type": "String"
															},
															"sink": {
																"name": "ITEMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTTABLEMODULE_UNITID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTTABLEMODULE_UNITID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PURCHQTY",
																"type": "Decimal"
															},
															"sink": {
																"name": "PURCHQTY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHUNIT",
																"type": "String"
															},
															"sink": {
																"name": "PURCHUNIT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PRICEUNIT",
																"type": "Decimal"
															},
															"sink": {
																"name": "PRICEUNIT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHPRICE",
																"type": "Decimal"
															},
															"sink": {
																"name": "PURCHPRICE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LINEAMOUNT",
																"type": "Decimal"
															},
															"sink": {
																"name": "LINEAMOUNT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "ACCOUNTINGDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "ACCOUNTINGDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "EARLIEST_CONFIRMED_DATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "EARLIEST_CONFIRMED_DATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTORY_DIMENSION_ID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTORY_DIMENSION_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEZONE",
																"type": "Int32"
															},
															"sink": {
																"name": "TIMEZONE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TIMEBIAS",
																"type": "Int32"
															},
															"sink": {
																"name": "TIMEBIAS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_CREATEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "PURCHLINE_CREATEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_CREATEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "PURCHTABLE_CREATEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_DELIVERYDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "PURCHTABLE_DELIVERYDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_DXCSHIPBYDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "PURCHTABLE_DXCSHIPBYDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DELIVERY_MODE_ID",
																"type": "String"
															},
															"sink": {
																"name": "DELIVERY_MODE_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_RETURNREASONCODEID",
																"type": "String"
															},
															"sink": {
																"name": "PURCHTABLE_RETURNREASONCODEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_WORKERPURCHPLACER",
																"type": "Int64"
															},
															"sink": {
																"name": "PURCHTABLE_WORKERPURCHPLACER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_REQUESTER",
																"type": "Int64"
															},
															"sink": {
																"name": "PURCHTABLE_REQUESTER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_INVOICEACCOUNT",
																"type": "String"
															},
															"sink": {
																"name": "PURCHTABLE_INVOICEACCOUNT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_ORDERACCOUNT",
																"type": "String"
															},
															"sink": {
																"name": "PURCHTABLE_ORDERACCOUNT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_INVENTLOCATIONID",
																"type": "String"
															},
															"sink": {
																"name": "PURCHTABLE_INVENTLOCATIONID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_DELIVERYDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "PURCHLINE_DELIVERYDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_DXCSHIPBYDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "PURCHLINE_DXCSHIPBYDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "CURRENCYCODE",
																"type": "String"
															},
															"sink": {
																"name": "CURRENCYCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DEFAULTDIMENSION",
																"type": "Int64"
															},
															"sink": {
																"name": "DEFAULTDIMENSION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTTABLEMODULE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTTABLEMODULE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_ASSETTRANSTYPEPURCH",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHLINE_ASSETTRANSTYPEPURCH",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_DELIVERYTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHLINE_DELIVERYTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_STOCKEDPRODUCT",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHLINE_STOCKEDPRODUCT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_PURCHSTATUS",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHLINE_PURCHSTATUS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_PURCHASETYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHLINE_PURCHASETYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MCRDROPSHIPMENT",
																"type": "Int32"
															},
															"sink": {
																"name": "MCRDROPSHIPMENT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "DELIVERYPOSTALADDRESS",
																"type": "Int64"
															},
															"sink": {
																"name": "DELIVERYPOSTALADDRESS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "PURCHLINE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_ASSET_TRANSACTION_TYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_ASSET_TRANSACTION_TYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_DELIVERY_TYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_DELIVERY_TYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_DOCUMENT_STATUS",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_DOCUMENT_STATUS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_PURCH_LINE_STATUS",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_PURCH_LINE_STATUS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE5_ENUMVALUELABEL_PURCH_HEADER_STATUS",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE5_ENUMVALUELABEL_PURCH_HEADER_STATUS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE6_ENUMVALUELABEL_PURCHASE_TYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE6_ENUMVALUELABEL_PURCHASE_TYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE7_ENUMVALUELABEL_DROP_SHIPMENT",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE7_ENUMVALUELABEL_DROP_SHIPMENT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVOICEDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVOICEDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TRANSACTIONCODE",
																"type": "String"
															},
															"sink": {
																"name": "TRANSACTIONCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PROCUREMENTCATEGORY",
																"type": "Int64"
															},
															"sink": {
																"name": "PROCUREMENTCATEGORY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TAXITEMGROUP",
																"type": "String"
															},
															"sink": {
																"name": "TAXITEMGROUP",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId,-1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_D365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId,-1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select\n    pl1.dataareaid AS DATAAREAID,\n    pl1.inventtransid AS INVENTTRANSID,\n    pl1.purchid AS PURCHID,\n    pl1.linenumber AS LINENUMBER,\n    pl1.qtyordered AS QTYINVENTORYUNIT,\n    pl1.itemid AS ITEMID,\n    itm1.unitid AS INVENTTABLEMODULE_UNITID,\n    pl1.purchqty AS PURCHQTY,\n    pl1.purchunit AS PURCHUNIT,\n    pl1.priceunit AS PRICEUNIT,\n    pl1.purchprice AS PURCHPRICE,\n    pl1.lineamount  AS LINEAMOUNT,\n    pt1.accountingdate AS ACCOUNTINGDATE,\n    pt1.confirmeddlvearliest AS EARLIEST_CONFIRMED_DATE,\n    pl1.inventdimid AS INVENTORY_DIMENSION_ID,\n    id2.timezone AS TIMEZONE,\n    tzi1.timebias AS TIMEBIAS,\n    pl1.createddatetime AS PURCHLINE_CREATEDDATETIME,\n    pt1.createddatetime AS PURCHTABLE_CREATEDDATETIME,\n    pt1.deliverydate AS PURCHTABLE_DELIVERYDATE,\n    pt1.dxcshipbydate AS PURCHTABLE_DXCSHIPBYDATE,\n    pt1.dlvmode AS DELIVERY_MODE_ID,\n    pt1.returnreasoncodeid AS PURCHTABLE_RETURNREASONCODEID,\n    pt1.workerpurchplacer AS PURCHTABLE_WORKERPURCHPLACER,\n    pt1.requester AS PURCHTABLE_REQUESTER,\n    pt1.invoiceaccount AS PURCHTABLE_INVOICEACCOUNT,\n    pt1.orderaccount AS PURCHTABLE_ORDERACCOUNT,\n    pt1.inventlocationid AS PURCHTABLE_INVENTLOCATIONID,\n    pl1.deliverydate AS PURCHLINE_DELIVERYDATE,\n    pl1.dxcshipbydate AS PURCHLINE_DXCSHIPBYDATE,\n    pl1.currencycode AS CURRENCYCODE,\n    pl1.defaultdimension AS DEFAULTDIMENSION,\n    itm1.modifieddatetime AS INVENTTABLEMODULE_MODIFIEDDATETIME,\n    pl1.assettranstypepurch AS PURCHLINE_ASSETTRANSTYPEPURCH,\n    pl1.deliverytype AS PURCHLINE_DELIVERYTYPE,\n    pl1.stockedproduct AS PURCHLINE_STOCKEDPRODUCT,\n    pl1.purchstatus AS PURCHLINE_PURCHSTATUS,\n    pl1.purchasetype AS PURCHLINE_PURCHASETYPE,\n    pl1.mcrdropshipment AS MCRDROPSHIPMENT,\n    pl1.deliverypostaladdress AS DELIVERYPOSTALADDRESS,\n    pl1.modifieddatetime AS PURCHLINE_MODIFIEDDATETIME,\n    tet1.enumvaluelabel AS TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_ASSET_TRANSACTION_TYPE,\n    tet2.enumvaluelabel AS TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_DELIVERY_TYPE,\n    tet3.enumvaluelabel AS TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_DOCUMENT_STATUS,\n    tet4.enumvaluelabel AS TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_PURCH_LINE_STATUS,\n    tet5.enumvaluelabel AS TIMEXTENDERENUMTABLE5_ENUMVALUELABEL_PURCH_HEADER_STATUS,\n    tet6.enumvaluelabel AS TIMEXTENDERENUMTABLE6_ENUMVALUELABEL_PURCHASE_TYPE,\n    tet7.enumvaluelabel AS TIMEXTENDERENUMTABLE7_ENUMVALUELABEL_DROP_SHIPMENT,\n    vit1.invoicedate AS INVOICEDATE,\n    vit1.inventdate AS INVENTDATE,\n    (\n        select\n            max(lastupdatedate)\n        from\n            (\n                values\n                    (pt1.modifieddatetime),\n                    (isnull (itm1.modifieddatetime, '1950-01-01')),\n                    (isnull (pl1.modifieddatetime, '1950-01-01')),\n\t         (isnull (vit1. modifieddatetime, '1950-01-01')),\n\t         (isnull (id2.inventdim_modifieddatetime, '1950-01-01'))\n            ) as updatedate (lastupdatedate)\n    ) as LATEST_MODIFIEDDATETIME\nfrom \n\t dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.purchline pl1\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.purchtable pt1 on\n\tpl1.dataareaid = pt1.dataareaid and\n\tpl1.purchid = pt1.purchid\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.inventtablemodule itm1 on\n\titm1.moduletype = 0 and\n\tpl1.dataareaid = itm1.dataareaid and\n\tpl1.itemid = itm1.itemid\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as enumvaluelabel\n\t\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\n\t\twhere enumname = 'AssetTransTypePurch'\n\t\tgroup by enumname, enumvalue) tet1 on\n\tpl1.assettranstypepurch = tet1.enumvalue\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as enumvaluelabel\n\t\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\n\t\twhere enumname = 'TradeLineDlvType'\n\t\tgroup by enumname, enumvalue) tet2 on\n\tpl1.deliverytype = tet2.enumvalue\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as enumvaluelabel\n\t\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\n\t\twhere enumname = 'DocumentStatus'\n\t\tgroup by enumname, enumvalue) tet3 on\n\tpt1.documentstatus = tet3.enumvalue\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as enumvaluelabel\n\t\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\n\t\twhere enumname = 'PurchStatus'\n\t\tgroup by enumname, enumvalue) tet4 on\n\tpl1.purchstatus = tet4.enumvalue\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as enumvaluelabel\n\t\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\n\t\twhere enumname = 'PurchStatus'\n\t\tgroup by enumname, enumvalue) tet5 on\n\tpt1.purchstatus = tet5.enumvalue\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as enumvaluelabel\n\t\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\n\t\twhere enumname = 'PurchaseType'\n\t\tgroup by enumname, enumvalue) tet6 on\n\tpl1.purchasetype = tet6.enumvalue\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as enumvaluelabel\n\t\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\n\t\twhere enumname = 'NoYes'\n\t\tgroup by enumname, enumvalue) tet7 on\n\tpl1.mcrdropshipment = tet7.enumvalue\t\t\t\t\n\tleft join (select id20.dataareaid, id20.inventdimid\n\t\t\t, max(is20.timezone) over (partition by id20.dataareaid, id20.inventdimid) as timezone\n\t\t\t, max(id20.modifieddatetime) over (partition by id20.dataareaid, id20.inventdimid) as inventdim_modifieddatetime\n\t\t\t, max(is20.modifieddatetime) over (partition by id20.dataareaid, id20.inventdimid) as inventsite_modifieddatetime\n\t\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.inventdim id20\n\t\tleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.inventsite is20 on\n\t\t\tid20.dataareaid = is20.dataareaid and\n\t\t\tid20.inventsiteid = is20.siteid) id2 on\n\tpl1.dataareaid = id2.dataareaid and\n\tpl1.inventdimid = id2.inventdimid\nLEFT join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dataarea da1 on\n\tpl1.dataareaid = da1.fno_id\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timezoneinfo tzi1 on\n\tpl1.createddatetime >= tzi1.startdate and\n\tpl1.createddatetime < tzi1.enddate and\n\tisnull(id2.timezone, da1.timezone) = tzi1.timezoneid\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dataarea da3 on\n\tpl1.dataareaid = da3.fno_id\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timezoneinfo tzi3 on\n\tpl1.createddatetime >= tzi3.startdate and\n\tpl1.createddatetime < tzi3.enddate and\n\tda3.timezone = tzi3.timezoneid      \nleft join (select   dataareaid, inventtransid, max(invoicedate) invoicedate , max(inventdate) inventdate, max(modifieddatetime) modifieddatetime  \nfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.vendinvoicetrans\ngroup by dataareaid, inventtransid) vit1 on\n\tpl1.dataareaid = vit1.dataareaid and\n\tpl1.inventtransid = vit1.inventtransid\nwhere\n    (\n        select\n            max(lastupdatedate)\n        from\n            (\n                values\n                    (pt1.modifieddatetime),\n                    (isnull (itm1.modifieddatetime, '1950-01-01')),\n                    (isnull (pl1.modifieddatetime, '1950-01-01')),\n\t         (isnull (vit1. modifieddatetime, '1950-01-01')),\n\t         (isnull (id2.inventdim_modifieddatetime, '1950-01-01'))\n            ) as updatedate (lastupdatedate)\n    ) > '@{variables('v_prv_max_upd_timestamp')}';\n",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTTRANSID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTTRANSID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PURCHID",
																"type": "String"
															},
															"sink": {
																"name": "PURCHID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LINENUMBER",
																"type": "Int64"
															},
															"sink": {
																"name": "LINENUMBER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "QTYINVENTORYUNIT",
																"type": "Decimal"
															},
															"sink": {
																"name": "QTYINVENTORYUNIT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "ITEMID",
																"type": "String"
															},
															"sink": {
																"name": "ITEMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTTABLEMODULE_UNITID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTTABLEMODULE_UNITID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PURCHQTY",
																"type": "Decimal"
															},
															"sink": {
																"name": "PURCHQTY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHUNIT",
																"type": "String"
															},
															"sink": {
																"name": "PURCHUNIT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PRICEUNIT",
																"type": "Decimal"
															},
															"sink": {
																"name": "PRICEUNIT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHPRICE",
																"type": "Decimal"
															},
															"sink": {
																"name": "PURCHPRICE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LINEAMOUNT",
																"type": "Decimal"
															},
															"sink": {
																"name": "LINEAMOUNT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "ACCOUNTINGDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "ACCOUNTINGDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "EARLIEST_CONFIRMED_DATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "EARLIEST_CONFIRMED_DATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTORY_DIMENSION_ID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTORY_DIMENSION_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEZONE",
																"type": "Int32"
															},
															"sink": {
																"name": "TIMEZONE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TIMEBIAS",
																"type": "Int32"
															},
															"sink": {
																"name": "TIMEBIAS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_CREATEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "PURCHLINE_CREATEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_CREATEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "PURCHTABLE_CREATEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_DELIVERYDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "PURCHTABLE_DELIVERYDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_DXCSHIPBYDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "PURCHTABLE_DXCSHIPBYDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DELIVERY_MODE_ID",
																"type": "String"
															},
															"sink": {
																"name": "DELIVERY_MODE_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_RETURNREASONCODEID",
																"type": "String"
															},
															"sink": {
																"name": "PURCHTABLE_RETURNREASONCODEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_WORKERPURCHPLACER",
																"type": "Int64"
															},
															"sink": {
																"name": "PURCHTABLE_WORKERPURCHPLACER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_REQUESTER",
																"type": "Int64"
															},
															"sink": {
																"name": "PURCHTABLE_REQUESTER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_INVOICEACCOUNT",
																"type": "String"
															},
															"sink": {
																"name": "PURCHTABLE_INVOICEACCOUNT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_ORDERACCOUNT",
																"type": "String"
															},
															"sink": {
																"name": "PURCHTABLE_ORDERACCOUNT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_INVENTLOCATIONID",
																"type": "String"
															},
															"sink": {
																"name": "PURCHTABLE_INVENTLOCATIONID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_DELIVERYDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "PURCHLINE_DELIVERYDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_DXCSHIPBYDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "PURCHLINE_DXCSHIPBYDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "CURRENCYCODE",
																"type": "String"
															},
															"sink": {
																"name": "CURRENCYCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DEFAULTDIMENSION",
																"type": "Int64"
															},
															"sink": {
																"name": "DEFAULTDIMENSION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTTABLEMODULE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTTABLEMODULE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_ASSETTRANSTYPEPURCH",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHLINE_ASSETTRANSTYPEPURCH",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_DELIVERYTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHLINE_DELIVERYTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_STOCKEDPRODUCT",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHLINE_STOCKEDPRODUCT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_PURCHSTATUS",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHLINE_PURCHSTATUS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_PURCHASETYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHLINE_PURCHASETYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MCRDROPSHIPMENT",
																"type": "Int32"
															},
															"sink": {
																"name": "MCRDROPSHIPMENT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "DELIVERYPOSTALADDRESS",
																"type": "Int64"
															},
															"sink": {
																"name": "DELIVERYPOSTALADDRESS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "PURCHLINE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_ASSET_TRANSACTION_TYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_ASSET_TRANSACTION_TYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_DELIVERY_TYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_DELIVERY_TYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_DOCUMENT_STATUS",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_DOCUMENT_STATUS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_PURCH_LINE_STATUS",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_PURCH_LINE_STATUS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE5_ENUMVALUELABEL_PURCH_HEADER_STATUS",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE5_ENUMVALUELABEL_PURCH_HEADER_STATUS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE6_ENUMVALUELABEL_PURCHASE_TYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE6_ENUMVALUELABEL_PURCHASE_TYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE7_ENUMVALUELABEL_DROP_SHIPMENT",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE7_ENUMVALUELABEL_DROP_SHIPMENT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVOICEDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVOICEDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "D365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_D365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId,-1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_D365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_D365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_D365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_D365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_D365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "D365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_D365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "default_wait",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 10
									}
								}
							]
						}
					},
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId,-1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "PURCHLINE"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "FACT_PURCHASE_ORDERS"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "PURCHLINE"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prv_max_upd_timestamp": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_purchtable_to_dim_purchase_order')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lkp_curate_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_curate_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prv_max_upd_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_curate_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId,-1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId,-1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "SELECT DATAAREAID,PURCHID,RETURNITEMNUM,MODIFIEDDATETIME as LATESTMODIFIEDDATETIME FROM dbo.PURCHTABLE \n    where DATAAREAID not in ('760', '761')\n    AND MODIFIEDDATETIME > '@{variables('v_prv_max_upd_timestamp')}' ",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PURCHID",
																"type": "String"
															},
															"sink": {
																"name": "PURCHID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RETURNITEMNUM",
																"type": "String"
															},
															"sink": {
																"name": "RETURNITEMNUM",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATESTMODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId,-1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId,-1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('SELECT dataareaid AS DATAAREAID\n     , purchid AS PURCHID\n     , returnitemnum AS RETURNITEMNUM\n     , modifieddatetime AS LATESTMODIFIEDDATETIME\nFROM ',pipeline().globalParameters.d365_dbName,'.','purchtable\nWHERE modifieddatetime > ','''',variables('v_prv_max_upd_timestamp'),'''')\n",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PURCHID",
																"type": "String"
															},
															"sink": {
																"name": "PURCHID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RETURNITEMNUM",
																"type": "String"
															},
															"sink": {
																"name": "RETURNITEMNUM",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATESTMODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId,-1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "default_wait",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 10
									}
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "PURCHTABLE"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_PURCHASE_ORDER"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "PURCHTABLE"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prv_max_upd_timestamp": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_reasontableref_to_dim_reason')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prv_max_upd_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "switch_nala",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId,-1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select\n    rtr1.RECID as RECID,\n    rtr1.DATAAREAID as DATAAREAID,\n    rtr1.REASON as REASON,\n    rtr1.REASONCOMMENT as REASONCOMMENT,\n    rtr1.MODIFIEDDATETIME as MODIFIEDDATETIME,\n    rt1.DESCRIPTION as REASONTABLE_DESCRIPTION,\n    rtr1.MODIFIEDDATETIME as LATEST_MODIFIEDDATETIME\nfrom\n    dbo.REASONTABLEREF rtr1\n    left join dbo.REASONTABLE rt1 on rtr1.DATAAREAID = rt1.DATAAREAID\n    and rtr1.REASON = rt1.REASON\nwhere\n    convert(\n        varchar(25),\n        isnull(rtr1.MODIFIEDDATETIME, '1950-01-01'),\n        120\n    ) > '@{variables('v_prv_max_upd_timestamp')}';",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "Int64"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "REASON",
																"type": "String"
															},
															"sink": {
																"name": "REASON",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "REASONCOMMENT",
																"type": "String"
															},
															"sink": {
																"name": "REASONCOMMENT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "REASONTABLE_DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "REASONTABLE_DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId,-1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId,-1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select\n    rtr1.recid as RECID,\n    rtr1.dataareaid as DATAAREAID,\n    rtr1.reason as REASON,\n    rtr1.reasoncomment as REASONCOMMENT,\n    rtr1.modifieddatetime as MODIFIEDDATETIME,\n    rt1.description as REASONTABLE_DESCRIPTION,\n    rtr1.modifieddatetime as latest_modifieddatetime\nfrom\n    dbo.reasontableref rtr1\n    left join dbo.reasontable rt1 on rtr1.dataareaid = rt1.dataareaid\n    and rtr1.reason = rt1.reason\nwhere\n    convert(\n        varchar(25),\n        isnull(rtr1.modifieddatetime, '1950-01-01'),\n        120\n    ) > '@{variables('v_prv_max_upd_timestamp')}';",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "Int64"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "REASON",
																"type": "String"
															},
															"sink": {
																"name": "REASON",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "REASONCOMMENT",
																"type": "String"
															},
															"sink": {
																"name": "REASONCOMMENT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "REASONTABLE_DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "REASONTABLE_DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId,-1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId,-1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "REASONTABLEREF"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "REASONTABLEREF"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_REASON"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prv_max_upd_timestamp": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}