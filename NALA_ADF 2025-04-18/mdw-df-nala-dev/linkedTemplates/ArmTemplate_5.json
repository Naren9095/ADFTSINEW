{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "mdw-df-nala-dev"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_vendpaymmodetable_to_dim_vendor_payment_mode')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_curate_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_curate_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prv_max_upd_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "switch_nala",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select\n    vpmt1.DATAAREAID as DATAAREAID,\n    vpmt1.PAYMMODE as PAYMMODE,\n    vpmt1.NAME as NAME,\n    vpmt1.MODIFIEDDATETIME as LATEST_MODIFIEDDATETIME\nfrom\n    dbo.VENDPAYMMODETABLE vpmt1\nwhere\n    convert(\n        varchar(25),\n        isnull (vpmt1.MODIFIEDDATETIME, '1950-01-01'),\n        120\n    ) > '@{variables('v_prv_max_upd_timestamp')}'",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PAYMMODE",
																"type": "String"
															},
															"sink": {
																"name": "PAYMMODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('select\n    vpmt1.dataareaid as DATAAREAID,\n    vpmt1.paymmode as PAYMMODE,\n    vpmt1.name as NAME,\n    vpmt1.modifieddatetime as LATEST_MODIFIEDDATETIME\nfrom \n    ',pipeline().globalParameters.d365_dbName,'.','vendpaymmodetable vpmt1\nwhere\n    convert(\n        varchar(25),\n        isnull (vpmt1.modifieddatetime, ''1950-01-01''),\n        120\n    ) > ','''',variables('v_prv_max_upd_timestamp'),'''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PAYMMODE",
																"type": "String"
															},
															"sink": {
																"name": "PAYMMODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId,-1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_VENDOR_PAYMENT_MODE"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "VENDPAYMMODETABLE"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "VENDPAYMMODETABLE"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prv_max_upd_timestamp": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_vendtable_to_dim_vendor')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prv_max_upd_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')\n\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "switch_nala",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select     vt1.DATAAREAID,     vt1.ACCOUNTNUM,     vt1.INVOICEACCOUNT,     vt1.PARTY,     dpt1.NAME as VENDORNAME,     vt1.DEFAULTDIMENSION,     case         when vt1.DEFAULTDIMENSION <> 0         and coalesce(def1.BUSINESS_UNIT, '') = '' then 'No Business Unit Specified'         when vt1.DEFAULTDIMENSION = 0 then 'No Data Available'         else def1.BUSINESS_UNIT     end as BUSINESSUNITID,     case         when vt1.DEFAULTDIMENSION <> 0         and coalesce(dpt3.BUSINESS_UNIT_DESCRIPTION, '') = '' then 'No Business Unit Specified'         when vt1.DEFAULTDIMENSION = 0 then 'No Data Available'         else dpt3.BUSINESS_UNIT_DESCRIPTION     end as BUSINESSUNIT,     vt1.CURRENCY,     c1.TXT as VENDORCURRENCYNAME,     vt1.BLOCKED,     vt1.ITEMBUYERGROUPID,     ig1.DESCRIPTION as BUYERGROUP,     vt1.VENDGROUP,     vg1.NAME as VENDORGROUPNAME,     vt1.USECASHDISC,     vt1.CASHDISC,     cd1.DESCRIPTION AS DEFAULTCASHDISCOUNT,     vt1.DLVTERM,     dlt1.TXT as DEFAULTDELIVERYTERMS,     vt1.PAYMMODE,     vpmt1.NAME as DEFAULTPAYMENTMODE,     vt1.PAYMSPEC,     vpms1.NAME as DEFAULTPAYMENTSPECIFICATION,     vt1.PAYMTERMID,     pt1.DESCRIPTION AS DEFAULTPAYMENTTERMS,     pt1.NUMOFDAYS AS PAYMENTTERMSNUMBEROFDAYS,     pt1.NUMOFMONTHS AS PAYMENTTERMSNUMBEROFMONTHS,     vt1.INVENTSITEID,     IST1.NAME as DEFAULTSITE,     vt1.TAXGROUP,     tgh1.TAXGROUPNAME,     vt1.TAXIDTYPE,     vt1.ETHNICORIGINID,     heo1.DESCRIPTION as ETHNICORIGINDESCRIPTION,     vt1.SMALLBUSINESS,     vt1.DISABLEDOWNED,     vt1.FEMALEOWNED,     vt1.FOREIGNENTITYINDICATOR,     vt1.LOCALLYOWNED,     vt1.VETERANOWNED,     lpa1.STREET,     lpa1.CITY,     lpa1.STATE,     lpa1.ZIPCODE,     lpa1.COUNTRYREGIONID,     (         SELECT             MAX(LastUpdateDate)         FROM             (                 VALUES                     (vt1.MODIFIEDDATETIME),                     (isnull (dpt1.MODIFIEDDATETIME, '1950-01-01')),                     (isnull (c1.MODIFIEDDATETIME, '1950-01-01')),                     (isnull (dpt2.MODIFIEDDATETIME, '1950-01-01')),                     (                         isnull (                             def1.DEFAULTDIMENSION_MODIFIEDDATETIME,                             '1950-01-01'                         )                     )             ) AS UpdateDate (LastUpdateDate)     ) AS MODIFIEDDATETIME from     dbo.VENDTABLE vt1     left join dbo.INVENTBUYERGROUP ig1 on vt1.DATAAREAID = ig1.DATAAREAID     and vt1.ITEMBUYERGROUPID = ig1.GROUP_     left join dbo.DLVTERM dlt1 on vt1.DLVTERM = dlt1.code     and vt1.DATAAREAID = dlt1.DATAAREAID     left join dbo.VENDGROUP vg1 on vt1.DATAAREAID = vg1.DATAAREAID     and vt1.VENDGROUP = vg1.VENDGROUP     left join dbo.CASHDISC cd1 on vt1.DATAAREAID = cd1.DATAAREAID     and vt1.CASHDISC = cd1.CASHDISCCODE     left join dbo.VENDPAYMMODETABLE vpmt1 on vt1.PAYMMODE = vpmt1.PAYMMode     and vt1.DATAAREAID = vpmt1.DATAAREAID     left join dbo.VENDPAYMMODESPEC vpms1 on vt1.PAYMMODE = vpms1.PAYMMode     and vt1.DATAAREAID = vpms1.DATAAREAID     and vt1.PAYMSPEC = vpms1.SPECIFICATION     left join dbo.INVENTSITE IST1 on vt1.INVENTSITEID = IST1.SITEID     AND vt1.DATAAREAID = IST1.DATAAREAID     left join dbo.HCMETHNICORIGIN heo1 on vt1.ETHNICORIGINID = heo1.ETHNICORIGINID     left join dbo.DIRPARTYTABLE dpt1 on vt1.PARTY = dpt1.RECID     left join dbo.CURRENCY c1 on vt1.CURRENCY = c1.CURRENCYCODE     left join dbo.HCMWORKER hw1 on vt1.PARTY = hw1.RECID     left join dbo.DIRPARTYTABLE dpt2 on hw1.PERSON = dpt2.RECID     left join dbo.PAYMTERM pt1 on vt1.DATAAREAID = pt1.DATAAREAID     and vt1.PAYMTERMID = pt1.PAYMTERMID     left join (         select distinct             vt1.DEFAULTDIMENSION,             max(                 case                     when da1.NAME = 'BusinessUnit' then davsi1.DISPLAYVALUE                     else null                 end             ) over (                 partition by                     davsi1.DIMENSIONATTRIBUTEVALUESET             ) as BUSINESS_UNIT,             max(                 case                     when da1.NAME = 'C_Sales_Channel' then davsi1.DISPLAYVALUE                     else null                 end             ) over (                 partition by                     vt1.DEFAULTDIMENSION             ) as C_SALES_CHANNEL,             min(                 case                     when da1.NAME = 'C_Sales_Channel' then desc1.DESCRIPTION                     else null                 end             ) over (                 partition by                     vt1.DEFAULTDIMENSION             ) as C_SALES_CHANNEL_DESCRIPTION,             max(                 (                     select                         max(i)                     from                         (                             values                                 (davsi1.MODIFIEDDATETIME),                                 (dav1.MODIFIEDDATETIME),                                 (da1.MODIFIEDDATETIME),                                 (desc1.DESC_MODIFIEDDATETIME)                         ) AS T (i)                 )             ) over (                 partition by                     vt1.DEFAULTDIMENSION             ) as DEFAULTDIMENSION_MODIFIEDDATETIME         from             (                 select distinct                     DEFAULTDIMENSION                 from                     dbo.VENDTABLE             ) vt1             left join dbo.DIMENSIONATTRIBUTEVALUESETITEM davsi1 on vt1.DEFAULTDIMENSION = davsi1.DIMENSIONATTRIBUTEVALUESET             left join dbo.DIMENSIONATTRIBUTEVALUE dav1 on davsi1.DIMENSIONATTRIBUTEVALUE = dav1.RECID             left join dbo.DIMENSIONATTRIBUTE da1 on dav1.DIMENSIONATTRIBUTE = da1.RECID             left join (                 select                     dft1.VALUE,                     da2.NAME,                     dft1.DESCRIPTION,                     (                         select                             max(i)                         from                             (                                 values                                     (dft1.MODIFIEDDATETIME),                                     (dadc1.MODIFIEDDATETIME),                                     (da2.MODIFIEDDATETIME)                             ) AS T (i)                     ) as DESC_MODIFIEDDATETIME                 from                     dbo.DIMENSIONFINANCIALTAG dft1                     left join dbo.DIMENSIONATTRIBUTEDIRCATEGORY dadc1 on dft1.FINANCIALTAGCATEGORY = dadc1.DIRCATEGORY                     left join dbo.DIMENSIONATTRIBUTE da2 on dadc1.DIMENSIONATTRIBUTE = da2.RECID             ) desc1 on davsi1.DISPLAYVALUE = desc1.VALUE             and da1.NAME = desc1.NAME     ) def1 on vt1.DEFAULTDIMENSION = def1.DEFAULTDIMENSION     left join (         select             OMOPERATINGUNITNUMBER,             max(NAME) as BUSINESS_UNIT_DESCRIPTION         from             dbo.DIRPARTYTABLE         group by             OMOPERATINGUNITNUMBER     ) dpt3 on def1.BUSINESS_UNIT = dpt3.OMOPERATINGUNITNUMBER     left join dbo.TAXGROUPHEADING tgh1 on vt1.DATAAREAID = tgh1.DATAAREAID     and vt1.TAXGROUP = tgh1.TAXGROUP     left join (         select             LOCATION,             STREET,             CITY,             STATE,             ZIPCODE,             COUNTRYREGIONID,             TIMEZONE,             row_number() over (                 partition by                     LOCATION                 order by                     VALIDTO             ) as ROW_NUM         from             dbo.LOGISTICSPOSTALADDRESS     ) lpa1 on lpa1.ROW_NUM = 1     and dpt1.PRIMARYADDRESSLOCATION = lpa1.LOCATION     left join dbo.TIMEZONESLIST tzl1 on lpa1.TIMEZONE = tzl1.TZENUM     left join dbo.LOGISTICSLOCATION ll1 on lpa1.LOCATION = ll1.RECID     left join dbo.LOGISTICSELECTRONICADDRESS lea1 on dpt1.PRIMARYCONTACTEMAIL = lea1.RECID     left join dbo.LOGISTICSELECTRONICADDRESS lea2 on dpt1.PRIMARYCONTACTFAX = lea2.RECID     left join dbo.LOGISTICSELECTRONICADDRESS lea3 on dpt1.PRIMARYCONTACTPHONE = lea3.RECID where \nCONVERT(VARCHAR(25), (         SELECT             MAX(LastUpdateDate)         FROM             (                 VALUES                     (vt1.MODIFIEDDATETIME),                     (isnull (dpt1.MODIFIEDDATETIME, '1950-01-01')),                     (isnull (c1.MODIFIEDDATETIME, '1950-01-01')),                     (isnull (dpt2.MODIFIEDDATETIME, '1950-01-01')),                     (                         isnull (                             def1.DEFAULTDIMENSION_MODIFIEDDATETIME,                             '1950-01-01'                         )                     )             ) AS UpdateDate (LastUpdateDate)     ), 120) > '@{variables('v_prv_max_upd_timestamp')}' ",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ACCOUNTNUM",
																"type": "String"
															},
															"sink": {
																"name": "ACCOUNTNUM",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVOICEACCOUNT",
																"type": "String"
															},
															"sink": {
																"name": "INVOICEACCOUNT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PARTY",
																"type": "Int64"
															},
															"sink": {
																"name": "PARTY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "VENDORNAME",
																"type": "String"
															},
															"sink": {
																"name": "VENDORNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DEFAULTDIMENSION",
																"type": "Int64"
															},
															"sink": {
																"name": "DEFAULTDIMENSION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "BUSINESSUNITID",
																"type": "String"
															},
															"sink": {
																"name": "BUSINESSUNITID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "BUSINESSUNIT",
																"type": "String"
															},
															"sink": {
																"name": "BUSINESSUNIT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CURRENCY",
																"type": "String"
															},
															"sink": {
																"name": "CURRENCY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "VENDORCURRENCYNAME",
																"type": "String"
															},
															"sink": {
																"name": "VENDORCURRENCYNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "BLOCKED",
																"type": "Int32"
															},
															"sink": {
																"name": "BLOCKED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "ITEMBUYERGROUPID",
																"type": "String"
															},
															"sink": {
																"name": "ITEMBUYERGROUPID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "BUYERGROUP",
																"type": "String"
															},
															"sink": {
																"name": "BUYERGROUP",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "VENDGROUP",
																"type": "String"
															},
															"sink": {
																"name": "VENDGROUP",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "VENDORGROUPNAME",
																"type": "String"
															},
															"sink": {
																"name": "VENDORGROUPNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "USECASHDISC",
																"type": "Int32"
															},
															"sink": {
																"name": "USECASHDISC",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "CASHDISC",
																"type": "String"
															},
															"sink": {
																"name": "CASHDISC",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DEFAULTCASHDISCOUNT",
																"type": "String"
															},
															"sink": {
																"name": "DEFAULTCASHDISCOUNT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DLVTERM",
																"type": "String"
															},
															"sink": {
																"name": "DLVTERM",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DEFAULTDELIVERYTERMS",
																"type": "String"
															},
															"sink": {
																"name": "DEFAULTDELIVERYTERMS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PAYMMODE",
																"type": "String"
															},
															"sink": {
																"name": "PAYMMODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DEFAULTPAYMENTMODE",
																"type": "String"
															},
															"sink": {
																"name": "DEFAULTPAYMENTMODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PAYMSPEC",
																"type": "String"
															},
															"sink": {
																"name": "PAYMSPEC",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DEFAULTPAYMENTSPECIFICATION",
																"type": "String"
															},
															"sink": {
																"name": "DEFAULTPAYMENTSPECIFICATION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PAYMTERMID",
																"type": "String"
															},
															"sink": {
																"name": "PAYMTERMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DEFAULTPAYMENTTERMS",
																"type": "String"
															},
															"sink": {
																"name": "DEFAULTPAYMENTTERMS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PAYMENTTERMSNUMBEROFDAYS",
																"type": "Int32"
															},
															"sink": {
																"name": "PAYMENTTERMSNUMBEROFDAYS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PAYMENTTERMSNUMBEROFMONTHS",
																"type": "Int32"
															},
															"sink": {
																"name": "PAYMENTTERMSNUMBEROFMONTHS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTSITEID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTSITEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DEFAULTSITE",
																"type": "String"
															},
															"sink": {
																"name": "DEFAULTSITE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TAXGROUP",
																"type": "String"
															},
															"sink": {
																"name": "TAXGROUP",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TAXGROUPNAME",
																"type": "String"
															},
															"sink": {
																"name": "TAXGROUPNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TAXIDTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "TAXIDTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ETHNICORIGINID",
																"type": "String"
															},
															"sink": {
																"name": "ETHNICORIGINID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ETHNICORIGINDESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "ETHNICORIGINDESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SMALLBUSINESS",
																"type": "Int32"
															},
															"sink": {
																"name": "SMALLBUSINESS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "DISABLEDOWNED",
																"type": "Int32"
															},
															"sink": {
																"name": "DISABLEDOWNED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "FEMALEOWNED",
																"type": "Int32"
															},
															"sink": {
																"name": "FEMALEOWNED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "FOREIGNENTITYINDICATOR",
																"type": "Int32"
															},
															"sink": {
																"name": "FOREIGNENTITYINDICATOR",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LOCALLYOWNED",
																"type": "Int32"
															},
															"sink": {
																"name": "LOCALLYOWNED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "VETERANOWNED",
																"type": "Int32"
															},
															"sink": {
																"name": "VETERANOWNED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "STREET",
																"type": "String"
															},
															"sink": {
																"name": "STREET",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CITY",
																"type": "String"
															},
															"sink": {
																"name": "CITY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "STATE",
																"type": "String"
															},
															"sink": {
																"name": "STATE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ZIPCODE",
																"type": "String"
															},
															"sink": {
																"name": "ZIPCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "COUNTRYREGIONID",
																"type": "String"
															},
															"sink": {
																"name": "COUNTRYREGIONID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select vt1.dataareaid AS DATAAREAID\n     , vt1.accountnum AS ACCOUNTNUM\n     , vt1.invoiceaccount AS INVOICEACCOUNT\n     , vt1.party AS PARTY\n     , dpt1.name        AS VENDORNAME\n     , vt1.defaultdimension AS DEFAULTDIMENSION\n     , case\n           when vt1.defaultdimension <> 0\n               and coalesce(def1.business_unit, '') = '' then\n               'no business unit specified'\n           when vt1.defaultdimension = 0 then\n               'no data available'\n           else\n               def1.business_unit\n       end              AS BUSINESSUNITID\n     , case\n           when vt1.defaultdimension <> 0\n               and coalesce(dpt3.business_unit_description, '') = '' then\n               'no business unit specified'\n           when vt1.defaultdimension = 0 then\n               'no data available'\n           else\n               dpt3.business_unit_description\n       end              AS BUSINESSUNIT\n     , vt1.currency AS CURRENCY\n     , c1.txt           AS VENDORCURRENCYNAME\n     , vt1.blocked AS BLOCKED\n     , vt1.itembuyergroupid AS ITEMBUYERGROUPID\n     , ig1.description  AS BUYERGROUP\n     , vt1.vendgroup AS VENDGROUP\n     , vg1.name         AS VENDORGROUPNAME\n     , vt1.usecashdisc AS USECASHDISC\n     , vt1.cashdisc AS CASHDISC\n     , cd1.description  AS DEFAULTCASHDISCOUNT\n     , vt1.dlvterm AS DLVTERM\n     , dlt1.txt         AS DEFAULTDELIVERYTERMS\n     , vt1.paymmode AS PAYMMODE\n     , vpmt1.name       AS DEFAULTPAYMENTMODE\n     , vt1.paymspec AS PAYMSPEC\n     , vpms1.name       AS DEFAULTPAYMENTSPECIFICATION\n     , vt1.paymtermid AS PAYMTERMID\n     , pt1.description  AS DEFAULTPAYMENTTERMS\n     , pt1.numofdays    AS PAYMENTTERMSNUMBEROFDAYS\n     , pt1.numofmonths  AS PAYMENTTERMSNUMBEROFMONTHS\n     , vt1.inventsiteid AS INVENTSITEID\n     , ist1.name        AS DEFAULTSITE\n     , vt1.taxgroup AS TAXGROUP\n     , tgh1.taxgroupname AS TAXGROUPNAME\n     , vt1.taxidtype AS TAXIDTYPE \n     , vt1.ethnicoriginid AS ETHNICORIGINID\n     , heo1.description AS ETHNICORIGINDESCRIPTION\n     , vt1.smallbusiness AS SMALLBUSINESS\n     , vt1.disabledowned AS DISABLEDOWNED\n     , vt1.femaleowned AS FEMALEOWNED\n     , vt1.foreignentityindicator AS FOREIGNENTITYINDICATOR\n     , vt1.locallyowned AS LOCALLYOWNED\n     , vt1.veteranowned AS VETERANOWNED\n     , lpa1.street AS STREET\n     , lpa1.city AS CITY\n     , lpa1.state AS STATE\n     , lpa1.zipcode AS ZIPCODE\n     , lpa1.countryregionid AS COUNTRYREGIONID\n     , (\n           select max(lastupdatedate)\n           from\n           (\n               values\n                   (vt1.modifieddatetime)\n                 , (isnull(dpt1.modifieddatetime, '1950-01-01'))\n                 , (isnull(c1.modifieddatetime, '1950-01-01'))\n                 , (isnull(dpt2.modifieddatetime, '1950-01-01'))\n                 , (isnull(def1.defaultdimension_modifieddatetime, '1950-01-01'))\n           ) AS UPDATEDATE (lastupdatedate)\n       )                as MODIFIEDDATETIME\nfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.vendtable                       vt1\nLEFT join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.inventbuyergroup           ig1\n          on vt1.dataareaid = ig1.dataareaid\n              and vt1.itembuyergroupid = ig1.[group]\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dlvterm                    dlt1\n          on vt1.dlvterm = dlt1.code\n              and vt1.dataareaid = dlt1.dataareaid\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.vendgroup                  vg1\n          on vt1.dataareaid = vg1.dataareaid\n              and vt1.vendgroup = vg1.vendgroup\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.cashdisc                   cd1\n          on vt1.dataareaid = cd1.dataareaid\n              and vt1.cashdisc = cd1.cashdisccode\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.vendpaymmodetable          vpmt1\n          on vt1.paymmode = vpmt1.paymmode\n              and vt1.dataareaid = vpmt1.dataareaid\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.vendpaymmodespec           vpms1\n          on vt1.paymmode = vpms1.paymmode\n              and vt1.dataareaid = vpms1.dataareaid\n              and vt1.paymspec = vpms1.specification\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.inventsite                 ist1\n          on vt1.inventsiteid = ist1.siteid\n              and vt1.dataareaid = ist1.dataareaid\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.hcmethnicorigin            heo1\n          on vt1.ethnicoriginid = heo1.ethnicoriginid\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dirpartytable              dpt1\n          on vt1.party = dpt1.recid\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.currency                   c1\n          on vt1.currency = c1.currencycode\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.hcmworker                  hw1\n          on vt1.party = hw1.recid\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dirpartytable              dpt2\n          on hw1.person = dpt2.recid\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.paymterm                   pt1\n          on vt1.dataareaid = pt1.dataareaid\n              and vt1.paymtermid = pt1.paymtermid\nleft join\n(\n    select distinct\n           vt1.defaultdimension\n         , max(   case\n                      when da1.name = 'businessunit' then\n                          davsi1.displayvalue\n                      else\n                          null\n                  end\n              ) over (partition by davsi1.dimensionattributevalueset) as business_unit\n         , max(   case\n                      when da1.name = 'c_sales_channel' then\n                          davsi1.displayvalue\n                      else\n                          null\n                  end\n              ) over (partition by vt1.defaultdimension)              as c_sales_channel\n         , min(   case\n                      when da1.name = 'c_sales_channel' then\n                          desc1.description\n                      else\n                          null\n                  end\n              ) over (partition by vt1.defaultdimension)              as c_sales_channel_description\n         , max((\n                   select max(i)\n                   from\n                   (\n                       values\n                           (davsi1.modifieddatetime)\n                         , (dav1.modifieddatetime)\n                         , (da1.modifieddatetime)\n                         , (desc1.desc_modifieddatetime)\n                   ) as t (i)\n               )\n              ) over (partition by vt1.defaultdimension)              as defaultdimension_modifieddatetime\n    from\n    (select distinct defaultdimension from dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.vendtable) vt1\n    left join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattributevaluesetitem          davsi1\n              on vt1.defaultdimension = davsi1.dimensionattributevalueset\n    left join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattributevalue                 dav1\n              on davsi1.dimensionattributevalue = dav1.recid\n    left join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattribute                      da1\n              on dav1.dimensionattribute = da1.recid\n    left join\n    (\n        select dft1.value\n             , da2.name\n             , dft1.description\n             , (\n                   select max(i)\n                   from\n                   (\n                       values\n                           (dft1.modifieddatetime)\n                         , (dadc1.modifieddatetime)\n                         , (da2.modifieddatetime)\n                   ) as t (i)\n               ) as desc_modifieddatetime\n        from dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionfinancialtag              dft1\n        left join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattributedircategory dadc1\n                  on dft1.financialtagcategory = dadc1.dircategory\n        left join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattribute            da2\n                  on dadc1.dimensionattribute = da2.recid\n    )                                                     desc1\n    on davsi1.displayvalue = desc1.value\n        and da1.name = desc1.name\n)                                        def1\non vt1.defaultdimension = def1.defaultdimension\nleft join\n(\n    SELECT oou.omoperatingunitnumber\n\t,MAX(dpt.[name]) AS business_unit_description\nfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dirpartytable dpt\nLEFT OUTER JOIN dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dirorganizationbase dob ON dpt.recid = dob.recid\nLEFT OUTER JOIN dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.ominternalorganization oio ON oio.recid = dob.recid\nLEFT OUTER join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.omoperatingunit oou ON oou.recid = oio.recid\nGROUP BY oou.omoperatingunitnumber\n)                                        dpt3\non def1.business_unit = dpt3.omoperatingunitnumber\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.taxgroupheading            tgh1\n          on vt1.dataareaid = tgh1.dataareaid\n              and vt1.taxgroup = tgh1.taxgroup\nleft join\n(\n    select location\n         , street\n         , city\n         , state\n         , zipcode\n         , countryregionid\n         , timezone\n         , row_number() over (partition by location order by validto) as row_num\n    from dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.logisticspostaladdress\n)                                        lpa1\non lpa1.row_num = 1\n    and dpt1.primaryaddresslocation = lpa1.location\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timezoneslist              tzl1\n          on lpa1.timezone = tzl1.tzenum\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.logisticslocation          ll1\n          on lpa1.location = ll1.recid\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.logisticselectronicaddress lea1\n          on dpt1.primarycontactemail = lea1.recid\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.logisticselectronicaddress lea2\n          on dpt1.primarycontactfax = lea2.recid\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.logisticselectronicaddress lea3\n          on dpt1.primarycontactphone = lea3.recid\nwhere convert(\n                 varchar(25)\n               , (\n                     select max(lastupdatedate)\n                     from\n                     (\n                         values\n                             (vt1.modifieddatetime)\n                           , (isnull(dpt1.modifieddatetime, '1950-01-01'))\n                           , (isnull(c1.modifieddatetime, '1950-01-01'))\n                           , (isnull(dpt2.modifieddatetime, '1950-01-01'))\n                           , (isnull(def1.defaultdimension_modifieddatetime, '1950-01-01'))\n                     ) as updatedate (lastupdatedate)\n                 )\n               , 120\n             ) > '@{variables('v_prv_max_upd_timestamp')}' ",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ACCOUNTNUM",
																"type": "String"
															},
															"sink": {
																"name": "ACCOUNTNUM",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVOICEACCOUNT",
																"type": "String"
															},
															"sink": {
																"name": "INVOICEACCOUNT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PARTY",
																"type": "Int64"
															},
															"sink": {
																"name": "PARTY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "VENDORNAME",
																"type": "String"
															},
															"sink": {
																"name": "VENDORNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DEFAULTDIMENSION",
																"type": "Int64"
															},
															"sink": {
																"name": "DEFAULTDIMENSION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "BUSINESSUNITID",
																"type": "String"
															},
															"sink": {
																"name": "BUSINESSUNITID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "BUSINESSUNIT",
																"type": "String"
															},
															"sink": {
																"name": "BUSINESSUNIT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CURRENCY",
																"type": "String"
															},
															"sink": {
																"name": "CURRENCY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "VENDORCURRENCYNAME",
																"type": "String"
															},
															"sink": {
																"name": "VENDORCURRENCYNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "BLOCKED",
																"type": "Int32"
															},
															"sink": {
																"name": "BLOCKED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "ITEMBUYERGROUPID",
																"type": "String"
															},
															"sink": {
																"name": "ITEMBUYERGROUPID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "BUYERGROUP",
																"type": "String"
															},
															"sink": {
																"name": "BUYERGROUP",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "VENDGROUP",
																"type": "String"
															},
															"sink": {
																"name": "VENDGROUP",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "VENDORGROUPNAME",
																"type": "String"
															},
															"sink": {
																"name": "VENDORGROUPNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "USECASHDISC",
																"type": "Int32"
															},
															"sink": {
																"name": "USECASHDISC",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "CASHDISC",
																"type": "String"
															},
															"sink": {
																"name": "CASHDISC",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DEFAULTCASHDISCOUNT",
																"type": "String"
															},
															"sink": {
																"name": "DEFAULTCASHDISCOUNT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DLVTERM",
																"type": "String"
															},
															"sink": {
																"name": "DLVTERM",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DEFAULTDELIVERYTERMS",
																"type": "String"
															},
															"sink": {
																"name": "DEFAULTDELIVERYTERMS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PAYMMODE",
																"type": "String"
															},
															"sink": {
																"name": "PAYMMODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DEFAULTPAYMENTMODE",
																"type": "String"
															},
															"sink": {
																"name": "DEFAULTPAYMENTMODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PAYMSPEC",
																"type": "String"
															},
															"sink": {
																"name": "PAYMSPEC",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DEFAULTPAYMENTSPECIFICATION",
																"type": "String"
															},
															"sink": {
																"name": "DEFAULTPAYMENTSPECIFICATION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PAYMTERMID",
																"type": "String"
															},
															"sink": {
																"name": "PAYMTERMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DEFAULTPAYMENTTERMS",
																"type": "String"
															},
															"sink": {
																"name": "DEFAULTPAYMENTTERMS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PAYMENTTERMSNUMBEROFDAYS",
																"type": "Int32"
															},
															"sink": {
																"name": "PAYMENTTERMSNUMBEROFDAYS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PAYMENTTERMSNUMBEROFMONTHS",
																"type": "Int32"
															},
															"sink": {
																"name": "PAYMENTTERMSNUMBEROFMONTHS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTSITEID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTSITEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DEFAULTSITE",
																"type": "String"
															},
															"sink": {
																"name": "DEFAULTSITE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TAXGROUP",
																"type": "String"
															},
															"sink": {
																"name": "TAXGROUP",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TAXGROUPNAME",
																"type": "String"
															},
															"sink": {
																"name": "TAXGROUPNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TAXIDTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "TAXIDTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ETHNICORIGINID",
																"type": "String"
															},
															"sink": {
																"name": "ETHNICORIGINID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ETHNICORIGINDESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "ETHNICORIGINDESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SMALLBUSINESS",
																"type": "Int32"
															},
															"sink": {
																"name": "SMALLBUSINESS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "DISABLEDOWNED",
																"type": "Int32"
															},
															"sink": {
																"name": "DISABLEDOWNED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "FEMALEOWNED",
																"type": "Int32"
															},
															"sink": {
																"name": "FEMALEOWNED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "FOREIGNENTITYINDICATOR",
																"type": "Int32"
															},
															"sink": {
																"name": "FOREIGNENTITYINDICATOR",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LOCALLYOWNED",
																"type": "Int32"
															},
															"sink": {
																"name": "LOCALLYOWNED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "VETERANOWNED",
																"type": "Int32"
															},
															"sink": {
																"name": "VETERANOWNED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "STREET",
																"type": "String"
															},
															"sink": {
																"name": "STREET",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CITY",
																"type": "String"
															},
															"sink": {
																"name": "CITY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "STATE",
																"type": "String"
															},
															"sink": {
																"name": "STATE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ZIPCODE",
																"type": "String"
															},
															"sink": {
																"name": "ZIPCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "COUNTRYREGIONID",
																"type": "String"
															},
															"sink": {
																"name": "COUNTRYREGIONID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "raw_load_failure_notification_d365",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nd365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "raw_load_failure_notification_d365",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "default_wait",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "VENDTABLE"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "VENDTABLE"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_VENDOR"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prv_max_upd_timestamp": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_vendtrans_to_fact_vendor_transactions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prv_max_upd_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId,-1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId,-1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select\n    vt1.RECID as RECID,\n    vt1.ACCOUNTNUM as ACCOUNTNUM,\n    vt1.APPROVER as APPROVER,\n    vt1.CASHDISCCODE as CASHDISCCODE,\n    vt1.CURRENCYCODE as CURRENCYCODE,\n    vt1.DEFAULTDIMENSION as DEFAULTDIMENSION,\n    vt1.PAYMMODE as PAYMMODE,\n    vt1.PAYMSPEC as PAYMSPEC,\n    vt1.REMITTANCELOCATION as REMITTANCELOCATION,\n    case\n        when vt1.TRANSTYPE in (3, 14) then vt1.duedate\n        when vt1.CORRECT not in (3, 14) then vt1.duedate\n        else null\n    end as ALIGNEDDUEDATE,\n    vt1.APPROVEDDATE as APPROVEDDATE,\n    vt1.CLOSED as CLOSED,\n    vt1.DUEDATE as DUEDATE,\n    vt1.LASTSETTLEDATE as LASTSETTLEDATE,\n    vt1.TRANSDATE as TRANSDATE,\n    vt1.DOCUMENTDATE as DOCUMENTDATE,\n    vt1.APPROVED as APPROVED,\n    vt1.CORRECT as CORRECT,\n    vt1.TRANSTYPE as TRANSTYPE,\n    vt1.DATAAREAID as DATAAREAID,\n    vt1.DOCUMENTNUM as DOCUMENTNUM,\n    vt1.INVOICE as INVOICE,\n    vt1.LASTSETTLEVOUCHER as LASTSETTLEVOUCHER,\n    vt1.VOUCHER as VOUCHER,\n    vt1.AMOUNTCUR as AMOUNTCUR,\n    vt1.AMOUNTMST as AMOUNTMST,\n    vt1.SETTLEAMOUNTCUR as SETTLEAMOUNTCUR,\n    vt1.SETTLEAMOUNTMST as SETTLEAMOUNTMST,\n    vt1.SETTLEAMOUNTREPORTING as SETTLEAMOUNTREPORTING,\n    vt1.MODIFIEDDATETIME as VENDTRANS_MODIFIEDDATETIME,\n    vt1.PAYMREFERENCE as PAYMREFERENCE,\n    tet1.ENUMVALUELABEL as TRANSACTIONTYPE,\n    tet2.ENUMVALUELABEL as ISAPPROVED,\n    tet3.ENUMVALUELABEL as ISREVERSAL,\n    bat1.TRANSDATE as CHECKDATE,\n    vij1.PAYMENT as PAYMENTTERMS,\n    vij1.INVOICEDATE as INVOICEDATE,\n    vij1.MODIFIEDDATETIME as VENDINVOICEJOUR_MODIFIEDDATETIME,\n    pmt1.NUMOFDAYS as NUMOFDAYS,\n    vs1.TRANSRECID as TRANSRECID,\n    (\n        select\n            max(LASTUPDATEDATE)\n        from\n            (\n                VALUES\n                    (vt1.MODIFIEDDATETIME),\n                    (isnull (vij1.MODIFIEDDATETIME, '1950-01-01'))\n            ) as UpdateDate (LASTUPDATEDATE)\n    ) as LATEST_MODIFIEDDATETIME\nfrom\n    dbo.VENDTRANS vt1\n    left join (\n        select\n            recid,\n            duedate\n        from\n            dbo.VENDTRANS\n    ) vtm1 on vt1.RECID = vtm1.recid\n    left join (\n        select\n            PAYMREFERENCE,\n            max(TRANSDATE) as TRANSDATE\n        from\n            dbo.BANKACCOUNTTRANS bat1\n        where\n            bat1.BANKTRANSTYPE = 'Check'\n        group by\n            PAYMREFERENCE\n    ) bat1 on vt1.PAYMREFERENCE = bat1.PAYMREFERENCE\n    /*and\n    vt1.PAYMREFERENCE is not null*/\n    left join dbo.VENDINVOICEJOUR vij1 on vt1.VOUCHER = vij1.LEDGERVOUCHER\n    and vt1.ACCOUNTNUM = vij1.INVOICEACCOUNT\n    and vt1.TRANSDATE = vij1.INVOICEDATE\n    and vt1.INVOICE = vij1.INVOICEID\n    left join dbo.PAYMTERM pmt1 on vij1.DATAAREAID = pmt1.DATAAREAID\n    and vij1.PAYMENT = pmt1.PAYMTERMID\n    left join (select distinct TRANSRECID from dbo.VENDSETTLEMENT) vs1 ON\n\t\tvt1.RECID = vs1.TRANSRECID\n    left join (\n        select\n            ENUMNAME,\n            ENUMVALUE,\n            max(ENUMVALUELABEL) as ENUMVALUELABEL\n        from\n            dbo.TIMEXTENDERENUMTABLE\n        where\n            ENUMNAME = 'LedgerTransType'\n        group by\n            ENUMNAME,\n            ENUMVALUE\n    ) tet1 on vt1.TRANSTYPE = tet1.ENUMVALUE --TRANSACTIONTYPE\n    left join (\n        select\n            ENUMNAME,\n            ENUMVALUE,\n            max(ENUMVALUELABEL) as ENUMVALUELABEL\n        from\n            dbo.TIMEXTENDERENUMTABLE\n        where\n            ENUMNAME = 'NoYes'\n        group by\n            ENUMNAME,\n            ENUMVALUE\n    ) tet2 on vt1.APPROVED = tet2.ENUMVALUE --ISAPPROVED\n    left join (\n        select\n            ENUMNAME,\n            ENUMVALUE,\n            max(ENUMVALUELABEL) as ENUMVALUELABEL\n        from\n            dbo.TIMEXTENDERENUMTABLE\n        where\n            ENUMNAME = 'NoYes'\n        group by\n            ENUMNAME,\n            ENUMVALUE\n    ) tet3 on vt1.CORRECT = tet3.ENUMVALUE --ISREVERSAL\nwhere\n    (\n        select\n            max(LASTUPDATEDATE)\n        from\n            (\n                VALUES\n                    (vt1.MODIFIEDDATETIME),\n                    (isnull (vij1.MODIFIEDDATETIME, '1950-01-01'))\n            ) as UpdateDate (LASTUPDATEDATE)\n    ) > '@{variables('v_prv_max_upd_timestamp')}'",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "Int64"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "ACCOUNTNUM",
																"type": "String"
															},
															"sink": {
																"name": "ACCOUNTNUM",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "APPROVER",
																"type": "Int64"
															},
															"sink": {
																"name": "APPROVER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "CASHDISCCODE",
																"type": "String"
															},
															"sink": {
																"name": "CASHDISCCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CURRENCYCODE",
																"type": "String"
															},
															"sink": {
																"name": "CURRENCYCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DEFAULTDIMENSION",
																"type": "Int64"
															},
															"sink": {
																"name": "DEFAULTDIMENSION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PAYMMODE",
																"type": "String"
															},
															"sink": {
																"name": "PAYMMODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PAYMSPEC",
																"type": "String"
															},
															"sink": {
																"name": "PAYMSPEC",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "REMITTANCELOCATION",
																"type": "Int64"
															},
															"sink": {
																"name": "REMITTANCELOCATION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "ALIGNEDDUEDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "ALIGNEDDUEDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "APPROVEDDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "APPROVEDDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "CLOSED",
																"type": "DateTime"
															},
															"sink": {
																"name": "CLOSED",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DUEDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "DUEDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "LASTSETTLEDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "LASTSETTLEDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TRANSDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "TRANSDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DOCUMENTDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "DOCUMENTDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "APPROVED",
																"type": "Int32"
															},
															"sink": {
																"name": "APPROVED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "CORRECT",
																"type": "Int32"
															},
															"sink": {
																"name": "CORRECT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TRANSTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "TRANSTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DOCUMENTNUM",
																"type": "String"
															},
															"sink": {
																"name": "DOCUMENTNUM",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVOICE",
																"type": "String"
															},
															"sink": {
																"name": "INVOICE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LASTSETTLEVOUCHER",
																"type": "String"
															},
															"sink": {
																"name": "LASTSETTLEVOUCHER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "VOUCHER",
																"type": "String"
															},
															"sink": {
																"name": "VOUCHER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "AMOUNTCUR",
																"type": "Decimal"
															},
															"sink": {
																"name": "AMOUNTCUR",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "AMOUNTMST",
																"type": "Decimal"
															},
															"sink": {
																"name": "AMOUNTMST",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "SETTLEAMOUNTCUR",
																"type": "Decimal"
															},
															"sink": {
																"name": "SETTLEAMOUNTCUR",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "SETTLEAMOUNTMST",
																"type": "Decimal"
															},
															"sink": {
																"name": "SETTLEAMOUNTMST",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "SETTLEAMOUNTREPORTING",
																"type": "Decimal"
															},
															"sink": {
																"name": "SETTLEAMOUNTREPORTING",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "VENDTRANS_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "VENDTRANS_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "PAYMREFERENCE",
																"type": "String"
															},
															"sink": {
																"name": "PAYMREFERENCE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TRANSACTIONTYPE",
																"type": "String"
															},
															"sink": {
																"name": "TRANSACTIONTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ISAPPROVED",
																"type": "String"
															},
															"sink": {
																"name": "ISAPPROVED",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ISREVERSAL",
																"type": "String"
															},
															"sink": {
																"name": "ISREVERSAL",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CHECKDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "CHECKDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "PAYMENTTERMS",
																"type": "String"
															},
															"sink": {
																"name": "PAYMENTTERMS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVOICEDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVOICEDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "VENDINVOICEJOUR_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "VENDINVOICEJOUR_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "NUMOFDAYS",
																"type": "Int32"
															},
															"sink": {
																"name": "NUMOFDAYS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TRANSRECID",
																"type": "Int64"
															},
															"sink": {
																"name": "TRANSRECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId,-1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId,-1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@Concat('select\n    vt1.recid as RECID,\n    vt1.accountnum as ACCOUNTNUM,\n    vt1.approver as APPROVER,\n    vt1.cashdisccode as CASHDISCCODE,\n    vt1.currencycode as CURRENCYCODE,\n    vt1.defaultdimension as DEFAULTDIMENSION,\n    vt1.paymmode as PAYMMODE,\n    vt1.paymspec as PAYMSPEC,\n    vt1.remittancelocation as REMITTANCELOCATION,\n    case\n        when vt1.transtype in (3, 14) then vt1.duedate\n        when vt1.correct not in (3, 14) then vt1.duedate\n        else null\n    end as ALIGNEDDUEDATE,\n    vt1.approveddate as APPROVEDDATE,\n    vt1.closed as CLOSED,\n    vt1.duedate as DUEDATE,\n    vt1.lastsettledate as LASTSETTLEDATE,\n    vt1.transdate as TRANSDATE,\n    vt1.documentdate as DOCUMENTDATE,\n    vt1.approved as APPROVED,\n    vt1.correct as CORRECT,\n    vt1.transtype as TRANSTYPE,\n    vt1.dataareaid as DATAAREAID,\n    vt1.documentnum as DOCUMENTNUM,\n    vt1.invoice as INVOICE,\n    vt1.lastsettlevoucher as LASTSETTLEVOUCHER,\n    vt1.voucher as VOUCHER,\n    vt1.amountcur as AMOUNTCUR,\n    vt1.amountmst as AMOUNTMST,\n    vt1.settleamountcur as SETTLEAMOUNTCUR,\n    vt1.settleamountmst as SETTLEAMOUNTMST,\n    vt1.settleamountreporting as SETTLEAMOUNTREPORTING,\n    vt1.modifieddatetime as VENDTRANS_MODIFIEDDATETIME,\n    vt1.paymreference as PAYMREFERENCE,\n    tet1.ENUMVALUELABEL as TRANSACTIONTYPE,\n    tet2.ENUMVALUELABEL as ISAPPROVED,\n    tet3.ENUMVALUELABEL as ISREVERSAL,\n    bat1.TRANSDATE as CHECKDATE,\n    vij1.payment as PAYMENTTERMS,\n    vij1.invoicedate as INVOICEDATE,\n    vij1.modifieddatetime as VENDINVOICEJOUR_MODIFIEDDATETIME,\n    pmt1.numofdays as NUMOFDAYS,\n    vs1.transrecid as TRANSRECID,\n    (\n        select\n            max(LASTUPDATEDATE)\n        from\n            (\n                VALUES\n                    (vt1.modifieddatetime),\n                    (isnull (vij1.modifieddatetime, ''1950-01-01''))\n            ) as UpdateDate (LASTUPDATEDATE)\n    ) as LATEST_MODIFIEDDATETIME\nfrom\n    dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.vendtrans vt1\n    left join (\n        select\n            recid,\n            duedate\n        from\n            dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.vendtrans\n    ) vtm1 on vt1.recid = vtm1.recid\n    left join (\n        select\n            paymreference,\n            max(transdate) as TRANSDATE\n        from\n            dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.bankaccounttrans bat1\n        where\n            bat1.banktranstype = ''Check''\n        group by\n            paymreference\n    ) bat1 on vt1.paymreference = bat1.paymreference\n    /*and\n    vt1.paymreference is not null*/\n    left join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.vendinvoicejour vij1 on vt1.voucher = vij1.ledgervoucher\n    and vt1.accountnum = vij1.invoiceaccount\n    and vt1.transdate = vij1.invoicedate\n    and vt1.invoice = vij1.invoiceid\n    left join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.paymterm pmt1 on vij1.dataareaid = pmt1.dataareaid\n    and vij1.payment = pmt1.paymtermid\n    left join (select distinct transrecid from dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.vendsettlement) vs1 ON\n\t\tvt1.recid = vs1.transrecid\n    left join (\n        select\n            enumname,\n            enumvalue,\n            max(enumvaluelabel) as ENUMVALUELABEL\n        from\n            dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\n        where\n            enumname = ''LedgerTransType''\n        group by\n            enumname,\n            enumvalue\n    ) tet1 on vt1.transtype = tet1.enumvalue --TRANSACTIONTYPE\n    left join (\n        select\n            enumname,\n            enumvalue,\n            max(enumvaluelabel) as ENUMVALUELABEL\n        from\n            dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\n        where\n            enumname = ''NoYes''\n        group by\n            enumname,\n            enumvalue\n    ) tet2 on vt1.approved = tet2.enumvalue --ISAPPROVED\n    left join (\n        select\n            enumname,\n            enumvalue,\n            max(enumvaluelabel) as ENUMVALUELABEL\n        from\n            dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\n        where\n            enumname = ''NoYes''\n        group by\n            enumname,\n            enumvalue\n    ) tet3 on vt1.correct = tet3.enumvalue --ISREVERSAL\nwhere\n    (\n        select\n            max(LASTUPDATEDATE)\n        from\n            (\n                VALUES\n                    (vt1.modifieddatetime),\n                    (isnull (vij1.modifieddatetime, ''1950-01-01''))\n            ) as UpdateDate (LASTUPDATEDATE)\n    ) > ','''',variables('v_prv_max_upd_timestamp'),'''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "Int64"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "ACCOUNTNUM",
																"type": "String"
															},
															"sink": {
																"name": "ACCOUNTNUM",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "APPROVER",
																"type": "Int64"
															},
															"sink": {
																"name": "APPROVER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "CASHDISCCODE",
																"type": "String"
															},
															"sink": {
																"name": "CASHDISCCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CURRENCYCODE",
																"type": "String"
															},
															"sink": {
																"name": "CURRENCYCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DEFAULTDIMENSION",
																"type": "Int64"
															},
															"sink": {
																"name": "DEFAULTDIMENSION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PAYMMODE",
																"type": "String"
															},
															"sink": {
																"name": "PAYMMODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PAYMSPEC",
																"type": "String"
															},
															"sink": {
																"name": "PAYMSPEC",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "REMITTANCELOCATION",
																"type": "Int64"
															},
															"sink": {
																"name": "REMITTANCELOCATION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "ALIGNEDDUEDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "ALIGNEDDUEDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "APPROVEDDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "APPROVEDDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "CLOSED",
																"type": "DateTime"
															},
															"sink": {
																"name": "CLOSED",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DUEDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "DUEDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "LASTSETTLEDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "LASTSETTLEDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TRANSDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "TRANSDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DOCUMENTDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "DOCUMENTDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "APPROVED",
																"type": "Int32"
															},
															"sink": {
																"name": "APPROVED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "CORRECT",
																"type": "Int32"
															},
															"sink": {
																"name": "CORRECT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TRANSTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "TRANSTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DOCUMENTNUM",
																"type": "String"
															},
															"sink": {
																"name": "DOCUMENTNUM",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVOICE",
																"type": "String"
															},
															"sink": {
																"name": "INVOICE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LASTSETTLEVOUCHER",
																"type": "String"
															},
															"sink": {
																"name": "LASTSETTLEVOUCHER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "VOUCHER",
																"type": "String"
															},
															"sink": {
																"name": "VOUCHER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "AMOUNTCUR",
																"type": "Decimal"
															},
															"sink": {
																"name": "AMOUNTCUR",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "AMOUNTMST",
																"type": "Decimal"
															},
															"sink": {
																"name": "AMOUNTMST",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "SETTLEAMOUNTCUR",
																"type": "Decimal"
															},
															"sink": {
																"name": "SETTLEAMOUNTCUR",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "SETTLEAMOUNTMST",
																"type": "Decimal"
															},
															"sink": {
																"name": "SETTLEAMOUNTMST",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "SETTLEAMOUNTREPORTING",
																"type": "Decimal"
															},
															"sink": {
																"name": "SETTLEAMOUNTREPORTING",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "VENDTRANS_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "VENDTRANS_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "PAYMREFERENCE",
																"type": "String"
															},
															"sink": {
																"name": "PAYMREFERENCE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TRANSACTIONTYPE",
																"type": "String"
															},
															"sink": {
																"name": "TRANSACTIONTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ISAPPROVED",
																"type": "String"
															},
															"sink": {
																"name": "ISAPPROVED",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ISREVERSAL",
																"type": "String"
															},
															"sink": {
																"name": "ISREVERSAL",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CHECKDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "CHECKDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "PAYMENTTERMS",
																"type": "String"
															},
															"sink": {
																"name": "PAYMENTTERMS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVOICEDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVOICEDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "VENDINVOICEJOUR_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "VENDINVOICEJOUR_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "NUMOFDAYS",
																"type": "Int32"
															},
															"sink": {
																"name": "NUMOFDAYS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TRANSRECID",
																"type": "Int64"
															},
															"sink": {
																"name": "TRANSRECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId,-1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "VENDTRANS"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "FACT_VENDOR_TRANSACTIONS"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "VENDTRANS"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prv_max_upd_timestamp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-10T17:12:03Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_weekly_salesline_recon')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "switch_nala",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LATEST_MODIFIEDDATETIME",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": "select \r\n    ltrim(rtrim(sl1.DATAAREAID)) as DATAAREAID,\r\n    ltrim(rtrim(sl1.INVENTTRANSID)) as INVENTTRANSID\r\n from\r\n    dbo.SALESLINE sl1\r\nwhere sl1.MODIFIEDDATETIME > dateadd(dd ,-120, getdate())",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "String"
															},
															"sink": {
																"name": "HK_CREATED_TIMESTAMP",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTTRANSID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTTRANSID",
																"type": "String"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"state": "Inactive",
						"onInactiveMarkAs": "Failed",
						"dependsOn": [
							{
								"activity": "switch_nala",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId,-1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "VENDPAYMMODESPEC"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "VENDPAYMMODESPEC"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_VENDOR_PAYMENT_SPECIFICATION"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"folder": {
					"name": "True_up"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_wmsordertrans_to_fact_picking_line')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prv_max_upd_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select\n\twot1.RECID,\n\twot1.CUSTOMER,\n\twot1.INVENTDIMID,\n\twot1.TOINVENTDIMID,\n\twot1.ITEMID,\n\twot1.DELIVERYPOSTALADDRESS,\n\twot1.INVENTTRANSREFID,\n\twot1.OPERATORWORKER,\n\twot1.EXPEDITIONSTATUS,\n\twot1.OPTIMIZEDPICKING,\n\twot1.PRERESERVED,\n\twot1.ISRESERVED,\n\twot1.RFS_PICKCOMPLETED,\n\twot1.CREATEDDATETIME,\n\twot1.DLVDATE,\n\twot1.EXPEDITIONTIME,\n\twot1.INVENTTRANSID,\n\twot1.DATAAREAID,\n\twot1.ORDERID,\n\twot1.ROUTEID,\n\twot1.QTY,\n\twot1.VOLUME,\n\twot1.MODIFIEDDATETIME,\n\two1.DLVMODE as WMSORDER_DLVMODE,\n\two1.DLVTERM as WMSORDER_DLVTERM,\n\two1.FREIGHTSLIPTYPE as WMSORDER_FREIGHTSLIPTYPE,\n\two1.STATUS as WMSORDER_STATUS,\n\two1.TYPE as WMSORDER_TYPE,\n\two1.FREIGHTZONE as WMSORDER_FREIGHTZONE,\n\two1.MODIFIEDDATETIME as WMSORDER_MODIFIEDDATETIME,\n\twpr1.PRINTMGMTSITEID as WMSPICKINGROUTE_PRINTMGMTSITEID,\n\twpr1.INVENTLOCATIONID as WMSPICKINGROUTE_INVENTLOCATIONID,\n\twpr1.PRIORITY as WMSPICKINGROUTE_PRIORITY,\n\twpr1.TRANSTYPE as WMSPICKINGROUTE_TRANSTYPE,\n\twpr1.SHIPMENTTYPE as WMSPICKINGROUTE_SHIPMENTTYPE,\n\twpr1.DLVDATE as WMSPICKINGROUTE_DLVDATE,\n\twpr1.MODIFIEDDATETIME as WMSPICKINGROUTE_MODIFIEDDATETIME,\n\ttet1.ENUMVALUELABEL as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_EXPEDITIONSTATUS,\n\ttet2.ENUMVALUELABEL as TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_FREIGHTSLIPTYPE,\n\ttet3.ENUMVALUELABEL as TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_STATUS,\n\ttet4.ENUMVALUELABEL as TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_TYPE,\n\ttet5.ENUMVALUELABEL as TIMEXTENDERENUMTABLE5_ENUMVALUELABEL_TRANSTYPE,\n\ttet6.ENUMVALUELABEL as TIMEXTENDERENUMTABLE6_ENUMVALUELABEL_SHIPMENTTYPE,\n\tid1.TIMEZONE as INVENTDIM1_TIMEZONE,\n\tid1.INVENTDIM_MODIFIEDDATETIME as INVENTDIM1_INVENTDIM_MODIFIEDDATETIME,\n\tid1.INVENTSITE_MODIFIEDDATETIME as INVENTDIM1_INVENTSITE_MODIFIEDDATETIME,\n\tda1.TIMEZONE as DATAAREA1_TIMEZONE,\n\ttzi1.TIMEBIAS as TIMEZONEINFO1_TIMEBIAS,\n\t(\n\t\tSELECT\n\t\t\tMAX(LastUpdateDate)\n\t\tFROM\n\t\t\t(\n\t\t\t\tVALUES\n\t\t\t\t\t(wot1.MODIFIEDDATETIME),\n\t\t\t\t\t(isnull(wo1.MODIFIEDDATETIME, '1950-01-01')),\n\t\t\t\t\t(isnull(wpr1.MODIFIEDDATETIME, '1950-01-01')),\n\t\t\t\t\t(\n\t\t\t\t\t\tisnull(id1.INVENTDIM_MODIFIEDDATETIME, '1950-01-01')\n\t\t\t\t\t),\n\t\t\t\t\t(\n\t\t\t\t\t\tisnull(id1.INVENTSITE_MODIFIEDDATETIME, '1950-01-01')\n\t\t\t\t\t)\n\t\t\t) AS UpdateDate(LastUpdateDate)\n\t) AS LATEST_MODIFIEDDATETIME\nfrom\n\tdbo.WMSORDERTRANS wot1\n\tleft join dbo.WMSORDER wo1 on wot1.DATAAREAID = wo1.DATAAREAID\n\tand wot1.ORDERID = wo1.ORDERID\n\tleft join dbo.WMSPICKINGROUTE wpr1 on wot1.DATAAREAID = wpr1.DATAAREAID\n\tand wot1.ROUTEID = wpr1.PICKINGROUTEID\n\tleft join (\n\t\tselect\n\t\t\tENUMNAME,\n\t\t\tENUMVALUE,\n\t\t\tmax(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom\n\t\t\tdbo.TIMEXTENDERENUMTABLE\n\t\twhere\n\t\t\tENUMNAME = 'WMSExpeditionStatus'\n\t\tgroup by\n\t\t\tENUMNAME,\n\t\t\tENUMVALUE\n\t) tet1 on wot1.EXPEDITIONSTATUS = tet1.ENUMVALUE\n\tleft join (\n\t\tselect\n\t\t\tENUMNAME,\n\t\t\tENUMVALUE,\n\t\t\tmax(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom\n\t\t\tdbo.TIMEXTENDERENUMTABLE\n\t\twhere\n\t\t\tENUMNAME = 'FreightSlipType'\n\t\tgroup by\n\t\t\tENUMNAME,\n\t\t\tENUMVALUE\n\t) tet2 on wo1.FREIGHTSLIPTYPE = tet2.ENUMVALUE\n\tleft join (\n\t\tselect\n\t\t\tENUMNAME,\n\t\t\tENUMVALUE,\n\t\t\tmax(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom\n\t\t\tdbo.TIMEXTENDERENUMTABLE\n\t\twhere\n\t\t\tENUMNAME = 'WMSOrderStatus'\n\t\tgroup by\n\t\t\tENUMNAME,\n\t\t\tENUMVALUE\n\t) tet3 on wo1.STATUS = tet3.ENUMVALUE\n\tleft join (\n\t\tselect\n\t\t\tENUMNAME,\n\t\t\tENUMVALUE,\n\t\t\tmax(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom\n\t\t\tdbo.TIMEXTENDERENUMTABLE\n\t\twhere\n\t\t\tENUMNAME = 'WMSOrderType'\n\t\tgroup by\n\t\t\tENUMNAME,\n\t\t\tENUMVALUE\n\t) tet4 on wo1.TYPE = tet4.ENUMVALUE\n\tleft join (\n\t\tselect\n\t\t\tENUMNAME,\n\t\t\tENUMVALUE,\n\t\t\tmax(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom\n\t\t\tdbo.TIMEXTENDERENUMTABLE\n\t\twhere\n\t\t\tENUMNAME = 'InventTransType'\n\t\tgroup by\n\t\t\tENUMNAME,\n\t\t\tENUMVALUE\n\t) tet5 on wpr1.TRANSTYPE = tet5.ENUMVALUE\n\tleft join (\n\t\tselect\n\t\t\tENUMNAME,\n\t\t\tENUMVALUE,\n\t\t\tmax(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom\n\t\t\tdbo.TIMEXTENDERENUMTABLE\n\t\twhere\n\t\t\tENUMNAME = 'WMSShipmentType'\n\t\tgroup by\n\t\t\tENUMNAME,\n\t\t\tENUMVALUE\n\t) tet6 on wpr1.SHIPMENTTYPE = tet6.ENUMVALUE\n\tleft join (\n\t\tselect\n\t\t\tid20.DATAAREAID,\n\t\t\tid20.INVENTDIMID,\n\t\t\tmax(is20.TIMEZONE) over (partition by id20.DATAAREAID, id20.INVENTDIMID) as TIMEZONE,\n\t\t\tmax(id20.MODIFIEDDATETIME) over (partition by id20.DATAAREAID, id20.INVENTDIMID) as INVENTDIM_MODIFIEDDATETIME,\n\t\t\tmax(is20.MODIFIEDDATETIME) over (partition by id20.DATAAREAID, id20.INVENTDIMID) as INVENTSITE_MODIFIEDDATETIME\n\t\tfrom\n\t\t\tdbo.INVENTDIM id20\n\t\t\tleft join dbo.INVENTSITE is20 on id20.DATAAREAID = is20.DATAAREAID\n\t\t\tand id20.INVENTSITEID = is20.SITEID\n\t) id1 on wot1.DATAAREAID = id1.DATAAREAID\n\tand wot1.INVENTDIMID = id1.INVENTDIMID\n\tleft join dbo.DATAAREA da1 on wot1.DATAAREAID = da1.ID\n\tleft join dbo.TIMEZONEINFO tzi1 on wot1.CREATEDDATETIME >= tzi1.STARTDATE\n\tand wot1.CREATEDDATETIME < tzi1.ENDDATE\n\tand isnull(id1.TIMEZONE, da1.TIMEZONE) = tzi1.TIMEZONEID\n\twhere \n\t(\n\t\tSELECT\n\t\t\tMAX(LastUpdateDate)\n\t\tFROM\n\t\t\t(\n\t\t\t\tVALUES\n\t\t\t\t\t(wot1.MODIFIEDDATETIME),\n\t\t\t\t\t(isnull(wo1.MODIFIEDDATETIME, '1950-01-01')),\n\t\t\t\t\t(isnull(wpr1.MODIFIEDDATETIME, '1950-01-01')),\n\t\t\t\t\t(\n\t\t\t\t\t\tisnull(id1.INVENTDIM_MODIFIEDDATETIME, '1950-01-01')\n\t\t\t\t\t),\n\t\t\t\t\t(\n\t\t\t\t\t\tisnull(id1.INVENTSITE_MODIFIEDDATETIME, '1950-01-01')\n\t\t\t\t\t)\n\t\t\t) AS UpdateDate(LastUpdateDate)\n\t) > '@{variables('v_prv_max_upd_timestamp')}' ",
														"type": "Expression"
													},
													"queryTimeout": "08:20:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "Int64"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "CUSTOMER",
																"type": "String"
															},
															"sink": {
																"name": "CUSTOMER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDIMID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTDIMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TOINVENTDIMID",
																"type": "String"
															},
															"sink": {
																"name": "TOINVENTDIMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ITEMID",
																"type": "String"
															},
															"sink": {
																"name": "ITEMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DELIVERYPOSTALADDRESS",
																"type": "Int64"
															},
															"sink": {
																"name": "DELIVERYPOSTALADDRESS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTTRANSREFID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTTRANSREFID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "OPERATORWORKER",
																"type": "Int64"
															},
															"sink": {
																"name": "OPERATORWORKER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "EXPEDITIONSTATUS",
																"type": "Int32"
															},
															"sink": {
																"name": "EXPEDITIONSTATUS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "OPTIMIZEDPICKING",
																"type": "Int32"
															},
															"sink": {
																"name": "OPTIMIZEDPICKING",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PRERESERVED",
																"type": "Int32"
															},
															"sink": {
																"name": "PRERESERVED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "ISRESERVED",
																"type": "Int32"
															},
															"sink": {
																"name": "ISRESERVED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "RFS_PICKCOMPLETED",
																"type": "DateTime"
															},
															"sink": {
																"name": "RFS_PICKCOMPLETED",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "CREATEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "CREATEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DLVDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "DLVDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "EXPEDITIONTIME",
																"type": "Int32"
															},
															"sink": {
																"name": "EXPEDITIONTIME",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTTRANSID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTTRANSID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ORDERID",
																"type": "String"
															},
															"sink": {
																"name": "ORDERID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ROUTEID",
																"type": "String"
															},
															"sink": {
																"name": "ROUTEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "QTY",
																"type": "Decimal"
															},
															"sink": {
																"name": "QTY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "VOLUME",
																"type": "Decimal"
															},
															"sink": {
																"name": "VOLUME",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "WMSORDER_DLVMODE",
																"type": "String"
															},
															"sink": {
																"name": "WMSORDER_DLVMODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "WMSORDER_DLVTERM",
																"type": "String"
															},
															"sink": {
																"name": "WMSORDER_DLVTERM",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "WMSORDER_FREIGHTSLIPTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "WMSORDER_FREIGHTSLIPTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "WMSORDER_STATUS",
																"type": "Int32"
															},
															"sink": {
																"name": "WMSORDER_STATUS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "WMSORDER_TYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "WMSORDER_TYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "WMSORDER_FREIGHTZONE",
																"type": "String"
															},
															"sink": {
																"name": "WMSORDER_FREIGHTZONE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "WMSORDER_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "WMSORDER_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "WMSPICKINGROUTE_PRINTMGMTSITEID",
																"type": "String"
															},
															"sink": {
																"name": "WMSPICKINGROUTE_PRINTMGMTSITEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "WMSPICKINGROUTE_INVENTLOCATIONID",
																"type": "String"
															},
															"sink": {
																"name": "WMSPICKINGROUTE_INVENTLOCATIONID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "WMSPICKINGROUTE_PRIORITY",
																"type": "Int32"
															},
															"sink": {
																"name": "WMSPICKINGROUTE_PRIORITY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "WMSPICKINGROUTE_TRANSTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "WMSPICKINGROUTE_TRANSTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "WMSPICKINGROUTE_SHIPMENTTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "WMSPICKINGROUTE_SHIPMENTTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "WMSPICKINGROUTE_DLVDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "WMSPICKINGROUTE_DLVDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "WMSPICKINGROUTE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "WMSPICKINGROUTE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_EXPEDITIONSTATUS",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_EXPEDITIONSTATUS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_FREIGHTSLIPTYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_FREIGHTSLIPTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_STATUS",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_STATUS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_TYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_TYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE5_ENUMVALUELABEL_TRANSTYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE5_ENUMVALUELABEL_TRANSTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE6_ENUMVALUELABEL_SHIPMENTTYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE6_ENUMVALUELABEL_SHIPMENTTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDIM1_TIMEZONE",
																"type": "Int32"
															},
															"sink": {
																"name": "INVENTDIM1_TIMEZONE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTDIM1_INVENTDIM_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTDIM1_INVENTDIM_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTDIM1_INVENTSITE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTDIM1_INVENTSITE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DATAAREA1_TIMEZONE",
																"type": "Int32"
															},
															"sink": {
																"name": "DATAAREA1_TIMEZONE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TIMEZONEINFO1_TIMEBIAS",
																"type": "Int32"
															},
															"sink": {
																"name": "TIMEZONEINFO1_TIMEBIAS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@Concat('select\n\twot1.recid as RECID,\n\twot1.customer as CUSTOMER,\n\twot1.inventdimid as INVENTDIMID,\n\twot1.toinventdimid as TOINVENTDIMID,\n\twot1.itemid as ITEMID,\n\twot1.deliverypostaladdress as DELIVERYPOSTALADDRESS,\n\twot1.inventtransrefid as INVENTTRANSREFID,\n\twot1.operatorworker as OPERATORWORKER,\n\twot1.expeditionstatus as EXPEDITIONSTATUS,\n\twot1.optimizedpicking as OPTIMIZEDPICKING,\n\twot1.prereserved as PRERESERVED,\n\twot1.isreserved as ISRESERVED,\n\t'''' as RFS_PICKCOMPLETED,\n\twot1.createddatetime as CREATEDDATETIME,\n\twot1.dlvdate as DLVDATE,\n\twot1.expeditiontime as EXPEDITIONTIME,\n\twot1.inventtransid as INVENTTRANSID,\n\twot1.dataareaid as DATAAREAID,\n\twot1.orderid as ORDERID,\n\twot1.routeid as ROUTEID,\n\twot1.qty as QTY,\n\twot1.volume as VOLUME,\n\twot1.modifieddatetime,\n\two1.dlvmode as WMSORDER_DLVMODE,\n\two1.dlvterm as WMSORDER_DLVTERM,\n\two1.freightsliptype as WMSORDER_FREIGHTSLIPTYPE,\n\two1.status as WMSORDER_STATUS,\n\two1.type as WMSORDER_TYPE,\n\two1.freightzone as WMSORDER_FREIGHTZONE,\n\two1.modifieddatetime as WMSORDER_MODIFIEDDATETIME,\n\twpr1.printmgmtsiteid as WMSPICKINGROUTE_PRINTMGMTSITEID,\n\twpr1.inventlocationid as WMSPICKINGROUTE_INVENTLOCATIONID,\n\twpr1.priority as WMSPICKINGROUTE_PRIORITY,\n\twpr1.transtype as WMSPICKINGROUTE_TRANSTYPE,\n\twpr1.shipmenttype as WMSPICKINGROUTE_SHIPMENTTYPE,\n\twpr1.dlvdate as WMSPICKINGROUTE_DLVDATE,\n\twpr1.modifieddatetime as WMSPICKINGROUTE_MODIFIEDDATETIME,\n\ttet1.ENUMVALUELABEL as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_EXPEDITIONSTATUS,\n\ttet2.ENUMVALUELABEL as TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_FREIGHTSLIPTYPE,\n\ttet3.ENUMVALUELABEL as TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_STATUS,\n\ttet4.ENUMVALUELABEL as TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_TYPE,\n\ttet5.ENUMVALUELABEL as TIMEXTENDERENUMTABLE5_ENUMVALUELABEL_TRANSTYPE,\n\ttet6.ENUMVALUELABEL as TIMEXTENDERENUMTABLE6_ENUMVALUELABEL_SHIPMENTTYPE,\n\tid1.TIMEZONE as INVENTDIM1_TIMEZONE,\n\tid1.INVENTDIM_MODIFIEDDATETIME as INVENTDIM1_INVENTDIM_MODIFIEDDATETIME,\n\tid1.INVENTSITE_MODIFIEDDATETIME as INVENTDIM1_INVENTSITE_MODIFIEDDATETIME,\n\tda1.timezone as DATAAREA1_TIMEZONE,\n\ttzi1.timebias as TIMEZONEINFO1_TIMEBIAS,\n\t(\n\t\tSELECT\n\t\t\tMAX(LastUpdateDate)\n\t\tFROM\n\t\t\t(\n\t\t\t\tVALUES\n\t\t\t\t\t(wot1.modifieddatetime),\n\t\t\t\t\t(isnull(wo1.modifieddatetime, ''1950-01-01'')),\n\t\t\t\t\t(isnull(wpr1.modifieddatetime, ''1950-01-01'')),\n\t\t\t\t\t(\n\t\t\t\t\t\tisnull(id1.INVENTDIM_MODIFIEDDATETIME, ''1950-01-01'')\n\t\t\t\t\t),\n\t\t\t\t\t(\n\t\t\t\t\t\tisnull(id1.INVENTSITE_MODIFIEDDATETIME, ''1950-01-01'')\n\t\t\t\t\t)\n\t\t\t) AS UpdateDate(LastUpdateDate)\n\t) AS LATEST_MODIFIEDDATETIME\nfrom '\n,pipeline().globalParameters.d365_dbName,'.','wmsordertrans wot1\n\tleft join ',pipeline().globalParameters.d365_dbName,'.','wmsorder wo1 on wot1.dataareaid = wo1.dataareaid\n\tand wot1.orderid = wo1.orderid\n\tleft join ',pipeline().globalParameters.d365_dbName,'.','wmspickingroute wpr1 on wot1.dataareaid = wpr1.dataareaid\n\tand wot1.routeid = wpr1.pickingrouteid\n\tleft join (\n\t\tselect\n\t\t\tenumname,\n\t\t\tenumvalue,\n\t\t\tmax(enumvaluelabel) as ENUMVALUELABEL\n\t\tfrom\n\t\t\t',pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n\t\twhere\n\t\t\tenumname = ''WMSExpeditionStatus''\n\t\tgroup by\n\t\t\tenumname,\n\t\t\tenumvalue\n\t) tet1 on wot1.expeditionstatus = tet1.enumvalue\n\tleft join (\n\t\tselect\n\t\t\tenumname,\n\t\t\tenumvalue,\n\t\t\tmax(enumvaluelabel) as ENUMVALUELABEL\n\t\tfrom\n\t\t\t',pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n\t\twhere\n\t\t\tenumname = ''FreightSlipType''\n\t\tgroup by\n\t\t\tenumname,\n\t\t\tenumvalue\n\t) tet2 on wo1.freightsliptype = tet2.enumvalue\n\tleft join (\n\t\tselect\n\t\t\tenumname,\n\t\t\tenumvalue,\n\t\t\tmax(enumvaluelabel) as ENUMVALUELABEL\n\t\tfrom\n\t\t\t',pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n\t\twhere\n\t\t\tenumname = ''WMSOrderStatus''\n\t\tgroup by\n\t\t\tenumname,\n\t\t\tenumvalue\n\t) tet3 on wo1.status = tet3.enumvalue\n\tleft join (\n\t\tselect\n\t\t\tenumname,\n\t\t\tenumvalue,\n\t\t\tmax(enumvaluelabel) as ENUMVALUELABEL\n\t\tfrom\n\t\t\t',pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n\t\twhere\n\t\t\tenumname = ''WMSOrderType''\n\t\tgroup by\n\t\t\tenumname,\n\t\t\tenumvalue\n\t) tet4 on wo1.type = tet4.enumvalue\n\tleft join (\n\t\tselect\n\t\t\tenumname,\n\t\t\tenumvalue,\n\t\t\tmax(enumvaluelabel) as ENUMVALUELABEL\n\t\tfrom\n\t\t\t',pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n\t\twhere\n\t\t\tenumname = ''InventTransType''\n\t\tgroup by\n\t\t\tenumname,\n\t\t\tenumvalue\n\t) tet5 on wpr1.transtype = tet5.enumvalue\n\tleft join (\n\t\tselect\n\t\t\tenumname,\n\t\t\tenumvalue,\n\t\t\tmax(enumvaluelabel) as ENUMVALUELABEL\n\t\tfrom\n\t\t\t',pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n\t\twhere\n\t\t\tenumname = ''WMSShipmentType''\n\t\tgroup by\n\t\t\tenumname,\n\t\t\tenumvalue\n\t) tet6 on wpr1.shipmenttype = tet6.enumvalue\n\tleft join (\n\t\tselect\n\t\t\tid20.dataareaid,\n\t\t\tid20.inventdimid,\n\t\t\tmax(is20.timezone) over (partition by id20.dataareaid, id20.inventdimid) as TIMEZONE,\n\t\t\tmax(id20.modifieddatetime) over (partition by id20.dataareaid, id20.inventdimid) as INVENTDIM_MODIFIEDDATETIME,\n\t\t\tmax(is20.modifieddatetime) over (partition by id20.dataareaid, id20.inventdimid) as INVENTSITE_MODIFIEDDATETIME\n\t\tfrom\n\t\t\t',pipeline().globalParameters.d365_dbName,'.','inventdim id20\n\t\t\tleft join ',pipeline().globalParameters.d365_dbName,'.','inventsite is20 on id20.dataareaid = is20.dataareaid\n\t\t\tand id20.inventsiteid = is20.siteid\n\t) id1 on wot1.dataareaid = id1.dataareaid\n\tand wot1.inventdimid = id1.inventdimid\n\tleft join ',pipeline().globalParameters.d365_dbName,'.','dataarea da1 on wot1.dataareaid = da1.Id\n\tleft join ',pipeline().globalParameters.d365_dbName,'.','timezoneinfo tzi1 on wot1.createddatetime >= tzi1.startdate\n\tand wot1.createddatetime < tzi1.enddate\n\tand isnull(id1.TIMEZONE, da1.timezone) = tzi1.timezoneid\n\twhere \n\t(\n\t\tSELECT\n\t\t\tMAX(LastUpdateDate)\n\t\tFROM\n\t\t\t(\n\t\t\t\tVALUES\n\t\t\t\t\t(wot1.modifieddatetime),\n\t\t\t\t\t(isnull(wo1.modifieddatetime, ''1950-01-01'')),\n\t\t\t\t\t(isnull(wpr1.modifieddatetime, ''1950-01-01'')),\n\t\t\t\t\t(\n\t\t\t\t\t\tisnull(id1.INVENTDIM_MODIFIEDDATETIME, ''1950-01-01'')\n\t\t\t\t\t),\n\t\t\t\t\t(\n\t\t\t\t\t\tisnull(id1.INVENTSITE_MODIFIEDDATETIME, ''1950-01-01'')\n\t\t\t\t\t)\n\t\t\t) AS UpdateDate(LastUpdateDate)\n\t)  > ','''',variables('v_prv_max_upd_timestamp'),'''')\n\t\n",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "Int64"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "CUSTOMER",
																"type": "String"
															},
															"sink": {
																"name": "CUSTOMER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDIMID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTDIMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TOINVENTDIMID",
																"type": "String"
															},
															"sink": {
																"name": "TOINVENTDIMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ITEMID",
																"type": "String"
															},
															"sink": {
																"name": "ITEMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DELIVERYPOSTALADDRESS",
																"type": "Int64"
															},
															"sink": {
																"name": "DELIVERYPOSTALADDRESS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTTRANSREFID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTTRANSREFID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "OPERATORWORKER",
																"type": "Int64"
															},
															"sink": {
																"name": "OPERATORWORKER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "EXPEDITIONSTATUS",
																"type": "Int32"
															},
															"sink": {
																"name": "EXPEDITIONSTATUS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "OPTIMIZEDPICKING",
																"type": "Int32"
															},
															"sink": {
																"name": "OPTIMIZEDPICKING",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PRERESERVED",
																"type": "Int32"
															},
															"sink": {
																"name": "PRERESERVED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "ISRESERVED",
																"type": "Int32"
															},
															"sink": {
																"name": "ISRESERVED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "RFS_PICKCOMPLETED",
																"type": "DateTime"
															},
															"sink": {
																"name": "RFS_PICKCOMPLETED",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "CREATEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "CREATEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DLVDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "DLVDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "EXPEDITIONTIME",
																"type": "Int32"
															},
															"sink": {
																"name": "EXPEDITIONTIME",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTTRANSID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTTRANSID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ORDERID",
																"type": "String"
															},
															"sink": {
																"name": "ORDERID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ROUTEID",
																"type": "String"
															},
															"sink": {
																"name": "ROUTEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "QTY",
																"type": "Decimal"
															},
															"sink": {
																"name": "QTY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "VOLUME",
																"type": "Decimal"
															},
															"sink": {
																"name": "VOLUME",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "WMSORDER_DLVMODE",
																"type": "String"
															},
															"sink": {
																"name": "WMSORDER_DLVMODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "WMSORDER_DLVTERM",
																"type": "String"
															},
															"sink": {
																"name": "WMSORDER_DLVTERM",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "WMSORDER_FREIGHTSLIPTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "WMSORDER_FREIGHTSLIPTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "WMSORDER_STATUS",
																"type": "Int32"
															},
															"sink": {
																"name": "WMSORDER_STATUS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "WMSORDER_TYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "WMSORDER_TYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "WMSORDER_FREIGHTZONE",
																"type": "String"
															},
															"sink": {
																"name": "WMSORDER_FREIGHTZONE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "WMSORDER_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "WMSORDER_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "WMSPICKINGROUTE_PRINTMGMTSITEID",
																"type": "String"
															},
															"sink": {
																"name": "WMSPICKINGROUTE_PRINTMGMTSITEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "WMSPICKINGROUTE_INVENTLOCATIONID",
																"type": "String"
															},
															"sink": {
																"name": "WMSPICKINGROUTE_INVENTLOCATIONID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "WMSPICKINGROUTE_PRIORITY",
																"type": "Int32"
															},
															"sink": {
																"name": "WMSPICKINGROUTE_PRIORITY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "WMSPICKINGROUTE_TRANSTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "WMSPICKINGROUTE_TRANSTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "WMSPICKINGROUTE_SHIPMENTTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "WMSPICKINGROUTE_SHIPMENTTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "WMSPICKINGROUTE_DLVDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "WMSPICKINGROUTE_DLVDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "WMSPICKINGROUTE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "WMSPICKINGROUTE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_EXPEDITIONSTATUS",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_EXPEDITIONSTATUS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_FREIGHTSLIPTYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_FREIGHTSLIPTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_STATUS",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_STATUS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_TYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_TYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE5_ENUMVALUELABEL_TRANSTYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE5_ENUMVALUELABEL_TRANSTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE6_ENUMVALUELABEL_SHIPMENTTYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE6_ENUMVALUELABEL_SHIPMENTTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDIM1_TIMEZONE",
																"type": "Int32"
															},
															"sink": {
																"name": "INVENTDIM1_TIMEZONE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTDIM1_INVENTDIM_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTDIM1_INVENTDIM_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTDIM1_INVENTSITE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTDIM1_INVENTSITE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DATAAREA1_TIMEZONE",
																"type": "Int32"
															},
															"sink": {
																"name": "DATAAREA1_TIMEZONE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TIMEZONEINFO1_TIMEBIAS",
																"type": "Int32"
															},
															"sink": {
																"name": "TIMEZONEINFO1_TIMEBIAS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "FACT_PICKING_LINE"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "WMSORDERTRANS"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "WMSORDERTRANS"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prv_max_upd_timestamp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T10:51:02Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_d365_soft_and_hard_delete')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "hard and soft deletes from AX source to Snowflake target",
				"activities": [
					{
						"name": "ForEach_sourcescripts",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lkp_raw_soft_hard_deletes_axnala",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lkp_raw_soft_hard_deletes_axnala').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 5,
							"activities": [
								{
									"name": "sql_D365_to_raw",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Truncate_Target_Staging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "WarehouseSource",
											"additionalColumns": [
												{
													"name": "HK_SOURCE_NAME",
													"value": {
														"value": "@pipeline().parameters.p_src_nm",
														"type": "Expression"
													}
												},
												{
													"name": "HK_JOB_RUN_ID",
													"value": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "@concat('select ', item().PK_SRC_COLS, ',''' , item().RAW_TABLE, ''' as RAW_TABLE,''',item().TARGET_TABLE,''' as TARGET_TABLE,''',item().PK_TGT_COLS,''' as PK_TGT_COLS, ''',item().PK_CURATE_COLS,''' as PK_CURATE_COLS from ', pipeline().globalParameters.d365_dbName,'.', item().SOURCE_TABLE,'  where IsDelete is null;') ",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeSink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "ls_blob_storage",
												"type": "LinkedServiceReference"
											},
											"path": {
												"value": "@pipeline().globalParameters.rootDir",
												"type": "Expression"
											},
											"enableCompression": true
										},
										"enableSkipIncompatibleRow": false,
										"translator": {
											"value": "@json(item().MAPPING)",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "ds_fabric_wh",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_snowflake",
											"type": "DatasetReference",
											"parameters": {
												"p_tgt_table_name": {
													"value": "@item().RAW_TABLE",
													"type": "Expression"
												},
												"p_tgt_schema_name": {
													"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
													"type": "Expression"
												},
												"p_ls_DbName": {
													"value": "@pipeline().globalParameters.snow_rawDb",
													"type": "Expression"
												},
												"p_ls_Env": {
													"value": "@pipeline().globalParameters.environment",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "raw_load_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "sql_D365_to_raw",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('sql_D365_to_raw').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@replace(replace(replace(activity('sql_D365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('sql_D365_to_raw').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('sql_D365_to_raw').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "sql_nala_load_to_raw_fail",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "raw_load_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('sql_D365_to_raw').Error['message']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								},
								{
									"name": "raw_to_curate_sp_call",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "sql_D365_to_raw",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "ls_snowflake",
										"type": "LinkedServiceReference",
										"parameters": {
											"ls_DbName": {
												"value": "@pipeline().globalParameters.snow_auditDb",
												"type": "Expression"
											},
											"ls_Env": {
												"value": "@pipeline().globalParameters.environment",
												"type": "Expression"
											}
										}
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',item().TASK_NAME,'''',',',pipeline().parameters.p_src_code,')')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "raw_to_curate_sp_call",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId,-1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').Error['message']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "pipeline_execution_notification",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "pp_stored_procedure_failure_notification",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "pp_adf_pipeline_notification",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"subscription": {
															"value": "@pipeline().globalParameters.subscriptionId",
															"type": "Expression"
														},
														"resourceGroup": {
															"value": "@pipeline().globalParameters.resourceGroup",
															"type": "Expression"
														},
														"runId": {
															"value": "@coalesce(pipeline().RunId, -1)",
															"type": "Expression"
														},
														"name": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"triggerTime": {
															"value": "@pipeline().TriggerTime",
															"type": "Expression"
														},
														"status": {
															"value": "@toUpper('failed')",
															"type": "Expression"
														},
														"message": {
															"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
															"type": "Expression"
														},
														"executionEndTime": {
															"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
															"type": "Expression"
														},
														"runDuration": {
															"value": "@activity('raw_to_curate_sp_call').Duration",
															"type": "Expression"
														},
														"teamWebhookUrl": {
															"value": "@pipeline().globalParameters.teamsWebhookUrl",
															"type": "Expression"
														},
														"notificationTime": {
															"value": "@utcNow()",
															"type": "Expression"
														},
														"taskName": {
															"value": "@pipeline().parameters.p_tgt_curate_table_nm",
															"type": "Expression"
														},
														"taskStepNumber": {
															"value": "@pipeline().parameters.p_src_code",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "curate_load_failure",
												"type": "Fail",
												"dependsOn": [
													{
														"activity": "pp_stored_procedure_failure_notification",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"message": {
														"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
														"type": "Expression"
													},
													"errorCode": "500"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "stored_procedure_success_notification",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "pp_adf_pipeline_notification",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"subscription": {
															"value": "@pipeline().globalParameters.subscriptionId",
															"type": "Expression"
														},
														"resourceGroup": {
															"value": "@pipeline().globalParameters.resourceGroup",
															"type": "Expression"
														},
														"runId": {
															"value": "@coalesce(pipeline().RunId, -1)",
															"type": "Expression"
														},
														"name": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"triggerTime": {
															"value": "@pipeline().TriggerTime",
															"type": "Expression"
														},
														"status": {
															"value": "@activity('raw_to_curate_sp_call').Status",
															"type": "Expression"
														},
														"message": {
															"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
															"type": "Expression"
														},
														"executionEndTime": {
															"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
															"type": "Expression"
														},
														"runDuration": {
															"value": "@activity('raw_to_curate_sp_call').Duration",
															"type": "Expression"
														},
														"teamWebhookUrl": {
															"value": "@pipeline().globalParameters.teamsWebhookUrl",
															"type": "Expression"
														},
														"notificationTime": {
															"value": "@utcNow()",
															"type": "Expression"
														},
														"taskName": {
															"value": "@pipeline().parameters.p_tgt_curate_table_nm",
															"type": "Expression"
														},
														"taskStepNumber": {
															"value": "@pipeline().parameters.p_src_code",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "Truncate_Target_Staging",
									"description": "Truncate the target table in RAW database to clear old rows",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "ls_snowflake",
										"type": "LinkedServiceReference",
										"parameters": {
											"ls_DbName": {
												"value": "@pipeline().globalParameters.snow_rawDb",
												"type": "Expression"
											},
											"ls_Env": {
												"value": "@pipeline().globalParameters.environment",
												"type": "Expression"
											}
										}
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('TRUNCATE TABLE ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm,'.',item().RAW_TABLE)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "lkp_raw_soft_hard_deletes_axnala",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select * from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.',pipeline().parameters.p_control_schema_nm, '.', pipeline().parameters.p_control_table_nm,' where SOURCE_NAME = ','''',pipeline().parameters.p_src_nm,'''')",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_control_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_control_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_auditDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "D365"
					},
					"p_control_table_nm": {
						"type": "string",
						"defaultValue": "V_SOFT_HARD_DELETES_CONTROL"
					},
					"p_control_schema_nm": {
						"type": "string",
						"defaultValue": "CONTROL"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "D365"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "3"
					},
					"p_tgt_curate_table_nm": {
						"type": "string"
					}
				},
				"variables": {
					"p_mapping": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-04T13:47:58Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_pbi_partition_or_full')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get_pbi_partition_details",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "set_pbi_dataset_id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('SELECT \npsi.PBI_DB_NAME, \npsi.PBI_TABLE_NAME,\npsi.PBI_GROUP_ID,\npsi.PBI_DATASET_ID,\npspd.PARTITION,\npspd.PARTITION_REFRESH_FLAG,\npspd.SNOWFLAKE_TABLE_NAME\nFROM ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb, '.CONTROL.PBI_SNOWFLAKE_BRIDGE psi\nLEFT JOIN ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb, '.CONTROL.PBI_SNOWFLAKE_PARTITION_DETAILS pspd\nON psi.SNOWFLAKE_TABLE_NAME = concat(''V_'' ,pspd.SNOWFLAKE_TABLE_NAME)\nWHERE psi.PBI_DB_NAME = ''',pipeline().parameters.p_dataset_nm,''' and pspd.PBI_DB_NAME = ''',pipeline().parameters.p_dataset_nm,\n''' and pspd.SNOWFLAKE_TABLE_NAME in (',pipeline().parameters.p_table_nm,') \nand replace(pspd.PARTITION,''Q'')::number < (year(current_date()) ||  quarter(current_date()) || to_char(current_date(),''MM''))::number\nand pspd.PARTITION_REFRESH_FLAG = TRUE')",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_audit_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_audit_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_auditDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "create_refresh_objects",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get_pbi_partition_details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get_pbi_partition_details').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "construct_json",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "v_objects",
										"value": {
											"value": "@json(concat('', \n    concat(\n        '{ \"database\": \"', item().PBI_DB_NAME, \n        '\", \"table\": \"', item().PBI_TABLE_NAME, \n        '\", \"partition\": \"', item().PARTITION, '\" }'\n    ),\n''))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "construct_partition_false_update",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "construct_json",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "v_objects_false_update",
										"value": {
											"value": "@concat('''',item().SNOWFLAKE_TABLE_NAME,item().PARTITION,'''')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "get_pbi_distinct_details",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('SELECT distinct\npsi.PBI_GROUP_ID,\npsi.PBI_DATASET_ID\nFROM ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb, '.CONTROL.PBI_SNOWFLAKE_BRIDGE psi\nLEFT JOIN ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb, '.CONTROL.PBI_SNOWFLAKE_PARTITION_DETAILS pspd\nON psi.SNOWFLAKE_TABLE_NAME = concat(''V_'' ,pspd.SNOWFLAKE_TABLE_NAME)\nWHERE psi.PBI_DB_NAME = ''',pipeline().parameters.p_dataset_nm,\n''' and pspd.SNOWFLAKE_TABLE_NAME in (' , pipeline().parameters.p_table_nm, ') \nand replace(pspd.PARTITION,''Q'')::number < (year(current_date()) ||  quarter(current_date()) || to_char(current_date(),''MM''))::number\n' )\n",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_audit_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_audit_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_auditDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "set_pbi_group_id",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "get_pbi_distinct_details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_pbi_group_id",
							"value": {
								"value": "@activity('get_pbi_distinct_details').output.firstRow.PBI_GROUP_ID",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set_pbi_dataset_id",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "set_pbi_group_id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_dataset_id",
							"value": {
								"value": "@activity('get_pbi_distinct_details').output.firstRow.PBI_DATASET_ID",
								"type": "Expression"
							}
						}
					},
					{
						"name": "pbi_partition_refresh",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "create_refresh_objects",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(pipeline().parameters.p_dataset_nm,'Accounts Receivable Gold Dataset'),\n    bool(0),\n    greater(activity('get_pbi_partition_details').output.count,0))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "refresh_partitions_dataset",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_pbi_refresh_api",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"p_group_id": {
												"value": "@variables('v_pbi_group_id')",
												"type": "Expression"
											},
											"p_dataset_id": {
												"value": "@variables('v_dataset_id')",
												"type": "Expression"
											},
											"p_web_body": {
												"value": "@concat('{\n  \"type\": \"full\",\n  \"commitMode\": \"transactional\",\n  \"objects\": ', variables('v_objects'), ',\n  \"applyRefreshPolicy\": \"false\",\n  \"maxParallelism\" : \"30\",\n   \"retryCount\" : \"3\"\n}')",
												"type": "Expression"
											},
											"p_dataset_nm": {
												"value": "@pipeline().parameters.p_dataset_nm",
												"type": "Expression"
											},
											"p_webhook_url": {
												"value": "@pipeline().parameters.p_webhook_url",
												"type": "Expression"
											},
											"p_refreshType": "Partition"
										}
									}
								},
								{
									"name": "false_update_script",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "refresh_partitions_dataset",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "ls_snowflake",
										"type": "LinkedServiceReference",
										"parameters": {
											"ls_DbName": {
												"value": "@pipeline().globalParameters.snow_auditDb",
												"type": "Expression"
											},
											"ls_Env": {
												"value": "@pipeline().globalParameters.environment",
												"type": "Expression"
											}
										}
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat(\n'Update ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,' .CONTROL.pbi_snowflake_partition_details set partition_refresh_flag = false\n where pbi_db_name = ''',pipeline().parameters.p_dataset_nm,\n''' and concat(SNOWFLAKE_TABLE_NAME,PARTITION) in (',\njoin(variables('v_objects_false_update'),','),\n')')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "pbi_full_refresh",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "pbi_partition_refresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.p_web_body_fullrefresh",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "loop_exit_condition_onFailure",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(variables('foreach_exit'),bool(0))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "refresh_full_dataset",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "pp_pbi_refresh_api",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"p_group_id": {
															"value": "@variables('v_pbi_group_id')",
															"type": "Expression"
														},
														"p_dataset_id": {
															"value": "@variables('v_dataset_id')",
															"type": "Expression"
														},
														"p_web_body": {
															"value": "@item()",
															"type": "Expression"
														},
														"p_dataset_nm": {
															"value": "@pipeline().parameters.p_dataset_nm",
															"type": "Expression"
														},
														"p_webhook_url": {
															"value": "@pipeline().parameters.p_webhook_url",
															"type": "Expression"
														},
														"p_refreshType": "Full"
													}
												}
											},
											{
												"name": "foreach_exit",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "refresh_full_dataset",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "foreach_exit",
													"value": {
														"value": "@bool(1)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Fail1",
												"type": "Fail",
												"dependsOn": [
													{
														"activity": "foreach_exit",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"message": "Full Refresh - Pipeline failed as one of the API failed",
													"errorCode": "1111"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "refresh_pbi_succeeded",
						"description": "",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pbi_full_refresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_pbi_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().parameters.p_dataset_nm",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@concat('Succeeded')",
									"type": "Expression"
								},
								"message": {
									"value": "@concat('Dataset refresh is completed and can be used by the users for analysis')",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().parameters.p_webhook_url",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"extendedStatus": {
									"value": "@concat('Dataset is updated')",
									"type": "Expression"
								},
								"color": "008000",
								"refreshType": {
									"value": "@concat('Complete')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_table_nm": {
						"type": "string"
					},
					"p_tgt_audit_table_nm": {
						"type": "string"
					},
					"p_tgt_audit_schema_nm": {
						"type": "string"
					},
					"p_webhook_url": {
						"type": "string"
					},
					"p_dataset_nm": {
						"type": "string"
					},
					"p_web_body_fullrefresh": {
						"type": "array"
					}
				},
				"variables": {
					"v_objects": {
						"type": "Array"
					},
					"v_pbi_group_id": {
						"type": "String"
					},
					"v_dataset_id": {
						"type": "String"
					},
					"foreach_exit": {
						"type": "Boolean",
						"defaultValue": false
					},
					"v_objects_false_update": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "pbi_incremental_refresh"
				},
				"annotations": [],
				"lastPublishTime": "2024-11-06T14:48:20Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_pbi_partitions_inventory')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get_pbi_distinct_details",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('SELECT distinct\npsi.PBI_GROUP_ID,\npsi.PBI_DATASET_ID\nFROM ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb, '.CONTROL.PBI_SNOWFLAKE_BRIDGE psi\nLEFT JOIN ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb, '.CONTROL.PBI_SNOWFLAKE_PARTITION_DETAILS pspd\nON psi.SNOWFLAKE_TABLE_NAME = concat(''V_'' ,pspd.SNOWFLAKE_TABLE_NAME)\nWHERE psi.PBI_DB_NAME = ''',pipeline().parameters.p_dataset_nm,\n''' and pspd.SNOWFLAKE_TABLE_NAME in (' , pipeline().parameters.p_table_nm, ') \nand replace(pspd.PARTITION,''Q'')::number < (year(current_date()) ||  quarter(current_date()) || to_char(current_date(),''MM''))::number\n' )\n",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_audit_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_audit_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_auditDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "set_pbi_group_id",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "get_pbi_distinct_details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_pbi_group_id",
							"value": {
								"value": "@activity('get_pbi_distinct_details').output.firstRow.PBI_GROUP_ID",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set_pbi_dataset_id",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "set_pbi_group_id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_dataset_id",
							"value": {
								"value": "@activity('get_pbi_distinct_details').output.firstRow.PBI_DATASET_ID",
								"type": "Expression"
							}
						}
					},
					{
						"name": "get_pbi_partition_details",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "set_pbi_dataset_id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('SELECT \npsi.PBI_DB_NAME, \npsi.PBI_TABLE_NAME,\npsi.PBI_GROUP_ID,\npsi.PBI_DATASET_ID,\npspd.PARTITION,\npspd.PARTITION_REFRESH_FLAG,\npspd.SNOWFLAKE_TABLE_NAME\nFROM ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb, '.CONTROL.PBI_SNOWFLAKE_BRIDGE psi\nLEFT JOIN ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb, '.CONTROL.PBI_SNOWFLAKE_PARTITION_DETAILS pspd\nON psi.SNOWFLAKE_TABLE_NAME = concat(''V_'' ,pspd.SNOWFLAKE_TABLE_NAME)\nWHERE psi.PBI_DB_NAME = ''',pipeline().parameters.p_dataset_nm,''' and pspd.PBI_DB_NAME = ''',pipeline().parameters.p_dataset_nm,\n''' and pspd.SNOWFLAKE_TABLE_NAME in (',pipeline().parameters.p_table_nm,') \nand replace(pspd.PARTITION,''Q'')::number < (year(current_date()) ||  quarter(current_date()) || to_char(current_date(),''MM''))::number\nand pspd.PARTITION_REFRESH_FLAG = TRUE')",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_audit_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_audit_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_auditDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "create_refresh_objects",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "refresh_1950_partitions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get_pbi_partition_details').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "construct_json",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "v_objects",
										"value": {
											"value": "@json(concat('', \n    concat(\n        '{ \"database\": \"', item().PBI_DB_NAME, \n        '\", \"table\": \"', item().PBI_TABLE_NAME, \n        '\", \"partition\": \"', item().PARTITION, '\" }'\n    ),\n''))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "construct_partition_false_update",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "construct_json",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "v_objects_false_update",
										"value": {
											"value": "@concat('''',item().SNOWFLAKE_TABLE_NAME,item().PARTITION,'''')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "append_1950_json",
						"type": "AppendVariable",
						"dependsOn": [
							{
								"activity": "create_refresh_objects",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_objects",
							"value": {
								"value": "@json(concat(\n    '{',\n        '\"database\": \"Inventory Gold Dataset\",',\n        '\"table\": \"Inventory Transactions\",',\n        '\"partition\": \"1950Q101\"',\n    '}'\n))\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "pbi_full_refresh",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "false_update_script",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.p_web_body_fullrefresh",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "loop_exit_condition_onFailure",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(variables('foreach_exit'),bool(0))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "refresh_full_dataset",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "pp_pbi_refresh_api",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"p_group_id": {
															"value": "@variables('v_pbi_group_id')",
															"type": "Expression"
														},
														"p_dataset_id": {
															"value": "@variables('v_dataset_id')",
															"type": "Expression"
														},
														"p_web_body": {
															"value": "@item()",
															"type": "Expression"
														},
														"p_dataset_nm": {
															"value": "@pipeline().parameters.p_dataset_nm",
															"type": "Expression"
														},
														"p_webhook_url": {
															"value": "@pipeline().parameters.p_webhook_url",
															"type": "Expression"
														},
														"p_refreshType": "Full"
													}
												}
											},
											{
												"name": "foreach_exit",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "refresh_full_dataset",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "foreach_exit",
													"value": {
														"value": "@bool(1)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Fail1",
												"type": "Fail",
												"dependsOn": [
													{
														"activity": "foreach_exit",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"message": "Full Refresh - Pipeline failed as one of the API failed",
													"errorCode": "1111"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "refresh_pbi_succeeded",
						"description": "",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pbi_full_refresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_pbi_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().parameters.p_dataset_nm",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@concat('Succeeded')",
									"type": "Expression"
								},
								"message": {
									"value": "@concat('Dataset refresh is completed and can be used by the users for analysis')",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().parameters.p_webhook_url",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"extendedStatus": {
									"value": "@concat('Dataset is updated')",
									"type": "Expression"
								},
								"color": "008000",
								"refreshType": {
									"value": "@concat('Complete')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "refresh_1950_partitions",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "set_secret_key",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "text/plain"
							},
							"url": {
								"value": "@concat(pipeline().parameters.p_fn_app_url)",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "IR-Snowflake-NALA",
								"type": "IntegrationRuntimeReference"
							},
							"body": {
								"value": "@concat('{    \n    \"serverName\": \"',pipeline().parameters.p_server_nm,'\",  \n    \"databaseName\": \"Inventory Gold Dataset\",   \n    \"tenantId\": \"',pipeline().globalParameters.pbi_tenant_id, '\",    \n    \"clientId\": \"', pipeline().globalParameters.pbi_service_principal_id,'\",   \n    \"clientSecret\": \"',variables('v_secret_key'), '\"\n}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "refresh_partitions_dataset",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "append_1950_json",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_pbi_refresh_api",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_group_id": {
									"value": "@variables('v_pbi_group_id')",
									"type": "Expression"
								},
								"p_dataset_id": {
									"value": "@variables('v_dataset_id')",
									"type": "Expression"
								},
								"p_web_body": {
									"value": "@concat('{\n  \"type\": \"full\",\n  \"commitMode\": \"transactional\",\n  \"objects\": ', variables('v_objects'), ',\n  \"applyRefreshPolicy\": \"false\",\n  \"maxParallelism\" : \"30\",\n   \"retryCount\" : \"3\"\n}')",
									"type": "Expression"
								},
								"p_dataset_nm": {
									"value": "@pipeline().parameters.p_dataset_nm",
									"type": "Expression"
								},
								"p_webhook_url": {
									"value": "@pipeline().parameters.p_webhook_url",
									"type": "Expression"
								},
								"p_refreshType": "Partition"
							}
						}
					},
					{
						"name": "get_secret_key",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "refresh_inventory_transactions_current_month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@concat(pipeline().globalParameters.key_vault_url, '/secrets/',pipeline().globalParameters.pbi_service_principal_key, '?api-version=7.0')",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "IR-Snowflake-NALA",
								"type": "IntegrationRuntimeReference"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "set_secret_key",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "get_secret_key",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_secret_key",
							"value": {
								"value": "@activity('get_secret_key').output.value",
								"type": "Expression"
							}
						}
					},
					{
						"name": "false_update_script",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "refresh_partitions_dataset",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat(\n'Update ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,' .CONTROL.pbi_snowflake_partition_details set partition_refresh_flag = false\n where pbi_db_name = ''',pipeline().parameters.p_dataset_nm,\n''' and concat(SNOWFLAKE_TABLE_NAME,PARTITION) in (',\njoin(variables('v_objects_false_update'),','),\n')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "refresh_inventory_transactions_current_month",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "get_pbi_partition_details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_pbi_refresh_api",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_group_id": {
									"value": "@variables('v_pbi_group_id')",
									"type": "Expression"
								},
								"p_dataset_id": {
									"value": "@variables('v_dataset_id')",
									"type": "Expression"
								},
								"p_web_body": {
									"value": "@concat('{\n  \"type\": \"full\",\n    \"objects\": [\n                {\n            \"database\": \"Inventory Gold Dataset\",\n            \"table\": \"Inventory Transactions\"\n        },\n    ],\n    \"applyRefreshPolicy\": \"true\"\n}')",
									"type": "Expression"
								},
								"p_dataset_nm": {
									"value": "@pipeline().parameters.p_dataset_nm",
									"type": "Expression"
								},
								"p_webhook_url": {
									"value": "@pipeline().parameters.p_webhook_url",
									"type": "Expression"
								},
								"p_refreshType": "Partition"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_table_nm": {
						"type": "string",
						"defaultValue": "'FACT_INVENTORY_JOURNAL', 'FACT_INVENTORY_TRANSACTIONS','DIM_INVENTORY','DIM_LEDGER_DIMENSION'"
					},
					"p_tgt_audit_table_nm": {
						"type": "string",
						"defaultValue": "PBI_SNOWFLAKE_BRIDGE"
					},
					"p_tgt_audit_schema_nm": {
						"type": "string",
						"defaultValue": "CONTROL"
					},
					"p_dataset_nm": {
						"type": "string",
						"defaultValue": "Inventory Gold Dataset"
					},
					"p_webhook_url": {
						"type": "string",
						"defaultValue": "https://tempursealyinc.webhook.office.com/webhookb2/7aa89678-96e1-4bbf-a53a-a4ed05939336@7c6c07f6-1ef4-4368-8d5d-4686d15efd79/IncomingWebhook/35c330edb7cc4683bfaac3e236a6420e/4c6968dc-2ec8-4f99-b936-1206cdf30aeb/V2KnMhhdKI4Mq2eiqPuqxDOqrWneohuIGlozyB6D2X0dY1"
					},
					"p_web_body_fullrefresh": {
						"type": "array"
					},
					"p_fn_app_url": {
						"type": "string"
					},
					"p_server_nm": {
						"type": "string"
					}
				},
				"variables": {
					"v_objects": {
						"type": "Array"
					},
					"v_pbi_group_id": {
						"type": "String"
					},
					"v_dataset_id": {
						"type": "String"
					},
					"foreach_exit": {
						"type": "Boolean",
						"defaultValue": false
					},
					"v_objects_false_update": {
						"type": "Array"
					},
					"v_secret_key": {
						"type": "String"
					}
				},
				"folder": {
					"name": "pbi_incremental_refresh"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_fact_sales_deliveries')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_parquet",
								"type": "DatasetReference"
							},
							"name": "SrcCustPackingSlipTrans"
						},
						{
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference"
							},
							"name": "SrcCustPackingSlipTransExt"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference"
							},
							"name": "CustPackingSlipTrans"
						},
						{
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference"
							},
							"name": "CustPackingSlipTransExt"
						}
					],
					"transformations": [
						{
							"name": "JoinColumns"
						},
						{
							"name": "SetActiveFlag"
						},
						{
							"name": "PullDistinctEntries"
						},
						{
							"name": "UpsertCustPackingSlipTransExt"
						}
					],
					"scriptLines": [
						"parameters{",
						"     df_prev_max_timestamp as string",
						"}",
						"source(output(",
						"          RECID as long,",
						"          DEFAULTDIMENSION as long,",
						"          TRANSACTIONCODE as string,",
						"          INVENTDIMID as string,",
						"          ITEMID as string,",
						"          DELIVERYPOSTALADDRESS as long,",
						"          SALESGROUP as string,",
						"          SALESUNIT as string,",
						"          DELIVERYDATE as timestamp,",
						"          SALESLINESHIPPINGDATECONFIRMED as timestamp,",
						"          SALESLINESHIPPINGDATEREQUESTED as timestamp,",
						"          INVENTTRANSID as string,",
						"          DATAAREAID as string,",
						"          LINENUM as decimal(32,16),",
						"          ORIGSALESID as string,",
						"          PACKINGSLIPID as string,",
						"          SALESID as string,",
						"          DELIVERYTYPE as integer,",
						"          INVENTQTY as decimal(32,16),",
						"          QTY as decimal(32,16),",
						"          PRICEUNIT as decimal(32,16),",
						"          VALUEMST as decimal(32,16),",
						"          MODIFIEDDATETIME as timestamp,",
						"          DEFAULTDIMENSION_BUSINESS_UNIT as string,",
						"          DEFAULTDIMENSION_MODIFIEDDATETIME as timestamp,",
						"          SALESTABLE_SMMCAMPAIGNID as string,",
						"          SALESTABLE_MARKUPGROUP as string,",
						"          SALESTABLE_LINEDISC as string,",
						"          SALESTABLE_SALESPOOLID as string,",
						"          SALESTABLE_PRICEGROUPID as string,",
						"          SALESTABLE_WORKERSALESRESPONSIBLE as long,",
						"          SALESTABLE_DOCUMENTSTATUS as integer,",
						"          SALESTABLE_RETURNSTATUS as integer,",
						"          SALESTABLE_SALESSTATUS as integer,",
						"          SALESTABLE_SALESTYPE as integer,",
						"          SALESTABLE_ATAGENT as integer,",
						"          SALESTABLE_SHIPCARRIERBLINDSHIPMENT as integer,",
						"          SALESTABLE_SHIPCARRIEREXPEDITEDSHIPMENT as integer,",
						"          SALESTABLE_ORDERBLOCKED as integer,",
						"          SALESTABLE_MCRORDERSTOPPED as integer,",
						"          SALESTABLE_SHIPCARRIERFUELSURCHARGE as integer,",
						"          SALESTABLE_MODIFIEDDATETIME as timestamp,",
						"          CUSTPACKINGSLIPJOUR_INVOICEACCOUNT as string,",
						"          CUSTPACKINGSLIPJOUR_ORDERACCOUNT as string,",
						"          CUSTPACKINGSLIPJOUR_DLVMODE as string,",
						"          CUSTPACKINGSLIPJOUR_DLVTERM as string,",
						"          CUSTPACKINGSLIPJOUR_INVOICEPOSTALADDRESS as long,",
						"          CUSTPACKINGSLIPJOUR_SHIPCARRIERID as string,",
						"          CUSTPACKINGSLIPJOUR_INVENTLOCATIONID as string,",
						"          CUSTPACKINGSLIPJOUR_WORKERSALESTAKER as long,",
						"          CUSTPACKINGSLIPJOUR_NTT_DELIVERYSTATUS as integer,",
						"          CUSTPACKINGSLIPJOUR_DOCUMENTDATE as timestamp,",
						"          CUSTPACKINGSLIPJOUR_BILLOFLADINGID as string,",
						"          CUSTPACKINGSLIPJOUR_INTERNALPACKINGSLIPID as string,",
						"          CUSTPACKINGSLIPJOUR_LEDGERVOUCHER as string,",
						"          CUSTPACKINGSLIPJOUR_PURCHASEORDER as string,",
						"          CUSTPACKINGSLIPJOUR_EBCOVERRIDESTATUS as string,",
						"          CUSTPACKINGSLIPJOUR_MODIFIEDDATETIME as timestamp,",
						"          INVENTDIM1_CONFIGID as string,",
						"          INVENTDIM1_MODIFIEDDATETIME as timestamp,",
						"          INVENTDIMCOMBINATION_PDMSTATUS as long,",
						"          INVENTDIMCOMBINATION_MODIFIEDDATETIME as timestamp,",
						"          SHIPCARRIERPACKAGE1_ORIG_CARRIERID as string,",
						"          SHIPCARRIERPACKAGE1_ORIG_SHIPDATE as timestamp,",
						"          SHIPCARRIERPACKAGE1_ORIG_CARRIERNAME as string,",
						"          SHIPCARRIERPACKAGE2_SHIPDATE as timestamp,",
						"          SALESLINE_LINEDISC as decimal(32,16),",
						"          SALESLINE_LINEPERCENT as decimal(32,16),",
						"          SALESLINE_RETURNSTATUS as integer,",
						"          SALESLINE_SALESSTATUS as string,",
						"          SALESLINE_SHIPCARRIERDLVTYPE as integer,",
						"          SALESLINE_COMPLETE as integer,",
						"          SALESLINE_ORDERBLOCKED as integer,",
						"          SALESLINE_SCRAP as integer,",
						"          SALESLINE_STOCKEDPRODUCT as integer,",
						"          SALESLINE_MODIFIEDDATETIME as timestamp,",
						"          MCRSALESLINEDROPSHIPMENT_DROPSHIPMENT as integer,",
						"          SHIPCARRIERTRACKING_NTT_DELIVERYDATE as timestamp,",
						"          SHIPCARRIERTRACKING_TRACKINGNUMBER as string,",
						"          TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_DOCUMENTSTATUS as string,",
						"          TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_RETURNSTATUSHEADER as string,",
						"          TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_SALESSTATUSHEADER as string,",
						"          TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_RETURNSTATUSLINE as string,",
						"          TIMEXTENDERENUMTABLE5_ENUMVALUELABEL_SALESSTATUSLINE as string,",
						"          TIMEXTENDERENUMTABLE6_ENUMVALUELABEL_SALESTYPE as string,",
						"          TIMEXTENDERENUMTABLE7_ENUMVALUELABEL_SHIPCARRIERDLVTYPE as string,",
						"          TIMEXTENDERENUMTABLE8_ENUMVALUELABEL_NTT_DELIVERYSTATUS as string,",
						"          TIMEXTENDERENUMTABLE9_ENUMVALUELABEL_TRADELINEDLVTYPE as string,",
						"          PDMSTATUS_NAME as string,",
						"          HK_CUSTPACKINGSLIPTRANS_EXT_HASH_KEY as string,",
						"          LATEST_MODIFIEDDATETIME as timestamp,",
						"          HK_JOB_RUN_ID as string,",
						"          HK_SOURCE_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SrcCustPackingSlipTrans",
						"source(output(",
						"          HK_SOURCE_NAME as string,",
						"          HK_JOB_RUN_ID as string,",
						"          HK_CREATED_TIMESTAMP as timestamp,",
						"          HK_WAREHOUSE_ID as string,",
						"          HK_CUSTPACKINGSLIPTRANS_EXT_HASH_KEY as string,",
						"          RECID as long,",
						"          SHIPCARRIERPACKAGE1_ORIG_CARRIERID as string,",
						"          SHIPCARRIERPACKAGE1_ORIG_SHIPDATE as date,",
						"          SHIPCARRIERPACKAGE1_ORIG_CARRIERNAME as string,",
						"          SHIPCARRIERPACKAGE2_SHIPDATE as date,",
						"          MCRSALESLINEDROPSHIPMENT_DROPSHIPMENT as decimal(38,0),",
						"          SHIPCARRIERTRACKING_NTT_DELIVERYDATE as date,",
						"          SHIPCARRIERTRACKING_TRACKINGNUMBER as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> SrcCustPackingSlipTransExt",
						"SrcCustPackingSlipTrans, SrcCustPackingSlipTransExt join(SrcCustPackingSlipTrans@RECID == SrcCustPackingSlipTransExt@RECID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinColumns",
						"JoinColumns derive(ACTIVE_FLAG = iif((SrcCustPackingSlipTrans@RECID == SrcCustPackingSlipTransExt@RECID && SrcCustPackingSlipTrans@HK_CUSTPACKINGSLIPTRANS_EXT_HASH_KEY == toString(SrcCustPackingSlipTransExt@HK_CUSTPACKINGSLIPTRANS_EXT_HASH_KEY) && LATEST_MODIFIEDDATETIME <= toTimestamp($df_prev_max_timestamp)) , 'R',\r",
						"iif((SrcCustPackingSlipTrans@RECID == SrcCustPackingSlipTransExt@RECID && SrcCustPackingSlipTrans@HK_CUSTPACKINGSLIPTRANS_EXT_HASH_KEY == toString(SrcCustPackingSlipTransExt@HK_CUSTPACKINGSLIPTRANS_EXT_HASH_KEY) && LATEST_MODIFIEDDATETIME > toTimestamp($df_prev_max_timestamp)) || (SrcCustPackingSlipTrans@RECID == SrcCustPackingSlipTransExt@RECID && SrcCustPackingSlipTrans@HK_CUSTPACKINGSLIPTRANS_EXT_HASH_KEY != toString(SrcCustPackingSlipTransExt@HK_CUSTPACKINGSLIPTRANS_EXT_HASH_KEY)), 'U','I'))) ~> SetActiveFlag",
						"SetActiveFlag filter(ACTIVE_FLAG != 'R') ~> PullDistinctEntries",
						"PullDistinctEntries alterRow(updateIf(ACTIVE_FLAG=='U'),",
						"     insertIf(ACTIVE_FLAG=='I')) ~> UpsertCustPackingSlipTransExt",
						"PullDistinctEntries sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          RECID = SrcCustPackingSlipTrans@RECID,",
						"          DEFAULTDIMENSION,",
						"          TRANSACTIONCODE,",
						"          INVENTDIMID,",
						"          ITEMID,",
						"          DELIVERYPOSTALADDRESS,",
						"          SALESGROUP,",
						"          SALESUNIT,",
						"          DELIVERYDATE,",
						"          SALESLINESHIPPINGDATECONFIRMED,",
						"          SALESLINESHIPPINGDATEREQUESTED,",
						"          INVENTTRANSID,",
						"          DATAAREAID,",
						"          LINENUM,",
						"          ORIGSALESID,",
						"          PACKINGSLIPID,",
						"          SALESID,",
						"          INVENTQTY,",
						"          QTY,",
						"          PRICEUNIT,",
						"          VALUEMST,",
						"          MODIFIEDDATETIME,",
						"          DEFAULTDIMENSION_BUSINESS_UNIT,",
						"          DEFAULTDIMENSION_MODIFIEDDATETIME,",
						"          SALESTABLE_SMMCAMPAIGNID,",
						"          SALESTABLE_MARKUPGROUP,",
						"          SALESTABLE_LINEDISC,",
						"          SALESTABLE_SALESPOOLID,",
						"          SALESTABLE_PRICEGROUPID,",
						"          SALESTABLE_WORKERSALESRESPONSIBLE,",
						"          SALESTABLE_DOCUMENTSTATUS,",
						"          SALESTABLE_RETURNSTATUS,",
						"          SALESTABLE_SALESSTATUS,",
						"          SALESTABLE_SALESTYPE,",
						"          SALESTABLE_ATAGENT,",
						"          SALESTABLE_SHIPCARRIERBLINDSHIPMENT,",
						"          SALESTABLE_SHIPCARRIEREXPEDITEDSHIPMENT,",
						"          SALESTABLE_ORDERBLOCKED,",
						"          SALESTABLE_MCRORDERSTOPPED,",
						"          SALESTABLE_SHIPCARRIERFUELSURCHARGE,",
						"          SALESTABLE_MODIFIEDDATETIME,",
						"          CUSTPACKINGSLIPJOUR_INVOICEACCOUNT,",
						"          CUSTPACKINGSLIPJOUR_ORDERACCOUNT,",
						"          CUSTPACKINGSLIPJOUR_DLVMODE,",
						"          CUSTPACKINGSLIPJOUR_DLVTERM,",
						"          CUSTPACKINGSLIPJOUR_INVOICEPOSTALADDRESS,",
						"          CUSTPACKINGSLIPJOUR_SHIPCARRIERID,",
						"          CUSTPACKINGSLIPJOUR_INVENTLOCATIONID,",
						"          CUSTPACKINGSLIPJOUR_WORKERSALESTAKER,",
						"          CUSTPACKINGSLIPJOUR_NTT_DELIVERYSTATUS,",
						"          CUSTPACKINGSLIPJOUR_DOCUMENTDATE,",
						"          CUSTPACKINGSLIPJOUR_BILLOFLADINGID,",
						"          CUSTPACKINGSLIPJOUR_INTERNALPACKINGSLIPID,",
						"          CUSTPACKINGSLIPJOUR_LEDGERVOUCHER,",
						"          CUSTPACKINGSLIPJOUR_PURCHASEORDER,",
						"          CUSTPACKINGSLIPJOUR_EBCOVERRIDESTATUS,",
						"          CUSTPACKINGSLIPJOUR_MODIFIEDDATETIME,",
						"          INVENTDIM1_CONFIGID,",
						"          INVENTDIM1_MODIFIEDDATETIME,",
						"          INVENTDIMCOMBINATION_PDMSTATUS,",
						"          INVENTDIMCOMBINATION_MODIFIEDDATETIME,",
						"          SHIPCARRIERPACKAGE1_ORIG_CARRIERID = SrcCustPackingSlipTrans@SHIPCARRIERPACKAGE1_ORIG_CARRIERID,",
						"          SHIPCARRIERPACKAGE1_ORIG_SHIPDATE = SrcCustPackingSlipTrans@SHIPCARRIERPACKAGE1_ORIG_SHIPDATE,",
						"          SHIPCARRIERPACKAGE1_ORIG_CARRIERNAME = SrcCustPackingSlipTrans@SHIPCARRIERPACKAGE1_ORIG_CARRIERNAME,",
						"          SHIPCARRIERPACKAGE2_SHIPDATE = SrcCustPackingSlipTrans@SHIPCARRIERPACKAGE2_SHIPDATE,",
						"          SALESLINE_LINEDISC,",
						"          SALESLINE_LINEPERCENT,",
						"          SALESLINE_RETURNSTATUS,",
						"          SALESLINE_SALESSTATUS,",
						"          SALESLINE_SHIPCARRIERDLVTYPE,",
						"          SALESLINE_COMPLETE,",
						"          SALESLINE_ORDERBLOCKED,",
						"          SALESLINE_SCRAP,",
						"          SALESLINE_STOCKEDPRODUCT,",
						"          SALESLINE_MODIFIEDDATETIME,",
						"          MCRSALESLINEDROPSHIPMENT_DROPSHIPMENT = SrcCustPackingSlipTrans@MCRSALESLINEDROPSHIPMENT_DROPSHIPMENT,",
						"          SHIPCARRIERTRACKING_NTT_DELIVERYDATE = SrcCustPackingSlipTrans@SHIPCARRIERTRACKING_NTT_DELIVERYDATE,",
						"          SHIPCARRIERTRACKING_TRACKINGNUMBER = SrcCustPackingSlipTrans@SHIPCARRIERTRACKING_TRACKINGNUMBER,",
						"          TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_DOCUMENTSTATUS,",
						"          TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_RETURNSTATUSHEADER,",
						"          TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_SALESSTATUSHEADER,",
						"          TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_RETURNSTATUSLINE,",
						"          TIMEXTENDERENUMTABLE5_ENUMVALUELABEL_SALESSTATUSLINE,",
						"          TIMEXTENDERENUMTABLE6_ENUMVALUELABEL_SALESTYPE,",
						"          TIMEXTENDERENUMTABLE7_ENUMVALUELABEL_SHIPCARRIERDLVTYPE,",
						"          TIMEXTENDERENUMTABLE8_ENUMVALUELABEL_NTT_DELIVERYSTATUS,",
						"          TIMEXTENDERENUMTABLE9_ENUMVALUELABEL_TRADELINEDLVTYPE,",
						"          LATEST_MODIFIEDDATETIME,",
						"          HK_JOB_RUN_ID = SrcCustPackingSlipTrans@HK_JOB_RUN_ID,",
						"          HK_SOURCE_NAME = SrcCustPackingSlipTrans@HK_SOURCE_NAME,",
						"          PDMSTATUS_NAME",
						"     )) ~> CustPackingSlipTrans",
						"UpsertCustPackingSlipTransExt sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['RECID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          RECID = SrcCustPackingSlipTrans@RECID,",
						"          SHIPCARRIERPACKAGE1_ORIG_CARRIERID = SrcCustPackingSlipTrans@SHIPCARRIERPACKAGE1_ORIG_CARRIERID,",
						"          SHIPCARRIERPACKAGE1_ORIG_SHIPDATE = SrcCustPackingSlipTrans@SHIPCARRIERPACKAGE1_ORIG_SHIPDATE,",
						"          SHIPCARRIERPACKAGE1_ORIG_CARRIERNAME = SrcCustPackingSlipTrans@SHIPCARRIERPACKAGE1_ORIG_CARRIERNAME,",
						"          SHIPCARRIERPACKAGE2_SHIPDATE = SrcCustPackingSlipTrans@SHIPCARRIERPACKAGE2_SHIPDATE,",
						"          MCRSALESLINEDROPSHIPMENT_DROPSHIPMENT = SrcCustPackingSlipTrans@MCRSALESLINEDROPSHIPMENT_DROPSHIPMENT,",
						"          SHIPCARRIERTRACKING_NTT_DELIVERYDATE = SrcCustPackingSlipTrans@SHIPCARRIERTRACKING_NTT_DELIVERYDATE,",
						"          SHIPCARRIERTRACKING_TRACKINGNUMBER = SrcCustPackingSlipTrans@SHIPCARRIERTRACKING_TRACKINGNUMBER,",
						"          HK_CUSTPACKINGSLIPTRANS_EXT_HASH_KEY = SrcCustPackingSlipTrans@HK_CUSTPACKINGSLIPTRANS_EXT_HASH_KEY,",
						"          HK_JOB_RUN_ID = SrcCustPackingSlipTrans@HK_JOB_RUN_ID,",
						"          HK_SOURCE_NAME = SrcCustPackingSlipTrans@HK_SOURCE_NAME",
						"     )) ~> CustPackingSlipTransExt"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_load_dim_corporate_allocation_mapping')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_excel",
								"type": "DatasetReference"
							},
							"name": "srcCorporateAllocationMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference"
							},
							"name": "corpAllocationMapping"
						}
					],
					"transformations": [
						{
							"name": "constructColumns"
						},
						{
							"name": "pullLatestRecords"
						},
						{
							"name": "calculateMaxModifiedDatetime"
						}
					],
					"scriptLines": [
						"parameters{",
						"     df_prev_max_timestamp as string,",
						"     df_last_mod_tmstmp_corpallocationmapping as string,",
						"     df_pipeline_job_id as string",
						"}",
						"source(output(",
						"          {AX Company } as short,",
						"          {AX Main Account } as integer,",
						"          {IBR Line} as string,",
						"          {TAM Code} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> srcCorporateAllocationMapping",
						"srcCorporateAllocationMapping derive(MODIFIEDDATETIME = toTimestamp($df_last_mod_tmstmp_corpallocationmapping, 'yyyy-MM-dd\\'T\\'HH:mm'),",
						"          RAW_MODIFIEDDATETIME = toTimestamp($df_prev_max_timestamp),",
						"          AX_COMPANY = {AX Company },",
						"          AX_MAIN_ACCOUNT = {AX Main Account },",
						"          IBR_LINE = {IBR Line},",
						"          TAM_CODE = {TAM Code},",
						"          HK_SOURCE_NAME = toString(\"AXNALA\"),",
						"          HK_JOB_RUN_ID = $df_pipeline_job_id) ~> constructColumns",
						"calculateMaxModifiedDatetime filter(LATEST_MODIFIEDDATETIME > RAW_MODIFIEDDATETIME) ~> pullLatestRecords",
						"constructColumns window(LATEST_MODIFIEDDATETIME = max(MODIFIEDDATETIME)) ~> calculateMaxModifiedDatetime",
						"pullLatestRecords sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     stageInsert: true,",
						"     mapColumn(",
						"          MODIFIEDDATETIME,",
						"          AX_COMPANY,",
						"          AX_MAIN_ACCOUNT,",
						"          IBR_LINE,",
						"          TAM_CODE,",
						"          HK_SOURCE_NAME,",
						"          HK_JOB_RUN_ID,",
						"          LATEST_MODIFIEDDATETIME",
						"     )) ~> corpAllocationMapping"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_load_dim_customer')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_parquet",
								"type": "DatasetReference"
							},
							"name": "SrcCusttable"
						},
						{
							"dataset": {
								"referenceName": "ds_excel",
								"type": "DatasetReference"
							},
							"name": "ReportDealerExclusionSegment"
						},
						{
							"dataset": {
								"referenceName": "ds_excel",
								"type": "DatasetReference"
							},
							"name": "ReportDealerExclusionSubSegment"
						},
						{
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference"
							},
							"name": "LkpTruckVolume"
						},
						{
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference"
							},
							"name": "SrcCusttableExt"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference"
							},
							"name": "CusttableExt"
						},
						{
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference"
							},
							"name": "Custtable"
						}
					],
					"transformations": [
						{
							"name": "JoinSegmentColumn"
						},
						{
							"name": "JoinSubSegmentColumn"
						},
						{
							"name": "JoinLkpTruckVolumnColumns"
						},
						{
							"name": "JoinCusttableExtColumn"
						},
						{
							"name": "RederiveColumns"
						},
						{
							"name": "ActiveFlag"
						},
						{
							"name": "PullDistinctEntries"
						},
						{
							"name": "UpsertCusttableExtData"
						},
						{
							"name": "InsertCusttableData"
						}
					],
					"scriptLines": [
						"parameters{",
						"     df_prev_max_timestamp as string,",
						"     df_last_mod_tmstmp_repodealexc as string",
						"}",
						"source(output(",
						"          DATAAREAID as string,",
						"          ACCOUNTNUM as string,",
						"          PARTY as long,",
						"          EBCCOMPANYID as string,",
						"          OURACCOUNTNUM as string,",
						"          INVOICEACCOUNT as string,",
						"          CURRENCY as string,",
						"          USECASHDISC as integer,",
						"          MAINCONTACTWORKER as long,",
						"          BLOCKED as integer,",
						"          PASTDUECHECK as integer,",
						"          CREDITMAX as decimal(32,16),",
						"          MANDATORYCREDITLIMIT as integer,",
						"          EXCLUDECREDITLIMITBLOCKING as integer,",
						"          GRACEDAYS as decimal(32,16),",
						"          EBCBUYGRPEXEMPTION as integer,",
						"          EBCBUYGRPKICKER as integer,",
						"          CASHDISC as string,",
						"          DLVMODE as string,",
						"          DLVTERM as string,",
						"          PAYMMODE as string,",
						"          PAYMTERMID as string,",
						"          CUSTCLASSIFICATIONID as string,",
						"          COMPANYCHAINID as string,",
						"          CUSTGROUP as string,",
						"          EBCDIVISIONID as string,",
						"          LINEOFBUSINESSID as string,",
						"          MARKUPGROUP as string,",
						"          PRICEGROUP as string,",
						"          DEFAULTDIMENSION as long,",
						"          SALESDISTRICTID as string,",
						"          SALESGROUP as string,",
						"          SALESPOOLID as string,",
						"          SEGMENTID as string,",
						"          SUBSEGMENTID as string,",
						"          TAXGROUP as string,",
						"          EBCREPORTPARENT as string,",
						"          MCSEXTERNALPRICING as integer,",
						"          MCSNETWORKID as string,",
						"          MODIFIEDDATETIME as timestamp,",
						"          DIRPARTYTABLE1_NAME as string,",
						"          DIRPARTYTABLE1_INSTANCERELATIONTYPE as long,",
						"          DIRPARTYTABLE1_EBCLEGACY as string,",
						"          DIRPARTYTABLE1_ORGNUMBER as string,",
						"          DIRPARTYTABLE1_PRIMARYADDRESSLOCATION as long,",
						"          DIRPARTYTABLE1_MODIFIEDDATETIME as timestamp,",
						"          CURRENCY_TXT as string,",
						"          CURRENCY_MODIFIEDDATETIME as timestamp,",
						"          HCMWORKER1_PERSONNELNUMBER as string,",
						"          HCMWORKER1_PERSON as long,",
						"          HCMWORKER1_MODIFIEDDATETIME as timestamp,",
						"          DIRPARTYTABLE2_NAME as string,",
						"          DIRPARTYTABLE2_MODIFIEDDATETIME as timestamp,",
						"          TSIAVGDAYS_CPAVGDAY as integer,",
						"          TSIAVGDAYS_YRAVGDAY as integer,",
						"          CASHDISC_DESCRIPTION as string,",
						"          CASHDISC_PERCENT as decimal(32,16),",
						"          DLVMODE_TXT as string,",
						"          DLVTERM_TXT as string,",
						"          CUSTPAYMMODETABLE_NAME as string,",
						"          PAYMTERM_DESCRIPTION as string,",
						"          PAYMTERM_NUMOFDAYS as integer,",
						"          PAYMTERM_NUMOFMONTHS as integer,",
						"          CUSTCLASSIFICATIONGROUP_TXT as string,",
						"          SMMBUSRELCHAINGROUP_DESCRIPTION as string,",
						"          CUSTGROUP_NAME as string,",
						"          SMMBUSRELSALESDISTRICTGROUP1_EBCDIVISIONID as string,",
						"          SMMBUSRELSALESDISTRICTGROUP1_DESCRIPTION as string,",
						"          SMMBUSRELSALESDISTRICTGROUP1_ALTROLLUP1 as string,",
						"          SMMBUSRELSALESDISTRICTGROUP1_ALTROLLUP2 as string,",
						"          SMMBUSRELSALESDISTRICTGROUP1_ALTROLLUP3 as string,",
						"          EBCSALESMKTDIVISION1_EBCDIVISIONDESC as string,",
						"          LINEOFBUSINESS_DESCRIPTION as string,",
						"          MARKUPGROUP_TXT as string,",
						"          PRICEDISCGROUP_NAME as string,",
						"          DEFAULTDIMENSION_C_SALES_CHANNEL as string,",
						"          DEFAULTDIMENSION_C_SALES_CHANNEL_DESCRIPTION as string,",
						"          DEFAULTDIMENSION_MODIFIEDDATETIME as timestamp,",
						"          COMMISSIONSALESGROUP_NAME as string,",
						"          SALESPOOL_NAME as string,",
						"          SMMBUSRELSEGMENTGROUP_DESCRIPTION as string,",
						"          SMMBUSRELSUBSEGMENTGROUP_DESCRIPTION as string,",
						"          TAXGROUPHEADING_TAXGROUPNAME as string,",
						"          LOGISTICSPOSTALADDRESS1_STREET as string,",
						"          LOGISTICSPOSTALADDRESS1_CITY as string,",
						"          LOGISTICSPOSTALADDRESS1_STATE as string,",
						"          LOGISTICSPOSTALADDRESS1_ZIPCODE as string,",
						"          LOGISTICSPOSTALADDRESS1_COUNTRYREGIONID as string,",
						"          LOGISTICSPOSTALADDRESS1_TIMEZONE as integer,",
						"          TIMEZONESLIST_TIMEZONEKEYNAME as string,",
						"          LOGISTICSLOCATION1_DESCRIPTION as string,",
						"          LOGISTICSELECTRONICADDRESS1_LOCATOR as string,",
						"          LOGISTICSELECTRONICADDRESS2_LOCATOR as string,",
						"          LOGISTICSELECTRONICADDRESS3_LOCATOR as string,",
						"          LOGISTICSPOSTALADDRESS2_STREET as string,",
						"          LOGISTICSPOSTALADDRESS2_CITY as string,",
						"          LOGISTICSPOSTALADDRESS2_STATE as string,",
						"          LOGISTICSPOSTALADDRESS2_ZIPCODE as string,",
						"          LOGISTICSPOSTALADDRESS2_COUNTRYREGIONID as string,",
						"          LOGISTICSLOCATION2_DESCRIPTION as string,",
						"          LOGISTICSLOCATION2_LOCATIONID as string,",
						"          CUSTTABLE2_EBCDIVISIONID as string,",
						"          CUSTTABLE2_SALESDISTRICTID as string,",
						"          CUSTTABLE2_MAINCONTACTWORKER as long,",
						"          CUSTTABLE2_MODIFIEDDATETIME as timestamp,",
						"          SMMBUSRELSALESDISTRICTGROUP2_DESCRIPTION as string,",
						"          EBCSALESMKTDIVISION2_EBCDIVISIONDESC as string,",
						"          HCMWORKER2_PERSONNELNUMBER as string,",
						"          HCMWORKER2_PERSON as long,",
						"          HCMWORKER2_MODIFIEDDATETIME as timestamp,",
						"          DIRPARTYTABLE3_NAME as string,",
						"          DIRPARTYTABLE3_MODIFIEDDATETIME as timestamp,",
						"          LATEST_MODIFIEDDATETIME as timestamp,",
						"          HK_JOB_RUN_ID as string,",
						"          HK_SOURCE_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SrcCusttable",
						"source(output(",
						"          SegmentID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ReportDealerExclusionSegment",
						"source(output(",
						"          SubSegmentID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ReportDealerExclusionSubSegment",
						"source(output(",
						"          LKP_TRUCK_VOLUME_LEGAL_ENTITY_ID as string,",
						"          HK_LAST_UPDATED_TIMESTAMP as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     query: 'select ltv1.legal_entity_id as LKP_TRUCK_VOLUME_LEGAL_ENTITY_ID , ltv1.hk_last_updated_timestamp as HK_LAST_UPDATED_TIMESTAMP\\nfrom LKP_TRUCK_VOLUME ltv1\\nwhere is_tempurpedic = true',",
						"     format: 'query') ~> LkpTruckVolume",
						"source(output(",
						"          DATAAREAID as string,",
						"          ACCOUNTNUM as string,",
						"          HK_CUSTTABLE_EXT_HASH_KEY as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     query: 'select DATAAREAID, ACCOUNTNUM, HK_CUSTTABLE_EXT_HASH_KEY from custtable_ext',",
						"     format: 'query') ~> SrcCusttableExt",
						"SrcCusttable, ReportDealerExclusionSegment join(SrcCusttable@SEGMENTID == ReportDealerExclusionSegment@SegmentID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinSegmentColumn",
						"JoinSegmentColumn, ReportDealerExclusionSubSegment join(SrcCusttable@SUBSEGMENTID == ReportDealerExclusionSubSegment@SubSegmentID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinSubSegmentColumn",
						"JoinSubSegmentColumn, LkpTruckVolume join(DATAAREAID == LKP_TRUCK_VOLUME_LEGAL_ENTITY_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinLkpTruckVolumnColumns",
						"JoinLkpTruckVolumnColumns, SrcCusttableExt join(SrcCusttable@DATAAREAID == SrcCusttableExt@DATAAREAID",
						"     && SrcCusttable@ACCOUNTNUM == SrcCusttableExt@ACCOUNTNUM,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCusttableExtColumn",
						"JoinCusttableExtColumn derive(LATEST_MODIFIEDDATETIME_NEW = greatest(LATEST_MODIFIEDDATETIME,\r",
						"iifNull(HK_LAST_UPDATED_TIMESTAMP,toTimestamp('1950-01-01 00:00:00'),HK_LAST_UPDATED_TIMESTAMP),\r",
						"toTimestamp($df_last_mod_tmstmp_repodealexc, 'YYYY-MM-DD HH:MM:SS')),",
						"          SRC_HK_CUSTTABLE_EXT_HASH_KEY = toString(sha1(iif(isNull(SrcCusttable@DATAAREAID),'',SrcCusttable@DATAAREAID),'~',\r",
						"iif(isNull(SrcCusttable@ACCOUNTNUM),'',SrcCusttable@ACCOUNTNUM),'~',\r",
						"iif(isNull(TSIAVGDAYS_CPAVGDAY),0,TSIAVGDAYS_CPAVGDAY),'~',\r",
						"iif(isNull(TSIAVGDAYS_YRAVGDAY),0,TSIAVGDAYS_YRAVGDAY),'~',\r",
						"iif(isNull(CASHDISC_DESCRIPTION),'',CASHDISC_DESCRIPTION),'~',\r",
						"iifNull(CASHDISC_PERCENT, 0 , CASHDISC_PERCENT),'~',\r",
						"iif(isNull(DLVMODE_TXT),'',DLVMODE_TXT),'~',\r",
						"iif(isNull(DLVTERM_TXT),'',DLVTERM_TXT),'~',\r",
						"iif(isNull(CUSTPAYMMODETABLE_NAME),'',CUSTPAYMMODETABLE_NAME),'~',\r",
						"iif(isNull(PAYMTERM_DESCRIPTION),'',PAYMTERM_DESCRIPTION),'~',\r",
						"iif(isNull(PAYMTERM_NUMOFDAYS),0,PAYMTERM_NUMOFDAYS),'~',\r",
						"iif(isNull(PAYMTERM_NUMOFMONTHS),0,PAYMTERM_NUMOFMONTHS),'~',\r",
						"iif(isNull(CUSTCLASSIFICATIONGROUP_TXT),'',CUSTCLASSIFICATIONGROUP_TXT),'~',\r",
						"iif(isNull(SMMBUSRELCHAINGROUP_DESCRIPTION),'',SMMBUSRELCHAINGROUP_DESCRIPTION),'~',\r",
						"iif(isNull(CUSTGROUP_NAME),'',CUSTGROUP_NAME),'~',\r",
						"iif(isNull(SMMBUSRELSALESDISTRICTGROUP1_EBCDIVISIONID),'',SMMBUSRELSALESDISTRICTGROUP1_EBCDIVISIONID),'~',\r",
						"iif(isNull(SMMBUSRELSALESDISTRICTGROUP1_DESCRIPTION),'',SMMBUSRELSALESDISTRICTGROUP1_DESCRIPTION),'~',\r",
						"iif(isNull(SMMBUSRELSALESDISTRICTGROUP1_ALTROLLUP1),'',SMMBUSRELSALESDISTRICTGROUP1_ALTROLLUP1),'~',\r",
						"iif(isNull(SMMBUSRELSALESDISTRICTGROUP1_ALTROLLUP2),'',SMMBUSRELSALESDISTRICTGROUP1_ALTROLLUP2),'~',\r",
						"iif(isNull(SMMBUSRELSALESDISTRICTGROUP1_ALTROLLUP3),'',SMMBUSRELSALESDISTRICTGROUP1_ALTROLLUP3),'~',\r",
						"iif(isNull(EBCSALESMKTDIVISION1_EBCDIVISIONDESC),'',EBCSALESMKTDIVISION1_EBCDIVISIONDESC),'~',\r",
						"iif(isNull(LINEOFBUSINESS_DESCRIPTION),'',LINEOFBUSINESS_DESCRIPTION),'~',\r",
						"iif(isNull(MARKUPGROUP_TXT),'',MARKUPGROUP_TXT),'~',\r",
						"iif(isNull(PRICEDISCGROUP_NAME),'',PRICEDISCGROUP_NAME),'~',\r",
						"iif(isNull(SALESPOOL_NAME),'',SALESPOOL_NAME),'~',\r",
						"iif(isNull(SMMBUSRELSEGMENTGROUP_DESCRIPTION),'',SMMBUSRELSEGMENTGROUP_DESCRIPTION),'~',\r",
						"iif(isNull(SMMBUSRELSUBSEGMENTGROUP_DESCRIPTION),'',SMMBUSRELSUBSEGMENTGROUP_DESCRIPTION),'~',\r",
						"iif(isNull(TAXGROUPHEADING_TAXGROUPNAME),'',TAXGROUPHEADING_TAXGROUPNAME),'~',\r",
						"iif(isNull(LOGISTICSPOSTALADDRESS1_STREET),'',LOGISTICSPOSTALADDRESS1_STREET),'~',\r",
						"iif(isNull(LOGISTICSPOSTALADDRESS1_CITY),'',LOGISTICSPOSTALADDRESS1_CITY),'~',\r",
						"iif(isNull(LOGISTICSPOSTALADDRESS1_STATE),'',LOGISTICSPOSTALADDRESS1_STATE),'~',\r",
						"iif(isNull(LOGISTICSPOSTALADDRESS1_ZIPCODE),'',LOGISTICSPOSTALADDRESS1_ZIPCODE),'~',\r",
						"iif(isNull(LOGISTICSPOSTALADDRESS1_COUNTRYREGIONID),'',LOGISTICSPOSTALADDRESS1_COUNTRYREGIONID),'~',\r",
						"iif(isNull(LOGISTICSPOSTALADDRESS1_TIMEZONE),0,LOGISTICSPOSTALADDRESS1_TIMEZONE),'~',\r",
						"iif(isNull(TIMEZONESLIST_TIMEZONEKEYNAME),'',TIMEZONESLIST_TIMEZONEKEYNAME),'~',\r",
						"iif(isNull(LOGISTICSLOCATION1_DESCRIPTION),'',LOGISTICSLOCATION1_DESCRIPTION),'~',\r",
						"iif(isNull(LOGISTICSELECTRONICADDRESS1_LOCATOR),'',LOGISTICSELECTRONICADDRESS1_LOCATOR),'~',\r",
						"iif(isNull(LOGISTICSELECTRONICADDRESS2_LOCATOR),'',LOGISTICSELECTRONICADDRESS2_LOCATOR),'~',\r",
						"iif(isNull(LOGISTICSELECTRONICADDRESS3_LOCATOR),'',LOGISTICSELECTRONICADDRESS3_LOCATOR),'~',\r",
						"iif(isNull(LOGISTICSPOSTALADDRESS2_STREET),'',LOGISTICSPOSTALADDRESS2_STREET),'~',\r",
						"iif(isNull(LOGISTICSPOSTALADDRESS2_CITY),'',LOGISTICSPOSTALADDRESS2_CITY),'~',\r",
						"iif(isNull(LOGISTICSPOSTALADDRESS2_STATE),'',LOGISTICSPOSTALADDRESS2_STATE),'~',\r",
						"iif(isNull(LOGISTICSPOSTALADDRESS2_ZIPCODE),'',LOGISTICSPOSTALADDRESS2_ZIPCODE),'~',\r",
						"iif(isNull(LOGISTICSPOSTALADDRESS2_COUNTRYREGIONID),'',LOGISTICSPOSTALADDRESS2_COUNTRYREGIONID),'~',\r",
						"iif(isNull(LOGISTICSLOCATION2_DESCRIPTION),'',LOGISTICSLOCATION2_DESCRIPTION),'~',\r",
						"iif(isNull(LOGISTICSLOCATION2_LOCATIONID),'',LOGISTICSLOCATION2_LOCATIONID),'~',\r",
						"iif(isNull(SMMBUSRELSALESDISTRICTGROUP2_DESCRIPTION),'',SMMBUSRELSALESDISTRICTGROUP2_DESCRIPTION),'~',\r",
						"iif(isNull(EBCSALESMKTDIVISION2_EBCDIVISIONDESC),'',EBCSALESMKTDIVISION2_EBCDIVISIONDESC),'~',\r",
						"iif(isNull(ReportDealerExclusionSegment@SegmentID),'',ReportDealerExclusionSegment@SegmentID),'~',\r",
						"iif(isNull(ReportDealerExclusionSubSegment@SubSegmentID),'',ReportDealerExclusionSubSegment@SubSegmentID),'~',\r",
						"iif(isNull(LKP_TRUCK_VOLUME_LEGAL_ENTITY_ID),'',LKP_TRUCK_VOLUME_LEGAL_ENTITY_ID),'~'))) ~> RederiveColumns",
						"RederiveColumns derive(ACTIVE_FLAG = iif((SrcCusttable@DATAAREAID == SrcCusttableExt@DATAAREAID && SrcCusttable@ACCOUNTNUM == SrcCusttableExt@ACCOUNTNUM && SRC_HK_CUSTTABLE_EXT_HASH_KEY == HK_CUSTTABLE_EXT_HASH_KEY \r",
						"&& LATEST_MODIFIEDDATETIME_NEW < toTimestamp($df_prev_max_timestamp)) , 'R',\r",
						"iif((SrcCusttable@DATAAREAID == SrcCusttableExt@DATAAREAID && SrcCusttable@ACCOUNTNUM == SrcCusttableExt@ACCOUNTNUM && SRC_HK_CUSTTABLE_EXT_HASH_KEY == HK_CUSTTABLE_EXT_HASH_KEY \r",
						"&& LATEST_MODIFIEDDATETIME_NEW >= toTimestamp($df_prev_max_timestamp)) \r",
						"|| (SrcCusttable@DATAAREAID == SrcCusttableExt@DATAAREAID && SrcCusttable@ACCOUNTNUM == SrcCusttableExt@ACCOUNTNUM && SRC_HK_CUSTTABLE_EXT_HASH_KEY != HK_CUSTTABLE_EXT_HASH_KEY), 'U',\r",
						"'I'))) ~> ActiveFlag",
						"ActiveFlag filter(ACTIVE_FLAG != 'R') ~> PullDistinctEntries",
						"PullDistinctEntries alterRow(updateIf(ACTIVE_FLAG=='U'),",
						"     insertIf(ACTIVE_FLAG=='I')) ~> UpsertCusttableExtData",
						"ActiveFlag filter(ACTIVE_FLAG != 'R') ~> InsertCusttableData",
						"UpsertCusttableExtData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['DATAAREAID','ACCOUNTNUM'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          DATAAREAID = SrcCusttable@DATAAREAID,",
						"          ACCOUNTNUM = SrcCusttable@ACCOUNTNUM,",
						"          TSIAVGDAYS_CPAVGDAY,",
						"          TSIAVGDAYS_YRAVGDAY,",
						"          CASHDISC_DESCRIPTION,",
						"          CASHDISC_PERCENT,",
						"          DLVMODE_TXT,",
						"          DLVTERM_TXT,",
						"          CUSTPAYMMODETABLE_NAME,",
						"          PAYMTERM_DESCRIPTION,",
						"          PAYMTERM_NUMOFDAYS,",
						"          PAYMTERM_NUMOFMONTHS,",
						"          CUSTCLASSIFICATIONGROUP_TXT,",
						"          SMMBUSRELCHAINGROUP_DESCRIPTION,",
						"          CUSTGROUP_NAME,",
						"          SMMBUSRELSALESDISTRICTGROUP1_EBCDIVISIONID,",
						"          SMMBUSRELSALESDISTRICTGROUP1_DESCRIPTION,",
						"          SMMBUSRELSALESDISTRICTGROUP1_ALTROLLUP1,",
						"          SMMBUSRELSALESDISTRICTGROUP1_ALTROLLUP2,",
						"          SMMBUSRELSALESDISTRICTGROUP1_ALTROLLUP3,",
						"          EBCSALESMKTDIVISION1_EBCDIVISIONDESC,",
						"          LINEOFBUSINESS_DESCRIPTION,",
						"          MARKUPGROUP_TXT,",
						"          PRICEDISCGROUP_NAME,",
						"          COMMISSIONSALESGROUP_NAME,",
						"          SALESPOOL_NAME,",
						"          SMMBUSRELSEGMENTGROUP_DESCRIPTION,",
						"          SMMBUSRELSUBSEGMENTGROUP_DESCRIPTION,",
						"          TAXGROUPHEADING_TAXGROUPNAME,",
						"          LOGISTICSPOSTALADDRESS1_STREET,",
						"          LOGISTICSPOSTALADDRESS1_CITY,",
						"          LOGISTICSPOSTALADDRESS1_STATE,",
						"          LOGISTICSPOSTALADDRESS1_ZIPCODE,",
						"          LOGISTICSPOSTALADDRESS1_COUNTRYREGIONID,",
						"          LOGISTICSPOSTALADDRESS1_TIMEZONE,",
						"          TIMEZONESLIST_TIMEZONEKEYNAME,",
						"          LOGISTICSLOCATION1_DESCRIPTION,",
						"          LOGISTICSELECTRONICADDRESS1_LOCATOR,",
						"          LOGISTICSELECTRONICADDRESS2_LOCATOR,",
						"          LOGISTICSELECTRONICADDRESS3_LOCATOR,",
						"          LOGISTICSPOSTALADDRESS2_STREET,",
						"          LOGISTICSPOSTALADDRESS2_CITY,",
						"          LOGISTICSPOSTALADDRESS2_STATE,",
						"          LOGISTICSPOSTALADDRESS2_ZIPCODE,",
						"          LOGISTICSPOSTALADDRESS2_COUNTRYREGIONID,",
						"          LOGISTICSLOCATION2_DESCRIPTION,",
						"          LOGISTICSLOCATION2_LOCATIONID,",
						"          SMMBUSRELSALESDISTRICTGROUP2_DESCRIPTION,",
						"          EBCSALESMKTDIVISION2_EBCDIVISIONDESC,",
						"          HK_JOB_RUN_ID,",
						"          HK_SOURCE_NAME,",
						"          REPORTDEALEREXCSEGMENT_SEGMENTID = ReportDealerExclusionSegment@SegmentID,",
						"          REPORTDEALEREXCSUBSEGMENT_SUBSEGMENTID = ReportDealerExclusionSubSegment@SubSegmentID,",
						"          LKP_TRUCK_VOLUME_LEGAL_ENTITY_ID,",
						"          HK_CUSTTABLE_EXT_HASH_KEY = SRC_HK_CUSTTABLE_EXT_HASH_KEY",
						"     )) ~> CusttableExt",
						"InsertCusttableData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          DATAAREAID = SrcCusttable@DATAAREAID,",
						"          ACCOUNTNUM = SrcCusttable@ACCOUNTNUM,",
						"          PARTY,",
						"          EBCCOMPANYID,",
						"          OURACCOUNTNUM,",
						"          INVOICEACCOUNT,",
						"          CURRENCY,",
						"          USECASHDISC,",
						"          MAINCONTACTWORKER,",
						"          BLOCKED,",
						"          PASTDUECHECK,",
						"          CREDITMAX,",
						"          MANDATORYCREDITLIMIT,",
						"          EXCLUDECREDITLIMITBLOCKING,",
						"          GRACEDAYS,",
						"          EBCBUYGRPEXEMPTION,",
						"          EBCBUYGRPKICKER,",
						"          CASHDISC,",
						"          DLVMODE,",
						"          DLVTERM,",
						"          PAYMMODE,",
						"          PAYMTERMID,",
						"          CUSTCLASSIFICATIONID,",
						"          COMPANYCHAINID,",
						"          CUSTGROUP,",
						"          EBCDIVISIONID,",
						"          LINEOFBUSINESSID,",
						"          MARKUPGROUP,",
						"          PRICEGROUP,",
						"          DEFAULTDIMENSION,",
						"          SALESDISTRICTID,",
						"          SALESGROUP,",
						"          SALESPOOLID,",
						"          SEGMENTID = SrcCusttable@SEGMENTID,",
						"          SUBSEGMENTID = SrcCusttable@SUBSEGMENTID,",
						"          TAXGROUP,",
						"          EBCREPORTPARENT,",
						"          MCSEXTERNALPRICING,",
						"          MCSNETWORKID,",
						"          MODIFIEDDATETIME,",
						"          DIRPARTYTABLE1_NAME,",
						"          DIRPARTYTABLE1_INSTANCERELATIONTYPE,",
						"          DIRPARTYTABLE1_EBCLEGACY,",
						"          DIRPARTYTABLE1_ORGNUMBER,",
						"          DIRPARTYTABLE1_PRIMARYADDRESSLOCATION,",
						"          DIRPARTYTABLE1_MODIFIEDDATETIME,",
						"          CURRENCY_TXT,",
						"          CURRENCY_MODIFIEDDATETIME,",
						"          HCMWORKER1_PERSONNELNUMBER,",
						"          HCMWORKER1_PERSON,",
						"          HCMWORKER1_MODIFIEDDATETIME,",
						"          DIRPARTYTABLE2_NAME,",
						"          DIRPARTYTABLE2_MODIFIEDDATETIME,",
						"          TSIAVGDAYS_CPAVGDAY,",
						"          TSIAVGDAYS_YRAVGDAY,",
						"          CASHDISC_DESCRIPTION,",
						"          CASHDISC_PERCENT,",
						"          DLVMODE_TXT,",
						"          DLVTERM_TXT,",
						"          CUSTPAYMMODETABLE_NAME,",
						"          PAYMTERM_DESCRIPTION,",
						"          PAYMTERM_NUMOFDAYS,",
						"          PAYMTERM_NUMOFMONTHS,",
						"          CUSTCLASSIFICATIONGROUP_TXT,",
						"          SMMBUSRELCHAINGROUP_DESCRIPTION,",
						"          CUSTGROUP_NAME,",
						"          SMMBUSRELSALESDISTRICTGROUP1_EBCDIVISIONID,",
						"          SMMBUSRELSALESDISTRICTGROUP1_DESCRIPTION,",
						"          SMMBUSRELSALESDISTRICTGROUP1_ALTROLLUP1,",
						"          SMMBUSRELSALESDISTRICTGROUP1_ALTROLLUP2,",
						"          SMMBUSRELSALESDISTRICTGROUP1_ALTROLLUP3,",
						"          EBCSALESMKTDIVISION1_EBCDIVISIONDESC,",
						"          LINEOFBUSINESS_DESCRIPTION,",
						"          MARKUPGROUP_TXT,",
						"          PRICEDISCGROUP_NAME,",
						"          DEFAULTDIMENSION_C_SALES_CHANNEL,",
						"          DEFAULTDIMENSION_C_SALES_CHANNEL_DESCRIPTION,",
						"          DEFAULTDIMENSION_MODIFIEDDATETIME,",
						"          COMMISSIONSALESGROUP_NAME,",
						"          SALESPOOL_NAME,",
						"          SMMBUSRELSEGMENTGROUP_DESCRIPTION,",
						"          SMMBUSRELSUBSEGMENTGROUP_DESCRIPTION,",
						"          TAXGROUPHEADING_TAXGROUPNAME,",
						"          LOGISTICSPOSTALADDRESS1_STREET,",
						"          LOGISTICSPOSTALADDRESS1_CITY,",
						"          LOGISTICSPOSTALADDRESS1_STATE,",
						"          LOGISTICSPOSTALADDRESS1_ZIPCODE,",
						"          LOGISTICSPOSTALADDRESS1_COUNTRYREGIONID,",
						"          LOGISTICSPOSTALADDRESS1_TIMEZONE,",
						"          TIMEZONESLIST_TIMEZONEKEYNAME,",
						"          LOGISTICSLOCATION1_DESCRIPTION,",
						"          LOGISTICSELECTRONICADDRESS1_LOCATOR,",
						"          LOGISTICSELECTRONICADDRESS2_LOCATOR,",
						"          LOGISTICSELECTRONICADDRESS3_LOCATOR,",
						"          LOGISTICSPOSTALADDRESS2_STREET,",
						"          LOGISTICSPOSTALADDRESS2_CITY,",
						"          LOGISTICSPOSTALADDRESS2_STATE,",
						"          LOGISTICSPOSTALADDRESS2_ZIPCODE,",
						"          LOGISTICSPOSTALADDRESS2_COUNTRYREGIONID,",
						"          LOGISTICSLOCATION2_DESCRIPTION,",
						"          LOGISTICSLOCATION2_LOCATIONID,",
						"          CUSTTABLE2_EBCDIVISIONID,",
						"          CUSTTABLE2_SALESDISTRICTID,",
						"          CUSTTABLE2_MAINCONTACTWORKER,",
						"          CUSTTABLE2_MODIFIEDDATETIME,",
						"          SMMBUSRELSALESDISTRICTGROUP2_DESCRIPTION,",
						"          EBCSALESMKTDIVISION2_EBCDIVISIONDESC,",
						"          HCMWORKER2_PERSONNELNUMBER,",
						"          HCMWORKER2_PERSON,",
						"          HCMWORKER2_MODIFIEDDATETIME,",
						"          DIRPARTYTABLE3_NAME,",
						"          DIRPARTYTABLE3_MODIFIEDDATETIME,",
						"          HK_JOB_RUN_ID,",
						"          HK_SOURCE_NAME,",
						"          REPORTDEALEREXCSEGMENT_SEGMENTID = ReportDealerExclusionSegment@SegmentID,",
						"          REPORTDEALEREXCSUBSEGMENT_SUBSEGMENTID = ReportDealerExclusionSubSegment@SubSegmentID,",
						"          LKP_TRUCK_VOLUME_LEGAL_ENTITY_ID,",
						"          LATEST_MODIFIEDDATETIME = LATEST_MODIFIEDDATETIME_NEW",
						"     )) ~> Custtable"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_load_dim_item')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_parquet",
								"type": "DatasetReference"
							},
							"name": "SrcInventTable"
						},
						{
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference"
							},
							"name": "SrcInventHierarchy"
						},
						{
							"dataset": {
								"referenceName": "ds_delimited_csv",
								"type": "DatasetReference"
							},
							"name": "SrcSizeGroupMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference"
							},
							"name": "InsertInventTable"
						},
						{
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference"
							},
							"name": "InventtableHierarchy"
						}
					],
					"transformations": [
						{
							"name": "CompareHash"
						},
						{
							"name": "JoinSizeGroupColumns"
						},
						{
							"name": "SetActiveFlag"
						},
						{
							"name": "InsertItemData"
						},
						{
							"name": "UpsertItemHierarchyData"
						},
						{
							"name": "PullDistinctEntries"
						},
						{
							"name": "RederiveColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     df_prev_max_timestamp as string,",
						"     df_last_mod_tmstmp_sizegroupmapping as string",
						"}",
						"source(output(",
						"          DATAAREAID as string,",
						"          ITEMID as string,",
						"          PRODUCT as integer,",
						"          ABCVALUE as integer,",
						"          COSTGROUPID as string,",
						"          DEFAULTDIMENSION as integer,",
						"          CREATEDDATETIME as timestamp,",
						"          MODIFIEDDATETIME as timestamp,",
						"          DATAAREA_TIMEZONE as integer,",
						"          ECORESPRODUCTTRANSLATION_PRODUCT as integer,",
						"          ECORESPRODUCTTRANSLATION_NAME as string,",
						"          ECORESPRODUCTTRANSLATION_MODIFIEDDATETIME as timestamp,",
						"          BOMCOSTGROUP_DATAAREAID as string,",
						"          BOMCOSTGROUP_COSTGROUPID as string,",
						"          BOMCOSTGROUP_NAME as string,",
						"          BOMCOSTGROUP_COSTGROUPBEHAVIOR as integer,",
						"          BOMCOSTGROUP_COSTGROUPTYPE as integer,",
						"          BOMCOSTGROUP_TYPEDEFAULT as integer,",
						"          DEFAULTDIMENSION_E_CATEGORY as string,",
						"          DEFAULTDIMENSION_E_CATEGORY_DESCRIPTION_PARENT as string,",
						"          DEFAULTDIMENSION_E_CATEGORY_DESCRIPTION as string,",
						"          DEFAULTDIMENSION_F_FAMILY as string,",
						"          DEFAULTDIMENSION_F_FAMILY_DESCRIPTION as string,",
						"          DEFAULTDIMENSION_MODIFIEDDATETIME as timestamp,",
						"          TIMEZONEINFO_TIMEZONEID as integer,",
						"          TIMEZONEINFO_STARTDATE as date,",
						"          TIMEZONEINFO_ENDDATE as date,",
						"          TIMEZONEINFO_TIMEBIAS as integer,",
						"          INVENTTABLEMODULE_MODULETYPE as integer,",
						"          INVENTTABLEMODULE_DATAAREAID as string,",
						"          INVENTTABLEMODULE_ITEMID as string,",
						"          INVENTTABLEMODULE_UNITID as string,",
						"          UNITOFMEASURE_RECID as integer,",
						"          UNITOFMEASURE_SYMBOL as string,",
						"          UNITOFMEASURE_MODIFIEDDATETIME as timestamp,",
						"          UNITOFMEASURETRANSLATION_UNITOFMEASURE as integer,",
						"          UNITOFMEASURETRANSLATION_DESCRIPTION as string,",
						"          UNITOFMEASURETRANSLATION_MODIFIEDDATETIME as timestamp,",
						"          TSIPHITEM_DISPLAYPRODUCTNUMBER as string,",
						"          TSIPHITEM_BASEITEMID as string,",
						"          TSIPHITEM_PRODSIZE as string,",
						"          TSIPHBASEITEM_PGCID as string,",
						"          TSIPHBASEITEM_BASEITEMDESCRIPTION as string,",
						"          TSIPHBASEITEM_DEFAULTFDNHIGH as string,",
						"          TSIPHBASEITEM_DEFAULTFDNLOW as string,",
						"          TSIPHBASEITEM_DEFAULTFDNMED as string,",
						"          TSIPHBASEITEM_PIECETYPEID as string,",
						"          TSIPHBASEITEM_PRICECOLLECTIONID as string,",
						"          TSIPHGROUP_PLEVELID as string,",
						"          TSIPHGROUP_PGCDESC as string,",
						"          TSIPHGROUP_ISACTIVE as integer,",
						"          TSIPHGROUP_EFFECTIVEDATE as date,",
						"          TSIPHGROUP_EXPIRATIONDATE as date,",
						"          TSIPHGROUP_MSTRPGCID as string,",
						"          TSIPHGROUP_COMFORTID as string,",
						"          TSIPHGROUP_CONSTRUCTID as string,",
						"          TSIPHLEVEL_LINELAUNCHID as string,",
						"          TSIPHLEVEL_YOYID as string,",
						"          TSIPHLEVEL_PLEVELDESC as string,",
						"          TSIPHLEVEL_ISACTIVE as integer,",
						"          TSIPHLEVEL_ISSPECIALTY as integer,",
						"          TSIPHYEAROVERYEAR_TYPEID as string,",
						"          TSIPHYEAROVERYEAR_PRICEBANDID as string,",
						"          TSIPHYEAROVERYEAR_YOYDESC as string,",
						"          TSIPHTYPE_STYLEID as string,",
						"          TSIPHTYPE_TECHNOLOGYID as string,",
						"          TSIPHTYPE_TYPEDESC as string,",
						"          TSIPHSTYLE_BRANDID as string,",
						"          TSIPHSTYLE_STYLEDESC as string,",
						"          TSIPHBRAND_MBRANDID as string,",
						"          TSIPHBRAND_BRANDDESC as string,",
						"          TSIPHMASTERBRAND_MBRANDDESC as string,",
						"          TSIPHTECHNOLOGY_TECHNOLOGYDESC as string,",
						"          TSIPHPRICEBAND_PRICEBAND as string,",
						"          TSIPHLINELAUNCH_LINELAUNCHDESC as string,",
						"          TSIPHCOMFORT_COMFORTDESC as string,",
						"          TSIPHCONSTRUCTION_CONSTRUCTDESC as string,",
						"          TSIPHPRICECOLLECTION_PRICECOLLECTIONDESC as string,",
						"          TPSSIZE_SIZEID as string,",
						"          TPSSIZE_DIMENSIONS as string,",
						"          TPSSIZE_EBCPANELLENGTH as decimal(32,16),",
						"          TPSSIZE_EBCPANELWIDTH as decimal(32,16),",
						"          TPSSIZE_ACTIVE as integer,",
						"          ITEMGROUPID as string,",
						"          ITEMGROUPNAME as string,",
						"          LAST_MODIFIEDDATETIME as timestamp,",
						"          ITEM_HIERARCHY_HASH_KEY as string,",
						"          BRAND_RANK as integer,",
						"          HK_JOB_RUN_ID as string,",
						"          HK_SOURCE_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SrcInventTable",
						"source(output(",
						"          HK_ITEM_HIERARCHY_HASH_KEY as string,",
						"          DISPLAYPRODUCTNUMBER as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     query: 'select HK_ITEM_HIERARCHY_HASH_KEY, DISPLAYPRODUCTNUMBER from INVENTTABLE_ITEM_HIERARCHY',",
						"     format: 'query') ~> SrcInventHierarchy",
						"source(output(",
						"          DW_Id as short,",
						"          LegalEntity as string,",
						"          CD_SIZE as string,",
						"          CODE_SIZE as double,",
						"          DES_SIZE as string,",
						"          DES_SIZE_long as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SrcSizeGroupMapping",
						"SrcInventTable, SrcInventHierarchy join(ITEMID == DISPLAYPRODUCTNUMBER,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'both')~> CompareHash",
						"CompareHash, SrcSizeGroupMapping join(DATAAREAID == LegalEntity",
						"     && TSIPHITEM_PRODSIZE == CD_SIZE,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinSizeGroupColumns",
						"RederiveColumns derive(ACTIVE_FLAG = iif((ITEMID == DISPLAYPRODUCTNUMBER && ITEM_HIERARCHY_HASH_KEY == HK_ITEM_HIERARCHY_HASH_KEY && LASTEST_MODIFIEDDATETIME < toTimestamp($df_prev_max_timestamp)) , 'R',\r",
						"iif((ITEMID == DISPLAYPRODUCTNUMBER && ITEM_HIERARCHY_HASH_KEY == HK_ITEM_HIERARCHY_HASH_KEY && LASTEST_MODIFIEDDATETIME >= toTimestamp($df_prev_max_timestamp)) || (ITEMID == DISPLAYPRODUCTNUMBER && ITEM_HIERARCHY_HASH_KEY != HK_ITEM_HIERARCHY_HASH_KEY), 'U',\r",
						"'I'))) ~> SetActiveFlag",
						"SetActiveFlag filter(ACTIVE_FLAG != 'R') ~> InsertItemData",
						"PullDistinctEntries alterRow(updateIf(ACTIVE_FLAG=='U'),",
						"     insertIf(ACTIVE_FLAG=='I')) ~> UpsertItemHierarchyData",
						"SetActiveFlag filter(BRAND_RANK == 1 && ACTIVE_FLAG != 'R' && isNull(TSIPHITEM_DISPLAYPRODUCTNUMBER) == false()) ~> PullDistinctEntries",
						"JoinSizeGroupColumns derive(LASTEST_MODIFIEDDATETIME = greatest(LAST_MODIFIEDDATETIME,toTimestamp($df_last_mod_tmstmp_sizegroupmapping, 'YYYY-MM-DD HH:MM:SS'))) ~> RederiveColumns",
						"InsertItemData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          DATAAREAID,",
						"          ITEMID,",
						"          PRODUCT,",
						"          ABCVALUE,",
						"          COSTGROUPID,",
						"          DEFAULTDIMENSION,",
						"          CREATEDDATETIME,",
						"          MODIFIEDDATETIME,",
						"          DATAAREA_TIMEZONE,",
						"          ECORESPRODUCTTRANSLATION_PRODUCT,",
						"          ECORESPRODUCTTRANSLATION_NAME,",
						"          ECORESPRODUCTTRANSLATION_MODIFIEDDATETIME,",
						"          BOMCOSTGROUP_DATAAREAID,",
						"          BOMCOSTGROUP_COSTGROUPID,",
						"          BOMCOSTGROUP_NAME,",
						"          BOMCOSTGROUP_COSTGROUPBEHAVIOR,",
						"          BOMCOSTGROUP_COSTGROUPTYPE,",
						"          BOMCOSTGROUP_TYPEDEFAULT,",
						"          DEFAULTDIMENSION_E_CATEGORY,",
						"          DEFAULTDIMENSION_E_CATEGORY_DESCRIPTION_PARENT,",
						"          DEFAULTDIMENSION_E_CATEGORY_DESCRIPTION,",
						"          DEFAULTDIMENSION_F_FAMILY,",
						"          DEFAULTDIMENSION_F_FAMILY_DESCRIPTION,",
						"          DEFAULTDIMENSION_MODIFIEDDATETIME,",
						"          TIMEZONEINFO_TIMEZONEID,",
						"          TIMEZONEINFO_STARTDATE,",
						"          TIMEZONEINFO_ENDDATE,",
						"          TIMEZONEINFO_TIMEBIAS,",
						"          INVENTTABLEMODULE_MODULETYPE,",
						"          INVENTTABLEMODULE_DATAAREAID,",
						"          INVENTTABLEMODULE_ITEMID,",
						"          INVENTTABLEMODULE_UNITID,",
						"          UNITOFMEASURE_RECID,",
						"          UNITOFMEASURE_SYMBOL,",
						"          UNITOFMEASURE_MODIFIEDDATETIME,",
						"          UNITOFMEASURETRANSLATION_UNITOFMEASURE,",
						"          UNITOFMEASURETRANSLATION_DESCRIPTION,",
						"          UNITOFMEASURETRANSLATION_MODIFIEDDATETIME,",
						"          TSIPHITEM_DISPLAYPRODUCTNUMBER,",
						"          TSIPHITEM_BASEITEMID,",
						"          TSIPHITEM_PRODSIZE,",
						"          TSIPHBASEITEM_PGCID,",
						"          TSIPHBASEITEM_BASEITEMDESCRIPTION,",
						"          TSIPHBASEITEM_DEFAULTFDNHIGH,",
						"          TSIPHBASEITEM_DEFAULTFDNLOW,",
						"          TSIPHBASEITEM_DEFAULTFDNMED,",
						"          TSIPHBASEITEM_PIECETYPEID,",
						"          TSIPHBASEITEM_PRICECOLLECTIONID,",
						"          TSIPHGROUP_PLEVELID,",
						"          TSIPHGROUP_PGCDESC,",
						"          TSIPHGROUP_ISACTIVE,",
						"          TSIPHGROUP_EFFECTIVEDATE,",
						"          TSIPHGROUP_EXPIRATIONDATE,",
						"          TSIPHGROUP_MSTRPGCID,",
						"          TSIPHGROUP_COMFORTID,",
						"          TSIPHGROUP_CONSTRUCTID,",
						"          TSIPHLEVEL_LINELAUNCHID,",
						"          TSIPHLEVEL_YOYID,",
						"          TSIPHLEVEL_PLEVELDESC,",
						"          TSIPHLEVEL_ISACTIVE,",
						"          TSIPHLEVEL_ISSPECIALTY,",
						"          TSIPHYEAROVERYEAR_TYPEID,",
						"          TSIPHYEAROVERYEAR_PRICEBANDID,",
						"          TSIPHYEAROVERYEAR_YOYDESC,",
						"          TSIPHTYPE_STYLEID,",
						"          TSIPHTYPE_TECHNOLOGYID,",
						"          TSIPHTYPE_TYPEDESC,",
						"          TSIPHSTYLE_BRANDID,",
						"          TSIPHSTYLE_STYLEDESC,",
						"          TSIPHBRAND_MBRANDID,",
						"          TSIPHBRAND_BRANDDESC,",
						"          TSIPHMASTERBRAND_MBRANDDESC,",
						"          TSIPHTECHNOLOGY_TECHNOLOGYDESC,",
						"          TSIPHPRICEBAND_PRICEBAND,",
						"          TSIPHLINELAUNCH_LINELAUNCHDESC,",
						"          TSIPHCOMFORT_COMFORTDESC,",
						"          TSIPHCONSTRUCTION_CONSTRUCTDESC,",
						"          TSIPHPRICECOLLECTION_PRICECOLLECTIONDESC,",
						"          TPSSIZE_SIZEID,",
						"          TPSSIZE_DIMENSIONS,",
						"          TPSSIZE_EBCPANELLENGTH,",
						"          TPSSIZE_EBCPANELWIDTH,",
						"          TPSSIZE_ACTIVE,",
						"          SIZEGROUP_CD_SIZE = CD_SIZE,",
						"          SIZEGROUP_CODE_SIZE = CODE_SIZE,",
						"          SIZEGROUP_DES_SIZE = DES_SIZE,",
						"          ITEMGROUPID,",
						"          ITEMGROUPNAME,",
						"          LATEST_MODIFIEDDATETIME = LASTEST_MODIFIEDDATETIME,",
						"          HK_JOB_RUN_ID,",
						"          HK_SOURCE_NAME",
						"     ),",
						"     partitionBy('hash', 1)) ~> InsertInventTable",
						"UpsertItemHierarchyData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['DISPLAYPRODUCTNUMBER'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          DISPLAYPRODUCTNUMBER = TSIPHITEM_DISPLAYPRODUCTNUMBER,",
						"          BASEITEMID = TSIPHITEM_BASEITEMID,",
						"          PRODSIZE = TSIPHITEM_PRODSIZE,",
						"          PGCID = TSIPHBASEITEM_PGCID,",
						"          BASEITEMDESCRIPTION = TSIPHBASEITEM_BASEITEMDESCRIPTION,",
						"          DEFAULTFDNHIGH = TSIPHBASEITEM_DEFAULTFDNHIGH,",
						"          DEFAULTFDNLOW = TSIPHBASEITEM_DEFAULTFDNLOW,",
						"          DEFAULTFDNMED = TSIPHBASEITEM_DEFAULTFDNMED,",
						"          PIECETYPEID = TSIPHBASEITEM_PIECETYPEID,",
						"          PRICECOLLECTIONID = TSIPHBASEITEM_PRICECOLLECTIONID,",
						"          PLEVELID = TSIPHGROUP_PLEVELID,",
						"          PGCDESC = TSIPHGROUP_PGCDESC,",
						"          TPG_ISACTIVE = TSIPHGROUP_ISACTIVE,",
						"          EFFECTIVEDATE = TSIPHGROUP_EFFECTIVEDATE,",
						"          EXPIRATIONDATE = TSIPHGROUP_EXPIRATIONDATE,",
						"          MSTRPGCID = TSIPHGROUP_MSTRPGCID,",
						"          COMFORTID = TSIPHGROUP_COMFORTID,",
						"          CONSTRUCTID = TSIPHGROUP_CONSTRUCTID,",
						"          LINELAUNCHID = TSIPHLEVEL_LINELAUNCHID,",
						"          YOYID = TSIPHLEVEL_YOYID,",
						"          PLEVELDESC = TSIPHLEVEL_PLEVELDESC,",
						"          TPL_ISACTIVE = TSIPHLEVEL_ISACTIVE,",
						"          ISSPECIALTY = TSIPHLEVEL_ISSPECIALTY,",
						"          TYPEID = TSIPHYEAROVERYEAR_TYPEID,",
						"          PRICEBANDID = TSIPHYEAROVERYEAR_PRICEBANDID,",
						"          YOYDESC = TSIPHYEAROVERYEAR_YOYDESC,",
						"          STYLEID = TSIPHTYPE_STYLEID,",
						"          TECHNOLOGYID = TSIPHTYPE_TECHNOLOGYID,",
						"          TYPEDESC = TSIPHTYPE_TYPEDESC,",
						"          BRANDID = TSIPHSTYLE_BRANDID,",
						"          STYLEDESC = TSIPHSTYLE_STYLEDESC,",
						"          MBRANDID = TSIPHBRAND_MBRANDID,",
						"          BRANDDESC = TSIPHBRAND_BRANDDESC,",
						"          MBRANDDESC = TSIPHMASTERBRAND_MBRANDDESC,",
						"          TECHNOLOGYDESC = TSIPHTECHNOLOGY_TECHNOLOGYDESC,",
						"          PRICEBAND = TSIPHPRICEBAND_PRICEBAND,",
						"          LINELAUNCHDESC = TSIPHLINELAUNCH_LINELAUNCHDESC,",
						"          COMFORTDESC = TSIPHCOMFORT_COMFORTDESC,",
						"          CONSTRUCTDESC = TSIPHCONSTRUCTION_CONSTRUCTDESC,",
						"          PRICECOLLECTIONDESC = TSIPHPRICECOLLECTION_PRICECOLLECTIONDESC,",
						"          SIZEID = TPSSIZE_SIZEID,",
						"          DIMENSIONS = TPSSIZE_DIMENSIONS,",
						"          EBCPANELLENGTH = TPSSIZE_EBCPANELLENGTH,",
						"          EBCPANELWIDTH = TPSSIZE_EBCPANELWIDTH,",
						"          ACTIVE = TPSSIZE_ACTIVE,",
						"          HK_JOB_RUN_ID,",
						"          HK_SOURCE_NAME,",
						"          HK_ITEM_HIERARCHY_HASH_KEY = ITEM_HIERARCHY_HASH_KEY",
						"     )) ~> InventtableHierarchy"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_load_dim_ledger_dimension')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_parquet",
								"type": "DatasetReference"
							},
							"name": "SrcLedgerDimension"
						},
						{
							"dataset": {
								"referenceName": "ds_opsfinance_excel",
								"type": "DatasetReference"
							},
							"name": "SrcOpsFinanceMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference"
							},
							"name": "InsertLedgerDimension"
						}
					],
					"transformations": [
						{
							"name": "JoinSizeGroupColumns"
						},
						{
							"name": "RankOverSrcOpsFinanceMapping"
						},
						{
							"name": "AggregateOverRank"
						},
						{
							"name": "CalculateLatestModifiedDateTime",
							"description": "Creating/updating the columns \nRAW_MODIFIEDDATETIME'"
						},
						{
							"name": "PullLatestRecords"
						}
					],
					"scriptLines": [
						"parameters{",
						"     df_prev_max_timestamp as string ('2024-09-14 00:00:00'),",
						"     df_last_mod_tmstmp_opsfinancemapping as string ('2024-04-04T15:29:09+00:00')",
						"}",
						"source(output(",
						"          DIMENSIONATTRIBUTEVALUESET as long,",
						"          DISPLAYVALUE_A_DEPARTMENT as string,",
						"          DISPLAYVALUE_B_INTERCOMPANY as string,",
						"          DISPLAYVALUE_C_SALES_CHANNEL as string,",
						"          DISPLAYVALUE_D_TYPE as string,",
						"          DISPLAYVALUE_E_CATEGORY as string,",
						"          DISPLAYVALUE_F_FAMILY as string,",
						"          DISPLAYVALUE_G_SIZE as string,",
						"          DISPLAYVALUE_H_VERSION as string,",
						"          DISPLAYVALUE_I_CUSTOMER as string,",
						"          DISPLAYVALUE_J_VENDOR as string,",
						"          DISPLAYVALUE_K_FOAM_SOURCED as string,",
						"          DISPLAYVALUE_L_STORE as string,",
						"          DISPLAYVALUE_M_SALES_DISTRI as string,",
						"          DISPLAYVALUE_BUSINESS_UNIT as string,",
						"          DISPLAYVALUE_MAIN_ACCOUNT as string,",
						"          DISPLAYVALUE_PROJECTS as string,",
						"          DISPLAYVALUE_SITE as string,",
						"          DIRPARTYTABLE1_NAME_DEPARTMENT as string,",
						"          DIMENSIONFINANCIALTAG_DESCRIPTION_INTERCOMPANY as string,",
						"          DIMENSIONFINANCIALTAG_DESCRIPTION_SALES_CHANNEL as string,",
						"          DIMENSIONFINANCIALTAG_DESCRIPTION_TYPE as string,",
						"          DIMENSIONFINANCIALTAG_DESCRIPTION_CATEGORY as string,",
						"          DIMENSIONFINANCIALTAG_DESCRIPTION_FAMILY as string,",
						"          DIMENSIONFINANCIALTAG_DESCRIPTION_SIZE as string,",
						"          DIMENSIONFINANCIALTAG_DESCRIPTION_VERSION as string,",
						"          DIMENSIONFINANCIALTAG_DESCRIPTION_FOAM_SOURCED as string,",
						"          DIMENSIONFINANCIALTAG_DESCRIPTION_M_SALES_DISTRI as string,",
						"          DIMENSIONFINANCIALTAG_DESCRIPTION_PROJECTS as string,",
						"          DIMENSIONFINANCIALTAG_DESCRIPTION_SITE as string,",
						"          DIRPARTYTABLE2_NAME_STORE as string,",
						"          DIRPARTYTABLE3_NAME_BUSINESS_UNIT as string,",
						"          LATEST_MODIFIEDDATETIME as timestamp,",
						"          HK_JOB_RUN_ID as string,",
						"          HK_SOURCE_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SrcLedgerDimension",
						"source(output(",
						"          BusinessUnit as string,",
						"          OPERATIONSREGION as string,",
						"          OPERATIONSREGIONDESCRIPTION as string,",
						"          FINANCEREGION as string,",
						"          FINANCEREGIONDESCRIPTION as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SrcOpsFinanceMapping",
						"SrcLedgerDimension, AggregateOverRank join(DISPLAYVALUE_BUSINESS_UNIT == BusinessUnit,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinSizeGroupColumns",
						"SrcOpsFinanceMapping rank(asc(BusinessUnit, true),",
						"     caseInsensitive: true,",
						"     output(id as long),",
						"     dense: true) ~> RankOverSrcOpsFinanceMapping",
						"RankOverSrcOpsFinanceMapping aggregate(groupBy(id),",
						"     each(match(name!='id'), $$ = first($$))) ~> AggregateOverRank",
						"JoinSizeGroupColumns derive(LATEST_MODIFIEDDATETIME = greatest(LATEST_MODIFIEDDATETIME,toTimestamp($df_last_mod_tmstmp_opsfinancemapping, 'yyyy-MM-dd\\'T\\'HH:mm')),",
						"          RAW_MODIFIEDDATETIME = toTimestamp($df_prev_max_timestamp)) ~> CalculateLatestModifiedDateTime",
						"CalculateLatestModifiedDateTime filter(LATEST_MODIFIEDDATETIME>RAW_MODIFIEDDATETIME) ~> PullLatestRecords",
						"PullLatestRecords sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          DIMENSIONATTRIBUTEVALUESET,",
						"          DISPLAYVALUE_A_DEPARTMENT,",
						"          DISPLAYVALUE_B_INTERCOMPANY,",
						"          DISPLAYVALUE_C_SALES_CHANNEL,",
						"          DISPLAYVALUE_D_TYPE,",
						"          DISPLAYVALUE_E_CATEGORY,",
						"          DISPLAYVALUE_F_FAMILY,",
						"          DISPLAYVALUE_G_SIZE,",
						"          DISPLAYVALUE_H_VERSION,",
						"          DISPLAYVALUE_I_CUSTOMER,",
						"          DISPLAYVALUE_J_VENDOR,",
						"          DISPLAYVALUE_K_FOAM_SOURCED,",
						"          DISPLAYVALUE_L_STORE,",
						"          DISPLAYVALUE_M_SALES_DISTRI,",
						"          DISPLAYVALUE_BUSINESS_UNIT,",
						"          DISPLAYVALUE_MAIN_ACCOUNT,",
						"          DISPLAYVALUE_PROJECTS,",
						"          DISPLAYVALUE_SITE,",
						"          DIRPARTYTABLE1_NAME_DEPARTMENT,",
						"          DIMENSIONFINANCIALTAG_DESCRIPTION_INTERCOMPANY,",
						"          DIMENSIONFINANCIALTAG_DESCRIPTION_SALES_CHANNEL,",
						"          DIMENSIONFINANCIALTAG_DESCRIPTION_TYPE,",
						"          DIMENSIONFINANCIALTAG_DESCRIPTION_CATEGORY,",
						"          DIMENSIONFINANCIALTAG_DESCRIPTION_FAMILY,",
						"          DIMENSIONFINANCIALTAG_DESCRIPTION_SIZE,",
						"          DIMENSIONFINANCIALTAG_DESCRIPTION_VERSION,",
						"          DIMENSIONFINANCIALTAG_DESCRIPTION_FOAM_SOURCED,",
						"          DIMENSIONFINANCIALTAG_DESCRIPTION_M_SALES_DISTRI,",
						"          DIMENSIONFINANCIALTAG_DESCRIPTION_PROJECTS,",
						"          DIMENSIONFINANCIALTAG_DESCRIPTION_SITE,",
						"          DIRPARTYTABLE2_NAME_STORE,",
						"          DIRPARTYTABLE3_NAME_BUSINESS_UNIT,",
						"          LATEST_MODIFIEDDATETIME,",
						"          HK_JOB_RUN_ID,",
						"          HK_SOURCE_NAME,",
						"          OPERATIONSREGION,",
						"          OPERATIONSREGIONDESCRIPTION,",
						"          FINANCEREGION,",
						"          FINANCEREGIONDESCRIPTION",
						"     )) ~> InsertLedgerDimension"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_load_dim_line_return_reason')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_parquet",
								"type": "DatasetReference"
							},
							"name": "SrcLineReturnReasonCode"
						},
						{
							"dataset": {
								"referenceName": "ds_returnreasongrpmap_excel",
								"type": "DatasetReference"
							},
							"name": "ReturnReasonGroupMap"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference"
							},
							"name": "TpxLinereturnreasoncode",
							"description": "Export data to ds_snowflake"
						}
					],
					"transformations": [
						{
							"name": "lkpOnReturnReasonGroupMap"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HK_SOURCE_NAME as string,",
						"          HK_JOB_RUN_ID as string,",
						"          DATAAREAID as string,",
						"          REASONCODEID as string,",
						"          RETURNREASONCODEGROUPID as string,",
						"          DESCRIPTION as string,",
						"          DESCRIPTION_CODEGROUP as string,",
						"          LATEST_MODIFIEDDATETIME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SrcLineReturnReasonCode",
						"source(output(",
						"          ReturnReasonGroupID as string,",
						"          ReturnReasonGroup as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ReturnReasonGroupMap",
						"SrcLineReturnReasonCode, ReturnReasonGroupMap lookup(left(REASONCODEID,1) == ReturnReasonGroupID,",
						"     multiple: false,",
						"     pickup: 'first',",
						"     asc(ReturnReasonGroupID, true),",
						"     broadcast: 'auto')~> lkpOnReturnReasonGroupMap",
						"lkpOnReturnReasonGroupMap sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          HK_SOURCE_NAME,",
						"          HK_JOB_RUN_ID,",
						"          DATAAREAID,",
						"          REASONCODEID,",
						"          RETURNREASONCODEGROUPID,",
						"          DESCRIPTION,",
						"          DESCRIPTION_CODEGROUP,",
						"          LATEST_MODIFIEDDATETIME,",
						"          EXCEL_LINERETURNREASONGROUPID = ReturnReasonGroupID,",
						"          EXCEL_LINERETURNREASONGROUP = ReturnReasonGroup",
						"     )) ~> TpxLinereturnreasoncode"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_load_dim_line_return_reason_bak')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_parquet",
								"type": "DatasetReference"
							},
							"name": "SrcLineReturnReasonCode"
						},
						{
							"dataset": {
								"referenceName": "ds_excel",
								"type": "DatasetReference"
							},
							"name": "SMMCReasonCodeMap"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference"
							},
							"name": "TpxLinereturnreasoncode"
						}
					],
					"transformations": [
						{
							"name": "lkpOnSMMCReasonCodeMap"
						}
					],
					"scriptLines": [
						"source(output(",
						"          HK_SOURCE_NAME as string,",
						"          HK_JOB_RUN_ID as string,",
						"          DATAAREAID as string,",
						"          REASONCODEID as string,",
						"          RETURNREASONCODEGROUPID as string,",
						"          DESCRIPTION as string,",
						"          DESCRIPTION_CODEGROUP as string,",
						"          LATEST_MODIFIEDDATETIME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SrcLineReturnReasonCode",
						"source(output(",
						"          LineReturnReasonKey as short,",
						"          LegalEntity as string,",
						"          LineReturnReasonID as string,",
						"          LineReturnReason as string,",
						"          LineReturnReasonGroupID as string,",
						"          LineReturnReasonGroup as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SMMCReasonCodeMap",
						"SrcLineReturnReasonCode, SMMCReasonCodeMap lookup(REASONCODEID == LineReturnReasonID,",
						"     multiple: false,",
						"     pickup: 'first',",
						"     asc(LineReturnReasonID, true),",
						"     broadcast: 'auto')~> lkpOnSMMCReasonCodeMap",
						"lkpOnSMMCReasonCodeMap sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          HK_SOURCE_NAME,",
						"          HK_JOB_RUN_ID,",
						"          DATAAREAID,",
						"          REASONCODEID,",
						"          RETURNREASONCODEGROUPID,",
						"          DESCRIPTION,",
						"          DESCRIPTION_CODEGROUP,",
						"          LATEST_MODIFIEDDATETIME,",
						"          EXCEL_LINERETURNREASONGROUPID = LineReturnReasonGroupID,",
						"          EXCEL_LINERETURNREASONGROUP = LineReturnReasonGroup",
						"     )) ~> TpxLinereturnreasoncode"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_load_dim_location')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_parquet",
								"type": "DatasetReference"
							},
							"name": "srcLocationParquet"
						},
						{
							"dataset": {
								"referenceName": "ds_fipszipxref_excel",
								"type": "DatasetReference"
							},
							"name": "srcFipsZipsXref"
						},
						{
							"dataset": {
								"referenceName": "ds_geoxref_excel",
								"type": "DatasetReference"
							},
							"name": "srcGeoXref"
						},
						{
							"dataset": {
								"referenceName": "ds_isparegion_excel",
								"type": "DatasetReference"
							},
							"name": "srcISPARegion"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference"
							},
							"name": "logisticsPostalAddress"
						}
					],
					"transformations": [
						{
							"name": "joinFipsCode"
						},
						{
							"name": "joinGeoXref"
						},
						{
							"name": "getMaxTimestamp"
						},
						{
							"name": "joinISPARegions"
						}
					],
					"scriptLines": [
						"parameters{",
						"     df_prev_max_ts_FipsZipsXref as string,",
						"     df_prev_max_ts_GeoXref as string,",
						"     df_prev_max_ts_ISPARegion as string,",
						"     df_prev_max_raw_postalAddr as string",
						"}",
						"source(output(",
						"          RECID as long,",
						"          CITY as string,",
						"          COUNTY as string,",
						"          COUNTRYREGIONID as string,",
						"          LATITUDE as decimal(32,16),",
						"          LONGITUDE as decimal(32,16),",
						"          ZIPCODE as string,",
						"          STATE as string,",
						"          STREET as string,",
						"          ISPRIVATE as integer,",
						"          MODIFIEDDATETIME as timestamp,",
						"          LOCATIONID as string,",
						"          DESCRIPTION as string,",
						"          LOGISTICSLOCATION_MODIFIEDDATETIME as timestamp,",
						"          TIMEZONEKEYNAME as string,",
						"          HK_JOB_RUN_ID as string,",
						"          HK_SOURCE_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> srcLocationParquet",
						"source(output(",
						"          FIPSCode as string,",
						"          Zipcode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> srcFipsZipsXref",
						"source(output(",
						"          RegionLongName as string,",
						"          RegionShortName as string,",
						"          RegionCode as string,",
						"          DistrictLongName as string,",
						"          DistrictShortName as string,",
						"          DistrictCode as string,",
						"          SMACode as string,",
						"          SMALongName as string,",
						"          BTACode as string,",
						"          BTALongName as string,",
						"          FIPSCode as string,",
						"          MsCntyLongName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> srcGeoXref",
						"source(output(",
						"          Country as string,",
						"          State as string,",
						"          {ISPA region ID} as string,",
						"          {ISPA region Description} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> srcISPARegion",
						"joinISPARegions, srcFipsZipsXref lookup(left(srcLocationParquet@ZIPCODE, 5) == srcFipsZipsXref@Zipcode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> joinFipsCode",
						"joinFipsCode, srcGeoXref join(srcFipsZipsXref@FIPSCode == srcGeoXref@FIPSCode,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinGeoXref",
						"joinGeoXref derive(LATEST_MODIFIEDDATETIME = greatest(MODIFIEDDATETIME, LOGISTICSLOCATION_MODIFIEDDATETIME, toTimestamp($df_prev_max_ts_FipsZipsXref, 'yyyy-MM-dd\\'T\\'HH:mm'), toTimestamp($df_prev_max_ts_GeoXref,  'yyyy-MM-dd\\'T\\'HH:mm'), toTimestamp($df_prev_max_ts_ISPARegion,  'yyyy-MM-dd\\'T\\'HH:mm')),",
						"          FIPSZIPS_MODIFIEDDATETIME = toTimestamp($df_prev_max_ts_FipsZipsXref, 'yyyy-MM-dd\\'T\\'HH:mm'),",
						"          ISPA_REGION_MODIFIEDDATETIME = toTimestamp($df_prev_max_ts_ISPARegion, 'yyyy-MM-dd\\'T\\'HH:mm'),",
						"          GEO_MODIFIEDDATETIME = toTimestamp($df_prev_max_ts_GeoXref, 'yyyy-MM-dd\\'T\\'HH:mm'),",
						"          RAW_MODIFIEDDATETIME = toTimestamp($df_prev_max_raw_postalAddr)) ~> getMaxTimestamp",
						"srcLocationParquet, srcISPARegion lookup(COUNTRYREGIONID == Country",
						"     && srcLocationParquet@STATE == srcISPARegion@State,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> joinISPARegions",
						"getMaxTimestamp sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          RECID,",
						"          CITY,",
						"          COUNTY,",
						"          COUNTRYREGIONID,",
						"          LATITUDE,",
						"          LONGITUDE,",
						"          ZIPCODE = srcLocationParquet@ZIPCODE,",
						"          STATE = srcLocationParquet@STATE,",
						"          STREET,",
						"          ISPRIVATE,",
						"          MODIFIEDDATETIME,",
						"          LOCATIONID,",
						"          DESCRIPTION,",
						"          LOGISTICSLOCATION_MODIFIEDDATETIME,",
						"          TIMEZONEKEYNAME,",
						"          HK_JOB_RUN_ID,",
						"          HK_SOURCE_NAME,",
						"          ISPAREGIONID = {ISPA region ID},",
						"          ISPAREGIONDESCRIPTION = {ISPA region Description},",
						"          FIPSCODE = srcFipsZipsXref@FIPSCode,",
						"          REGIONLONGNAME = RegionLongName,",
						"          REGIONCODE = RegionCode,",
						"          DISTRICTLONGNAME = DistrictLongName,",
						"          DISTRICTCODE = DistrictCode,",
						"          SMACODE = SMACode,",
						"          SMALONGNAME = SMALongName,",
						"          BTACODE = BTACode,",
						"          BTALONGNAME = BTALongName,",
						"          MSCNTYLONGNAME = MsCntyLongName,",
						"          LATEST_MODIFIEDDATETIME,",
						"          FIPSZIPS_MODIFIEDDATETIME,",
						"          ISPA_REGION_MODIFIEDDATETIME,",
						"          GEO_MODIFIEDDATETIME",
						"     )) ~> logisticsPostalAddress"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_load_dim_main_account')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_parquet",
								"type": "DatasetReference"
							},
							"name": "SrcMainAccount"
						},
						{
							"dataset": {
								"referenceName": "ds_excel",
								"type": "DatasetReference"
							},
							"name": "OpsFinanceMapping"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference"
							},
							"name": "MainAccount"
						}
					],
					"transformations": [
						{
							"name": "JoinOpsFinanceColumns"
						},
						{
							"name": "RederiveColumns"
						},
						{
							"name": "FilterLastestRecords"
						}
					],
					"scriptLines": [
						"parameters{",
						"     df_prev_max_timestamp as string,",
						"     df_last_mod_tmstmp_opsfinance as string",
						"}",
						"source(output(",
						"          RECID as long,",
						"          MAINACCOUNTID as string,",
						"          NAME as string,",
						"          ACCOUNTCATEGORYREF as integer,",
						"          LEDGERCHARTOFACCOUNTS as long,",
						"          TYPE as integer,",
						"          POSTINGTYPE as integer,",
						"          MONETARY as integer,",
						"          MODIFIEDDATETIME as timestamp,",
						"          MAINACCOUNTCATEGORY_ACCOUNTCATEGORY as string,",
						"          MAINACCOUNTCATEGORY_DESCRIPTION as string,",
						"          LEDGERCHARTOFACCOUNTS_NAME as string,",
						"          LEDGERCHARTOFACCOUNTS_DESCRIPTION as string,",
						"          TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_DIMENSIONLEDGERACCOUNTTYPE as string,",
						"          TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_LEDGERPOSTINGTYPE as string,",
						"          MAINACCOUNT2_LEVEL1 as string,",
						"          MAINACCOUNT2_LEVEL2 as string,",
						"          MAINACCOUNT2_LEVEL3 as string,",
						"          MAINACCOUNT2_LEVEL4 as string,",
						"          MAINACCOUNT2_LEVEL5 as string,",
						"          MAINACCOUNT2_LEVEL6 as string,",
						"          HK_JOB_RUN_ID as string,",
						"          HK_SOURCE_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SrcMainAccount",
						"source(output(",
						"          MainAccount as string,",
						"          {HFM Account} as string,",
						"          {HFM Description} as string,",
						"          {Reporting Category} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> OpsFinanceMapping",
						"SrcMainAccount, OpsFinanceMapping join(MAINACCOUNTID == MainAccount,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinOpsFinanceColumns",
						"JoinOpsFinanceColumns derive(LATEST_MODIFIEDDATETIME = greatest(MODIFIEDDATETIME,toTimestamp($df_last_mod_tmstmp_opsfinance,'1950-01-01 00:00:00')),",
						"          MAINACCOUNT_MAPPING_HFMACCOUNT = {HFM Account},",
						"          MAINACCOUNT_MAPPING_HFMDESCRIPTION = {HFM Description},",
						"          MAINACCOUNT_MAPPING_REPORTINGCATEGORY = {Reporting Category},",
						"          MAINACCOUNT_MAPPING_MODIFIEDDATETIME = $df_last_mod_tmstmp_opsfinance) ~> RederiveColumns",
						"RederiveColumns filter(LATEST_MODIFIEDDATETIME > toTimestamp($df_prev_max_timestamp, 'yyyy-MM-dd HH:mm:ss')) ~> FilterLastestRecords",
						"FilterLastestRecords sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          RECID,",
						"          MAINACCOUNTID,",
						"          NAME,",
						"          ACCOUNTCATEGORYREF,",
						"          LEDGERCHARTOFACCOUNTS,",
						"          TYPE,",
						"          POSTINGTYPE,",
						"          MONETARY,",
						"          MODIFIEDDATETIME,",
						"          MAINACCOUNTCATEGORY_ACCOUNTCATEGORY,",
						"          MAINACCOUNTCATEGORY_DESCRIPTION,",
						"          LEDGERCHARTOFACCOUNTS_NAME,",
						"          LEDGERCHARTOFACCOUNTS_DESCRIPTION,",
						"          TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_DIMENSIONLEDGERACCOUNTTYPE,",
						"          TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_LEDGERPOSTINGTYPE,",
						"          MAINACCOUNT2_LEVEL1,",
						"          MAINACCOUNT2_LEVEL2,",
						"          MAINACCOUNT2_LEVEL3,",
						"          MAINACCOUNT2_LEVEL4,",
						"          MAINACCOUNT2_LEVEL5,",
						"          MAINACCOUNT2_LEVEL6,",
						"          HK_JOB_RUN_ID,",
						"          HK_SOURCE_NAME,",
						"          LATEST_MODIFIEDDATETIME,",
						"          MAINACCOUNT_MAPPING_HFMACCOUNT,",
						"          MAINACCOUNT_MAPPING_HFMDESCRIPTION,",
						"          MAINACCOUNT_MAPPING_REPORTINGCATEGORY,",
						"          MAINACCOUNT_MAPPING_MODIFIEDDATETIME",
						"     )) ~> MainAccount"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_load_dim_sales_order')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_parquet",
								"type": "DatasetReference"
							},
							"name": "SrcSalestable"
						},
						{
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference"
							},
							"name": "LkpTruckVolume"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference"
							},
							"name": "Salestable"
						}
					],
					"transformations": [
						{
							"name": "JoinLkpTruckVolumnColumns"
						},
						{
							"name": "RederiveColumns"
						},
						{
							"name": "FilterLastestRecords"
						}
					],
					"scriptLines": [
						"parameters{",
						"     df_prev_max_timestamp as string",
						"}",
						"source(output(",
						"          DATAAREAID as string,",
						"          SALESID as string,",
						"          CUSTOMERREF as string,",
						"          PURCHORDERFORMNUM as string,",
						"          SALESTYPE as integer,",
						"          RETURNITEMNUM as string,",
						"          RETURNREPLACEMENTCREATED as integer,",
						"          SALESPOOLID as string,",
						"          PLANNUMBER as string,",
						"          RETURNREPLACEMENTID as string,",
						"          MODIFIEDDATETIME as timestamp,",
						"          MCRHOLDCODE as string,",
						"          SALESLINE_LARGEITEMORDEREDQTY as decimal(38,16),",
						"          SALESLINE_TOTALLARGEITEMVOLUME as decimal(38,6),",
						"          SALESLINE_MODIFIEDDATETIME as timestamp,",
						"          CUSTPACKINGSLIPTRANS_FIRSTLARGEITEMSHIPPEDQTY as decimal(38,16),",
						"          CUSTPACKINGSLIPTRANS_MODIFIEDDATETIME as timestamp,",
						"          LATEST_MODIFIEDDATETIME as timestamp,",
						"          HK_SOURCE_NAME as string,",
						"          HK_JOB_RUN_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SrcSalestable",
						"source(output(",
						"          LEGAL_ENTITY_ID as string,",
						"          HK_LAST_UPDATED_TIMESTAMP as timestamp,",
						"          TRUCK_TOTAL_CUBIC_FEET as decimal(25,16)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     query: 'select ltv1.legal_entity_id, ltv1.hk_last_updated_timestamp as HK_LAST_UPDATED_TIMESTAMP, ltv1.truck_total_cubic_feet\\r\\nfrom LKP_TRUCK_VOLUME ltv1\\r\\nwhere is_tempurpedic = true',",
						"     format: 'query') ~> LkpTruckVolume",
						"SrcSalestable, LkpTruckVolume join(DATAAREAID == LEGAL_ENTITY_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinLkpTruckVolumnColumns",
						"JoinLkpTruckVolumnColumns derive(LATEST_MODIFIEDDATETIME_NEW = greatest(LATEST_MODIFIEDDATETIME,\r",
						"iifNull(HK_LAST_UPDATED_TIMESTAMP,toTimestamp('1950-01-01 00:00:00'),HK_LAST_UPDATED_TIMESTAMP))) ~> RederiveColumns",
						"RederiveColumns filter(LATEST_MODIFIEDDATETIME_NEW > toTimestamp($df_prev_max_timestamp, 'yyyy-MM-dd HH:mm:ss')) ~> FilterLastestRecords",
						"FilterLastestRecords sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          DATAAREAID,",
						"          SALESID,",
						"          CUSTOMERREF,",
						"          PURCHORDERFORMNUM,",
						"          SALESTYPE,",
						"          RETURNITEMNUM,",
						"          RETURNREPLACEMENTCREATED,",
						"          SALESPOOLID,",
						"          PLANNUMBER,",
						"          RETURNREPLACEMENTID,",
						"          MODIFIEDDATETIME,",
						"          MCRHOLDCODE,",
						"          SALESLINE_LARGEITEMORDEREDQTY,",
						"          SALESLINE_TOTALLARGEITEMVOLUME,",
						"          SALESLINE_MODIFIEDDATETIME,",
						"          CUSTPACKINGSLIPTRANS_FIRSTLARGEITEMSHIPPEDQTY,",
						"          CUSTPACKINGSLIPTRANS_MODIFIEDDATETIME,",
						"          HK_SOURCE_NAME,",
						"          HK_JOB_RUN_ID,",
						"          LKP_TRUCK_VOLUME_LEGAL_ENTITY_ID = LEGAL_ENTITY_ID,",
						"          LKP_TRUCK_VOLUME_TRUCK_TOTAL_CUBIC_FEET = TRUCK_TOTAL_CUBIC_FEET,",
						"          LATEST_MODIFIEDDATETIME = LATEST_MODIFIEDDATETIME_NEW",
						"     )) ~> Salestable"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_load_dim_trade_promotion')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_parquet",
								"type": "DatasetReference"
							},
							"name": "SrcTamTradePromotion"
						},
						{
							"dataset": {
								"referenceName": "ds_parquet",
								"type": "DatasetReference"
							},
							"name": "SrcDeal"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference"
							},
							"name": "TamTradePromotion"
						}
					],
					"transformations": [
						{
							"name": "JoinDealColumns"
						},
						{
							"name": "FilterLastestRecords"
						},
						{
							"name": "RederiveColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     df_prev_max_timestamp as string",
						"}",
						"source(output(",
						"          DATAAREAID as string,",
						"          PROMOTIONID as string,",
						"          PROMOTIONDESCRIPTION as string,",
						"          ACTIVITY as integer,",
						"          CURRENCY as string,",
						"          HCMWORKERID as long,",
						"          ORDERSENDDATE as timestamp,",
						"          ORDERSSTARTDATE as timestamp,",
						"          PROMOTIONSTATUS as integer,",
						"          TPXDEALTYPE as integer,",
						"          UNITID as string,",
						"          TPXDEALID as integer,",
						"          MCSTAMDEALSTATUS as string,",
						"          MODIFIEDDATETIME as timestamp,",
						"          CURRENCY_TXT as string,",
						"          CURRENCY_MODIFIEDDATETIME as timestamp,",
						"          HCMWORKER_PERSON as long,",
						"          HCMWORKER_MODIFIEDDATETIME as timestamp,",
						"          DIRPARTYTABLE_NAME as string,",
						"          DIRPARTYTABLE_MODIFIEDDATETIME as timestamp,",
						"          UNITOFMEASURE_SYMBOL as string,",
						"          UNITOFMEASURE_MODIFIEDDATETIME as timestamp,",
						"          UNITOFMEASURETRANSLATION_DESCRIPTION as string,",
						"          UNITOFMEASURETRANSLATION_MODIFIEDDATETIME as timestamp,",
						"          TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PROMOTIONSTATUS as string,",
						"          TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_TPXDEALTYPE as string,",
						"          TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_TPXDEALTYPE as string,",
						"          LATEST_MODIFIEDDATETIME as timestamp,",
						"          HK_JOB_RUN_ID as string,",
						"          HK_SOURCE_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SrcTamTradePromotion",
						"source(output(",
						"          DEALID as integer,",
						"          DEALDESC as string,",
						"          LASTEDITDATE as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> SrcDeal",
						"SrcTamTradePromotion, SrcDeal join(TPXDEALID == DEALID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinDealColumns",
						"RederiveColumns filter(LATEST_MODIFIEDDATETIME_NEW > toTimestamp($df_prev_max_timestamp, 'yyyy-MM-dd HH:mm:ss')) ~> FilterLastestRecords",
						"JoinDealColumns derive(LATEST_MODIFIEDDATETIME_NEW = greatest(LATEST_MODIFIEDDATETIME,LASTEDITDATE)) ~> RederiveColumns",
						"FilterLastestRecords sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          DATAAREAID,",
						"          PROMOTIONID,",
						"          PROMOTIONDESCRIPTION,",
						"          ACTIVITY,",
						"          CURRENCY,",
						"          HCMWORKERID,",
						"          ORDERSENDDATE,",
						"          ORDERSSTARTDATE,",
						"          PROMOTIONSTATUS,",
						"          TPXDEALTYPE,",
						"          UNITID,",
						"          TPXDEALID,",
						"          MCSTAMDEALSTATUS,",
						"          MODIFIEDDATETIME,",
						"          CURRENCY_TXT,",
						"          CURRENCY_MODIFIEDDATETIME,",
						"          HCMWORKER_PERSON,",
						"          HCMWORKER_MODIFIEDDATETIME,",
						"          DIRPARTYTABLE_NAME,",
						"          DIRPARTYTABLE_MODIFIEDDATETIME,",
						"          UNITOFMEASURE_SYMBOL,",
						"          UNITOFMEASURE_MODIFIEDDATETIME,",
						"          UNITOFMEASURETRANSLATION_DESCRIPTION,",
						"          UNITOFMEASURETRANSLATION_MODIFIEDDATETIME,",
						"          TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PROMOTIONSTATUS,",
						"          TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_TPXDEALTYPE,",
						"          TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_TPXDEALTYPE,",
						"          LATEST_MODIFIEDDATETIME = LATEST_MODIFIEDDATETIME_NEW,",
						"          HK_JOB_RUN_ID,",
						"          HK_SOURCE_NAME,",
						"          DEAL_DEAL_DESCRIPTION = DEALDESC,",
						"          DEAL_LASTEDITDATE = LASTEDITDATE",
						"     )) ~> TamTradePromotion"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_load_edw_history')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_parq_edw",
								"type": "DatasetReference"
							},
							"name": "adlsSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference"
							},
							"name": "snowflakeRawTarget"
						}
					],
					"transformations": [
						{
							"name": "nullHandling"
						},
						{
							"name": "convertColumnNamesToUpperCase"
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> adlsSource",
						"convertColumnNamesToUpperCase derive(HK_SOURCE_NAME = 'EDW_DWH',",
						"          HK_JOB_RUN_ID = '-1',",
						"          HK_CREATED_TIMESTAMP = currentUTC(),",
						"          HK_WAREHOUSE_ID = uuid(),",
						"          each(match(type=='string'), $$ = coalesce(trim($$),'')),",
						"          each(match(type=='integer'||type=='short'||type=='long'||type=='float'||type=='double'), $$ = coalesce($$,0)),",
						"          each(match(type=='date'), $$ = coalesce($$,toDate('1950-01-01','yyyy-MM-dd'))),",
						"          each(match(type=='timestamp'), $$ = coalesce(toTimestamp(toString($$),'yyyy-MM-dd HH:mm:ss'),toTimestamp('1950-01-01 00:00:00','yyyy-MM-dd HH:mm:ss'))),",
						"          each(match(startsWith(type,'decimal')), $$ = coalesce($$,toDecimal(0)))) ~> nullHandling",
						"adlsSource select(mapColumn(",
						"          each(match(true()),",
						"               upper($$) = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> convertColumnNamesToUpperCase",
						"nullHandling sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true) ~> snowflakeRawTarget"
					]
				}
			},
			"dependsOn": []
		}
	]
}