{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "mdw-df-nala-dev"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_consensus_forecast_to_dim_arkieva_sub_channel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": "select \r\n'740' as DATAAREAID,\r\nSub_Channel_Number as SUB_CHANNEL_NUMBER,\r\nSub_Channel_Description as SUB_CHANNEL_DESCRIPTION\r\nfrom \r\ndbo.Export_Consensus_Forecast_Monthly\r\nunion\r\nselect \r\n'740' as DATAAREAID,\r\nSub_Channel_Number as SUB_CHANNEL_NUMBER,\r\nSub_Channel_Description as SUB_CHANNEL_DESCRIPTION\r\nfrom \r\ndbo.Export_Consensus_Forecast_Weekly\r\nunion\r\nselect \r\n'415' as DATAAREAID,\r\nSub_Channel_Number as SUB_CHANNEL_NUMBER,\r\nSub_Channel_Description as SUB_CHANNEL_DESCRIPTION\r\nfrom\r\ndbo.Export_Consensus_Forecast_Monthly_Sealy\r\nunion\r\nselect \r\n'415' as DATAAREAID,\r\nSub_Channel_Number as SUB_CHANNEL_NUMBER,\r\nSub_Channel_Description as SUB_CHANNEL_DESCRIPTION\r\nfrom\r\ndbo.Export_Consensus_Forecast_Weekly_Sealy",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SUB_CHANNEL_NUMBER",
																"type": "String"
															},
															"sink": {
																"name": "SUB_CHANNEL_NUMBER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SUB_CHANNEL_DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "SUB_CHANNEL_DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.arkieva_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.arkieva_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "Export_Consensus_Forecast_Monthly"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "ARKIEVA_SUB_CHANNEL"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_ARKIEVA_SUB_CHANNEL"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T10:58:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_currency_to_dim_currency')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prv_max_upd_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_retail_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_retail_d365",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select \nc1.CURRENCYCODE,\nc1.TXT,\nc1.MODIFIEDDATETIME\nfrom\ndbo.CURRENCY c1\nwhere \nconvert(varchar(25), isnull(c1.MODIFIEDDATETIME, '1950-01-01'), 120) > '@{variables('v_prv_max_upd_timestamp')}' \n\n",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CURRENCYCODE",
																"type": "String"
															},
															"sink": {
																"name": "CURRENCYCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TXT",
																"type": "String"
															},
															"sink": {
																"name": "TXT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "2",
									"activities": [
										{
											"name": "sql_retail_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select \nc1.CURRENCYCODE,\nc1.TXT,\nc1.MODIFIEDDATETIME\nfrom\ndbo.CURRENCY c1\nwhere \nconvert(varchar(25), isnull(c1.MODIFIEDDATETIME, '1950-01-01'), 120) > '@{variables('v_prv_max_upd_timestamp')}' \n\n",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CURRENCYCODE",
																"type": "String"
															},
															"sink": {
																"name": "CURRENCYCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TXT",
																"type": "String"
															},
															"sink": {
																"name": "TXT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.retail_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.retail_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "retail_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_retail_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_retail_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_retail_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_retail_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_retail_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_retail_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "retail_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_retail_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "d365_to_raw",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "WarehouseSource",
											"additionalColumns": [
												{
													"name": "HK_JOB_RUN_ID",
													"value": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													}
												},
												{
													"name": "HK_SOURCE_NAME",
													"value": {
														"value": "@pipeline().parameters.p_src_nm",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "@concat('select \nc1.currencycode AS CURRENCYCODE,\nc1.txt AS TXT,\nc1.modifieddatetime AS MODIFIEDDATETIME\nfrom ',pipeline().globalParameters.d365_dbName,'.',toLower(pipeline().parameters.p_src_table_nm),' c1 where convert(varchar(25), isnull(c1.modifieddatetime, ''1950-01-01''), 120) >', '''',variables('v_prv_max_upd_timestamp'),'''')\n\n\n\n\n\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeSink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "ls_blob_storage",
												"type": "LinkedServiceReference"
											},
											"path": {
												"value": "@pipeline().globalParameters.rootDir",
												"type": "Expression"
											},
											"enableCompression": true
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "HK_SOURCE_NAME",
														"type": "String"
													},
													"sink": {
														"name": "HK_SOURCE_NAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "HK_JOB_RUN_ID",
														"type": "String"
													},
													"sink": {
														"name": "HK_JOB_RUN_ID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CURRENCYCODE",
														"type": "String"
													},
													"sink": {
														"name": "CURRENCYCODE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "TXT",
														"type": "String"
													},
													"sink": {
														"name": "TXT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "MODIFIEDDATETIME",
														"type": "DateTime"
													},
													"sink": {
														"name": "LATEST_MODIFIEDDATETIME",
														"type": "DateTime"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_fabric_wh",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_snowflake",
											"type": "DatasetReference",
											"parameters": {
												"p_tgt_table_name": {
													"value": "@pipeline().parameters.p_tgt_raw_table_nm",
													"type": "Expression"
												},
												"p_tgt_schema_name": {
													"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
													"type": "Expression"
												},
												"p_ls_DbName": {
													"value": "@pipeline().globalParameters.snow_rawDb",
													"type": "Expression"
												},
												"p_ls_Env": {
													"value": "@pipeline().globalParameters.environment",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "d365_raw_load_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "d365_to_raw",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('d365_to_raw').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('d365_to_raw').Error['message']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('d365_to_raw').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('d365_to_raw').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "d365_load_to_raw_fail",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "d365_raw_load_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('d365_to_raw').Error['message']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_CURRENCY"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "CURRENCY"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "CURRENCY"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prv_max_upd_timestamp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T10:51:02Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_custgroup_to_dim_customer_group')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": "select \r\ncg1.DATAAREAID as DATAAREAID,\r\ncg1.CUSTGROUP as CUSTGROUP,\r\ncg1.NAME as NAME\r\nfrom\r\ndbo.CUSTGROUP cg1",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CUSTGROUP",
																"type": "String"
															},
															"sink": {
																"name": "CUSTGROUP",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('SELECT \n\tcg1.dataareaid as DATAAREAID,\n\tcg1.custgroup as CUSTGROUP,\n\tcg1.name as NAME\nfrom ',pipeline().globalParameters.d365_dbName,'.',' custgroup cg1')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CUSTGROUP",
																"type": "String"
															},
															"sink": {
																"name": "CUSTGROUP",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "CUSTGROUP"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "CUSTGROUP"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_CUSTOMER_GROUP"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T10:58:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_custledger_to_dim_customer_posting_profile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prv_max_upd_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId,-1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId,-1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "SELECT \nc1.DATAAREAID as DATAAREAID,\nc1.POSTINGPROFILE as POSTINGPROFILE,\nc1.NAME as NAME, \nc1.SETTLEMENT as SETTLEMENT, \nc1.COLLECTIONLETTER as COLLECTIONLETTER, \nc1.INTEREST as INTEREST, \nc1.MODIFIEDDATETIME AS LATEST_MODIFIEDDATETIME \nFROM dbo.CUSTLEDGER c1 \nwhere\nconvert(\n        varchar(25),\n        isnull (c1.MODIFIEDDATETIME, '1950-01-01'),\n        120\n    ) > '@{variables('v_prv_max_upd_timestamp')}';",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "POSTINGPROFILE",
																"type": "String"
															},
															"sink": {
																"name": "POSTINGPROFILE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SETTLEMENT",
																"type": "Int32"
															},
															"sink": {
																"name": "SETTLEMENT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "COLLECTIONLETTER",
																"type": "Int32"
															},
															"sink": {
																"name": "COLLECTIONLETTER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INTEREST",
																"type": "Int32"
															},
															"sink": {
																"name": "INTEREST",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId,-1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId,-1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('SELECT \nc1.dataareaid as DATAAREAID,\nc1.postingprofile as POSTINGPROFILE,\nc1.name as NAME, \nc1.settlement as SETTLEMENT, \nc1.collectionletter as COLLECTIONLETTER, \nc1.interest as INTEREST, \nc1.modifieddatetime AS LATEST_MODIFIEDDATETIME \nFROM dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.custledger c1 \nwhere\nconvert(\n        varchar(25),\n        isnull (c1.modifieddatetime, ''1950-01-01''),\n        120\n    )   > ','''',variables('v_prv_max_upd_timestamp'),'''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "POSTINGPROFILE",
																"type": "String"
															},
															"sink": {
																"name": "POSTINGPROFILE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SETTLEMENT",
																"type": "Int32"
															},
															"sink": {
																"name": "SETTLEMENT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "COLLECTIONLETTER",
																"type": "Int32"
															},
															"sink": {
																"name": "COLLECTIONLETTER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INTEREST",
																"type": "Int32"
															},
															"sink": {
																"name": "INTEREST",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId,-1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "CUSTLEDGER"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_CUSTOMER_POSTING_PROFILE"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "CUSTLEDGER"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prv_max_upd_timestamp": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_custpaymmodetable_to_dim_payment_mode')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": "select cpmt1.DATAAREAID,cpmt1.PAYMMODE,cpmt1.NAME from dbo.CUSTPAYMMODETABLE cpmt1",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PAYMMODE",
																"type": "String"
															},
															"sink": {
																"name": "PAYMMODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('SELECT\n\tcpmt1.dataareaid as DATAAREAID\n\t,cpmt1.paymmode as PAYMMODE\n\t\t,cpmt1.name as NAME\nFROM ',pipeline().globalParameters.d365_dbName,'.',' custpaymmodetable cpmt1\nWhere dataareaid Is not null'\n)",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PAYMMODE",
																"type": "String"
															},
															"sink": {
																"name": "PAYMMODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "CUSTPAYMMODETABLE"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "CUSTPAYMMODETABLE"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_PAYMENT_MODE"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T10:58:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_custsettlement_to_fact_customer_settlements')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prv_max_upd_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId,-1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId,-1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select\n    cs1.RECID,\n    cs1.TRANSCOMPANY,\n    cs1.ACCOUNTNUM,\n    cs1.TRANSRECID,\n    cs1.TRANSDATE,\n    cs1.DATAAREAID,\n    cs1.SETTLEAMOUNTMST,\n    cs1.SETTLEAMOUNTCUR,\n    cs1.MODIFIEDDATETIME as LATEST_MODIFIEDDATETIME\nfrom\n    dbo.CUSTSETTLEMENT cs1\nwhere\n    convert(\n        varchar(25),\n        isnull (cs1.MODIFIEDDATETIME, '1950-01-01'),\n        120\n    ) > '@{variables('v_prv_max_upd_timestamp')}'",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "Int64"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TRANSCOMPANY",
																"type": "String"
															},
															"sink": {
																"name": "TRANSCOMPANY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ACCOUNTNUM",
																"type": "String"
															},
															"sink": {
																"name": "ACCOUNTNUM",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TRANSRECID",
																"type": "Int64"
															},
															"sink": {
																"name": "TRANSRECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TRANSDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "TRANSDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SETTLEAMOUNTMST",
																"type": "Decimal"
															},
															"sink": {
																"name": "SETTLEAMOUNTMST",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "SETTLEAMOUNTCUR",
																"type": "Decimal"
															},
															"sink": {
																"name": "SETTLEAMOUNTCUR",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId,-1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId,-1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@Concat('select\n    cs1.recid AS RECID,\n    cs1.transcompany AS TRANSCOMPANY,\n    cs1.accountnum AS ACCOUNTNUM,\n    cs1.transrecid AS TRANSRECID,\n    cs1.transdate AS TRANSDATE,\n    cs1.dataareaid AS DATAAREAID,\n    cs1.settleamountmst AS SETTLEAMOUNTMST,\n    cs1.settleamountcur AS SETTLEAMOUNTCUR,\n    cs1.modifieddatetime as LATEST_MODIFIEDDATETIME\nfrom '\n,pipeline().globalParameters.d365_dbName,'.','custsettlement cs1\nwhere\n    convert(\n        varchar(25),\n        isnull (cs1.modifieddatetime,''1950-01-01''),\n        120\n    ) > ','''',variables('v_prv_max_upd_timestamp'),'''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "Int64"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TRANSCOMPANY",
																"type": "String"
															},
															"sink": {
																"name": "TRANSCOMPANY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ACCOUNTNUM",
																"type": "String"
															},
															"sink": {
																"name": "ACCOUNTNUM",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TRANSRECID",
																"type": "Int64"
															},
															"sink": {
																"name": "TRANSRECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TRANSDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "TRANSDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SETTLEAMOUNTMST",
																"type": "Decimal"
															},
															"sink": {
																"name": "SETTLEAMOUNTMST",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "SETTLEAMOUNTCUR",
																"type": "Decimal"
															},
															"sink": {
																"name": "SETTLEAMOUNTCUR",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId,-1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "CUSTSETTLEMENT"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "FACT_CUSTOMER_SETTLEMENTS"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "CUSTSETTLEMENT"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prv_max_upd_timestamp": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_dataarea_to_dim_legal_entity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_retail_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_retail_d365",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": "select da1.ID,da1.NAME from dbo.DATAAREA da1\r\ninner join (select distinct max(RECID) over (partition by ID) as MAX_RECID from dbo.DATAAREA) da2 on\r\n\tda1.RECID = da2.MAX_RECID",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ID",
																"type": "String"
															},
															"sink": {
																"name": "ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "2",
									"activities": [
										{
											"name": "sql_retail_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select da1.ID,da1.NAME from dbo.DATAAREA da1\ninner join (select distinct max(RECID) over (partition by ID) as MAX_RECID from dbo.DATAAREA) da2 on\n\tda1.RECID = da2.MAX_RECID",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ID",
																"type": "String"
															},
															"sink": {
																"name": "ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.retail_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.retail_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "sql_retail_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_retail_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_retail_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_retail_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_retail_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_retail_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_retail_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "sql_retail_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_retail_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "d365_to_raw",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "WarehouseSource",
											"additionalColumns": [
												{
													"name": "HK_SOURCE_NAME",
													"value": {
														"value": "@pipeline().parameters.p_src_nm",
														"type": "Expression"
													}
												},
												{
													"name": "HK_JOB_RUN_ID",
													"value": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													}
												},
												{
													"name": "LAST_MODIFIED_DATE",
													"value": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "@concat('\nselect da1.fno_id as ID,\nda1.name as NAME\nfrom ',pipeline().globalParameters.d365_dbName,'.','dataarea da1\ninner join (select distinct max(recid) over (partition by Id) as MAX_RECID from ',pipeline().globalParameters.d365_dbName,'.', 'dataarea) da2 on\n\tda1.recid = da2.MAX_RECID')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeSink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "ls_blob_storage",
												"type": "LinkedServiceReference"
											},
											"path": {
												"value": "@pipeline().globalParameters.rootDir",
												"type": "Expression"
											},
											"enableCompression": true
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "HK_SOURCE_NAME",
														"type": "String"
													},
													"sink": {
														"name": "HK_SOURCE_NAME",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "HK_JOB_RUN_ID",
														"type": "String"
													},
													"sink": {
														"name": "HK_JOB_RUN_ID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "ID",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "ID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "NAME",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "NAME",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "LAST_MODIFIED_DATE",
														"type": "String"
													},
													"sink": {
														"name": "LATEST_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "TIMESTAMP_TZ"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_fabric_wh",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_snowflake",
											"type": "DatasetReference",
											"parameters": {
												"p_tgt_table_name": {
													"value": "@pipeline().parameters.p_tgt_raw_table_nm",
													"type": "Expression"
												},
												"p_tgt_schema_name": {
													"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
													"type": "Expression"
												},
												"p_ls_DbName": {
													"value": "@pipeline().globalParameters.snow_rawDb",
													"type": "Expression"
												},
												"p_ls_Env": {
													"value": "@pipeline().globalParameters.environment",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "d365_raw_load_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "d365_to_raw",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('d365_to_raw').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('d365_to_raw').Error['message']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('d365_to_raw').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('d365_to_raw').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "d365_load_to_raw_fail",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "d365_raw_load_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('d365_to_raw').Error['message']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "DATAAREA"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "DATAAREA"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_LEGAL_ENTITY"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T10:58:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_dimattr_to_dim_default_dimension')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prv_max_upd_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_retail_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_retail_d365",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select\n\tdef1.DIMENSIONATTRIBUTEVALUESET,\n\tdef1.DISPLAYVALUE_A_DEPARTMENT,\n\tdef1.DISPLAYVALUE_B_INTERCOMPANY,\n\tdef1.DISPLAYVALUE_C_SALES_CHANNEL,\n\tdef1.DISPLAYVALUE_D_TYPE,\n\tdef1.DISPLAYVALUE_E_CATEGORY,\n\tdef1.DISPLAYVALUE_F_FAMILY,\n\tdef1.DISPLAYVALUE_G_SIZE,\n\tdef1.DISPLAYVALUE_H_VERSION,\n\tdef1.DISPLAYVALUE_K_FOAM_SOURCED,\n\tdef1.DISPLAYVALUE_L_STORE,\n\tdef1.DISPLAYVALUE_BUSINESS_UNIT,\n\tdpt1.NAME as DIRPARTYTABLE1_NAME_DEPARTMENT,\n\tdft1.DESCRIPTION as DIMENSIONFINANCIALTAG_DESCRIPTION_INTERCOMPANY,\n\tdft2.DESCRIPTION as DIMENSIONFINANCIALTAG_DESCRIPTION_SALES_CHANNEL,\n\tdft3.DESCRIPTION as DIMENSIONFINANCIALTAG_DESCRIPTION_TYPE,\n\tdft4.DESCRIPTION as DIMENSIONFINANCIALTAG_DESCRIPTION_CATEGORY,\n\tdft5.DESCRIPTION as DIMENSIONFINANCIALTAG_DESCRIPTION_FAMILY,\n\tdft6.DESCRIPTION as DIMENSIONFINANCIALTAG_DESCRIPTION_SIZE,\n\tdft7.DESCRIPTION as DIMENSIONFINANCIALTAG_DESCRIPTION_VERSION,\n\tdft8.DESCRIPTION as DIMENSIONFINANCIALTAG_DESCRIPTION_FOAM_SOURCED,\n\tdpt2.NAME as DIRPARTYTABLE2_NAME_STORE,\n\tdpt3.NAME as DIRPARTYTABLE3_NAME_BUSINESS_UNIT,\n\tdef1.DEFAULTDIMENSION_MODIFIEDDATETIME as LATEST_MODIFIEDDATETIME\nfrom\n    (select distinct davsi1.DIMENSIONATTRIBUTEVALUESET\n\t, max(\n\t\tcase when da1.NAME = 'A_Department' then davsi1.DISPLAYVALUE\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.DIMENSIONATTRIBUTEVALUESET) as DISPLAYVALUE_A_DEPARTMENT\n\t, max(\n\t\tcase when da1.NAME = 'B_Intercompany' then davsi1.DISPLAYVALUE\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.DIMENSIONATTRIBUTEVALUESET) as DISPLAYVALUE_B_INTERCOMPANY\n\t, max(\n\t\tcase when da1.NAME = 'C_Sales_Channel' then davsi1.DISPLAYVALUE\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.DIMENSIONATTRIBUTEVALUESET) as DISPLAYVALUE_C_SALES_CHANNEL\n\t, max(\n\t\tcase when da1.NAME = 'D_Type' then davsi1.DISPLAYVALUE\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.DIMENSIONATTRIBUTEVALUESET) as DISPLAYVALUE_D_TYPE\n\t, max(\n\t\tcase when da1.NAME = 'E_Category' then davsi1.DISPLAYVALUE\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.DIMENSIONATTRIBUTEVALUESET) as DISPLAYVALUE_E_CATEGORY\n\t, max(\n\t\tcase when da1.NAME = 'F_Family' then davsi1.DISPLAYVALUE\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.DIMENSIONATTRIBUTEVALUESET) as DISPLAYVALUE_F_FAMILY\n\t, max(\n\t\tcase when da1.NAME = 'G_Size' then davsi1.DISPLAYVALUE\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.DIMENSIONATTRIBUTEVALUESET) as DISPLAYVALUE_G_SIZE\n\t, max(\n\t\tcase when da1.NAME = 'H_Version' then davsi1.DISPLAYVALUE\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.DIMENSIONATTRIBUTEVALUESET) as DISPLAYVALUE_H_VERSION\n\t, max(\n\t\tcase when da1.NAME = 'K_Foam_Sourced' then davsi1.DISPLAYVALUE\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.DIMENSIONATTRIBUTEVALUESET) as DISPLAYVALUE_K_FOAM_SOURCED\n\t, max(\n\t\tcase when da1.NAME = 'L_Store' then davsi1.DISPLAYVALUE\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.DIMENSIONATTRIBUTEVALUESET) as DISPLAYVALUE_L_STORE\n\t, max(\n\t\tcase when da1.NAME = 'BusinessUnit' then davsi1.DISPLAYVALUE\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.DIMENSIONATTRIBUTEVALUESET) as DISPLAYVALUE_BUSINESS_UNIT\n\t, max(\n\t\t(select max(i) from (values (davsi1.MODIFIEDDATETIME), (dav1.MODIFIEDDATETIME), (da1.MODIFIEDDATETIME), (desc1.DESC_MODIFIEDDATETIME)) AS T(i))\n\t\t) over (partition by davsi1.DIMENSIONATTRIBUTEVALUESET) as DEFAULTDIMENSION_MODIFIEDDATETIME\nfrom dbo.DIMENSIONATTRIBUTEVALUESETITEM davsi1\nleft join dbo.DIMENSIONATTRIBUTEVALUE dav1 on\n\tdavsi1.DIMENSIONATTRIBUTEVALUE = dav1.RECID\nleft join dbo.DIMENSIONATTRIBUTE da1 on\n\tdav1.DIMENSIONATTRIBUTE = da1.RECID\nleft join (select dft1.VALUE, da2.NAME, dft1.DESCRIPTION\n\t\t\t\t, (select max(i) from (values (dft1.MODIFIEDDATETIME), (dadc1.MODIFIEDDATETIME), (da2.MODIFIEDDATETIME)) AS T(i)) as DESC_MODIFIEDDATETIME\n\t\t\tfrom dbo.DIMENSIONFINANCIALTAG dft1\n\t\t\tleft join dbo.DIMENSIONATTRIBUTEDIRCATEGORY dadc1 on\n\t\t\t\tdft1.FINANCIALTAGCATEGORY = dadc1.DIRCATEGORY\n\t\t\tleft join dbo.DIMENSIONATTRIBUTE da2 on\n\t\t\t\tdadc1.DIMENSIONATTRIBUTE = da2.RECID) desc1 on\n\tdavsi1.DISPLAYVALUE = desc1.VALUE and\n\tda1.NAME = desc1.NAME\n) def1\nleft join (select OMOPERATINGUNITNUMBER\n\t\t\t, max(NAME) as NAME\n\t\tfrom dbo.DIRPARTYTABLE\n\t\tgroup by OMOPERATINGUNITNUMBER) dpt1 on\n\tdef1.DISPLAYVALUE_A_DEPARTMENT = dpt1.OMOPERATINGUNITNUMBER\nleft join (select dft10.VALUE, dft10.DESCRIPTION\n\t\t\tfrom dbo.DIMENSIONFINANCIALTAG dft10\n\t\t\tleft join dbo.DIMENSIONATTRIBUTEDIRCATEGORY dadc10 on\n\t\t\t\tdft10.FINANCIALTAGCATEGORY = dadc10.DIRCATEGORY\n\t\t\tleft join dbo.DIMENSIONATTRIBUTE da10 on\n\t\t\t\tdadc10.DIMENSIONATTRIBUTE = da10.RECID\n\t\t\twhere da10.NAME = 'B_Intercompany') dft1 on\n\tdef1.DISPLAYVALUE_B_INTERCOMPANY = dft1.VALUE\nleft join (select dft10.VALUE, dft10.DESCRIPTION\n\t\t\tfrom dbo.DIMENSIONFINANCIALTAG dft10\n\t\t\tleft join dbo.DIMENSIONATTRIBUTEDIRCATEGORY dadc10 on\n\t\t\t\tdft10.FINANCIALTAGCATEGORY = dadc10.DIRCATEGORY\n\t\t\tleft join dbo.DIMENSIONATTRIBUTE da10 on\n\t\t\t\tdadc10.DIMENSIONATTRIBUTE = da10.RECID\n\t\t\twhere da10.NAME = 'C_Sales_Channel') dft2 on\n\tdef1.DISPLAYVALUE_C_SALES_CHANNEL = dft2.VALUE\nleft join (select dft10.VALUE, dft10.DESCRIPTION\n\t\t\tfrom dbo.DIMENSIONFINANCIALTAG dft10\n\t\t\tleft join dbo.DIMENSIONATTRIBUTEDIRCATEGORY dadc10 on\n\t\t\t\tdft10.FINANCIALTAGCATEGORY = dadc10.DIRCATEGORY\n\t\t\tleft join dbo.DIMENSIONATTRIBUTE da10 on\n\t\t\t\tdadc10.DIMENSIONATTRIBUTE = da10.RECID\n\t\t\twhere da10.NAME = 'D_Type') dft3 on\n\tdef1.DISPLAYVALUE_D_TYPE = dft3.VALUE\nleft join (select dft10.VALUE, dft10.DESCRIPTION\n\t\t\tfrom dbo.DIMENSIONFINANCIALTAG dft10\n\t\t\tleft join dbo.DIMENSIONATTRIBUTEDIRCATEGORY dadc10 on\n\t\t\t\tdft10.FINANCIALTAGCATEGORY = dadc10.DIRCATEGORY\n\t\t\tleft join dbo.DIMENSIONATTRIBUTE da10 on\n\t\t\t\tdadc10.DIMENSIONATTRIBUTE = da10.RECID\n\t\t\twhere da10.NAME = 'E_Category') dft4 on\n\tdef1.DISPLAYVALUE_E_CATEGORY = dft4.VALUE\nleft join (select dft10.VALUE, dft10.DESCRIPTION\n\t\t\tfrom dbo.DIMENSIONFINANCIALTAG dft10\n\t\t\tleft join dbo.DIMENSIONATTRIBUTEDIRCATEGORY dadc10 on\n\t\t\t\tdft10.FINANCIALTAGCATEGORY = dadc10.DIRCATEGORY\n\t\t\tleft join dbo.DIMENSIONATTRIBUTE da10 on\n\t\t\t\tdadc10.DIMENSIONATTRIBUTE = da10.RECID\n\t\t\twhere da10.NAME = 'F_Family') dft5 on\n\tdef1.DISPLAYVALUE_F_FAMILY = dft5.VALUE\nleft join (select dft10.VALUE, dft10.DESCRIPTION\n\t\t\tfrom dbo.DIMENSIONFINANCIALTAG dft10\n\t\t\tleft join dbo.DIMENSIONATTRIBUTEDIRCATEGORY dadc10 on\n\t\t\t\tdft10.FINANCIALTAGCATEGORY = dadc10.DIRCATEGORY\n\t\t\tleft join dbo.DIMENSIONATTRIBUTE da10 on\n\t\t\t\tdadc10.DIMENSIONATTRIBUTE = da10.RECID\n\t\t\twhere da10.NAME = 'G_Size') dft6 on\n\tdef1.DISPLAYVALUE_G_SIZE = dft6.VALUE\nleft join (select dft10.VALUE, dft10.DESCRIPTION\n\t\t\tfrom dbo.DIMENSIONFINANCIALTAG dft10\n\t\t\tleft join dbo.DIMENSIONATTRIBUTEDIRCATEGORY dadc10 on\n\t\t\t\tdft10.FINANCIALTAGCATEGORY = dadc10.DIRCATEGORY\n\t\t\tleft join dbo.DIMENSIONATTRIBUTE da10 on\n\t\t\t\tdadc10.DIMENSIONATTRIBUTE = da10.RECID\n\t\t\twhere da10.NAME = 'H_Version') dft7 on\n\tdef1.DISPLAYVALUE_H_VERSION = dft7.VALUE\nleft join (select dft10.VALUE, dft10.DESCRIPTION\n\t\t\tfrom dbo.DIMENSIONFINANCIALTAG dft10\n\t\t\tleft join dbo.DIMENSIONATTRIBUTEDIRCATEGORY dadc10 on\n\t\t\t\tdft10.FINANCIALTAGCATEGORY = dadc10.DIRCATEGORY\n\t\t\tleft join dbo.DIMENSIONATTRIBUTE da10 on\n\t\t\t\tdadc10.DIMENSIONATTRIBUTE = da10.RECID\n\t\t\twhere da10.NAME = 'K_Foam_Sourced') dft8 on\n\tdef1.DISPLAYVALUE_K_FOAM_SOURCED = dft8.VALUE\nleft join (select OMOPERATINGUNITNUMBER\n\t\t\t, max(NAME) as NAME\n\t\tfrom dbo.DIRPARTYTABLE\n\t\tgroup by OMOPERATINGUNITNUMBER) dpt2 on\n\tdef1.DISPLAYVALUE_L_STORE = dpt2.OMOPERATINGUNITNUMBER\nleft join (select OMOPERATINGUNITNUMBER\n\t\t\t, max(NAME) as NAME\n\t\tfrom dbo.DIRPARTYTABLE\n\t\tgroup by OMOPERATINGUNITNUMBER) dpt3 on\n\tdef1.DISPLAYVALUE_BUSINESS_UNIT = dpt3.OMOPERATINGUNITNUMBER\nwhere\n\tconvert(\n\t\tvarchar(25),\n\t\tisnull(\n\t\t\tdef1.DEFAULTDIMENSION_MODIFIEDDATETIME,\n\t\t\t'1950-01-01'\n\t\t),\n\t\t120\n\t) > '@{variables('v_prv_max_upd_timestamp')}'",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DIMENSIONATTRIBUTEVALUESET",
																"type": "Int64"
															},
															"sink": {
																"name": "DIMENSIONATTRIBUTEVALUESET",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "DISPLAYVALUE_A_DEPARTMENT",
																"type": "String"
															},
															"sink": {
																"name": "DISPLAYVALUE_A_DEPARTMENT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DISPLAYVALUE_B_INTERCOMPANY",
																"type": "String"
															},
															"sink": {
																"name": "DISPLAYVALUE_B_INTERCOMPANY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DISPLAYVALUE_C_SALES_CHANNEL",
																"type": "String"
															},
															"sink": {
																"name": "DISPLAYVALUE_C_SALES_CHANNEL",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DISPLAYVALUE_D_TYPE",
																"type": "String"
															},
															"sink": {
																"name": "DISPLAYVALUE_D_TYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DISPLAYVALUE_E_CATEGORY",
																"type": "String"
															},
															"sink": {
																"name": "DISPLAYVALUE_E_CATEGORY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DISPLAYVALUE_F_FAMILY",
																"type": "String"
															},
															"sink": {
																"name": "DISPLAYVALUE_F_FAMILY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DISPLAYVALUE_G_SIZE",
																"type": "String"
															},
															"sink": {
																"name": "DISPLAYVALUE_G_SIZE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DISPLAYVALUE_H_VERSION",
																"type": "String"
															},
															"sink": {
																"name": "DISPLAYVALUE_H_VERSION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DISPLAYVALUE_K_FOAM_SOURCED",
																"type": "String"
															},
															"sink": {
																"name": "DISPLAYVALUE_K_FOAM_SOURCED",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DISPLAYVALUE_L_STORE",
																"type": "String"
															},
															"sink": {
																"name": "DISPLAYVALUE_L_STORE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DISPLAYVALUE_BUSINESS_UNIT",
																"type": "String"
															},
															"sink": {
																"name": "DISPLAYVALUE_BUSINESS_UNIT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DIRPARTYTABLE1_NAME_DEPARTMENT",
																"type": "String"
															},
															"sink": {
																"name": "DIRPARTYTABLE1_NAME_DEPARTMENT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_INTERCOMPANY",
																"type": "String"
															},
															"sink": {
																"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_INTERCOMPANY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_SALES_CHANNEL",
																"type": "String"
															},
															"sink": {
																"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_SALES_CHANNEL",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_TYPE",
																"type": "String"
															},
															"sink": {
																"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_TYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_CATEGORY",
																"type": "String"
															},
															"sink": {
																"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_CATEGORY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_FAMILY",
																"type": "String"
															},
															"sink": {
																"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_FAMILY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_SIZE",
																"type": "String"
															},
															"sink": {
																"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_SIZE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_VERSION",
																"type": "String"
															},
															"sink": {
																"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_VERSION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_FOAM_SOURCED",
																"type": "String"
															},
															"sink": {
																"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_FOAM_SOURCED",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DIRPARTYTABLE2_NAME_STORE",
																"type": "String"
															},
															"sink": {
																"name": "DIRPARTYTABLE2_NAME_STORE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DIRPARTYTABLE3_NAME_BUSINESS_UNIT",
																"type": "String"
															},
															"sink": {
																"name": "DIRPARTYTABLE3_NAME_BUSINESS_UNIT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "2",
									"activities": [
										{
											"name": "sql_retail_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select\n\tdef1.DIMENSIONATTRIBUTEVALUESET,\n\tdef1.DISPLAYVALUE_A_DEPARTMENT,\n\tdef1.DISPLAYVALUE_B_INTERCOMPANY,\n\tdef1.DISPLAYVALUE_C_SALES_CHANNEL,\n\tdef1.DISPLAYVALUE_D_TYPE,\n\tdef1.DISPLAYVALUE_E_CATEGORY,\n\tdef1.DISPLAYVALUE_F_FAMILY,\n\tdef1.DISPLAYVALUE_G_SIZE,\n\tdef1.DISPLAYVALUE_H_VERSION,\n\tdef1.DISPLAYVALUE_K_FOAM_SOURCED,\n\tdef1.DISPLAYVALUE_L_STORE,\n\tdef1.DISPLAYVALUE_BUSINESS_UNIT,\n\tdpt1.NAME as DIRPARTYTABLE1_NAME_DEPARTMENT,\n\tdft1.DESCRIPTION as DIMENSIONFINANCIALTAG_DESCRIPTION_INTERCOMPANY,\n\tdft2.DESCRIPTION as DIMENSIONFINANCIALTAG_DESCRIPTION_SALES_CHANNEL,\n\tdft3.DESCRIPTION as DIMENSIONFINANCIALTAG_DESCRIPTION_TYPE,\n\tdft4.DESCRIPTION as DIMENSIONFINANCIALTAG_DESCRIPTION_CATEGORY,\n\tdft5.DESCRIPTION as DIMENSIONFINANCIALTAG_DESCRIPTION_FAMILY,\n\tdft6.DESCRIPTION as DIMENSIONFINANCIALTAG_DESCRIPTION_SIZE,\n\tdft7.DESCRIPTION as DIMENSIONFINANCIALTAG_DESCRIPTION_VERSION,\n\tdft8.DESCRIPTION as DIMENSIONFINANCIALTAG_DESCRIPTION_FOAM_SOURCED,\n\tdpt2.NAME as DIRPARTYTABLE2_NAME_STORE,\n\tdpt3.NAME as DIRPARTYTABLE3_NAME_BUSINESS_UNIT,\n\tdef1.DEFAULTDIMENSION_MODIFIEDDATETIME as LATEST_MODIFIEDDATETIME\nfrom\n    (select distinct davsi1.DIMENSIONATTRIBUTEVALUESET\n\t, max(\n\t\tcase when da1.NAME = 'A_Department' then davsi1.DISPLAYVALUE\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.DIMENSIONATTRIBUTEVALUESET) as DISPLAYVALUE_A_DEPARTMENT\n\t, max(\n\t\tcase when da1.NAME = 'B_Intercompany' then davsi1.DISPLAYVALUE\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.DIMENSIONATTRIBUTEVALUESET) as DISPLAYVALUE_B_INTERCOMPANY\n\t, max(\n\t\tcase when da1.NAME = 'C_Sales_Channel' then davsi1.DISPLAYVALUE\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.DIMENSIONATTRIBUTEVALUESET) as DISPLAYVALUE_C_SALES_CHANNEL\n\t, max(\n\t\tcase when da1.NAME = 'D_Type' then davsi1.DISPLAYVALUE\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.DIMENSIONATTRIBUTEVALUESET) as DISPLAYVALUE_D_TYPE\n\t, max(\n\t\tcase when da1.NAME = 'E_Category' then davsi1.DISPLAYVALUE\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.DIMENSIONATTRIBUTEVALUESET) as DISPLAYVALUE_E_CATEGORY\n\t, max(\n\t\tcase when da1.NAME = 'F_Family' then davsi1.DISPLAYVALUE\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.DIMENSIONATTRIBUTEVALUESET) as DISPLAYVALUE_F_FAMILY\n\t, max(\n\t\tcase when da1.NAME = 'G_Size' then davsi1.DISPLAYVALUE\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.DIMENSIONATTRIBUTEVALUESET) as DISPLAYVALUE_G_SIZE\n\t, max(\n\t\tcase when da1.NAME = 'H_Version' then davsi1.DISPLAYVALUE\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.DIMENSIONATTRIBUTEVALUESET) as DISPLAYVALUE_H_VERSION\n\t, max(\n\t\tcase when da1.NAME = 'K_Foam_Sourced' then davsi1.DISPLAYVALUE\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.DIMENSIONATTRIBUTEVALUESET) as DISPLAYVALUE_K_FOAM_SOURCED\n\t, max(\n\t\tcase when da1.NAME = 'L_Store' then davsi1.DISPLAYVALUE\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.DIMENSIONATTRIBUTEVALUESET) as DISPLAYVALUE_L_STORE\n\t, max(\n\t\tcase when da1.NAME = 'BusinessUnit' then davsi1.DISPLAYVALUE\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.DIMENSIONATTRIBUTEVALUESET) as DISPLAYVALUE_BUSINESS_UNIT\n\t, max(\n\t\t(select max(i) from (values (davsi1.MODIFIEDDATETIME), (dav1.MODIFIEDDATETIME), (da1.MODIFIEDDATETIME), (desc1.DESC_MODIFIEDDATETIME)) AS T(i))\n\t\t) over (partition by davsi1.DIMENSIONATTRIBUTEVALUESET) as DEFAULTDIMENSION_MODIFIEDDATETIME\nfrom dbo.DIMENSIONATTRIBUTEVALUESETITEM davsi1\nleft join dbo.DIMENSIONATTRIBUTEVALUE dav1 on\n\tdavsi1.DIMENSIONATTRIBUTEVALUE = dav1.RECID\nleft join dbo.DIMENSIONATTRIBUTE da1 on\n\tdav1.DIMENSIONATTRIBUTE = da1.RECID\nleft join (select dft1.VALUE, da2.NAME, dft1.DESCRIPTION\n\t\t\t\t, (select max(i) from (values (dft1.MODIFIEDDATETIME), (dadc1.MODIFIEDDATETIME), (da2.MODIFIEDDATETIME)) AS T(i)) as DESC_MODIFIEDDATETIME\n\t\t\tfrom dbo.DIMENSIONFINANCIALTAG dft1\n\t\t\tleft join dbo.DIMENSIONATTRIBUTEDIRCATEGORY dadc1 on\n\t\t\t\tdft1.FINANCIALTAGCATEGORY = dadc1.DIRCATEGORY\n\t\t\tleft join dbo.DIMENSIONATTRIBUTE da2 on\n\t\t\t\tdadc1.DIMENSIONATTRIBUTE = da2.RECID) desc1 on\n\tdavsi1.DISPLAYVALUE = desc1.VALUE and\n\tda1.NAME = desc1.NAME\n) def1\nleft join (select OMOPERATINGUNITNUMBER\n\t\t\t, max(NAME) as NAME\n\t\tfrom dbo.DIRPARTYTABLE\n\t\tgroup by OMOPERATINGUNITNUMBER) dpt1 on\n\tdef1.DISPLAYVALUE_A_DEPARTMENT = dpt1.OMOPERATINGUNITNUMBER\nleft join (select dft10.VALUE, dft10.DESCRIPTION\n\t\t\tfrom dbo.DIMENSIONFINANCIALTAG dft10\n\t\t\tleft join dbo.DIMENSIONATTRIBUTEDIRCATEGORY dadc10 on\n\t\t\t\tdft10.FINANCIALTAGCATEGORY = dadc10.DIRCATEGORY\n\t\t\tleft join dbo.DIMENSIONATTRIBUTE da10 on\n\t\t\t\tdadc10.DIMENSIONATTRIBUTE = da10.RECID\n\t\t\twhere da10.NAME = 'B_Intercompany') dft1 on\n\tdef1.DISPLAYVALUE_B_INTERCOMPANY = dft1.VALUE\nleft join (select dft10.VALUE, dft10.DESCRIPTION\n\t\t\tfrom dbo.DIMENSIONFINANCIALTAG dft10\n\t\t\tleft join dbo.DIMENSIONATTRIBUTEDIRCATEGORY dadc10 on\n\t\t\t\tdft10.FINANCIALTAGCATEGORY = dadc10.DIRCATEGORY\n\t\t\tleft join dbo.DIMENSIONATTRIBUTE da10 on\n\t\t\t\tdadc10.DIMENSIONATTRIBUTE = da10.RECID\n\t\t\twhere da10.NAME = 'C_Sales_Channel') dft2 on\n\tdef1.DISPLAYVALUE_C_SALES_CHANNEL = dft2.VALUE\nleft join (select dft10.VALUE, dft10.DESCRIPTION\n\t\t\tfrom dbo.DIMENSIONFINANCIALTAG dft10\n\t\t\tleft join dbo.DIMENSIONATTRIBUTEDIRCATEGORY dadc10 on\n\t\t\t\tdft10.FINANCIALTAGCATEGORY = dadc10.DIRCATEGORY\n\t\t\tleft join dbo.DIMENSIONATTRIBUTE da10 on\n\t\t\t\tdadc10.DIMENSIONATTRIBUTE = da10.RECID\n\t\t\twhere da10.NAME = 'D_Type') dft3 on\n\tdef1.DISPLAYVALUE_D_TYPE = dft3.VALUE\nleft join (select dft10.VALUE, dft10.DESCRIPTION\n\t\t\tfrom dbo.DIMENSIONFINANCIALTAG dft10\n\t\t\tleft join dbo.DIMENSIONATTRIBUTEDIRCATEGORY dadc10 on\n\t\t\t\tdft10.FINANCIALTAGCATEGORY = dadc10.DIRCATEGORY\n\t\t\tleft join dbo.DIMENSIONATTRIBUTE da10 on\n\t\t\t\tdadc10.DIMENSIONATTRIBUTE = da10.RECID\n\t\t\twhere da10.NAME = 'E_Category') dft4 on\n\tdef1.DISPLAYVALUE_E_CATEGORY = dft4.VALUE\nleft join (select dft10.VALUE, dft10.DESCRIPTION\n\t\t\tfrom dbo.DIMENSIONFINANCIALTAG dft10\n\t\t\tleft join dbo.DIMENSIONATTRIBUTEDIRCATEGORY dadc10 on\n\t\t\t\tdft10.FINANCIALTAGCATEGORY = dadc10.DIRCATEGORY\n\t\t\tleft join dbo.DIMENSIONATTRIBUTE da10 on\n\t\t\t\tdadc10.DIMENSIONATTRIBUTE = da10.RECID\n\t\t\twhere da10.NAME = 'F_Family') dft5 on\n\tdef1.DISPLAYVALUE_F_FAMILY = dft5.VALUE\nleft join (select dft10.VALUE, dft10.DESCRIPTION\n\t\t\tfrom dbo.DIMENSIONFINANCIALTAG dft10\n\t\t\tleft join dbo.DIMENSIONATTRIBUTEDIRCATEGORY dadc10 on\n\t\t\t\tdft10.FINANCIALTAGCATEGORY = dadc10.DIRCATEGORY\n\t\t\tleft join dbo.DIMENSIONATTRIBUTE da10 on\n\t\t\t\tdadc10.DIMENSIONATTRIBUTE = da10.RECID\n\t\t\twhere da10.NAME = 'G_Size') dft6 on\n\tdef1.DISPLAYVALUE_G_SIZE = dft6.VALUE\nleft join (select dft10.VALUE, dft10.DESCRIPTION\n\t\t\tfrom dbo.DIMENSIONFINANCIALTAG dft10\n\t\t\tleft join dbo.DIMENSIONATTRIBUTEDIRCATEGORY dadc10 on\n\t\t\t\tdft10.FINANCIALTAGCATEGORY = dadc10.DIRCATEGORY\n\t\t\tleft join dbo.DIMENSIONATTRIBUTE da10 on\n\t\t\t\tdadc10.DIMENSIONATTRIBUTE = da10.RECID\n\t\t\twhere da10.NAME = 'H_Version') dft7 on\n\tdef1.DISPLAYVALUE_H_VERSION = dft7.VALUE\nleft join (select dft10.VALUE, dft10.DESCRIPTION\n\t\t\tfrom dbo.DIMENSIONFINANCIALTAG dft10\n\t\t\tleft join dbo.DIMENSIONATTRIBUTEDIRCATEGORY dadc10 on\n\t\t\t\tdft10.FINANCIALTAGCATEGORY = dadc10.DIRCATEGORY\n\t\t\tleft join dbo.DIMENSIONATTRIBUTE da10 on\n\t\t\t\tdadc10.DIMENSIONATTRIBUTE = da10.RECID\n\t\t\twhere da10.NAME = 'K_Foam_Sourced') dft8 on\n\tdef1.DISPLAYVALUE_K_FOAM_SOURCED = dft8.VALUE\nleft join (select OMOPERATINGUNITNUMBER\n\t\t\t, max(NAME) as NAME\n\t\tfrom dbo.DIRPARTYTABLE\n\t\tgroup by OMOPERATINGUNITNUMBER) dpt2 on\n\tdef1.DISPLAYVALUE_L_STORE = dpt2.OMOPERATINGUNITNUMBER\nleft join (select OMOPERATINGUNITNUMBER\n\t\t\t, max(NAME) as NAME\n\t\tfrom dbo.DIRPARTYTABLE\n\t\tgroup by OMOPERATINGUNITNUMBER) dpt3 on\n\tdef1.DISPLAYVALUE_BUSINESS_UNIT = dpt3.OMOPERATINGUNITNUMBER\nwhere\n\tconvert(\n\t\tvarchar(25),\n\t\tisnull(\n\t\t\tdef1.DEFAULTDIMENSION_MODIFIEDDATETIME,\n\t\t\t'1950-01-01'\n\t\t),\n\t\t120\n\t) > '@{variables('v_prv_max_upd_timestamp')}'",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DIMENSIONATTRIBUTEVALUESET",
																"type": "Int64"
															},
															"sink": {
																"name": "DIMENSIONATTRIBUTEVALUESET",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "DISPLAYVALUE_A_DEPARTMENT",
																"type": "String"
															},
															"sink": {
																"name": "DISPLAYVALUE_A_DEPARTMENT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DISPLAYVALUE_B_INTERCOMPANY",
																"type": "String"
															},
															"sink": {
																"name": "DISPLAYVALUE_B_INTERCOMPANY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DISPLAYVALUE_C_SALES_CHANNEL",
																"type": "String"
															},
															"sink": {
																"name": "DISPLAYVALUE_C_SALES_CHANNEL",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DISPLAYVALUE_D_TYPE",
																"type": "String"
															},
															"sink": {
																"name": "DISPLAYVALUE_D_TYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DISPLAYVALUE_E_CATEGORY",
																"type": "String"
															},
															"sink": {
																"name": "DISPLAYVALUE_E_CATEGORY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DISPLAYVALUE_F_FAMILY",
																"type": "String"
															},
															"sink": {
																"name": "DISPLAYVALUE_F_FAMILY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DISPLAYVALUE_G_SIZE",
																"type": "String"
															},
															"sink": {
																"name": "DISPLAYVALUE_G_SIZE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DISPLAYVALUE_H_VERSION",
																"type": "String"
															},
															"sink": {
																"name": "DISPLAYVALUE_H_VERSION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DISPLAYVALUE_K_FOAM_SOURCED",
																"type": "String"
															},
															"sink": {
																"name": "DISPLAYVALUE_K_FOAM_SOURCED",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DISPLAYVALUE_L_STORE",
																"type": "String"
															},
															"sink": {
																"name": "DISPLAYVALUE_L_STORE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DISPLAYVALUE_BUSINESS_UNIT",
																"type": "String"
															},
															"sink": {
																"name": "DISPLAYVALUE_BUSINESS_UNIT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DIRPARTYTABLE1_NAME_DEPARTMENT",
																"type": "String"
															},
															"sink": {
																"name": "DIRPARTYTABLE1_NAME_DEPARTMENT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_INTERCOMPANY",
																"type": "String"
															},
															"sink": {
																"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_INTERCOMPANY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_SALES_CHANNEL",
																"type": "String"
															},
															"sink": {
																"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_SALES_CHANNEL",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_TYPE",
																"type": "String"
															},
															"sink": {
																"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_TYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_CATEGORY",
																"type": "String"
															},
															"sink": {
																"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_CATEGORY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_FAMILY",
																"type": "String"
															},
															"sink": {
																"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_FAMILY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_SIZE",
																"type": "String"
															},
															"sink": {
																"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_SIZE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_VERSION",
																"type": "String"
															},
															"sink": {
																"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_VERSION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_FOAM_SOURCED",
																"type": "String"
															},
															"sink": {
																"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_FOAM_SOURCED",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DIRPARTYTABLE2_NAME_STORE",
																"type": "String"
															},
															"sink": {
																"name": "DIRPARTYTABLE2_NAME_STORE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DIRPARTYTABLE3_NAME_BUSINESS_UNIT",
																"type": "String"
															},
															"sink": {
																"name": "DIRPARTYTABLE3_NAME_BUSINESS_UNIT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.retail_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.retail_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "sql_retail_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_retail_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_retail_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_retail_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_retail_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_retail_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_retail_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "sql_retail_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_retail_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "d365_to_raw",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "WarehouseSource",
											"additionalColumns": [
												{
													"name": "HK_JOB_RUN_ID",
													"value": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													}
												},
												{
													"name": "HK_SOURCE_NAME",
													"value": {
														"value": "@pipeline().parameters.p_src_nm",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "select \ndef1.dimensionattributevalueset as DIMENSIONATTRIBUTEVALUESET,\ndef1.DISPLAYVALUE_A_DEPARTMENT,\ndef1.DISPLAYVALUE_B_INTERCOMPANY,\ndef1.DISPLAYVALUE_C_SALES_CHANNEL,\ndef1.DISPLAYVALUE_D_TYPE,\ndef1.DISPLAYVALUE_E_CATEGORY,\ndef1.DISPLAYVALUE_F_FAMILY,\ndef1.DISPLAYVALUE_G_SIZE,\ndef1.DISPLAYVALUE_H_VERSION,\ndef1.DISPLAYVALUE_K_FOAM_SOURCED,\ndef1.DISPLAYVALUE_L_STORE,\ndef1.DISPLAYVALUE_BUSINESS_UNIT,\ndpt1.NAME as DIRPARTYTABLE1_NAME_DEPARTMENT,\ndft1.description as DIMENSIONFINANCIALTAG_DESCRIPTION_INTERCOMPANY,\ndft2.description as DIMENSIONFINANCIALTAG_DESCRIPTION_SALES_CHANNEL,\ndft3.description as DIMENSIONFINANCIALTAG_DESCRIPTION_TYPE,\ndft4.description as DIMENSIONFINANCIALTAG_DESCRIPTION_CATEGORY,\ndft5.description as DIMENSIONFINANCIALTAG_DESCRIPTION_FAMILY,\ndft6.description as DIMENSIONFINANCIALTAG_DESCRIPTION_SIZE,\ndft7.description as DIMENSIONFINANCIALTAG_DESCRIPTION_VERSION,\ndft8.description as DIMENSIONFINANCIALTAG_DESCRIPTION_FOAM_SOURCED,\ndpt2.NAME as DIRPARTYTABLE2_NAME_STORE,\ndpt3.NAME as DIRPARTYTABLE3_NAME_BUSINESS_UNIT,\ndef1.DEFAULTDIMENSION_MODIFIEDDATETIME as LATEST_MODIFIEDDATETIME\nfrom\n(select distinct davsi1.dimensionattributevalueset\n\t, max(\n\t\tcase when da1.name = 'A_Department' then davsi1.displayvalue\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.dimensionattributevalueset) as DISPLAYVALUE_A_DEPARTMENT\n\t, max(\n\t\tcase when da1.name = 'B_Intercompany' then davsi1.displayvalue\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.dimensionattributevalueset) as DISPLAYVALUE_B_INTERCOMPANY\n\t, max(\n\t\tcase when da1.name = 'C_Sales_Channel' then davsi1.displayvalue\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.dimensionattributevalueset) as DISPLAYVALUE_C_SALES_CHANNEL\n\t, max(\n\t\tcase when da1.name = 'D_Type' then davsi1.displayvalue\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.dimensionattributevalueset) as DISPLAYVALUE_D_TYPE\n\t, max(\n\t\tcase when da1.name = 'E_Category' then davsi1.displayvalue\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.dimensionattributevalueset) as DISPLAYVALUE_E_CATEGORY\n\t, max(\n\t\tcase when da1.name = 'F_Family' then davsi1.displayvalue\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.dimensionattributevalueset) as DISPLAYVALUE_F_FAMILY\n\t, max(\n\t\tcase when da1.name = 'G_Size' then davsi1.displayvalue\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.dimensionattributevalueset) as DISPLAYVALUE_G_SIZE\n\t, max(\n\t\tcase when da1.name = 'H_Version' then davsi1.displayvalue\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.dimensionattributevalueset) as DISPLAYVALUE_H_VERSION\n\t, max(\n\t\tcase when da1.name = 'K_Foam_Sourced' then davsi1.displayvalue\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.dimensionattributevalueset) as DISPLAYVALUE_K_FOAM_SOURCED\n\t, max(\n\t\tcase when da1.name = 'L_Store' then davsi1.displayvalue\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.dimensionattributevalueset) as DISPLAYVALUE_L_STORE\n\t, max(\n\t\tcase when da1.name = 'BusinessUnit' then davsi1.displayvalue\n\t\t\telse null\n\t\t\tend\n\t\t) over (partition by davsi1.dimensionattributevalueset) as DISPLAYVALUE_BUSINESS_UNIT\n\t, max(\n\t\t(select max(i) from (values (davsi1.modifieddatetime), (dav1.modifieddatetime), (da1.modifieddatetime), (desc1.DESC_MODIFIEDDATETIME)) as t(i))\n\t\t) over (partition by davsi1.dimensionattributevalueset) as DEFAULTDIMENSION_MODIFIEDDATETIME\nfrom  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattributevaluesetitem davsi1\nleft join  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattributevalue dav1 on\n\tdavsi1.dimensionattributevalue = dav1.recid\nleft join  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattribute da1 on\n\tdav1.dimensionattribute = da1.recid\nleft join (select dft1.value, da2.name, dft1.description\n\t\t\t\t, (select max(i) from (values (dft1.modifieddatetime), (dadc1.modifieddatetime), (da2.modifieddatetime)) as t(i)) as DESC_MODIFIEDDATETIME\n\t\t\tfrom  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionfinancialtag dft1\n\t\t\tleft join  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattributedircategory dadc1 on\n\t\t\t\tdft1.financialtagcategory = dadc1.dircategory\n\t\t\tleft join  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattribute da2 on\n\t\t\t\tdadc1.dimensionattribute = da2.recid) desc1 on\n\tdavsi1.displayvalue = desc1.value and\n\tda1.name = desc1.name\n) def1\nleft join (select oou1.omoperatingunitnumber\n\t\t\t, max(dpt1.name) as NAME\n\t\tfrom  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dirpartytable dpt1\n\t\tinner join  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.omoperatingunit oou1 on\n\t\t\tdpt1.recid = oou1.recid\n\t\twhere oou1.omoperatingunitnumber is not null\n\t\tgroup by oou1.omoperatingunitnumber) dpt1 on\n\tdef1.DISPLAYVALUE_A_DEPARTMENT = dpt1.omoperatingunitnumber\nleft join (select dft10.value, max(dft10.description) as description\n\t\t\tfrom  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionfinancialtag dft10\n\t\t\tleft join  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattributedircategory dadc10 on\n\t\t\t\tdft10.financialtagcategory = dadc10.dircategory\n\t\t\tleft join  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattribute da10 on\n\t\t\t\tdadc10.dimensionattribute = da10.recid\n\t\t\twhere da10.name = 'B_Intercompany'\n\t\t\tgroup by dft10.value) dft1 on\n\tdef1.DISPLAYVALUE_B_INTERCOMPANY = dft1.value\nleft join (select dft10.value, max(dft10.description) as description\n\t\t\tfrom  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionfinancialtag dft10\n\t\t\tleft join  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattributedircategory dadc10 on\n\t\t\t\tdft10.financialtagcategory = dadc10.dircategory\n\t\t\tleft join  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattribute da10 on\n\t\t\t\tdadc10.dimensionattribute = da10.recid\n\t\t\twhere da10.name = 'C_Sales_Channel'\n\t\t\tgroup by dft10.value) dft2 on\n\tdef1.DISPLAYVALUE_C_SALES_CHANNEL = dft2.value\nleft join (select dft10.value, max(dft10.description) as description\n\t\t\tfrom  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionfinancialtag dft10\n\t\t\tleft join  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattributedircategory dadc10 on\n\t\t\t\tdft10.financialtagcategory = dadc10.dircategory\n\t\t\tleft join  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattribute da10 on\n\t\t\t\tdadc10.dimensionattribute = da10.recid\n\t\t\twhere da10.name = 'D_Type'\n\t\t\tgroup by dft10.value) dft3 on\n\tdef1.DISPLAYVALUE_D_TYPE = dft3.value\nleft join (select dft10.value, max(dft10.description) as description\n\t\t\tfrom  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionfinancialtag dft10\n\t\t\tleft join  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattributedircategory dadc10 on\n\t\t\t\tdft10.financialtagcategory = dadc10.dircategory\n\t\t\tleft join  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattribute da10 on\n\t\t\t\tdadc10.dimensionattribute = da10.recid\n\t\t\twhere da10.name = 'E_Category'\n\t\t\tgroup by dft10.value) dft4 on\n\tdef1.DISPLAYVALUE_E_CATEGORY = dft4.value\nleft join (select dft10.value, max(dft10.description) as description\n\t\t\tfrom  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionfinancialtag dft10\n\t\t\tleft join  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattributedircategory dadc10 on\n\t\t\t\tdft10.financialtagcategory = dadc10.dircategory\n\t\t\tleft join  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattribute da10 on\n\t\t\t\tdadc10.dimensionattribute = da10.recid\n\t\t\twhere da10.name = 'F_Family'\n\t\t\tgroup by dft10.value) dft5 on\n\tdef1.DISPLAYVALUE_F_FAMILY = dft5.value\nleft join (select dft10.value, max(dft10.description) as description\n\t\t\tfrom  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionfinancialtag dft10\n\t\t\tleft join  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattributedircategory dadc10 on\n\t\t\t\tdft10.financialtagcategory = dadc10.dircategory\n\t\t\tleft join  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattribute da10 on\n\t\t\t\tdadc10.dimensionattribute = da10.recid\n\t\t\twhere da10.name = 'G_Size'\n\t\t\tgroup by dft10.value) dft6 on\n\tdef1.DISPLAYVALUE_G_SIZE = dft6.value\nleft join (select dft10.value, max(dft10.description) as description\n\t\t\tfrom  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionfinancialtag dft10\n\t\t\tleft join  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattributedircategory dadc10 on\n\t\t\t\tdft10.financialtagcategory = dadc10.dircategory\n\t\t\tleft join  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattribute da10 on\n\t\t\t\tdadc10.dimensionattribute = da10.recid\n\t\t\twhere da10.name = 'H_Version'\n\t\t\tgroup by dft10.value) dft7 on\n\tdef1.DISPLAYVALUE_H_VERSION = dft7.value\nleft join (select dft10.value, max(dft10.description) as description\n\t\t\tfrom  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionfinancialtag dft10\n\t\t\tleft join  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattributedircategory dadc10 on\n\t\t\t\tdft10.financialtagcategory = dadc10.dircategory\n\t\t\tleft join  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattribute da10 on\n\t\t\t\tdadc10.dimensionattribute = da10.recid\n\t\t\twhere da10.name = 'K_Foam_Sourced'\n\t\t\tgroup by dft10.value) dft8 on\n\tdef1.DISPLAYVALUE_K_FOAM_SOURCED = dft8.value\nleft join (select oou1.omoperatingunitnumber\n\t\t\t, max(dpt1.name) as NAME\n\t\tfrom  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dirpartytable dpt1\n\t\tinner join  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.omoperatingunit oou1 on\n\t\t\tdpt1.recid = oou1.recid\n\t\twhere oou1.omoperatingunitnumber is not null\n\t\tgroup by oou1.omoperatingunitnumber) dpt2 on\n\tdef1.DISPLAYVALUE_L_STORE = dpt2.omoperatingunitnumber\nleft join (select oou1.omoperatingunitnumber\n\t\t\t, max(dpt1.name) as NAME\n\t\tfrom  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dirpartytable dpt1\n\t\tinner join  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.omoperatingunit oou1 on\n\t\t\tdpt1.recid = oou1.recid\n\t\twhere oou1.omoperatingunitnumber is not null\n\t\tgroup by oou1.omoperatingunitnumber) dpt3 on\n\tdef1.DISPLAYVALUE_BUSINESS_UNIT = dpt3.omoperatingunitnumber\nwhere\n\tconvert(\n\t\tvarchar(25),\n\t\tisnull(\n\t\t\tdef1.DEFAULTDIMENSION_MODIFIEDDATETIME,\n\t\t\t'1950-01-01'), 120) > '@{variables('v_prv_max_upd_timestamp')}'",
												"type": "Expression"
											},
											"queryTimeout": "16:40:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeSink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "ls_blob_storage",
												"type": "LinkedServiceReference"
											},
											"path": {
												"value": "@pipeline().globalParameters.rootDir",
												"type": "Expression"
											},
											"enableCompression": true
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "HK_SOURCE_NAME",
														"type": "String"
													},
													"sink": {
														"name": "HK_SOURCE_NAME",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "HK_JOB_RUN_ID",
														"type": "String"
													},
													"sink": {
														"name": "HK_JOB_RUN_ID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DIMENSIONATTRIBUTEVALUESET",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "DIMENSIONATTRIBUTEVALUESET",
														"type": "Int64",
														"physicalType": "NUMBER"
													}
												},
												{
													"source": {
														"name": "DISPLAYVALUE_A_DEPARTMENT",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DISPLAYVALUE_A_DEPARTMENT",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DISPLAYVALUE_B_INTERCOMPANY",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DISPLAYVALUE_B_INTERCOMPANY",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DISPLAYVALUE_C_SALES_CHANNEL",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DISPLAYVALUE_C_SALES_CHANNEL",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DISPLAYVALUE_D_TYPE",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DISPLAYVALUE_D_TYPE",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DISPLAYVALUE_E_CATEGORY",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DISPLAYVALUE_E_CATEGORY",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DISPLAYVALUE_F_FAMILY",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DISPLAYVALUE_F_FAMILY",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DISPLAYVALUE_G_SIZE",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DISPLAYVALUE_G_SIZE",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DISPLAYVALUE_H_VERSION",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DISPLAYVALUE_H_VERSION",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DISPLAYVALUE_K_FOAM_SOURCED",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DISPLAYVALUE_K_FOAM_SOURCED",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DISPLAYVALUE_L_STORE",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DISPLAYVALUE_L_STORE",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DISPLAYVALUE_BUSINESS_UNIT",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DISPLAYVALUE_BUSINESS_UNIT",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DIRPARTYTABLE1_NAME_DEPARTMENT",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DIRPARTYTABLE1_NAME_DEPARTMENT",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_INTERCOMPANY",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_INTERCOMPANY",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_SALES_CHANNEL",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_SALES_CHANNEL",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_TYPE",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_TYPE",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_CATEGORY",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_CATEGORY",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_FAMILY",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_FAMILY",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_SIZE",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_SIZE",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_VERSION",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_VERSION",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_FOAM_SOURCED",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DIMENSIONFINANCIALTAG_DESCRIPTION_FOAM_SOURCED",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DIRPARTYTABLE2_NAME_STORE",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DIRPARTYTABLE2_NAME_STORE",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DIRPARTYTABLE3_NAME_BUSINESS_UNIT",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DIRPARTYTABLE3_NAME_BUSINESS_UNIT",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "LATEST_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "LATEST_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "TIMESTAMP_TZ"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_fabric_wh",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_snowflake",
											"type": "DatasetReference",
											"parameters": {
												"p_tgt_table_name": {
													"value": "@pipeline().parameters.p_tgt_raw_table_nm",
													"type": "Expression"
												},
												"p_tgt_schema_name": {
													"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
													"type": "Expression"
												},
												"p_ls_DbName": {
													"value": "@pipeline().globalParameters.snow_rawDb",
													"type": "Expression"
												},
												"p_ls_Env": {
													"value": "@pipeline().globalParameters.environment",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "d365_raw_load_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "d365_to_raw",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('d365_to_raw').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('d365_to_raw').Error['message']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('d365_to_raw').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('d365_to_raw').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "d365_load_to_raw_fail",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "d365_raw_load_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('d365_to_raw').Error['message']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_DEFAULT_DIMENSION"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "DEFAULTDIMENSION"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "DIMENSIONATTRIBUTEVALUESETITEM"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prv_max_upd_timestamp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T10:57:54Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_dimdate_to_dim_date')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "adls_to_raw",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"additionalColumns": [
									{
										"name": "HK_JOB_RUN_ID",
										"value": {
											"value": "@coalesce(pipeline().RunId, -1)",
											"type": "Expression"
										}
									},
									{
										"name": "HK_SOURCE_NAME",
										"value": {
											"value": "@pipeline().parameters.p_src_nm",
											"type": "Expression"
										}
									},
									{
										"name": "LAST_MODIFIEDDATE",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SnowflakeSink",
								"importSettings": {
									"type": "SnowflakeImportCopyCommand"
								}
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "ls_blob_storage",
									"type": "LinkedServiceReference"
								},
								"path": {
									"value": "@pipeline().globalParameters.rootDir",
									"type": "Expression"
								},
								"enableCompression": true
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "HK_SOURCE_NAME",
											"type": "String"
										},
										"sink": {
											"name": "HK_SOURCE_NAME",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "HK_JOB_RUN_ID",
											"type": "String"
										},
										"sink": {
											"name": "HK_JOB_RUN_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DateValue",
											"type": "Date"
										},
										"sink": {
											"name": "DATEVALUE",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "SMMCPeriod",
											"type": "Int64"
										},
										"sink": {
											"name": "SMMCPERIOD",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SMMCPeriodDescription",
											"type": "String"
										},
										"sink": {
											"name": "SMMCPERIODDESCRIPTION",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SMMCMonthName",
											"type": "String"
										},
										"sink": {
											"name": "SMMCMONTHNAME",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SMMCQuarterName",
											"type": "String"
										},
										"sink": {
											"name": "SMMCQUARTERNAME",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SMMCQuarter",
											"type": "Int64"
										},
										"sink": {
											"name": "SMMCQUARTER",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SMMCYearName",
											"type": "String"
										},
										"sink": {
											"name": "SMMCYEARNAME",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SMMCYear",
											"type": "String"
										},
										"sink": {
											"name": "SMMCYEAR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SMMCIsOpeningPeriod",
											"type": "Int64"
										},
										"sink": {
											"name": "SMMCISOPENINGPERIOD",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "SMMCIsClosingPeriod",
											"type": "Int64"
										},
										"sink": {
											"name": "SMMCISCLOSINGPERIOD",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "AltFiscalYear",
											"type": "String"
										},
										"sink": {
											"name": "ALTFISCALYEAR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "AltWeekofFiscalYear",
											"type": "String"
										},
										"sink": {
											"name": "ALTWEEKOFFISCALYEAR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "AltBillingDay",
											"type": "Int64"
										},
										"sink": {
											"name": "ALTBILLINGDAY",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "ForecastMonthYear",
											"type": "String"
										},
										"sink": {
											"name": "FORECASTMONTHYEAR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ForecastMonth",
											"type": "String"
										},
										"sink": {
											"name": "FORECASTMONTH",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ForecastWeekYear",
											"type": "String"
										},
										"sink": {
											"name": "FORECASTWEEKYEAR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ForecastWeek",
											"type": "String"
										},
										"sink": {
											"name": "FORECASTWEEK",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CumulativeDays",
											"type": "Int64"
										},
										"sink": {
											"name": "CUMULATIVEDAYS",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "DayOfFiscalMonth",
											"type": "Int64"
										},
										"sink": {
											"name": "DAYOFFISCALMONTH",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "DayOfFiscalYear",
											"type": "Int64"
										},
										"sink": {
											"name": "DAYOFFISCALYEAR",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "PeriodOfFiscalYear",
											"type": "Int64"
										},
										"sink": {
											"name": "PERIODOFFISCALYEAR",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "WeekOfFiscalMonth",
											"type": "Int64"
										},
										"sink": {
											"name": "WEEKOFFISCALMONTH",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "LAST_MODIFIEDDATE",
											"type": "String"
										},
										"sink": {
											"name": "LATEST_MODIFIEDDATETIME",
											"type": "DateTime"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "ds_excel",
								"type": "DatasetReference",
								"parameters": {
									"p_src_directory": {
										"value": "@pipeline().parameters.p_src_directory",
										"type": "Expression"
									},
									"p_src_file_name": {
										"value": "@pipeline().parameters.p_src_file_nm",
										"type": "Expression"
									},
									"p_src_root_system": {
										"value": "@pipeline().globalParameters.rootDir",
										"type": "Expression"
									},
									"p_sheet_name": {
										"value": "@pipeline().parameters.p_sheet_nm",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "adls_to_raw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "raw_load_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "adls_to_raw",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('adls_to_raw').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('adls_to_raw').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('adls_to_raw').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('adls_to_raw').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "DATE_CALENDAR"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_directory": {
						"type": "string",
						"defaultValue": "business_files"
					},
					"p_src_file_nm": {
						"type": "string",
						"defaultValue": "DimDate_SourceForMDW.xlsx"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "DATE_EXCEL"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_DATE"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_sheet_nm": {
						"type": "string",
						"defaultValue": "Sheet1"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-12T01:27:39Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_dirpartytable_to_dim_business_unit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_retail_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prev_max_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')\n\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "switch_nala_retail_d365",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "dirpartytable_to_raw_nala",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('select dpt1.OMOPERATINGUNITNUMBER, dpt1.NAME, dpt1.NAMEALIAS, dpt1.MODIFIEDDATETIME AS LATEST_MODIFIEDDATETIME from dbo.DIRPARTYTABLE dpt1 where dpt1.OMOPERATINGUNITNUMBER is not null and dpt1.MODIFIEDDATETIME > ','''',variables('v_prev_max_timestamp'),'''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "OMOPERATINGUNITNUMBER",
																"type": "String"
															},
															"sink": {
																"name": "OMOPERATINGUNITNUMBER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAMEALIAS",
																"type": "String"
															},
															"sink": {
																"name": "NAMEALIAS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "dirpartytable_to_raw_nala",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('dirpartytable_to_raw_nala').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('dirpartytable_to_raw_nala').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('dirpartytable_to_raw_nala').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('dirpartytable_to_raw_nala').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('dirpartytable_to_raw_nala').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "2",
									"activities": [
										{
											"name": "dirpartytable_to_raw_retail",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('select dpt1.OMOPERATINGUNITNUMBER, dpt1.NAME, dpt1.NAMEALIAS, dpt1.MODIFIEDDATETIME AS LATEST_MODIFIEDDATETIME from dbo.DIRPARTYTABLE dpt1 where dpt1.OMOPERATINGUNITNUMBER is not null and dpt1.MODIFIEDDATETIME > ','''',variables('v_prev_max_timestamp'),'''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "OMOPERATINGUNITNUMBER",
																"type": "String"
															},
															"sink": {
																"name": "OMOPERATINGUNITNUMBER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAMEALIAS",
																"type": "String"
															},
															"sink": {
																"name": "NAMEALIAS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.retail_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.retail_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "retail_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "dirpartytable_to_raw_retail",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('dirpartytable_to_raw_retail').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('dirpartytable_to_raw_retail').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('dirpartytable_to_raw_retail').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('dirpartytable_to_raw_retail').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_retail_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "retail_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('dirpartytable_to_raw_retail').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "d365_raw_load_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "dirpartytable_to_raw_d365",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('dirpartytable_to_raw_d365').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('dirpartytable_to_raw_d365').Error['message']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('dirpartytable_to_raw_d365').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('dirpartytable_to_raw_d365').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "dirpartytable_to_raw_d365",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "WarehouseSource",
											"additionalColumns": [
												{
													"name": "HK_SOURCE_NAME",
													"value": {
														"value": "@pipeline().parameters.p_src_nm",
														"type": "Expression"
													}
												},
												{
													"name": "HK_JOB_RUN_ID",
													"value": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "@concat('SELECT oou1.omoperatingunitnumber as OMOPERATINGUNITNUMBER, dpt1.name as NAME, dpt1.namealias as NAMEALIAS, dpt1.modifieddatetime as LATEST_MODIFIEDDATETIME FROM ',pipeline().globalParameters.d365_dbName,'.','dirpartytable dpt1   inner join ',pipeline().globalParameters.d365_dbName,'.','omoperatingunit oou1 on dpt1.recid = oou1.recid where oou1.omoperatingunitnumber is not null and dpt1.modifieddatetime > ','''',variables('v_prev_max_timestamp'),'''')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeSink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "ls_blob_storage",
												"type": "LinkedServiceReference"
											},
											"path": {
												"value": "@pipeline().globalParameters.rootDir",
												"type": "Expression"
											},
											"enableCompression": true
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "HK_SOURCE_NAME",
														"type": "String"
													},
													"sink": {
														"name": "HK_SOURCE_NAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "HK_JOB_RUN_ID",
														"type": "String"
													},
													"sink": {
														"name": "HK_JOB_RUN_ID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "OMOPERATINGUNITNUMBER",
														"type": "String"
													},
													"sink": {
														"name": "OMOPERATINGUNITNUMBER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "NAME",
														"type": "String"
													},
													"sink": {
														"name": "NAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "NAMEALIAS",
														"type": "String"
													},
													"sink": {
														"name": "NAMEALIAS",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LATEST_MODIFIEDDATETIME",
														"type": "DateTime"
													},
													"sink": {
														"name": "LATEST_MODIFIEDDATETIME",
														"type": "DateTime"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_fabric_wh",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_snowflake",
											"type": "DatasetReference",
											"parameters": {
												"p_tgt_table_name": {
													"value": "@pipeline().parameters.p_tgt_raw_table_nm",
													"type": "Expression"
												},
												"p_tgt_schema_name": {
													"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
													"type": "Expression"
												},
												"p_ls_DbName": {
													"value": "@pipeline().globalParameters.snow_rawDb",
													"type": "Expression"
												},
												"p_ls_Env": {
													"value": "@pipeline().globalParameters.environment",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "d365_load_to_raw_fail",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "d365_raw_load_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('dirpartytable_to_raw_d365').Error['message']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "DIRPARTYTABLE"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "DIRPARTYTABLE"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_BUSINESS_UNIT"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prev_max_timestamp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T11:59:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_dlvmode_to_dim_delivery_mode')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_retail_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_retail_d365",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select dm1.DATAAREAID\n,dm1.CODE\n,dm1.TXT\nfrom\ndbo.DLVMODE dm1",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CODE",
																"type": "String"
															},
															"sink": {
																"name": "CODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TXT",
																"type": "String"
															},
															"sink": {
																"name": "TXT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "2",
									"activities": [
										{
											"name": "sql_retail_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select dm1.DATAAREAID\n,dm1.CODE\n,dm1.TXT\nfrom\ndbo.DLVMODE dm1",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CODE",
																"type": "String"
															},
															"sink": {
																"name": "CODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TXT",
																"type": "String"
															},
															"sink": {
																"name": "TXT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.retail_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.retail_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "retail_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_retail_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_retail_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_retail_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_retail_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_retail_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_retail_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "retail_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_retail_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "d365_to_raw",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "WarehouseSource",
											"additionalColumns": [
												{
													"name": "HK_SOURCE_NAME",
													"value": {
														"value": "@pipeline().parameters.p_src_nm",
														"type": "Expression"
													}
												},
												{
													"name": "HK_JOB_RUN_ID",
													"value": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													}
												},
												{
													"name": "LAST_MODIFIED_DATE",
													"value": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "@concat('select dm1.dataareaid as DATAAREAID\n,dm1.code as CODE\n,dm1.txt as TXT\nfrom ',pipeline().globalParameters.d365_dbName,'.',toLower(pipeline().parameters.p_src_table_nm),' dm1 where dm1.dataareaid is not NULL')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeSink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "ls_blob_storage",
												"type": "LinkedServiceReference"
											},
											"path": {
												"value": "@pipeline().globalParameters.rootDir",
												"type": "Expression"
											},
											"enableCompression": true
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "HK_SOURCE_NAME",
														"type": "String"
													},
													"sink": {
														"name": "HK_SOURCE_NAME",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "HK_JOB_RUN_ID",
														"type": "String"
													},
													"sink": {
														"name": "HK_JOB_RUN_ID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DATAAREAID",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DATAAREAID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "CODE",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "CODE",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "TXT",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "TXT",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "LAST_MODIFIED_DATE",
														"type": "String"
													},
													"sink": {
														"name": "LATEST_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "TIMESTAMP_TZ"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_fabric_wh",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_snowflake",
											"type": "DatasetReference",
											"parameters": {
												"p_tgt_table_name": {
													"value": "@pipeline().parameters.p_tgt_raw_table_nm",
													"type": "Expression"
												},
												"p_tgt_schema_name": {
													"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
													"type": "Expression"
												},
												"p_ls_DbName": {
													"value": "@pipeline().globalParameters.snow_rawDb",
													"type": "Expression"
												},
												"p_ls_Env": {
													"value": "@pipeline().globalParameters.environment",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "d365_raw_load_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "d365_to_raw",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('d365_to_raw').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('d365_to_raw').Error['message']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('d365_to_raw').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('d365_to_raw').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "d365_load_to_raw_fail",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "d365_raw_load_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('d365_to_raw').Error['message']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "DLVMODE"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "DLVMODE"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_DELIVERY_MODE"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"pipeline_start_time": {
						"type": "String"
					},
					"pipeline_end_time": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T10:57:10Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_dlvterm_to_dim_delivery_term')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_retail_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_retail_d365",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LATEST_MODIFIED_DATETIME",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select \ndt1.DATAAREAID,\ndt1.CODE,\ndt1.TXT,\ndt1.TAXLOCATIONROLE,\ntet1.ENUMVALUELABEL\nfrom\ndbo.DLVTERM dt1\nleft join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\n\t\twhere ENUMNAME = 'LogisticsLocationRoleType'\n\t\tgroup by ENUMNAME, ENUMVALUE) tet1 on\n\tdt1.TAXLOCATIONROLE = tet1.ENUMVALUE",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CODE",
																"type": "String"
															},
															"sink": {
																"name": "CODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TXT",
																"type": "String"
															},
															"sink": {
																"name": "TXT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TAXLOCATIONROLE",
																"type": "Int32"
															},
															"sink": {
																"name": "TAXLOCATIONROLE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "ENUMVALUELABEL",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE_ENUMVALUELABEL",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIED_DATETIME",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "2",
									"activities": [
										{
											"name": "sql_retail_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LATEST_MODIFIED_DATETIME",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select \ndt1.DATAAREAID,\ndt1.CODE,\ndt1.TXT,\ndt1.TAXLOCATIONROLE,\ntet1.ENUMVALUELABEL\nfrom\ndbo.DLVTERM dt1\nleft join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\n\t\twhere ENUMNAME = 'LogisticsLocationRoleType'\n\t\tgroup by ENUMNAME, ENUMVALUE) tet1 on\n\tdt1.TAXLOCATIONROLE = tet1.ENUMVALUE",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CODE",
																"type": "String"
															},
															"sink": {
																"name": "CODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TXT",
																"type": "String"
															},
															"sink": {
																"name": "TXT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TAXLOCATIONROLE",
																"type": "Int32"
															},
															"sink": {
																"name": "TAXLOCATIONROLE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "ENUMVALUELABEL",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE_ENUMVALUELABEL",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIED_DATETIME",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.retail_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.retail_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "retail_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_retail_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_retail_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@activity('sql_retail_to_raw').Error['message']",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_retail_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_retail_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_retail_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "retail_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_retail_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "d365_to_raw",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "WarehouseSource",
											"additionalColumns": [
												{
													"name": "HK_SOURCE_NAME",
													"value": {
														"value": "@pipeline().parameters.p_src_nm",
														"type": "Expression"
													}
												},
												{
													"name": "HK_JOB_RUN_ID",
													"value": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													}
												},
												{
													"name": "LATEST_MODIFIED_DATETIME",
													"value": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "@concat('select \ndt1.dataareaid as DATAAREAID,\ndt1.code as CODE,\ndt1.txt as TXT,\ndt1.taxlocationrole as TAXLOCATIONROLE,\ntet1.enumvaluelabel as ENUMVALUELABEL\nfrom ',pipeline().globalParameters.d365_dbName,'.',toLower(pipeline().parameters.p_src_table_nm),' dt1\nleft join (select enumname, enumvalue\n                        , max(enumvaluelabel) as enumvaluelabel\n                from ',pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n                where enumname = ''LogisticsLocationRoleType''\n                group by enumname, enumvalue) tet1 on\n        dt1.taxlocationrole = tet1.enumvalue')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeSink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "ls_blob_storage",
												"type": "LinkedServiceReference"
											},
											"path": {
												"value": "@pipeline().globalParameters.rootDir",
												"type": "Expression"
											},
											"enableCompression": true
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "HK_SOURCE_NAME",
														"type": "String"
													},
													"sink": {
														"name": "HK_SOURCE_NAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "HK_JOB_RUN_ID",
														"type": "String"
													},
													"sink": {
														"name": "HK_JOB_RUN_ID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DATAAREAID",
														"type": "String"
													},
													"sink": {
														"name": "DATAAREAID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CODE",
														"type": "String"
													},
													"sink": {
														"name": "CODE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "TXT",
														"type": "String"
													},
													"sink": {
														"name": "TXT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "TAXLOCATIONROLE",
														"type": "Int32"
													},
													"sink": {
														"name": "TAXLOCATIONROLE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "ENUMVALUELABEL",
														"type": "String"
													},
													"sink": {
														"name": "TIMEXTENDERENUMTABLE_ENUMVALUELABEL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LATEST_MODIFIED_DATETIME",
														"type": "String"
													},
													"sink": {
														"name": "LATEST_MODIFIEDDATETIME",
														"type": "DateTime"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_fabric_wh",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_snowflake",
											"type": "DatasetReference",
											"parameters": {
												"p_tgt_table_name": {
													"value": "@pipeline().parameters.p_tgt_raw_table_nm",
													"type": "Expression"
												},
												"p_tgt_schema_name": {
													"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
													"type": "Expression"
												},
												"p_ls_DbName": {
													"value": "@pipeline().globalParameters.snow_rawDb",
													"type": "Expression"
												},
												"p_ls_Env": {
													"value": "@pipeline().globalParameters.environment",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "d365_raw_load_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "d365_to_raw",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('d365_to_raw').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('d365_to_raw').Error['message']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('d365_to_raw').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('d365_to_raw').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "d365_load_to_raw_fail",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "d365_raw_load_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('d365_to_raw').Error['message']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "DLVTERM"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "DLVTERM"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_DELIVERY_TERM"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"pipeline_start_time": {
						"type": "String"
					},
					"pipeline_end_time": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T11:01:25Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_ecorescategory_to_dim_sales_procurement_category')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_retail_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prev_max_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')\n\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "switch_nala_retail_d365",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_to_raw_nala",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "SELECT\nec1.recid as RECID\n,ec1.name as NAME\n,ec1.modifieddatetime as LATEST_MODIFIEDDATETIME\nFROM dbo.ECORESCATEGORY ec1 WHERE ec1.modifieddatetime > '@{variables('v_prev_max_timestamp')}' ",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "Int64"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_to_raw_nala",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_to_raw_nala').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_to_raw_nala').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_to_raw_nala').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_to_raw_nala').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_to_raw_nala').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_to_raw_d365",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('select\nec1.recid as RECID\n,ec1.name as NAME\n,ec1.modifieddatetime as LATEST_MODIFIEDDATETIME\nfrom ',pipeline().globalParameters.d365_dbName,'.',' ecorescategory ec1 \nwhere ec1.modifieddatetime > ','''', variables('v_prev_max_timestamp'),'''') ",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "Int64"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_to_raw_d365",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_to_raw_d365').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_to_raw_d365').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_to_raw_d365').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_to_raw_d365').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_to_raw_d365').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_SALES_PROCUREMENT_CATEGORY"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "ECORESCATEGORY"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "ECORESCATEGORY"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prev_max_timestamp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-04T13:47:58Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_export_consensus_forecast_to_fact_monthly_forecast')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": "select \r\n'740' as DATAAREAID,\r\necfm.Customer_Number as CUSTOMER_NUMBER,\r\necfm.Location as LOCATION,\r\necfm.Item_Config as ITEM_CONFIG,\r\necfm.Sub_Channel_Number as SUB_CHANNEL_NUMBER,\r\necfm.Item_number as ITEM_NUMBER,\r\necfm.ConForecast_Month as CONFORECAST_MONTH,\r\necfm.LoadDate as LOADDATE,\r\necfm.Consensus_Forecast as CONSENSUS_FORECAST\r\nfrom dbo.Export_Consensus_Forecast_Monthly ecfm\r\nunion\r\nselect \r\n'415' as DATAAREAID,\r\necfms.Customer_Number as CUSTOMER_NUMBER,\r\necfms.Location as LOCATION,\r\necfms.Item_Config as ITEM_CONFIG,\r\necfms.Sub_Channel_Number as SUB_CHANNEL_NUMBER,\r\necfms.Item_number as ITEM_NUMBER,\r\necfms.ConForecast_Month as CONFORECAST_MONTH,\r\necfms.LoadDate as LOADDATE,\r\necfms.Consensus_Forecast as CONSENSUS_FORECAST\r\nfrom dbo.Export_Consensus_Forecast_Monthly_Sealy ecfms",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CUSTOMER_NUMBER",
																"type": "String"
															},
															"sink": {
																"name": "CUSTOMER_NUMBER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LOCATION",
																"type": "String"
															},
															"sink": {
																"name": "LOCATION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ITEM_CONFIG",
																"type": "String"
															},
															"sink": {
																"name": "ITEM_CONFIG",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SUB_CHANNEL_NUMBER",
																"type": "String"
															},
															"sink": {
																"name": "SUB_CHANNEL_NUMBER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ITEM_NUMBER",
																"type": "String"
															},
															"sink": {
																"name": "ITEM_NUMBER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CONFORECAST_MONTH",
																"type": "DateTime"
															},
															"sink": {
																"name": "CONFORECAST_MONTH",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "LOADDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "LOADDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "CONSENSUS_FORECAST",
																"type": "Double"
															},
															"sink": {
																"name": "CONSENSUS_FORECAST",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.arkieva_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.arkieva_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "Export_Consensus_Forecast_Monthly"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "EXPORTCONSENSUSFORECASTMONTHLY"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "FACT_MONTHLY_FORECAST"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T10:58:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_export_consensus_forecast_to_fact_weekly_wmape')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": "select\r\n'740' as DATAAREAID,\r\necfw.LOCATION,\r\necfw.ITEM_CONFIG,\r\necfw.ITEM_NUMBER,\r\necfw.Consensus_Forecast as CONSENSUS_FORECAST,\r\necfw.LOADDATE,\r\necfw.WMAPE\r\nfrom dbo.Export_Consensus_Forecast_Weekly_WMAPE ecfw\r\nunion\r\nselect \r\n'415' as DATAAREAID,\r\necfws.LOCATION,\r\necfws.ITEM_CONFIG,\r\necfws.ITEM_NUMBER,\r\necfws.Consensus_Forecast as CONSENSUS_FORECAST,\r\necfws.LOADDATE,\r\necfws.WMAPE\r\nfrom dbo.Export_Consensus_Forecast_Weekly_WMAPE_Sealy ecfws",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LOCATION",
																"type": "String"
															},
															"sink": {
																"name": "LOCATION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ITEM_CONFIG",
																"type": "String"
															},
															"sink": {
																"name": "ITEM_CONFIG",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ITEM_NUMBER",
																"type": "String"
															},
															"sink": {
																"name": "ITEM_NUMBER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CONSENSUS_FORECAST",
																"type": "DateTime"
															},
															"sink": {
																"name": "CONSENSUS_FORECAST",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "LOADDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "LOADDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "WMAPE",
																"type": "Double"
															},
															"sink": {
																"name": "WMAPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.arkieva_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.arkieva_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "Export_Consensus_Forecast_Weekly_WMAPE"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "EXPORTCONSENSUSFORECASTWEEKLYWMAPE"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "FACT_WEEKLY_WMAPE"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T10:58:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_fiscalcalendarperiod_to_dim_financial_calendar_period')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prv_max_upd_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "switch_nala",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId,-1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select\n    fcp.RECID as RECID,\n    fcp.FISCALCALENDAR as FISCALCALENDAR,\n    fc.CALENDARID as CALENDARID,\n    fcy.NAME as YEARNAME,\n    fc.DESCRIPTION as DESCRIPTION,\n    fcp.NAME as PERIODNAME,\n    tet1.ENUMVALUELABEL as PERIODTYPE,\n    fcp.STARTDATE as PERIODSTARTDATE,\n    fcp.ENDDATE as PERIODENDDATE,\n    fcy.STARTDATE as YEARSTARTDATE,\n    fcy.ENDDATE as YEARENDDATE,\n    (\n        select\n            max(LASTUPDATEDATE)\n        from\n            (\n                values\n                    (fcp.MODIFIEDDATETIME),\n                    (isnull (fc.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull (fcy.MODIFIEDDATETIME, '1950-01-01'))\n            ) as UpdateDate (LASTUPDATEDATE)\n    ) as LATEST_MODIFIEDDATETIME\nfrom\n    dbo.FISCALCALENDARPERIOD fcp\n    left join dbo.FISCALCALENDAR fc on fcp.FISCALCALENDAR = fc.RECID\n    left join dbo.FISCALCALENDARYEAR fcy on fcp.FISCALCALENDARYEAR = fcy.RECID\n    left join (\n        select\n            ENUMNAME,\n            ENUMVALUE,\n            max(ENUMVALUELABEL) as ENUMVALUELABEL\n        from\n            dbo.TIMEXTENDERENUMTABLE\n        where\n            ENUMNAME = 'FiscalPeriodType'\n        group by\n            ENUMNAME,\n            ENUMVALUE\n    ) tet1 on fcp.TYPE = tet1.ENUMVALUE --FiscalPeriodType\t\t\t\nwhere\n    (\n        select\n            max(LASTUPDATEDATE)\n        from\n            (\n                values\n                    (fcp.MODIFIEDDATETIME),\n                    (isnull (fc.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull (fcy.MODIFIEDDATETIME, '1950-01-01'))\n            ) as UpdateDate (LASTUPDATEDATE)\n    ) > '@{variables('v_prv_max_upd_timestamp')}'",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "Int64"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "FISCALCALENDAR",
																"type": "Int64"
															},
															"sink": {
																"name": "FISCALCALENDAR",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "CALENDARID",
																"type": "String"
															},
															"sink": {
																"name": "CALENDARID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "YEARNAME",
																"type": "String"
															},
															"sink": {
																"name": "YEARNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PERIODNAME",
																"type": "String"
															},
															"sink": {
																"name": "PERIODNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PERIODTYPE",
																"type": "String"
															},
															"sink": {
																"name": "PERIODTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PERIODSTARTDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "PERIODSTARTDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "PERIODENDDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "PERIODENDDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "YEARSTARTDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "YEARSTARTDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "YEARENDDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "YEARENDDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId,-1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId,-1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('select\n fcp.recid as RECID,\n    fcp.fiscalcalendar as FISCALCALENDAR,\n    fc.calendarid as CALENDARID,\n    fcy.name as YEARNAME,\n    fc.description as DESCRIPTION,\n    fcp.name as PERIODNAME,\n    tet1.enumvaluelabel as PERIODTYPE,\n    fcp.startdate as PERIODSTARTDATE,\n    fcp.enddate as PERIODENDDATE,\n    fcy.startdate as YEARSTARTDATE,\n    fcy.enddate as YEARENDDATE,\n    (\n        select\n            max(LASTUPDATEDATE)\n        from\n            (\n                values\n                    (fcp.modifieddatetime),\n                    (isnull (fc.modifieddatetime, ''1950-01-01'')),\n                    (isnull (fcy.modifieddatetime, ''1950-01-01''))\n            ) as UpdateDate (LASTUPDATEDATE)\n    ) as LATEST_MODIFIEDDATETIME\nfrom ',pipeline().globalParameters.d365_dbName,'.','fiscalcalendarperiod fcp\n    left join ',pipeline().globalParameters.d365_dbName,'.','fiscalcalendar fc on fcp.fiscalcalendar = fc.recid\n    left join ',pipeline().globalParameters.d365_dbName,'.','fiscalcalendaryear fcy on fcp.fiscalcalendaryear = fcy.recid\n    left join (\n        select\n            enumname,\n            enumvalue,\n            max(enumvaluelabel) as enumvaluelabel\n        from\n            ',pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n        where\n            enumname = ''FiscalPeriodType''\n        group by\n            enumname,\n            enumvalue\n    ) tet1 on fcp.type = tet1.enumvalue --FiscalPeriodType\t\t\t\nwhere\n    (\n        select\n            max(LASTUPDATEDATE)\n        from\n            (\n                values\n                    (fcp.modifieddatetime),\n                    (isnull (fc.modifieddatetime, ''1950-01-01'')),                 (isnull (fcy.modifieddatetime, ''1950-01-01''))\n            ) as UpdateDate (LASTUPDATEDATE)\n    )  > ','''',variables('v_prv_max_upd_timestamp'),'''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "Int64"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "FISCALCALENDAR",
																"type": "Int64"
															},
															"sink": {
																"name": "FISCALCALENDAR",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "CALENDARID",
																"type": "String"
															},
															"sink": {
																"name": "CALENDARID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "YEARNAME",
																"type": "String"
															},
															"sink": {
																"name": "YEARNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PERIODNAME",
																"type": "String"
															},
															"sink": {
																"name": "PERIODNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PERIODTYPE",
																"type": "String"
															},
															"sink": {
																"name": "PERIODTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PERIODSTARTDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "PERIODSTARTDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "PERIODENDDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "PERIODENDDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "YEARSTARTDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "YEARSTARTDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "YEARENDDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "YEARENDDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification1",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId,-1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification1",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId,-1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "FISCALCALENDARPERIOD"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "FISCALCALENDARPERIOD"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_FINANCIAL_CALENDAR_PERIOD"
					}
				},
				"variables": {
					"v_prv_max_upd_timestamp": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_generaljournalaccountentry_to_fact_general_ledger')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prev_max_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')\n\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_to_raw_nala",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "1.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select\n    gjae1.RECID,\n    gjae1.TRANSACTIONCURRENCYCODE,\n    gjae1.GENERALJOURNALENTRY,\n    gjae1.LEDGERDIMENSION,\n    gjae1.MAINACCOUNT,\n    gjae1.REASONREF,\n    gjae1.POSTINGTYPE,\n    gjae1.ISCORRECTION,\n    gjae1.ISCREDIT,\n    gjae1.CREATEDDATETIME,\n    gjae1.LEDGERACCOUNT,\n    gjae1.QUANTITY,\n    gjae1.ACCOUNTINGCURRENCYAMOUNT,\n    gjae1.REPORTINGCURRENCYAMOUNT,\n    gjae1.TRANSACTIONCURRENCYAMOUNT,\n    gjae1.MODIFIEDDATETIME,\n    gje1.FISCALCALENDARPERIOD as GENERALJOURNALENTRY_FISCALCALENDARPERIOD,\n    gje1.LEDGER as GENERALJOURNALENTRY_LEDGER,\n    gje1.JOURNALCATEGORY as GENERALJOURNALENTRY_JOURNALCATEGORY,\n    gje1.ACCOUNTINGDATE as GENERALJOURNALENTRY_ACCOUNTINGDATE,\n    gje1.ACKNOWLEDGEMENTDATE as GENERALJOURNALENTRY_ACKNOWLEDGEMENTDATE,\n    gje1.DOCUMENTDATE as GENERALJOURNALENTRY_DOCUMENTDATE,\n    gje1.DOCUMENTNUMBER as GENERALJOURNALENTRY_DOCUMENTNUMBER,\n    gje1.SUBLEDGERVOUCHERDATAAREAID as GENERALJOURNALENTRY_SUBLEDGERVOUCHERDATAAREAID,\n    gje1.JOURNALNUMBER as GENERALJOURNALENTRY_JOURNALNUMBER,\n    gje1.SUBLEDGERVOUCHER as GENERALJOURNALENTRY_SUBLEDGERVOUCHER,\n    gje1.LEDGERENTRYJOURNAL as GENERALJOURNALENTRY_LEDGERENTRYJOURNAL,\n    gje1.MODIFIEDDATETIME as GENERALJOURNALENTRY_MODIFIEDDATETIME,\n    lej1.JOURNALNUMBER as LEDGERENTRYJOURNAL_JOURNALNUMBER,\n    lej1.MODIFIEDDATETIME as LEDGERENTRYJOURNAL_MODIFIEDDATETIME,\n    ljt1.JOURNALNAME as LEDGERJOURNALTABLE_JOURNALNAME,\n    ljt1.MODIFIEDDATETIME as LEDGERJOURNALTABLE_MODIFIEDDATETIME,\n    ljtr1.TXT as LEDGERJOURNALTRANS_TXT,\n    ljtr1.MODIFIEDDATETIME as LEDGERJOURNALTRANS_MODIFIEDDATETIME,\n    tet1.ENUMVALUELABEL as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_JOURNALCATEGORY,\n    tet2.ENUMVALUELABEL as TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_POSTINGTYPE,\n    (\n        select\n            max(lastupdatedate)\n        from\n            (\n                values\n                    (gjae1.MODIFIEDDATETIME),\n                    (isnull (gje1.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull (lej1.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull (ljt1.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull (ljtr1.MODIFIEDDATETIME, '1950-01-01'))\n            ) as updatedate (lastupdatedate)\n    ) as LATEST_MODIFIEDDATETIME\nfrom\n    dbo.GENERALJOURNALACCOUNTENTRY gjae1\n    inner join dbo.GENERALJOURNALENTRY gje1 on gjae1.GENERALJOURNALENTRY = gje1.RECID\n    left join dbo.LEDGERENTRYJOURNAL lej1 on gje1.LEDGERENTRYJOURNAL = lej1.RECID\n    left join dbo.LEDGERJOURNALTABLE ljt1 on gje1.SUBLEDGERVOUCHERDATAAREAID = ljt1.DATAAREAID\n    and lej1.JOURNALNUMBER = ljt1.JOURNALNUM\n    left join (\n        select\n            DATAAREAID,\n            JOURNALNUM,\n            max(TXT) as TXT,\n            max(MODIFIEDDATETIME) as MODIFIEDDATETIME\n        from\n            dbo.LEDGERJOURNALTRANS\n        group by\n            DATAAREAID,\n            JOURNALNUM\n    ) ljtr1 on gje1.SUBLEDGERVOUCHERDATAAREAID = ljtr1.DATAAREAID\n    and lej1.JOURNALNUMBER = ljtr1.JOURNALNUM\n    left join (\n        select\n            ENUMNAME,\n            ENUMVALUE,\n            max(ENUMVALUELABEL) as ENUMVALUELABEL\n        from\n            dbo.TIMEXTENDERENUMTABLE\n        where\n            ENUMNAME = 'LedgerTransType'\n        group by\n            ENUMNAME,\n            ENUMVALUE\n    ) tet1 on gje1.JOURNALCATEGORY = tet1.ENUMVALUE\n    left join (\n        select\n            ENUMNAME,\n            ENUMVALUE,\n            max(ENUMVALUELABEL) as ENUMVALUELABEL\n        from\n            dbo.TIMEXTENDERENUMTABLE\n        where\n            ENUMNAME = 'LedgerPostingType'\n        group by\n            ENUMNAME,\n            ENUMVALUE\n    ) tet2 on gjae1.POSTINGTYPE = tet2.ENUMVALUE\nwhere\n    gje1.ACCOUNTINGDATE >= dateadd (DAY, -90, GETDATE ())\n    and (\n        select\n            max(lastupdatedate)\n        from\n            (\n                values\n                    (gjae1.MODIFIEDDATETIME),\n                    (isnull (gje1.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull (lej1.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull (ljt1.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull (ljtr1.MODIFIEDDATETIME, '1950-01-01'))\n            ) as updatedate (lastupdatedate)\n    ) > '@{variables('v_prev_max_timestamp')}'\n;",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "Int64"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TRANSACTIONCURRENCYCODE",
																"type": "String"
															},
															"sink": {
																"name": "TRANSACTIONCURRENCYCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "GENERALJOURNALENTRY",
																"type": "Int64"
															},
															"sink": {
																"name": "GENERALJOURNALENTRY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LEDGERDIMENSION",
																"type": "Int64"
															},
															"sink": {
																"name": "LEDGERDIMENSION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MAINACCOUNT",
																"type": "Int64"
															},
															"sink": {
																"name": "MAINACCOUNT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "REASONREF",
																"type": "Int64"
															},
															"sink": {
																"name": "REASONREF",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "POSTINGTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "POSTINGTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "ISCORRECTION",
																"type": "Int32"
															},
															"sink": {
																"name": "ISCORRECTION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "ISCREDIT",
																"type": "Int32"
															},
															"sink": {
																"name": "ISCREDIT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "CREATEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "CREATEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "LEDGERACCOUNT",
																"type": "String"
															},
															"sink": {
																"name": "LEDGERACCOUNT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "QUANTITY",
																"type": "Decimal"
															},
															"sink": {
																"name": "QUANTITY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "ACCOUNTINGCURRENCYAMOUNT",
																"type": "Decimal"
															},
															"sink": {
																"name": "ACCOUNTINGCURRENCYAMOUNT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "REPORTINGCURRENCYAMOUNT",
																"type": "Decimal"
															},
															"sink": {
																"name": "REPORTINGCURRENCYAMOUNT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TRANSACTIONCURRENCYAMOUNT",
																"type": "Decimal"
															},
															"sink": {
																"name": "TRANSACTIONCURRENCYAMOUNT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "GENERALJOURNALENTRY_FISCALCALENDARPERIOD",
																"type": "Int64"
															},
															"sink": {
																"name": "GENERALJOURNALENTRY_FISCALCALENDARPERIOD",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "GENERALJOURNALENTRY_LEDGER",
																"type": "Int64"
															},
															"sink": {
																"name": "GENERALJOURNALENTRY_LEDGER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "GENERALJOURNALENTRY_JOURNALCATEGORY",
																"type": "Int32"
															},
															"sink": {
																"name": "GENERALJOURNALENTRY_JOURNALCATEGORY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "GENERALJOURNALENTRY_ACCOUNTINGDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "GENERALJOURNALENTRY_ACCOUNTINGDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "GENERALJOURNALENTRY_ACKNOWLEDGEMENTDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "GENERALJOURNALENTRY_ACKNOWLEDGEMENTDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "GENERALJOURNALENTRY_DOCUMENTDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "GENERALJOURNALENTRY_DOCUMENTDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "GENERALJOURNALENTRY_DOCUMENTNUMBER",
																"type": "String"
															},
															"sink": {
																"name": "GENERALJOURNALENTRY_DOCUMENTNUMBER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "GENERALJOURNALENTRY_SUBLEDGERVOUCHERDATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "GENERALJOURNALENTRY_SUBLEDGERVOUCHERDATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "GENERALJOURNALENTRY_JOURNALNUMBER",
																"type": "String"
															},
															"sink": {
																"name": "GENERALJOURNALENTRY_JOURNALNUMBER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "GENERALJOURNALENTRY_SUBLEDGERVOUCHER",
																"type": "String"
															},
															"sink": {
																"name": "GENERALJOURNALENTRY_SUBLEDGERVOUCHER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "GENERALJOURNALENTRY_LEDGERENTRYJOURNAL",
																"type": "Int64"
															},
															"sink": {
																"name": "GENERALJOURNALENTRY_LEDGERENTRYJOURNAL",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "GENERALJOURNALENTRY_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "GENERALJOURNALENTRY_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "LEDGERENTRYJOURNAL_JOURNALNUMBER",
																"type": "String"
															},
															"sink": {
																"name": "LEDGERENTRYJOURNAL_JOURNALNUMBER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LEDGERENTRYJOURNAL_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LEDGERENTRYJOURNAL_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "LEDGERJOURNALTABLE_JOURNALNAME",
																"type": "String"
															},
															"sink": {
																"name": "LEDGERJOURNALTABLE_JOURNALNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LEDGERJOURNALTABLE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LEDGERJOURNALTABLE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "LEDGERJOURNALTRANS_TXT",
																"type": "String"
															},
															"sink": {
																"name": "LEDGERJOURNALTRANS_TXT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LEDGERJOURNALTRANS_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LEDGERJOURNALTRANS_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_JOURNALCATEGORY",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_JOURNALCATEGORY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_POSTINGTYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_POSTINGTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_to_raw_nala",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_to_raw_nala').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_to_raw_nala').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_to_raw_nala').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_to_raw_nala').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_to_raw_nala').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_to_raw_d365",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "1.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select\n    gjae1.RECID,\n    gjae1.TRANSACTIONCURRENCYCODE,\n    gjae1.GENERALJOURNALENTRY,\n    gjae1.LEDGERDIMENSION,\n    gjae1.MAINACCOUNT,\n    gjae1.REASONREF,\n    gjae1.POSTINGTYPE,\n    gjae1.ISCORRECTION,\n    gjae1.ISCREDIT,\n    gjae1.CREATEDDATETIME,\n    gjae1.LEDGERACCOUNT,\n    gjae1.QUANTITY,\n    gjae1.ACCOUNTINGCURRENCYAMOUNT,\n    gjae1.REPORTINGCURRENCYAMOUNT,\n    gjae1.TRANSACTIONCURRENCYAMOUNT,\n    gjae1.MODIFIEDDATETIME,\n    gje1.FISCALCALENDARPERIOD as GENERALJOURNALENTRY_FISCALCALENDARPERIOD,\n    gje1.LEDGER as GENERALJOURNALENTRY_LEDGER,\n    gje1.JOURNALCATEGORY as GENERALJOURNALENTRY_JOURNALCATEGORY,\n    gje1.ACCOUNTINGDATE as GENERALJOURNALENTRY_ACCOUNTINGDATE,\n    gje1.ACKNOWLEDGEMENTDATE as GENERALJOURNALENTRY_ACKNOWLEDGEMENTDATE,\n    gje1.DOCUMENTDATE as GENERALJOURNALENTRY_DOCUMENTDATE,\n    gje1.DOCUMENTNUMBER as GENERALJOURNALENTRY_DOCUMENTNUMBER,\n    gje1.SUBLEDGERVOUCHERDATAAREAID as GENERALJOURNALENTRY_SUBLEDGERVOUCHERDATAAREAID,\n    gje1.JOURNALNUMBER as GENERALJOURNALENTRY_JOURNALNUMBER,\n    gje1.SUBLEDGERVOUCHER as GENERALJOURNALENTRY_SUBLEDGERVOUCHER,\n    gje1.LEDGERENTRYJOURNAL as GENERALJOURNALENTRY_LEDGERENTRYJOURNAL,\n    gje1.MODIFIEDDATETIME as GENERALJOURNALENTRY_MODIFIEDDATETIME,\n    lej1.JOURNALNUMBER as LEDGERENTRYJOURNAL_JOURNALNUMBER,\n    lej1.MODIFIEDDATETIME as LEDGERENTRYJOURNAL_MODIFIEDDATETIME,\n    ljt1.JOURNALNAME as LEDGERJOURNALTABLE_JOURNALNAME,\n    ljt1.MODIFIEDDATETIME as LEDGERJOURNALTABLE_MODIFIEDDATETIME,\n    ljtr1.TXT as LEDGERJOURNALTRANS_TXT,\n    ljtr1.MODIFIEDDATETIME as LEDGERJOURNALTRANS_MODIFIEDDATETIME,\n    tet1.ENUMVALUELABEL as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_JOURNALCATEGORY,\n    tet2.ENUMVALUELABEL as TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_POSTINGTYPE,\n    (\n        select\n            max(lastupdatedate)\n        from\n            (\n                values\n                    (gjae1.MODIFIEDDATETIME),\n                    (isnull (gje1.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull (lej1.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull (ljt1.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull (ljtr1.MODIFIEDDATETIME, '1950-01-01'))\n            ) as updatedate (lastupdatedate)\n    ) as LATEST_MODIFIEDDATETIME\nfrom\n    dbo.GENERALJOURNALACCOUNTENTRY gjae1\n    inner join dbo.GENERALJOURNALENTRY gje1 on gjae1.GENERALJOURNALENTRY = gje1.RECID\n    left join dbo.LEDGERENTRYJOURNAL lej1 on gje1.LEDGERENTRYJOURNAL = lej1.RECID\n    left join dbo.LEDGERJOURNALTABLE ljt1 on gje1.SUBLEDGERVOUCHERDATAAREAID = ljt1.DATAAREAID\n    and lej1.JOURNALNUMBER = ljt1.JOURNALNUM\n    left join (\n        select\n            DATAAREAID,\n            JOURNALNUM,\n            max(TXT) as TXT,\n            max(MODIFIEDDATETIME) as MODIFIEDDATETIME\n        from\n            dbo.LEDGERJOURNALTRANS\n        group by\n            DATAAREAID,\n            JOURNALNUM\n    ) ljtr1 on gje1.SUBLEDGERVOUCHERDATAAREAID = ljtr1.DATAAREAID\n    and lej1.JOURNALNUMBER = ljtr1.JOURNALNUM\n    left join (\n        select\n            ENUMNAME,\n            ENUMVALUE,\n            max(ENUMVALUELABEL) as ENUMVALUELABEL\n        from\n            dbo.TIMEXTENDERENUMTABLE\n        where\n            ENUMNAME = 'LedgerTransType'\n        group by\n            ENUMNAME,\n            ENUMVALUE\n    ) tet1 on gje1.JOURNALCATEGORY = tet1.ENUMVALUE\n    left join (\n        select\n            ENUMNAME,\n            ENUMVALUE,\n            max(ENUMVALUELABEL) as ENUMVALUELABEL\n        from\n            dbo.TIMEXTENDERENUMTABLE\n        where\n            ENUMNAME = 'LedgerPostingType'\n        group by\n            ENUMNAME,\n            ENUMVALUE\n    ) tet2 on gjae1.POSTINGTYPE = tet2.ENUMVALUE\nwhere\n    gje1.ACCOUNTINGDATE >= dateadd (DAY, -90, GETDATE ())\n    and (\n        select\n            max(lastupdatedate)\n        from\n            (\n                values\n                    (gjae1.MODIFIEDDATETIME),\n                    (isnull (gje1.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull (lej1.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull (ljt1.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull (ljtr1.MODIFIEDDATETIME, '1950-01-01'))\n            ) as updatedate (lastupdatedate)\n    ) > '@{variables('v_prev_max_timestamp')}'\n;",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "Int64"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TRANSACTIONCURRENCYCODE",
																"type": "String"
															},
															"sink": {
																"name": "TRANSACTIONCURRENCYCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "GENERALJOURNALENTRY",
																"type": "Int64"
															},
															"sink": {
																"name": "GENERALJOURNALENTRY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LEDGERDIMENSION",
																"type": "Int64"
															},
															"sink": {
																"name": "LEDGERDIMENSION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MAINACCOUNT",
																"type": "Int64"
															},
															"sink": {
																"name": "MAINACCOUNT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "REASONREF",
																"type": "Int64"
															},
															"sink": {
																"name": "REASONREF",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "POSTINGTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "POSTINGTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "ISCORRECTION",
																"type": "Int32"
															},
															"sink": {
																"name": "ISCORRECTION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "ISCREDIT",
																"type": "Int32"
															},
															"sink": {
																"name": "ISCREDIT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "CREATEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "CREATEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "LEDGERACCOUNT",
																"type": "String"
															},
															"sink": {
																"name": "LEDGERACCOUNT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "QUANTITY",
																"type": "Decimal"
															},
															"sink": {
																"name": "QUANTITY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "ACCOUNTINGCURRENCYAMOUNT",
																"type": "Decimal"
															},
															"sink": {
																"name": "ACCOUNTINGCURRENCYAMOUNT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "REPORTINGCURRENCYAMOUNT",
																"type": "Decimal"
															},
															"sink": {
																"name": "REPORTINGCURRENCYAMOUNT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TRANSACTIONCURRENCYAMOUNT",
																"type": "Decimal"
															},
															"sink": {
																"name": "TRANSACTIONCURRENCYAMOUNT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "GENERALJOURNALENTRY_FISCALCALENDARPERIOD",
																"type": "Int64"
															},
															"sink": {
																"name": "GENERALJOURNALENTRY_FISCALCALENDARPERIOD",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "GENERALJOURNALENTRY_LEDGER",
																"type": "Int64"
															},
															"sink": {
																"name": "GENERALJOURNALENTRY_LEDGER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "GENERALJOURNALENTRY_JOURNALCATEGORY",
																"type": "Int32"
															},
															"sink": {
																"name": "GENERALJOURNALENTRY_JOURNALCATEGORY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "GENERALJOURNALENTRY_ACCOUNTINGDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "GENERALJOURNALENTRY_ACCOUNTINGDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "GENERALJOURNALENTRY_ACKNOWLEDGEMENTDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "GENERALJOURNALENTRY_ACKNOWLEDGEMENTDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "GENERALJOURNALENTRY_DOCUMENTDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "GENERALJOURNALENTRY_DOCUMENTDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "GENERALJOURNALENTRY_DOCUMENTNUMBER",
																"type": "String"
															},
															"sink": {
																"name": "GENERALJOURNALENTRY_DOCUMENTNUMBER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "GENERALJOURNALENTRY_SUBLEDGERVOUCHERDATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "GENERALJOURNALENTRY_SUBLEDGERVOUCHERDATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "GENERALJOURNALENTRY_JOURNALNUMBER",
																"type": "String"
															},
															"sink": {
																"name": "GENERALJOURNALENTRY_JOURNALNUMBER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "GENERALJOURNALENTRY_SUBLEDGERVOUCHER",
																"type": "String"
															},
															"sink": {
																"name": "GENERALJOURNALENTRY_SUBLEDGERVOUCHER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "GENERALJOURNALENTRY_LEDGERENTRYJOURNAL",
																"type": "Int64"
															},
															"sink": {
																"name": "GENERALJOURNALENTRY_LEDGERENTRYJOURNAL",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "GENERALJOURNALENTRY_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "GENERALJOURNALENTRY_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "LEDGERENTRYJOURNAL_JOURNALNUMBER",
																"type": "String"
															},
															"sink": {
																"name": "LEDGERENTRYJOURNAL_JOURNALNUMBER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LEDGERENTRYJOURNAL_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LEDGERENTRYJOURNAL_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "LEDGERJOURNALTABLE_JOURNALNAME",
																"type": "String"
															},
															"sink": {
																"name": "LEDGERJOURNALTABLE_JOURNALNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LEDGERJOURNALTABLE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LEDGERJOURNALTABLE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "LEDGERJOURNALTRANS_TXT",
																"type": "String"
															},
															"sink": {
																"name": "LEDGERJOURNALTRANS_TXT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LEDGERJOURNALTRANS_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LEDGERJOURNALTRANS_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_JOURNALCATEGORY",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_JOURNALCATEGORY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_POSTINGTYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_POSTINGTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_to_raw_d365",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_to_raw_d365').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_to_raw_d365').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_to_raw_d365').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_to_raw_d365').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_to_raw_d365').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "FACT_GENERAL_LEDGER"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "GENERALJOURNALACCOUNTENTRY"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "GENERALJOURNALACCOUNTENTRY"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prev_max_timestamp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-04T13:47:58Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_hcmworker_to_dim_worker')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_retail_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prev_max_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')\n\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "switch_nala_retail_d365",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "hcmworker_to_raw_nala",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('select  hw1.RECID, hw1.PERSONNELNUMBER, hw1.PERSON, hw1.MODIFIEDDATETIME, dpt1.name as DIRPARTYTABLE_NAME,  dpt1.MODIFIEDDATETIME as DIRPARTYTABLE_MODIFIEDDATETIME,  (         SELECT             MAX(LastUpdateDate)         FROM             (                 VALUES                     (hw1.MODIFIEDDATETIME),                     (                         isnull(dpt1.MODIFIEDDATETIME, ''1950-01-01'')                     )             ) AS UpdateDate(LastUpdateDate)     ) AS LATEST_MODIFIEDDATETIME from dbo.HCMWORKER hw1 left join dbo.DIRPARTYTABLE dpt1 on \thw1.PERSON = dpt1.RECID where (SELECT             MAX(LastUpdateDate)         FROM             (                 VALUES                     (hw1.MODIFIEDDATETIME),                     (                         isnull(dpt1.MODIFIEDDATETIME, ''1950-01-01'')                     )             ) AS UpdateDate(LastUpdateDate)) >','''',variables('v_prev_max_timestamp'),'''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "Int64"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PERSONNELNUMBER",
																"type": "String"
															},
															"sink": {
																"name": "PERSONNELNUMBER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PERSON",
																"type": "Int64"
															},
															"sink": {
																"name": "PERSON",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DIRPARTYTABLE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "DIRPARTYTABLE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DIRPARTYTABLE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "DIRPARTYTABLE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "hcmworker_to_raw_nala",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('hcmworker_to_raw_nala').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('hcmworker_to_raw_nala').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('hcmworker_to_raw_nala').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('hcmworker_to_raw_nala').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('hcmworker_to_raw_nala').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "2",
									"activities": [
										{
											"name": "hcmworker_to_raw_retail",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('select  hw1.RECID, hw1.PERSONNELNUMBER, hw1.PERSON, hw1.MODIFIEDDATETIME, dpt1.name as DIRPARTYTABLE_NAME,  dpt1.MODIFIEDDATETIME as DIRPARTYTABLE_MODIFIEDDATETIME,  (         SELECT             MAX(LastUpdateDate)         FROM             (                 VALUES                     (hw1.MODIFIEDDATETIME),                     (                         isnull(dpt1.MODIFIEDDATETIME, ''1950-01-01'')                     )             ) AS UpdateDate(LastUpdateDate)     ) AS LATEST_MODIFIEDDATETIME from dbo.HCMWORKER hw1 left join dbo.DIRPARTYTABLE dpt1 on \thw1.PERSON = dpt1.RECID where (SELECT             MAX(LastUpdateDate)         FROM             (                 VALUES                     (hw1.MODIFIEDDATETIME),                     (                         isnull(dpt1.MODIFIEDDATETIME, ''1950-01-01'')                     )             ) AS UpdateDate(LastUpdateDate)) >','''',variables('v_prev_max_timestamp'),'''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "Int64"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PERSONNELNUMBER",
																"type": "String"
															},
															"sink": {
																"name": "PERSONNELNUMBER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PERSON",
																"type": "Int64"
															},
															"sink": {
																"name": "PERSON",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DIRPARTYTABLE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "DIRPARTYTABLE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DIRPARTYTABLE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "DIRPARTYTABLE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.retail_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.retail_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "retail_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "hcmworker_to_raw_retail",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('hcmworker_to_raw_retail').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('hcmworker_to_raw_retail').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('hcmworker_to_raw_retail').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('hcmworker_to_raw_retail').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_retail_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "retail_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('hcmworker_to_raw_retail').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "hcmworker_to_raw_d365",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "WarehouseSource",
											"additionalColumns": [
												{
													"name": "HK_JOB_RUN_ID",
													"value": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													}
												},
												{
													"name": "HK_SOURCE_NAME",
													"value": {
														"value": "@pipeline().parameters.p_src_nm",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "@concat('select \nhw1.recid as RECID,\nhw1.personnelnumber as PERSONNELNUMBER,\nhw1.person as PERSON,\nhw1.modifieddatetime as MODIFIEDDATETIME,\ndpt1.name as DIRPARTYTABLE_NAME, \ndpt1.modifieddatetime as DIRPARTYTABLE_MODIFIEDDATETIME,\n (\n        select\n            max(lastupdatedate)\n        from\n            (\n                values\n                    (hw1.modifieddatetime),\n                    (\n                        isnull(dpt1.modifieddatetime, ''1950-01-01'')\n                    )\n            ) as updatedate(lastupdatedate)\n    ) as LATEST_MODIFIEDDATETIME\nfrom ',pipeline().globalParameters.d365_dbName,'.','hcmworker hw1\nleft join ',pipeline().globalParameters.d365_dbName,'.','dirpartytable dpt1 on\n\thw1.person = dpt1.recid\nwhere (select\n            max(lastupdatedate)\n        from\n            (\n                values\n                    (hw1.modifieddatetime),\n                    (\n                        isnull(dpt1.modifieddatetime, ''1950-01-01'')\n                    )\n            ) as updatedate(lastupdatedate))\n> ','''',variables('v_prev_max_timestamp'),'''')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeSink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "ls_blob_storage",
												"type": "LinkedServiceReference"
											},
											"path": {
												"value": "@pipeline().globalParameters.rootDir",
												"type": "Expression"
											},
											"enableCompression": true
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "HK_SOURCE_NAME",
														"type": "String"
													},
													"sink": {
														"name": "HK_SOURCE_NAME",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "HK_JOB_RUN_ID",
														"type": "String"
													},
													"sink": {
														"name": "HK_JOB_RUN_ID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "RECID",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "RECID",
														"type": "Int64",
														"physicalType": "NUMBER"
													}
												},
												{
													"source": {
														"name": "PERSONNELNUMBER",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "PERSONNELNUMBER",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "PERSON",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "PERSON",
														"type": "Int64",
														"physicalType": "NUMBER"
													}
												},
												{
													"source": {
														"name": "MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "TIMESTAMP_TZ"
													}
												},
												{
													"source": {
														"name": "DIRPARTYTABLE_NAME",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DIRPARTYTABLE_NAME",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DIRPARTYTABLE_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "DIRPARTYTABLE_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "TIMESTAMP_TZ"
													}
												},
												{
													"source": {
														"name": "LATEST_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "LATEST_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "TIMESTAMP_TZ"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_fabric_wh",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_snowflake",
											"type": "DatasetReference",
											"parameters": {
												"p_tgt_table_name": {
													"value": "@pipeline().parameters.p_tgt_raw_table_nm",
													"type": "Expression"
												},
												"p_tgt_schema_name": {
													"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
													"type": "Expression"
												},
												"p_ls_DbName": {
													"value": "@pipeline().globalParameters.snow_rawDb",
													"type": "Expression"
												},
												"p_ls_Env": {
													"value": "@pipeline().globalParameters.environment",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "d365_raw_load_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "hcmworker_to_raw_d365",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('hcmworker_to_raw_d365').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('hcmworker_to_raw_d365').Error['message']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('hcmworker_to_raw_d365').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('hcmworker_to_raw_d365').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "d365_load_to_raw_fail",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "d365_raw_load_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('hcmworker_to_raw_d365').Error['message']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "stored_procedure_failure_notification_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_WORKER"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "HCMWORKER"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "HCMWORKER"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prev_max_timestamp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-05T05:41:54Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_intrastattransactioncode_to_dim_intra_stat_transaction_code')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": "select istc1.DATAAREAID,istc1.TRANSACTIONCODE,istc1.NAME from dbo.INTRASTATTRANSACTIONCODE istc1",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TRANSACTIONCODE",
																"type": "String"
															},
															"sink": {
																"name": "TRANSACTIONCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('select istc1.dataareaid AS DATAAREAID\n     , istc1.transactioncode AS TRANSACTIONCODE\n     , istc1.name AS NAME\n     from ',pipeline().globalParameters.d365_dbName,'.','intrastattransactioncode istc1')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TRANSACTIONCODE",
																"type": "String"
															},
															"sink": {
																"name": "TRANSACTIONCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "INTRASTATTRANSACTIONCODE"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "INTRASTATTRANSACTIONCODE"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_INTRA_STAT_TRANSACTION_CODE"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T10:58:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_inventdim_to_dim_inventory')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prv_max_upd_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_curate_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_curate_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_retail_d365_arkieva",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_retail_d365_arkieva",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select \nid1.DATAAREAID,\nid1.INVENTDIMID,\nid1.CONFIGID,\nid1.WMSLOCATIONID,\nid1.INVENTSITEID,\nid1.INVENTLOCATIONID,\nid1.CREATEDDATETIME,\nid1.MODIFIEDDATETIME,\nis1.DATAAREAID AS INVENTSITE_DATAAREAID,\nis1.SITEID AS INVENTSITE_SITEID,\nis1.NAME AS INVENTSITE_NAME,\nis1.CREATEDDATETIME AS INVENTSITE_CREATEDDATETIME,\nis1.MODIFIEDDATETIME AS INVENTSITE_MODIFIEDDATETIME,\nil1.DATAAREAID AS INVENTLOCATION_DATAAREAID,\nil1.INVENTLOCATIONID AS INVENTLOCATION_INVENTLOCATIONID,\nil1.name AS INVENTLOCATION_NAME,\nil1.CREATEDDATETIME AS INVENTLOCATION_CREATEDDATETIME,\nil1.MODIFIEDDATETIME AS INVENTLOCATION_MODIFIEDDATETIME,\n(SELECT MAX(LastUpdateDate)\n      FROM (VALUES (id1.MODIFIEDDATETIME),\n      (isnull(is1.MODIFIEDDATETIME, '1950-01-01')),(\n        isnull(il1.MODIFIEDDATETIME, '1950-01-01'))) \n        AS UpdateDate(LastUpdateDate)) \n   AS LAST_MODIFIEDDATETIME\nfrom dbo.INVENTDIM id1\nleft join dbo.INVENTSITE is1 on id1.DATAAREAID = is1.DATAAREAID and id1.INVENTSITEID = is1.SITEID\nleft join dbo.INVENTLOCATION il1 on id1.DATAAREAID = il1.DATAAREAID and id1.INVENTLOCATIONID = il1.INVENTLOCATIONID\nwhere \n(SELECT MAX(LastUpdateDate)\n      FROM (VALUES (id1.MODIFIEDDATETIME),\n      (isnull(is1.MODIFIEDDATETIME, '1950-01-01')),(\n        isnull(il1.MODIFIEDDATETIME, '1950-01-01'))) \n        AS UpdateDate(LastUpdateDate)) > '@{variables('v_prv_max_upd_timestamp')}'and rtrim(ltrim(id1.INVENTDIMID)) != ''",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDIMID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTDIMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CONFIGID",
																"type": "String"
															},
															"sink": {
																"name": "CONFIGID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "WMSLOCATIONID",
																"type": "String"
															},
															"sink": {
																"name": "WMSLOCATIONID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTSITEID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTSITEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTLOCATIONID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTLOCATIONID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CREATEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "CREATEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTSITE_DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTSITE_DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTSITE_SITEID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTSITE_SITEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTSITE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "INVENTSITE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTSITE_CREATEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTSITE_CREATEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTSITE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTSITE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTLOCATION_DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTLOCATION_DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTLOCATION_INVENTLOCATIONID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTLOCATION_INVENTLOCATIONID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTLOCATION_NAME",
																"type": "String"
															},
															"sink": {
																"name": "INVENTLOCATION_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTLOCATION_CREATEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTLOCATION_CREATEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTLOCATION_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTLOCATION_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "2",
									"activities": [
										{
											"name": "sql_retail_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select \nid1.DATAAREAID,\nid1.INVENTDIMID,\nid1.CONFIGID,\nid1.WMSLOCATIONID,\nid1.INVENTSITEID,\nid1.INVENTLOCATIONID,\nid1.CREATEDDATETIME,\nid1.MODIFIEDDATETIME,\nis1.DATAAREAID AS INVENTSITE_DATAAREAID,\nis1.SITEID AS INVENTSITE_SITEID,\nis1.NAME AS INVENTSITE_NAME,\nis1.CREATEDDATETIME AS INVENTSITE_CREATEDDATETIME,\nis1.MODIFIEDDATETIME AS INVENTSITE_MODIFIEDDATETIME,\nil1.DATAAREAID AS INVENTLOCATION_DATAAREAID,\nil1.INVENTLOCATIONID AS INVENTLOCATION_INVENTLOCATIONID,\nil1.name AS INVENTLOCATION_NAME,\nil1.CREATEDDATETIME AS INVENTLOCATION_CREATEDDATETIME,\nil1.MODIFIEDDATETIME AS INVENTLOCATION_MODIFIEDDATETIME,\n(SELECT MAX(LastUpdateDate)\n      FROM (VALUES (id1.MODIFIEDDATETIME),(isnull(is1.MODIFIEDDATETIME, '1950-01-01')),(isnull(il1.MODIFIEDDATETIME, '1950-01-01'))) AS UpdateDate(LastUpdateDate)) \n   AS LAST_MODIFIEDDATETIME\nfrom dbo.INVENTDIM id1\nleft join dbo.INVENTSITE is1 on id1.DATAAREAID = is1.DATAAREAID and id1.INVENTSITEID = is1.SITEID\nleft join dbo.INVENTLOCATION il1 on id1.DATAAREAID = il1.DATAAREAID and id1.INVENTLOCATIONID = il1.INVENTLOCATIONID\nwhere \n(SELECT MAX(LastUpdateDate)\n      FROM (VALUES (id1.MODIFIEDDATETIME),\n      (isnull(is1.MODIFIEDDATETIME, '1950-01-01')),(\n        isnull(il1.MODIFIEDDATETIME, '1950-01-01'))) \n        AS UpdateDate(LastUpdateDate)) > '@{variables('v_prv_max_upd_timestamp')}'and rtrim(ltrim(id1.INVENTDIMID)) != ''\n\n",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDIMID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTDIMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CONFIGID",
																"type": "String"
															},
															"sink": {
																"name": "CONFIGID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "WMSLOCATIONID",
																"type": "String"
															},
															"sink": {
																"name": "WMSLOCATIONID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTSITEID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTSITEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTLOCATIONID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTLOCATIONID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CREATEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "CREATEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTSITE_DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTSITE_DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTSITE_SITEID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTSITE_SITEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTSITE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "INVENTSITE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTSITE_CREATEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTSITE_CREATEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTSITE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTSITE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTLOCATION_DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTLOCATION_DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTLOCATION_INVENTLOCATIONID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTLOCATION_INVENTLOCATIONID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTLOCATION_NAME",
																"type": "String"
															},
															"sink": {
																"name": "INVENTLOCATION_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTLOCATION_CREATEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTLOCATION_CREATEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTLOCATION_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTLOCATION_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.retail_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.retail_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "sql_retail_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_retail_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_retail_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_retail_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_retail_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_retail_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_retail_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "sql_retail_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_retail_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "4",
									"activities": [
										{
											"name": "sql_arkieva_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": "select * from (select LOCATION,ITEM_CONFIG,LOCATION_DESCRIPTION, '740' as DATAAREAID from dbo.Export_Consensus_Forecast_Monthly\r\nunion\r\nselect LOCATION,ITEM_CONFIG,LOCATION_DESCRIPTION, '415' as DATAAREAID from dbo.Export_Consensus_Forecast_Monthly_Sealy\r\nunion\r\nselect LOCATION,ITEM_CONFIG,LOCATION_DESCRIPTION, '740' as DATAAREAID from dbo.Export_Consensus_Forecast_Monthly_WMAPE\r\nunion\r\nselect LOCATION,ITEM_CONFIG,LOCATION_DESCRIPTION, '415' as DATAAREAID from dbo.Export_Consensus_Forecast_Monthly_WMAPE_Sealy\r\nunion\r\nselect LOCATION,ITEM_CONFIG,LOCATION_DESCRIPTION, '740' as DATAAREAID from dbo.Export_Consensus_Forecast_Weekly\r\nunion\r\nselect LOCATION,ITEM_CONFIG,LOCATION_DESCRIPTION, '415' as DATAAREAID from dbo.Export_Consensus_Forecast_Weekly_Sealy\r\nunion\r\nselect LOCATION,ITEM_CONFIG,LOCATION_DESCRIPTION, '740' as DATAAREAID from dbo.Export_Consensus_Forecast_Weekly_WMAPE\r\nunion\r\nselect LOCATION,ITEM_CONFIG,LOCATION_DESCRIPTION, '415' as DATAAREAID from dbo.Export_Consensus_Forecast_Weekly_WMAPE_Sealy) ARKIEVA_INVENTORY\r\nwhere ITEM_CONFIG is not null",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LOCATION",
																"type": "String"
															},
															"sink": {
																"name": "LOCATION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ITEM_CONFIG",
																"type": "String"
															},
															"sink": {
																"name": "ITEM_CONFIG",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LOCATION_DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "LOCATION_DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.arkieva_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.arkieva_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_arkieva_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "arkieva_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_arkieva_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_arkieva_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_arkieva_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_arkieva_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_arkieva_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_arkieva_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "arkieva_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_arkieva_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "d365_to_raw",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "WarehouseSource",
											"additionalColumns": [
												{
													"name": "HK_JOB_RUN_ID",
													"value": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													}
												},
												{
													"name": "HK_SOURCE_NAME",
													"value": {
														"value": "@pipeline().parameters.p_src_nm",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "@concat('select \nid1.dataareaid AS DATAAREAID,\nid1.inventdimid AS INVENTDIMID,\nid1.configid AS CONFIGID,\nid1.wmslocationid AS WMSLOCATIONID,\nid1.inventsiteid AS INVENTSITEID,\nid1.inventlocationid AS INVENTLOCATIONID,\nid1.createddatetime AS CREATEDDATETIME,\nid1.modifieddatetime AS MODIFIEDDATETIME,\nis1.dataareaid AS INVENTSITE_DATAAREAID,\nis1.siteid AS INVENTSITE_SITEID,\nis1.name AS INVENTSITE_NAME,\nis1.createddatetime AS INVENTSITE_CREATEDDATETIME,\nis1.modifieddatetime AS INVENTSITE_MODIFIEDDATETIME,\nil1.dataareaid AS INVENTLOCATION_DATAAREAID,\nil1.inventlocationid AS INVENTLOCATION_INVENTLOCATIONID,\nil1.name AS INVENTLOCATION_NAME,\nil1.createddatetime AS INVENTLOCATION_CREATEDDATETIME,\nil1.modifieddatetime AS INVENTLOCATION_MODIFIEDDATETIME,\n(select max(lastupdatedate)\n      from (values (id1.modifieddatetime),(isnull(is1.modifieddatetime, ''1950-01-01'')),(isnull(il1.modifieddatetime, ''1950-01-01''))) as updatedate(lastupdatedate)) \n   as LAST_MODIFIEDDATETIME\nfrom ',pipeline().globalParameters.d365_dbName,'.',toLower(pipeline().parameters.p_src_table_nm),'  id1\nleft join ',pipeline().globalParameters.d365_dbName,'.', 'inventsite is1 on id1.dataareaid = is1.dataareaid and id1.inventsiteid = is1.siteid\nleft join ',pipeline().globalParameters.d365_dbName,'.' ,'inventlocation il1 on id1.dataareaid = il1.dataareaid and id1.inventlocationid = il1.inventlocationid where (SELECT MAX(LastUpdateDate)\n      FROM (VALUES (id1.modifieddatetime),\n      (isnull(is1.modifieddatetime, ''1950-01-01'')),(\n        isnull(il1.modifieddatetime, ''1950-01-01''))) \n        AS UpdateDate(LastUpdateDate)) > ','''',variables('v_prv_max_upd_timestamp'),'''','and rtrim(ltrim(id1.inventdimid)) != ''''')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeSink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "ls_blob_storage",
												"type": "LinkedServiceReference"
											},
											"path": {
												"value": "@pipeline().globalParameters.rootDir",
												"type": "Expression"
											},
											"enableCompression": true
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "HK_SOURCE_NAME",
														"type": "String"
													},
													"sink": {
														"name": "HK_SOURCE_NAME",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "HK_JOB_RUN_ID",
														"type": "String"
													},
													"sink": {
														"name": "HK_JOB_RUN_ID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DATAAREAID",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DATAAREAID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "INVENTDIMID",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "INVENTDIMID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "CONFIGID",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "CONFIGID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "WMSLOCATIONID",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "WMSLOCATIONID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "INVENTSITEID",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "INVENTSITEID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "INVENTLOCATIONID",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "INVENTLOCATIONID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "CREATEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "CREATEDDATETIME",
														"type": "DateTime",
														"physicalType": "TIMESTAMP_TZ"
													}
												},
												{
													"source": {
														"name": "MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "TIMESTAMP_TZ"
													}
												},
												{
													"source": {
														"name": "INVENTSITE_DATAAREAID",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "INVENTSITE_DATAAREAID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "INVENTSITE_SITEID",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "INVENTSITE_SITEID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "INVENTSITE_NAME",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "INVENTSITE_NAME",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "INVENTSITE_CREATEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "INVENTSITE_CREATEDDATETIME",
														"type": "DateTime",
														"physicalType": "TIMESTAMP_TZ"
													}
												},
												{
													"source": {
														"name": "INVENTSITE_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "INVENTSITE_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "TIMESTAMP_TZ"
													}
												},
												{
													"source": {
														"name": "INVENTLOCATION_DATAAREAID",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "INVENTLOCATION_DATAAREAID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "INVENTLOCATION_INVENTLOCATIONID",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "INVENTLOCATION_INVENTLOCATIONID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "INVENTLOCATION_NAME",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "INVENTLOCATION_NAME",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "INVENTLOCATION_CREATEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "INVENTLOCATION_CREATEDDATETIME",
														"type": "DateTime",
														"physicalType": "TIMESTAMP_TZ"
													}
												},
												{
													"source": {
														"name": "INVENTLOCATION_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "INVENTLOCATION_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "TIMESTAMP_TZ"
													}
												},
												{
													"source": {
														"name": "LAST_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "LATEST_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "TIMESTAMP_TZ"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_fabric_wh",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_snowflake",
											"type": "DatasetReference",
											"parameters": {
												"p_tgt_table_name": {
													"value": "@pipeline().parameters.p_tgt_raw_table_nm",
													"type": "Expression"
												},
												"p_tgt_schema_name": {
													"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
													"type": "Expression"
												},
												"p_ls_DbName": {
													"value": "@pipeline().globalParameters.snow_rawDb",
													"type": "Expression"
												},
												"p_ls_Env": {
													"value": "@pipeline().globalParameters.environment",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "d365_raw_load_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "d365_to_raw",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('d365_to_raw').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('d365_to_raw').Error['message']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('d365_to_raw').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('d365_to_raw').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "d365_load_to_raw_fail",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "d365_raw_load_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('d365_to_raw').Error['message']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_INVENTORY"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "INVENTDIM"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "INVENTDIM"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					},
					"p_tgt_raw_arkieva_table_nm": {
						"type": "string",
						"defaultValue": "ARKIEVA_INVENTORY"
					}
				},
				"variables": {
					"v_prv_max_upd_timestamp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T11:05:01Z"
			},
			"dependsOn": []
		}
	]
}