{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "mdw-df-nala-dev"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_logisticspostaladdress_to_dim_location')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get_last_modifieddatetime_FipsZipsXref",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_fipszipxref_excel",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"itemName",
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "get_last_modifieddatetime_GeoXref",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_geoxref_excel",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"itemName",
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "get_last_modifieddatetime_ISPA Region",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_isparegion_excel",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"itemName",
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "switch_nala_retail_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prev_max_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')\n\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set_ts_fipsZipsXref",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "get_last_modifieddatetime_FipsZipsXref",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_lst_mod_tmstmp_fipsXref",
							"value": {
								"value": "@coalesce(activity('get_last_modifieddatetime_FipsZipsXref').output.lastModified, '1950-01-01 00:00:00')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set_ts_geoXref",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "get_last_modifieddatetime_GeoXref",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_lst_mod_tmstmp_geoXref",
							"value": {
								"value": "@coalesce(activity('get_last_modifieddatetime_GeoXref').output.lastModified, '1950-01-01 00:00:00')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set_ts_ISPARegion",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "get_last_modifieddatetime_ISPA Region",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_lst_mod_tmstmp_ispaRegion",
							"value": {
								"value": "@coalesce(activity('get_last_modifieddatetime_ISPA Region').output.lastModified,'1950-01-01 00:00:00')\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "load_dim_location",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "raw_to_curate_storedprocedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "load_dim_location_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "load_dim_location",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('load_dim_location').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('load_dim_location').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('load_dim_location').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('load_dim_location').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "load_dim_location",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_load_dim_location",
								"type": "DataFlowReference",
								"parameters": {
									"df_prev_max_ts_FipsZipsXref": {
										"value": "'@{variables('v_lst_mod_tmstmp_fipsXref')}'",
										"type": "Expression"
									},
									"df_prev_max_ts_GeoXref": {
										"value": "'@{variables('v_lst_mod_tmstmp_geoXref')}'",
										"type": "Expression"
									},
									"df_prev_max_ts_ISPARegion": {
										"value": "'@{variables('v_lst_mod_tmstmp_ispaRegion')}'",
										"type": "Expression"
									},
									"df_prev_max_raw_postalAddr": {
										"value": "'@{variables('v_prev_max_timestamp')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"srcLocationParquet": {
										"p_directory": {
											"value": "@pipeline().parameters.p_temp_directory",
											"type": "Expression"
										},
										"p_root_system": {
											"value": "@pipeline().globalParameters.rootDir",
											"type": "Expression"
										},
										"p_file_name": {
											"value": "@pipeline().parameters.p_temp_file_nm",
											"type": "Expression"
										}
									},
									"srcFipsZipsXref": {},
									"srcGeoXref": {},
									"srcISPARegion": {},
									"logisticsPostalAddress": {
										"p_tgt_table_name": {
											"value": "@pipeline().parameters.p_tgt_raw_table_nm",
											"type": "Expression"
										},
										"p_tgt_schema_name": {
											"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
											"type": "Expression"
										},
										"p_ls_DbName": {
											"value": "@pipeline().globalParameters.snow_rawDb",
											"type": "Expression"
										},
										"p_ls_Env": {
											"value": "@pipeline().globalParameters.environment",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "IR-Snowflake-NALA",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "switch_nala_retail_d365",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_ts_fipsZipsXref",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set_ts_geoXref",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "set_ts_ISPARegion",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_adls",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select \nlpa1.RECID,\nlpa1.CITY,\nlpa1.COUNTY,\nlpa1.COUNTRYREGIONID,\nlpa1.LATITUDE,\nlpa1.LONGITUDE,\nlpa1.ZIPCODE,\nlpa1.STATE,\nlpa1.STREET,\nlpa1.ISPRIVATE,\nlpa1.MODIFIEDDATETIME,\nll1.LOCATIONID,\nll1.DESCRIPTION,\nll1.MODIFIEDDATETIME as LOGISTICSLOCATION_MODIFIEDDATETIME,\ntzl1.TIMEZONEKEYNAME\nfrom\ndbo.LOGISTICSPOSTALADDRESS lpa1\nleft join dbo.LOGISTICSLOCATION ll1 on lpa1.LOCATION = ll1.RECID\nleft join dbo.TIMEZONESLIST tzl1 on lpa1.TIMEZONE = tzl1.TZENUM",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "ParquetSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "ParquetWriteSettings"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "RECID",
																"type": "Int64",
																"physicalType": "bigint"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64",
																"physicalType": "INT_64"
															}
														},
														{
															"source": {
																"name": "CITY",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "CITY",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "COUNTY",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "COUNTY",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "COUNTRYREGIONID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "COUNTRYREGIONID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "LATITUDE",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 16,
																"precision": 32
															},
															"sink": {
																"name": "LATITUDE",
																"type": "Decimal",
																"physicalType": "DECIMAL"
															}
														},
														{
															"source": {
																"name": "LONGITUDE",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 16,
																"precision": 32
															},
															"sink": {
																"name": "LONGITUDE",
																"type": "Decimal",
																"physicalType": "DECIMAL"
															}
														},
														{
															"source": {
																"name": "ZIPCODE",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "ZIPCODE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "STATE",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "STATE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "STREET",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "STREET",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "ISPRIVATE",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "ISPRIVATE",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "LOCATIONID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "LOCATIONID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "DESCRIPTION",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "DESCRIPTION",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "LOGISTICSLOCATION_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "LOGISTICSLOCATION_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "TIMEZONEKEYNAME",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "TIMEZONEKEYNAME",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String",
																"physicalType": "UTF8"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_parquet",
													"type": "DatasetReference",
													"parameters": {
														"p_directory": {
															"value": "@pipeline().parameters.p_temp_directory",
															"type": "Expression"
														},
														"p_root_system": {
															"value": "@pipeline().globalParameters.rootDir",
															"type": "Expression"
														},
														"p_file_name": {
															"value": "@pipeline().parameters.p_temp_file_nm",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												},
												{
													"activity": "nala_load_excel_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_adls').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_adls').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_adls').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_adls').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_adls').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										},
										{
											"name": "nala_load_excel_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "ExcelSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "GEO_MODIFIEDDATETIME",
															"value": {
																"value": "@variables('v_lst_mod_tmstmp_geoXref')",
																"type": "Expression"
															}
														}
													],
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												},
												"sink": {
													"type": "SnowflakeSink",
													"preCopyScript": {
														"value": "@concat('TRUNCATE TABLE ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm_2)",
														"type": "Expression"
													},
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													}
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "FIPSCode",
																"type": "String"
															},
															"sink": {
																"name": "FIPSCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RegionCode",
																"type": "String"
															},
															"sink": {
																"name": "REGIONCODE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "RegionLongName",
																"type": "String"
															},
															"sink": {
																"name": "REGIONLONGNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DistrictCode",
																"type": "String"
															},
															"sink": {
																"name": "DISTRICTCODE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "DistrictLongName",
																"type": "String"
															},
															"sink": {
																"name": "DISTRICTLONGNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SMACode",
																"type": "String"
															},
															"sink": {
																"name": "SMACODE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "SMALongName",
																"type": "String"
															},
															"sink": {
																"name": "SMALONGNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "BTACode",
																"type": "String"
															},
															"sink": {
																"name": "BTACODE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "BTALongName",
																"type": "String"
															},
															"sink": {
																"name": "BTALONGNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "MsCntyLongName",
																"type": "String"
															},
															"sink": {
																"name": "MSCNTYLONGNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "GEO_MODIFIEDDATETIME",
																"type": "String"
															},
															"sink": {
																"name": "GEO_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_geoxref_excel",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm_2",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "2",
									"activities": [
										{
											"name": "sql_retail_to_adls",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select \nlpa1.RECID,\nlpa1.CITY,\nlpa1.COUNTY,\nlpa1.COUNTRYREGIONID,\nlpa1.LATITUDE,\nlpa1.LONGITUDE,\nlpa1.ZIPCODE,\nlpa1.STATE,\nlpa1.STREET,\nlpa1.ISPRIVATE,\nlpa1.MODIFIEDDATETIME,\nll1.LOCATIONID,\nll1.DESCRIPTION,\nll1.MODIFIEDDATETIME as LOGISTICSLOCATION_MODIFIEDDATETIME,\ntzl1.TIMEZONEKEYNAME\nfrom\ndbo.LOGISTICSPOSTALADDRESS lpa1\nleft join dbo.LOGISTICSLOCATION ll1 on lpa1.LOCATION = ll1.RECID\nleft join dbo.TIMEZONESLIST tzl1 on lpa1.TIMEZONE = tzl1.TZENUM",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "ParquetSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "ParquetWriteSettings"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "RECID",
																"type": "Int64",
																"physicalType": "bigint"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64",
																"physicalType": "INT_64"
															}
														},
														{
															"source": {
																"name": "CITY",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "CITY",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "COUNTY",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "COUNTY",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "COUNTRYREGIONID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "COUNTRYREGIONID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "LATITUDE",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 16,
																"precision": 32
															},
															"sink": {
																"name": "LATITUDE",
																"type": "Decimal",
																"physicalType": "DECIMAL"
															}
														},
														{
															"source": {
																"name": "LONGITUDE",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 16,
																"precision": 32
															},
															"sink": {
																"name": "LONGITUDE",
																"type": "Decimal",
																"physicalType": "DECIMAL"
															}
														},
														{
															"source": {
																"name": "ZIPCODE",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "ZIPCODE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "STATE",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "STATE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "STREET",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "STREET",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "ISPRIVATE",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "ISPRIVATE",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "LOCATIONID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "LOCATIONID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "DESCRIPTION",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "DESCRIPTION",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "LOGISTICSLOCATION_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "LOGISTICSLOCATION_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "TIMEZONEKEYNAME",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "TIMEZONEKEYNAME",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String",
																"physicalType": "UTF8"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.retail_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.retail_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_parquet",
													"type": "DatasetReference",
													"parameters": {
														"p_directory": {
															"value": "@pipeline().parameters.p_temp_directory",
															"type": "Expression"
														},
														"p_root_system": {
															"value": "@pipeline().globalParameters.rootDir",
															"type": "Expression"
														},
														"p_file_name": {
															"value": "@pipeline().parameters.p_temp_file_nm",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "sql_retail_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_retail_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												},
												{
													"activity": "retail_load_excel_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_retail_to_adls').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_retail_to_adls').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_retail_to_adls').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_retail_to_adls').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_retail_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "sql_retail_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_retail_to_adls').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										},
										{
											"name": "retail_load_excel_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "ExcelSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "GEO_MODIFIEDDATETIME",
															"value": {
																"value": "@variables('v_lst_mod_tmstmp_geoXref')",
																"type": "Expression"
															}
														}
													],
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												},
												"sink": {
													"type": "SnowflakeSink",
													"preCopyScript": {
														"value": "@concat('TRUNCATE TABLE ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm_2)",
														"type": "Expression"
													},
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													}
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "FIPSCode",
																"type": "String"
															},
															"sink": {
																"name": "FIPSCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RegionCode",
																"type": "String"
															},
															"sink": {
																"name": "REGIONCODE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "RegionLongName",
																"type": "String"
															},
															"sink": {
																"name": "REGIONLONGNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DistrictCode",
																"type": "String"
															},
															"sink": {
																"name": "DISTRICTCODE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "DistrictLongName",
																"type": "String"
															},
															"sink": {
																"name": "DISTRICTLONGNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SMACode",
																"type": "String"
															},
															"sink": {
																"name": "SMACODE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "SMALongName",
																"type": "String"
															},
															"sink": {
																"name": "SMALONGNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "BTACode",
																"type": "String"
															},
															"sink": {
																"name": "BTACODE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "BTALongName",
																"type": "String"
															},
															"sink": {
																"name": "BTALONGNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "MsCntyLongName",
																"type": "String"
															},
															"sink": {
																"name": "MSCNTYLONGNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "GEO_MODIFIEDDATETIME",
																"type": "String"
															},
															"sink": {
																"name": "GEO_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_geoxref_excel",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm_2",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "d365_to_adls",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "WarehouseSource",
											"additionalColumns": [
												{
													"name": "HK_JOB_RUN_ID",
													"value": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													}
												},
												{
													"name": "HK_SOURCE_NAME",
													"value": {
														"value": "@pipeline().parameters.p_src_nm",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "@concat('select \nlpa1.recid as RECID,\nlpa1.city as CITY,\nlpa1.county as COUNTY,\nlpa1.countryregionid as COUNTRYREGIONID,\nlpa1.latitude as LATITUDE,\nlpa1.longitude as LONGITUDE,\nlpa1.zipcode as ZIPCODE,\nlpa1.state as STATE,\nlpa1.street as STREET,\nlpa1.isprivate as ISPRIVATE,\nlpa1.modifieddatetime as MODIFIEDDATETIME,\nll1.locationid as LOCATIONID,\nll1.description as DESCRIPTION,\nll1.modifieddatetime  as LOGISTICSLOCATION_MODIFIEDDATETIME,\ntzl1.timezonekeyname as TIMEZONEKEYNAME\nfrom ',pipeline().globalParameters.d365_dbName,'.','logisticspostaladdress lpa1\nleft join ',pipeline().globalParameters.d365_dbName,'.','logisticslocation ll1 on lpa1.location = ll1.recid\nleft join ',pipeline().globalParameters.d365_dbName,'.','timezoneslist tzl1 on lpa1.timezone = tzl1.tzenum where lpa1.recid is not null')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "RECID",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "RECID",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "CITY",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "CITY",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "COUNTY",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "COUNTY",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "COUNTRYREGIONID",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "COUNTRYREGIONID",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "LATITUDE",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 6,
														"precision": 38
													},
													"sink": {
														"name": "LATITUDE",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													}
												},
												{
													"source": {
														"name": "LONGITUDE",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 6,
														"precision": 38
													},
													"sink": {
														"name": "LONGITUDE",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													}
												},
												{
													"source": {
														"name": "ZIPCODE",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "ZIPCODE",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "STATE",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "STATE",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "STREET",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "STREET",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "ISPRIVATE",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "ISPRIVATE",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "LOCATIONID",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "LOCATIONID",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "DESCRIPTION",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DESCRIPTION",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "LOGISTICSLOCATION_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "LOGISTICSLOCATION_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "TIMEZONEKEYNAME",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "TIMEZONEKEYNAME",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "HK_JOB_RUN_ID",
														"type": "String"
													},
													"sink": {
														"name": "HK_JOB_RUN_ID",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "HK_SOURCE_NAME",
														"type": "String"
													},
													"sink": {
														"name": "HK_SOURCE_NAME",
														"type": "String",
														"physicalType": "UTF8"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_fabric_wh",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_parquet",
											"type": "DatasetReference",
											"parameters": {
												"p_directory": {
													"value": "@pipeline().parameters.p_temp_directory",
													"type": "Expression"
												},
												"p_root_system": {
													"value": "@pipeline().globalParameters.rootDir",
													"type": "Expression"
												},
												"p_file_name": {
													"value": "@pipeline().parameters.p_temp_file_nm",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "d365_raw_load_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "d365_to_adls",
											"dependencyConditions": [
												"Failed"
											]
										},
										{
											"activity": "d365_load_excel_to_raw",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('d365_to_adls').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('d365_to_adls').Error['message']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('d365_to_adls').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('d365_to_adls').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "d365_load_to_raw_fail",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "d365_raw_load_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('d365_to_adls').Error['message']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								},
								{
									"name": "d365_load_excel_to_raw",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"additionalColumns": [
												{
													"name": "HK_JOB_RUN_ID",
													"value": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													}
												},
												{
													"name": "HK_SOURCE_NAME",
													"value": {
														"value": "@pipeline().parameters.p_src_nm",
														"type": "Expression"
													}
												},
												{
													"name": "GEO_MODIFIEDDATETIME",
													"value": {
														"value": "@variables('v_lst_mod_tmstmp_geoXref')",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "SnowflakeSink",
											"preCopyScript": {
												"value": "@concat('TRUNCATE TABLE ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm_2)",
												"type": "Expression"
											},
											"importSettings": {
												"type": "SnowflakeImportCopyCommand"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "ls_blob_storage",
												"type": "LinkedServiceReference"
											},
											"path": {
												"value": "@pipeline().globalParameters.rootDir",
												"type": "Expression"
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "HK_SOURCE_NAME",
														"type": "String"
													},
													"sink": {
														"name": "HK_SOURCE_NAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "HK_JOB_RUN_ID",
														"type": "String"
													},
													"sink": {
														"name": "HK_JOB_RUN_ID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "FIPSCode",
														"type": "String"
													},
													"sink": {
														"name": "FIPSCODE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "RegionCode",
														"type": "String"
													},
													"sink": {
														"name": "REGIONCODE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "RegionLongName",
														"type": "String"
													},
													"sink": {
														"name": "REGIONLONGNAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DistrictCode",
														"type": "String"
													},
													"sink": {
														"name": "DISTRICTCODE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "DistrictLongName",
														"type": "String"
													},
													"sink": {
														"name": "DISTRICTLONGNAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "SMACode",
														"type": "String"
													},
													"sink": {
														"name": "SMACODE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "SMALongName",
														"type": "String"
													},
													"sink": {
														"name": "SMALONGNAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "BTACode",
														"type": "String"
													},
													"sink": {
														"name": "BTACODE",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "BTALongName",
														"type": "String"
													},
													"sink": {
														"name": "BTALONGNAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "MsCntyLongName",
														"type": "String"
													},
													"sink": {
														"name": "MSCNTYLONGNAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "GEO_MODIFIEDDATETIME",
														"type": "String"
													},
													"sink": {
														"name": "GEO_MODIFIEDDATETIME",
														"type": "DateTime"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "ds_geoxref_excel",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_snowflake",
											"type": "DatasetReference",
											"parameters": {
												"p_tgt_table_name": {
													"value": "@pipeline().parameters.p_tgt_raw_table_nm_2",
													"type": "Expression"
												},
												"p_tgt_schema_name": {
													"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
													"type": "Expression"
												},
												"p_ls_DbName": {
													"value": "@pipeline().globalParameters.snow_rawDb",
													"type": "Expression"
												},
												"p_ls_Env": {
													"value": "@pipeline().globalParameters.environment",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "LOGISTICSPOSTALADDRESS"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "LOGISTICSPOSTALADDRESS"
					},
					"p_src_directory": {
						"type": "string",
						"defaultValue": "business_files"
					},
					"p_temp_file_nm": {
						"type": "string",
						"defaultValue": "logisticsPostalAddress_nala.parquet"
					},
					"p_temp_directory": {
						"type": "string",
						"defaultValue": "temp_files"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_LOCATION"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					},
					"p_tgt_raw_table_nm_2": {
						"type": "string",
						"defaultValue": "LOGISTICSPOSTALADDRESS_GEOXREF"
					}
				},
				"variables": {
					"v_lst_mod_tmstmp_geoXref": {
						"type": "String"
					},
					"v_lst_mod_tmstmp_ispaRegion": {
						"type": "String"
					},
					"v_lst_mod_tmstmp_fipsXref": {
						"type": "String"
					},
					"v_prev_max_timestamp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T11:09:42Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_mainaccount_to_dim_main_account')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "load_dim_main_account",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_AUDIT.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "set_last_mod_tmstmp_OpsFinance_Mapping",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prev_max_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')\n\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "switch_nala_retail_d365",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "mainaccount_to_adls_nala",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "SELECT ma1.RECID as RECID ,ma1.MAINACCOUNTID as MAINACCOUNTID ,ma1.NAME as NAME ,ma1.ACCOUNTCATEGORYREF as ACCOUNTCATEGORYREF ,ma1.LEDGERCHARTOFACCOUNTS as LEDGERCHARTOFACCOUNTS ,ma1.TYPE as TYPE ,ma1.POSTINGTYPE as POSTINGTYPE ,ma1.MONETARY as MONETARY ,ma1.MODIFIEDDATETIME as MODIFIEDDATETIME ,mac1.ACCOUNTCATEGORY as MAINACCOUNTCATEGORY_ACCOUNTCATEGORY ,mac1.DESCRIPTION as MAINACCOUNTCATEGORY_DESCRIPTION ,lcoa1.NAME as LEDGERCHARTOFACCOUNTS_NAME ,lcoa1.DESCRIPTION as LEDGERCHARTOFACCOUNTS_DESCRIPTION ,tet1.ENUMVALUELABEL as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_DIMENSIONLEDGERACCOUNTTYPE ,tet2.ENUMVALUELABEL as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_LEDGERPOSTINGTYPE ,ma2.LEVEL1 as MAINACCOUNT2_LEVEL1 ,ma2.LEVEL2 as MAINACCOUNT2_LEVEL2 ,ma2.LEVEL3 as MAINACCOUNT2_LEVEL3 ,ma2.LEVEL4 as MAINACCOUNT2_LEVEL4 ,ma2.LEVEL5 as MAINACCOUNT2_LEVEL5 ,ma2.LEVEL6 as MAINACCOUNT2_LEVEL6 ,ma1.MODIFIEDDATETIME FROM dbo.MAINACCOUNT ma1 left join dbo.MAINACCOUNTCATEGORY mac1 on \tma1.ACCOUNTCATEGORYREF = mac1.ACCOUNTCATEGORYREF left join dbo.LEDGERCHARTOFACCOUNTS lcoa1 on \tma1.LEDGERCHARTOFACCOUNTS = lcoa1.RECID left join (select ENUMNAME, ENUMVALUE \t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL \t\tfrom dbo.TIMEXTENDERENUMTABLE \t\twhere ENUMNAME = 'DimensionLedgerAccountType' \t\tgroup by ENUMNAME, ENUMVALUE) tet1 on \tma1.TYPE = tet1.ENUMVALUE left join (select ENUMNAME, ENUMVALUE \t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL \t\tfrom dbo.TIMEXTENDERENUMTABLE \t\twhere ENUMNAME = 'LedgerPostingType' \t\tgroup by ENUMNAME, ENUMVALUE) tet2 on \tma1.POSTINGTYPE = tet2.ENUMVALUE left join (select ma20.MAINACCOUNTID, ma20.LEDGERCHARTOFACCOUNTS \t\t\t, substring(ma20.MAINACCOUNTID, 1, 1) as LEVEL1 \t\t\t, isnull(ma20.LEVEL2_PROSPECT, ma20.LEVEL3_PROSPECT) as LEVEL2 \t\t\t, isnull(ma20.LEVEL3_PROSPECT, ma20.LEVEL4_PROSPECT) as LEVEL3 \t\t\t, isnull(ma20.LEVEL4_PROSPECT, ma20.LEVEL5_PROSPECT) as LEVEL4 \t\t\t, isnull(ma20.LEVEL5_PROSPECT, ma20.LEVEL6_PROSPECT) as LEVEL5 \t\t\t, ma20.LEVEL6_PROSPECT as LEVEL6 \t\tfrom (select ma_hier1.MAINACCOUNTID, ma_hier1.LEDGERCHARTOFACCOUNTS \t\t\t\t, ma_master2.MAINACCOUNTID as LEVEL2_PROSPECT \t\t\t\t, ma_master3.MAINACCOUNTID as LEVEL3_PROSPECT \t\t\t\t, ma_master4.MAINACCOUNTID as LEVEL4_PROSPECT \t\t\t\t, ma_master5.MAINACCOUNTID as LEVEL5_PROSPECT \t\t\t\t, ma_master6.MAINACCOUNTID as LEVEL6_PROSPECT \t\t\tfrom dbo.MAINACCOUNT ma_hier1 \t\t\tleft join dbo.MAINACCOUNT ma_master2 on \t\t\t\tleft(ma_master2.MAINACCOUNTID, 1) like '[0-9]' and \t\t\t\tma_master2.MAINACCOUNTID not like '%T' and \t\t\t\tma_hier1.LEDGERCHARTOFACCOUNTS = ma_master2.LEDGERCHARTOFACCOUNTS and \t\t\t\tcase when len(ma_hier1.MAINACCOUNTID) >= 2 then substring(ma_hier1.MAINACCOUNTID, 1, 2) else null end = ma_master2.MAINACCOUNTID \t\t\tleft join dbo.MAINACCOUNT ma_master3 on \t\t\t\tleft(ma_master3.MAINACCOUNTID, 1) like '[0-9]' and \t\t\t\tma_master3.MAINACCOUNTID not like '%T' and \t\t\t\tma_hier1.LEDGERCHARTOFACCOUNTS = ma_master3.LEDGERCHARTOFACCOUNTS and \t\t\t\tcase when len(ma_hier1.MAINACCOUNTID) >= 3 then substring(ma_hier1.MAINACCOUNTID, 1, 3) else null end = ma_master3.MAINACCOUNTID \t\t\tleft join dbo.MAINACCOUNT ma_master4 on \t\t\t\tleft(ma_master4.MAINACCOUNTID, 1) like '[0-9]' and \t\t\t\tma_master4.MAINACCOUNTID not like '%T' and \t\t\t\tma_hier1.LEDGERCHARTOFACCOUNTS = ma_master4.LEDGERCHARTOFACCOUNTS and \t\t\t\tcase when len(ma_hier1.MAINACCOUNTID) >= 4 then substring(ma_hier1.MAINACCOUNTID, 1, 4) else null end = ma_master4.MAINACCOUNTID \t\t\tleft join dbo.MAINACCOUNT ma_master5 on \t\t\t\tleft(ma_master5.MAINACCOUNTID, 1) like '[0-9]' and \t\t\t\tma_master5.MAINACCOUNTID not like '%T' and \t\t\t\tma_hier1.LEDGERCHARTOFACCOUNTS = ma_master5.LEDGERCHARTOFACCOUNTS and \t\t\t\tcase when len(ma_hier1.MAINACCOUNTID) >= 5 then substring(ma_hier1.MAINACCOUNTID, 1, 5) else null end = ma_master5.MAINACCOUNTID \t\t\tleft join dbo.MAINACCOUNT ma_master6 on \t\t\t\tleft(ma_master6.MAINACCOUNTID, 1) like '[0-9]' and \t\t\t\tma_master6.MAINACCOUNTID not like '%T' and \t\t\t\tma_hier1.LEDGERCHARTOFACCOUNTS = ma_master6.LEDGERCHARTOFACCOUNTS and \t\t\t\tcase when len(ma_hier1.MAINACCOUNTID) >= 6 then substring(ma_hier1.MAINACCOUNTID, 1, 6) else null end = ma_master6.MAINACCOUNTID \t\t\twhere left(ma_hier1.MAINACCOUNTID, 1) like '[0-9]' \t\t\tand ma_hier1.MAINACCOUNTID not like '%T') ma20 \t\t) ma2 on \tma1.MAINACCOUNTID = ma2.MAINACCOUNTID and \tma1.LEDGERCHARTOFACCOUNTS = ma2.LEDGERCHARTOFACCOUNTS",
														"type": "Expression"
													},
													"queryTimeout": "20:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "ParquetSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "ParquetWriteSettings"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "RECID",
																"type": "Int64",
																"physicalType": "bigint"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64",
																"physicalType": "INT_64"
															}
														},
														{
															"source": {
																"name": "MAINACCOUNTID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "MAINACCOUNTID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "NAME",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "ACCOUNTCATEGORYREF",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "ACCOUNTCATEGORYREF",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "LEDGERCHARTOFACCOUNTS",
																"type": "Int64",
																"physicalType": "bigint"
															},
															"sink": {
																"name": "LEDGERCHARTOFACCOUNTS",
																"type": "Int64",
																"physicalType": "INT_64"
															}
														},
														{
															"source": {
																"name": "TYPE",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "TYPE",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "POSTINGTYPE",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "POSTINGTYPE",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "MONETARY",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "MONETARY",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "MAINACCOUNTCATEGORY_ACCOUNTCATEGORY",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "MAINACCOUNTCATEGORY_ACCOUNTCATEGORY",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "MAINACCOUNTCATEGORY_DESCRIPTION",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "MAINACCOUNTCATEGORY_DESCRIPTION",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "LEDGERCHARTOFACCOUNTS_NAME",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "LEDGERCHARTOFACCOUNTS_NAME",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "LEDGERCHARTOFACCOUNTS_DESCRIPTION",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "LEDGERCHARTOFACCOUNTS_DESCRIPTION",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_DIMENSIONLEDGERACCOUNTTYPE",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_DIMENSIONLEDGERACCOUNTTYPE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_LEDGERPOSTINGTYPE",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_LEDGERPOSTINGTYPE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "MAINACCOUNT2_LEVEL1",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "MAINACCOUNT2_LEVEL1",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "MAINACCOUNT2_LEVEL2",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "MAINACCOUNT2_LEVEL2",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "MAINACCOUNT2_LEVEL3",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "MAINACCOUNT2_LEVEL3",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "MAINACCOUNT2_LEVEL4",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "MAINACCOUNT2_LEVEL4",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "MAINACCOUNT2_LEVEL5",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "MAINACCOUNT2_LEVEL5",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "MAINACCOUNT2_LEVEL6",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "MAINACCOUNT2_LEVEL6",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String",
																"physicalType": "UTF8"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": true
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_parquet",
													"type": "DatasetReference",
													"parameters": {
														"p_directory": {
															"value": "@pipeline().parameters.p_temp_directory",
															"type": "Expression"
														},
														"p_root_system": {
															"value": "@pipeline().globalParameters.rootDir",
															"type": "Expression"
														},
														"p_file_name": {
															"value": "@pipeline().parameters.p_temp_file_nm",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "mainaccount_to_adls_nala",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('mainaccount_to_adls_nala').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('mainaccount_to_adls_nala').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('mainaccount_to_adls_nala').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('mainaccount_to_adls_nala').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('mainaccount_to_adls_nala').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "2",
									"activities": [
										{
											"name": "mainaccount_to_adls_retail",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "SELECT ma1.RECID as RECID ,ma1.MAINACCOUNTID as MAINACCOUNTID ,ma1.NAME as NAME ,ma1.ACCOUNTCATEGORYREF as ACCOUNTCATEGORYREF ,ma1.LEDGERCHARTOFACCOUNTS as LEDGERCHARTOFACCOUNTS ,ma1.TYPE as TYPE ,ma1.POSTINGTYPE as POSTINGTYPE ,ma1.MONETARY as MONETARY ,ma1.MODIFIEDDATETIME as MODIFIEDDATETIME ,mac1.ACCOUNTCATEGORY as MAINACCOUNTCATEGORY_ACCOUNTCATEGORY ,mac1.DESCRIPTION as MAINACCOUNTCATEGORY_DESCRIPTION ,lcoa1.NAME as LEDGERCHARTOFACCOUNTS_NAME ,lcoa1.DESCRIPTION as LEDGERCHARTOFACCOUNTS_DESCRIPTION ,tet1.ENUMVALUELABEL as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_DIMENSIONLEDGERACCOUNTTYPE ,tet2.ENUMVALUELABEL as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_LEDGERPOSTINGTYPE ,ma2.LEVEL1 as MAINACCOUNT2_LEVEL1 ,ma2.LEVEL2 as MAINACCOUNT2_LEVEL2 ,ma2.LEVEL3 as MAINACCOUNT2_LEVEL3 ,ma2.LEVEL4 as MAINACCOUNT2_LEVEL4 ,ma2.LEVEL5 as MAINACCOUNT2_LEVEL5 ,ma2.LEVEL6 as MAINACCOUNT2_LEVEL6 ,ma1.MODIFIEDDATETIME FROM dbo.MAINACCOUNT ma1 left join dbo.MAINACCOUNTCATEGORY mac1 on \tma1.ACCOUNTCATEGORYREF = mac1.ACCOUNTCATEGORYREF left join dbo.LEDGERCHARTOFACCOUNTS lcoa1 on \tma1.LEDGERCHARTOFACCOUNTS = lcoa1.RECID left join (select ENUMNAME, ENUMVALUE \t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL \t\tfrom dbo.TIMEXTENDERENUMTABLE \t\twhere ENUMNAME = 'DimensionLedgerAccountType' \t\tgroup by ENUMNAME, ENUMVALUE) tet1 on \tma1.TYPE = tet1.ENUMVALUE left join (select ENUMNAME, ENUMVALUE \t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL \t\tfrom dbo.TIMEXTENDERENUMTABLE \t\twhere ENUMNAME = 'LedgerPostingType' \t\tgroup by ENUMNAME, ENUMVALUE) tet2 on \tma1.POSTINGTYPE = tet2.ENUMVALUE left join (select ma20.MAINACCOUNTID, ma20.LEDGERCHARTOFACCOUNTS \t\t\t, substring(ma20.MAINACCOUNTID, 1, 1) as LEVEL1 \t\t\t, isnull(ma20.LEVEL2_PROSPECT, ma20.LEVEL3_PROSPECT) as LEVEL2 \t\t\t, isnull(ma20.LEVEL3_PROSPECT, ma20.LEVEL4_PROSPECT) as LEVEL3 \t\t\t, isnull(ma20.LEVEL4_PROSPECT, ma20.LEVEL5_PROSPECT) as LEVEL4 \t\t\t, isnull(ma20.LEVEL5_PROSPECT, ma20.LEVEL6_PROSPECT) as LEVEL5 \t\t\t, ma20.LEVEL6_PROSPECT as LEVEL6 \t\tfrom (select ma_hier1.MAINACCOUNTID, ma_hier1.LEDGERCHARTOFACCOUNTS \t\t\t\t, ma_master2.MAINACCOUNTID as LEVEL2_PROSPECT \t\t\t\t, ma_master3.MAINACCOUNTID as LEVEL3_PROSPECT \t\t\t\t, ma_master4.MAINACCOUNTID as LEVEL4_PROSPECT \t\t\t\t, ma_master5.MAINACCOUNTID as LEVEL5_PROSPECT \t\t\t\t, ma_master6.MAINACCOUNTID as LEVEL6_PROSPECT \t\t\tfrom dbo.MAINACCOUNT ma_hier1 \t\t\tleft join dbo.MAINACCOUNT ma_master2 on \t\t\t\tleft(ma_master2.MAINACCOUNTID, 1) like '[0-9]' and \t\t\t\tma_master2.MAINACCOUNTID not like '%T' and \t\t\t\tma_hier1.LEDGERCHARTOFACCOUNTS = ma_master2.LEDGERCHARTOFACCOUNTS and \t\t\t\tcase when len(ma_hier1.MAINACCOUNTID) >= 2 then substring(ma_hier1.MAINACCOUNTID, 1, 2) else null end = ma_master2.MAINACCOUNTID \t\t\tleft join dbo.MAINACCOUNT ma_master3 on \t\t\t\tleft(ma_master3.MAINACCOUNTID, 1) like '[0-9]' and \t\t\t\tma_master3.MAINACCOUNTID not like '%T' and \t\t\t\tma_hier1.LEDGERCHARTOFACCOUNTS = ma_master3.LEDGERCHARTOFACCOUNTS and \t\t\t\tcase when len(ma_hier1.MAINACCOUNTID) >= 3 then substring(ma_hier1.MAINACCOUNTID, 1, 3) else null end = ma_master3.MAINACCOUNTID \t\t\tleft join dbo.MAINACCOUNT ma_master4 on \t\t\t\tleft(ma_master4.MAINACCOUNTID, 1) like '[0-9]' and \t\t\t\tma_master4.MAINACCOUNTID not like '%T' and \t\t\t\tma_hier1.LEDGERCHARTOFACCOUNTS = ma_master4.LEDGERCHARTOFACCOUNTS and \t\t\t\tcase when len(ma_hier1.MAINACCOUNTID) >= 4 then substring(ma_hier1.MAINACCOUNTID, 1, 4) else null end = ma_master4.MAINACCOUNTID \t\t\tleft join dbo.MAINACCOUNT ma_master5 on \t\t\t\tleft(ma_master5.MAINACCOUNTID, 1) like '[0-9]' and \t\t\t\tma_master5.MAINACCOUNTID not like '%T' and \t\t\t\tma_hier1.LEDGERCHARTOFACCOUNTS = ma_master5.LEDGERCHARTOFACCOUNTS and \t\t\t\tcase when len(ma_hier1.MAINACCOUNTID) >= 5 then substring(ma_hier1.MAINACCOUNTID, 1, 5) else null end = ma_master5.MAINACCOUNTID \t\t\tleft join dbo.MAINACCOUNT ma_master6 on \t\t\t\tleft(ma_master6.MAINACCOUNTID, 1) like '[0-9]' and \t\t\t\tma_master6.MAINACCOUNTID not like '%T' and \t\t\t\tma_hier1.LEDGERCHARTOFACCOUNTS = ma_master6.LEDGERCHARTOFACCOUNTS and \t\t\t\tcase when len(ma_hier1.MAINACCOUNTID) >= 6 then substring(ma_hier1.MAINACCOUNTID, 1, 6) else null end = ma_master6.MAINACCOUNTID \t\t\twhere left(ma_hier1.MAINACCOUNTID, 1) like '[0-9]' \t\t\tand ma_hier1.MAINACCOUNTID not like '%T') ma20 \t\t) ma2 on \tma1.MAINACCOUNTID = ma2.MAINACCOUNTID and \tma1.LEDGERCHARTOFACCOUNTS = ma2.LEDGERCHARTOFACCOUNTS",
														"type": "Expression"
													},
													"queryTimeout": "20:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "ParquetSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "ParquetWriteSettings"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "RECID",
																"type": "Int64",
																"physicalType": "bigint"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64",
																"physicalType": "INT_64"
															}
														},
														{
															"source": {
																"name": "MAINACCOUNTID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "MAINACCOUNTID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "NAME",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "ACCOUNTCATEGORYREF",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "ACCOUNTCATEGORYREF",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "LEDGERCHARTOFACCOUNTS",
																"type": "Int64",
																"physicalType": "bigint"
															},
															"sink": {
																"name": "LEDGERCHARTOFACCOUNTS",
																"type": "Int64",
																"physicalType": "INT_64"
															}
														},
														{
															"source": {
																"name": "TYPE",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "TYPE",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "POSTINGTYPE",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "POSTINGTYPE",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "MONETARY",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "MONETARY",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "MAINACCOUNTCATEGORY_ACCOUNTCATEGORY",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "MAINACCOUNTCATEGORY_ACCOUNTCATEGORY",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "MAINACCOUNTCATEGORY_DESCRIPTION",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "MAINACCOUNTCATEGORY_DESCRIPTION",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "LEDGERCHARTOFACCOUNTS_NAME",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "LEDGERCHARTOFACCOUNTS_NAME",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "LEDGERCHARTOFACCOUNTS_DESCRIPTION",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "LEDGERCHARTOFACCOUNTS_DESCRIPTION",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_DIMENSIONLEDGERACCOUNTTYPE",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_DIMENSIONLEDGERACCOUNTTYPE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_LEDGERPOSTINGTYPE",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_LEDGERPOSTINGTYPE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "MAINACCOUNT2_LEVEL1",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "MAINACCOUNT2_LEVEL1",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "MAINACCOUNT2_LEVEL2",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "MAINACCOUNT2_LEVEL2",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "MAINACCOUNT2_LEVEL3",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "MAINACCOUNT2_LEVEL3",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "MAINACCOUNT2_LEVEL4",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "MAINACCOUNT2_LEVEL4",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "MAINACCOUNT2_LEVEL5",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "MAINACCOUNT2_LEVEL5",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "MAINACCOUNT2_LEVEL6",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "MAINACCOUNT2_LEVEL6",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String",
																"physicalType": "UTF8"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": true
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.retail_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.retail_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_parquet",
													"type": "DatasetReference",
													"parameters": {
														"p_directory": {
															"value": "@pipeline().parameters.p_temp_directory",
															"type": "Expression"
														},
														"p_root_system": {
															"value": "@pipeline().globalParameters.rootDir",
															"type": "Expression"
														},
														"p_file_name": {
															"value": "@pipeline().parameters.p_temp_file_nm",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "retail_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "mainaccount_to_adls_retail",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('mainaccount_to_adls_retail').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('mainaccount_to_adls_retail').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('mainaccount_to_adls_retail').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('mainaccount_to_adls_retail').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_retail_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "retail_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('mainaccount_to_adls_retail').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "mainaccount_to_adls_d365",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "WarehouseSource",
											"additionalColumns": [
												{
													"name": "HK_JOB_RUN_ID",
													"value": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													}
												},
												{
													"name": "HK_SOURCE_NAME",
													"value": {
														"value": "@pipeline().parameters.p_src_nm",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "@concat('select\nma1.recid as RECID\n,ma1.mainaccountid as MAINACCOUNTID\n,ma1.name as NAME\n,ma1.accountcategoryref as ACCOUNTCATEGORYREF\n,ma1.ledgerchartofaccounts as LEDGERCHARTOFACCOUNTS\n,ma1.type as TYPE\n,ma1.postingtype as POSTINGTYPE\n,ma1.monetary as MONETARY\n,ma1.modifieddatetime as MODIFIEDDATETIME\n,mac1.accountcategory as MAINACCOUNTCATEGORY_ACCOUNTCATEGORY\n,mac1.description as MAINACCOUNTCATEGORY_DESCRIPTION\n,lcoa1.name as LEDGERCHARTOFACCOUNTS_NAME\n,lcoa1.description as LEDGERCHARTOFACCOUNTS_DESCRIPTION\n,tet1.enumvaluelabel as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_DIMENSIONLEDGERACCOUNTTYPE\n,tet2.enumvaluelabel as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_LEDGERPOSTINGTYPE\n,ma2.level1 as MAINACCOUNT2_LEVEL1\n,ma2.level2 as MAINACCOUNT2_LEVEL2\n,ma2.level3 as MAINACCOUNT2_LEVEL3\n,ma2.level4 as MAINACCOUNT2_LEVEL4\n,ma2.level5 as MAINACCOUNT2_LEVEL5\n,ma2.level6 as MAINACCOUNT2_LEVEL6\n,ma1.modifieddatetime as MODIFIEDDATETIME\nfrom\n',pipeline().globalParameters.d365_dbName,'.','mainaccount ma1\nleft join ',pipeline().globalParameters.d365_dbName,'.','mainaccountcategory mac1 on\n\tma1.accountcategoryref = mac1.accountcategoryref\nleft join ',pipeline().globalParameters.d365_dbName,'.','ledgerchartofaccounts lcoa1 on\n\tma1.ledgerchartofaccounts = lcoa1.recid\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as enumvaluelabel\n\t\tfrom ',pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n\t\twhere enumname = ''DimensionLedgerAccountType''\n\t\tgroup by enumname, enumvalue) tet1 on\n\tma1.type = tet1.enumvalue\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as enumvaluelabel\n\t\tfrom ',pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n\t\twhere enumname = ''LedgerPostingType''\n\t\tgroup by enumname, enumvalue) tet2 on\n\tma1.postingtype = tet2.enumvalue\nleft join (select ma20.mainaccountid, ma20.ledgerchartofaccounts\n\t\t\t, substring(ma20.mainaccountid, 1, 1) as level1\n\t\t\t, isnull(ma20.level2_prospect, ma20.level3_prospect) as level2\n\t\t\t, isnull(ma20.level3_prospect, ma20.level4_prospect) as level3\n\t\t\t, isnull(ma20.level4_prospect, ma20.level5_prospect) as level4\n\t\t\t, isnull(ma20.level5_prospect, ma20.level6_prospect) as level5\n\t\t\t, ma20.level6_prospect as level6\n\t\tfrom (select ma_hier1.mainaccountid, ma_hier1.ledgerchartofaccounts\n\t\t\t\t, ma_master2.mainaccountid as level2_prospect\n\t\t\t\t, ma_master3.mainaccountid as level3_prospect\n\t\t\t\t, ma_master4.mainaccountid as level4_prospect\n\t\t\t\t, ma_master5.mainaccountid as level5_prospect\n\t\t\t\t, ma_master6.mainaccountid as level6_prospect\n\t\t\tfrom ',pipeline().globalParameters.d365_dbName,'.','mainaccount ma_hier1\n\t\t\tleft join ',pipeline().globalParameters.d365_dbName,'.','mainaccount ma_master2 on\n\t\t\t\tleft(ma_master2.mainaccountid, 1) like ''[0-9]'' and\n\t\t\t\tma_master2.mainaccountid not like ''%T'' and\n\t\t\t\tma_hier1.ledgerchartofaccounts = ma_master2.ledgerchartofaccounts and\n\t\t\t\tcase when len(ma_hier1.mainaccountid) >= 2 then substring(ma_hier1.mainaccountid, 1, 2) else null end = ma_master2.mainaccountid\n\t\t\tleft join ',pipeline().globalParameters.d365_dbName,'.','mainaccount ma_master3 on\n\t\t\t\tleft(ma_master3.mainaccountid, 1) like ''[0-9]'' and\n\t\t\t\tma_master3.mainaccountid not like ''%T'' and\n\t\t\t\tma_hier1.ledgerchartofaccounts = ma_master3.ledgerchartofaccounts and\n\t\t\t\tcase when len(ma_hier1.mainaccountid) >= 3 then substring(ma_hier1.mainaccountid, 1, 3) else null end = ma_master3.mainaccountid\n\t\t\tleft join ',pipeline().globalParameters.d365_dbName,'.','mainaccount ma_master4 on\n\t\t\t\tleft(ma_master4.mainaccountid, 1) like ''[0-9]'' and\n\t\t\t\tma_master4.mainaccountid not like ''%T'' and\n\t\t\t\tma_hier1.ledgerchartofaccounts = ma_master4.ledgerchartofaccounts and\n\t\t\t\tcase when len(ma_hier1.mainaccountid) >= 4 then substring(ma_hier1.mainaccountid, 1, 4) else null end = ma_master4.mainaccountid\n\t\t\tleft join ',pipeline().globalParameters.d365_dbName,'.','mainaccount ma_master5 on\n\t\t\t\tleft(ma_master5.mainaccountid, 1) like ''[0-9]'' and\n\t\t\t\tma_master5.mainaccountid not like ''%T'' and\n\t\t\t\tma_hier1.ledgerchartofaccounts = ma_master5.ledgerchartofaccounts and\n\t\t\t\tcase when len(ma_hier1.mainaccountid) >= 5 then substring(ma_hier1.mainaccountid, 1, 5) else null end = ma_master5.mainaccountid\n\t\t\tleft join ',pipeline().globalParameters.d365_dbName,'.','mainaccount ma_master6 on\n\t\t\t\tleft(ma_master6.mainaccountid, 1) like ''[0-9]'' and\n\t\t\t\tma_master6.mainaccountid not like ''%T'' and\n\t\t\t\tma_hier1.ledgerchartofaccounts = ma_master6.ledgerchartofaccounts and\n\t\t\t\tcase when len(ma_hier1.mainaccountid) >= 6 then substring(ma_hier1.mainaccountid, 1, 6) else null end = ma_master6.mainaccountid\n\t\t\twhere left(ma_hier1.mainaccountid, 1) like ''[0-9]''\n\t\t\tand ma_hier1.mainaccountid not like ''%T'') ma20\n\t\t) ma2 on\n\tma1.mainaccountid = ma2.mainaccountid and\n\tma1.ledgerchartofaccounts = ma2.ledgerchartofaccounts')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "RECID",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "RECID",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "MAINACCOUNTID",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "MAINACCOUNTID",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "NAME",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "NAME",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "ACCOUNTCATEGORYREF",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "ACCOUNTCATEGORYREF",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "LEDGERCHARTOFACCOUNTS",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "LEDGERCHARTOFACCOUNTS",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "TYPE",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "TYPE",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "POSTINGTYPE",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "POSTINGTYPE",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "MONETARY",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "MONETARY",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "MAINACCOUNTCATEGORY_ACCOUNTCATEGORY",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "MAINACCOUNTCATEGORY_ACCOUNTCATEGORY",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "MAINACCOUNTCATEGORY_DESCRIPTION",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "MAINACCOUNTCATEGORY_DESCRIPTION",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "LEDGERCHARTOFACCOUNTS_NAME",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "LEDGERCHARTOFACCOUNTS_NAME",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "LEDGERCHARTOFACCOUNTS_DESCRIPTION",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "LEDGERCHARTOFACCOUNTS_DESCRIPTION",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_DIMENSIONLEDGERACCOUNTTYPE",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_DIMENSIONLEDGERACCOUNTTYPE",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_LEDGERPOSTINGTYPE",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_LEDGERPOSTINGTYPE",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "MAINACCOUNT2_LEVEL1",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "MAINACCOUNT2_LEVEL1",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "MAINACCOUNT2_LEVEL2",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "MAINACCOUNT2_LEVEL2",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "MAINACCOUNT2_LEVEL3",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "MAINACCOUNT2_LEVEL3",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "MAINACCOUNT2_LEVEL4",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "MAINACCOUNT2_LEVEL4",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "MAINACCOUNT2_LEVEL5",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "MAINACCOUNT2_LEVEL5",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "MAINACCOUNT2_LEVEL6",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "MAINACCOUNT2_LEVEL6",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "HK_JOB_RUN_ID",
														"type": "String"
													},
													"sink": {
														"name": "HK_JOB_RUN_ID",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "HK_SOURCE_NAME",
														"type": "String"
													},
													"sink": {
														"name": "HK_SOURCE_NAME",
														"type": "String",
														"physicalType": "UTF8"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": true
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_fabric_wh",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_parquet",
											"type": "DatasetReference",
											"parameters": {
												"p_directory": {
													"value": "@pipeline().parameters.p_temp_directory",
													"type": "Expression"
												},
												"p_root_system": {
													"value": "@pipeline().globalParameters.rootDir",
													"type": "Expression"
												},
												"p_file_name": {
													"value": "@pipeline().parameters.p_temp_file_nm",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "d365_raw_load_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "mainaccount_to_adls_d365",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('mainaccount_to_adls_d365').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('mainaccount_to_adls_d365').Error['message']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('mainaccount_to_adls_d365').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('mainaccount_to_adls_d365').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "d365_load_to_raw_fail",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "d365_raw_load_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('mainaccount_to_adls_d365').Error['message']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							]
						}
					},
					{
						"name": "get_last_modifieddatetime_OpsFinance_Mapping",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_excel",
								"type": "DatasetReference",
								"parameters": {
									"p_src_directory": {
										"value": "@pipeline().parameters.p_src_directory",
										"type": "Expression"
									},
									"p_src_file_name": {
										"value": "@pipeline().parameters.p_src_file_nm",
										"type": "Expression"
									},
									"p_src_root_system": {
										"value": "@pipeline().globalParameters.rootDir",
										"type": "Expression"
									},
									"p_sheet_name": {
										"value": "@pipeline().parameters.p_src_file_sheet",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"itemName",
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "set_last_mod_tmstmp_OpsFinance_Mapping",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "get_last_modifieddatetime_OpsFinance_Mapping",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_last_mod_tmstmp_opsfinance",
							"value": {
								"value": "@coalesce(activity('get_last_modifieddatetime_OpsFinance_Mapping').output.lastModified,'1950-01-01 00:00:00')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "load_dim_main_account",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "switch_nala_retail_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_load_dim_main_account",
								"type": "DataFlowReference",
								"parameters": {
									"df_prev_max_timestamp": {
										"value": "'@{variables('v_prev_max_timestamp')}'",
										"type": "Expression"
									},
									"df_last_mod_tmstmp_opsfinance": {
										"value": "'@{variables('v_last_mod_tmstmp_opsfinance')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SrcMainAccount": {
										"p_directory": {
											"value": "@pipeline().parameters.p_temp_directory",
											"type": "Expression"
										},
										"p_root_system": {
											"value": "@pipeline().globalParameters.rootDir",
											"type": "Expression"
										},
										"p_file_name": {
											"value": "@pipeline().parameters.p_temp_file_nm",
											"type": "Expression"
										}
									},
									"OpsFinanceMapping": {
										"p_src_directory": {
											"value": "@pipeline().parameters.p_src_directory",
											"type": "Expression"
										},
										"p_src_file_name": {
											"value": "@pipeline().parameters.p_src_file_nm",
											"type": "Expression"
										},
										"p_src_root_system": {
											"value": "@pipeline().globalParameters.rootDir",
											"type": "Expression"
										},
										"p_sheet_name": {
											"value": "@pipeline().parameters.p_src_file_sheet",
											"type": "Expression"
										}
									},
									"MainAccount": {
										"p_tgt_table_name": {
											"value": "@pipeline().parameters.p_tgt_raw_table_nm",
											"type": "Expression"
										},
										"p_tgt_schema_name": {
											"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
											"type": "Expression"
										},
										"p_ls_DbName": {
											"value": "@pipeline().globalParameters.snow_rawDb",
											"type": "Expression"
										},
										"p_ls_Env": {
											"value": "@pipeline().globalParameters.environment",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "IR-Snowflake-NALA",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "load_raw_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "load_dim_main_account",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('load_dim_main_account').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('load_dim_main_account').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('load_dim_main_account').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('load_dim_main_account').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "MAINACCOUNT"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "MAINACCOUNT"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_MAIN_ACCOUNT"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_directory": {
						"type": "string",
						"defaultValue": "business_files"
					},
					"p_temp_file_nm": {
						"type": "string",
						"defaultValue": "mainaccount_nala.parquet"
					},
					"p_src_file_nm": {
						"type": "string",
						"defaultValue": "OpsFinance_Mapping.xlsx"
					},
					"p_temp_directory": {
						"type": "string",
						"defaultValue": "temp_files"
					},
					"p_src_file_sheet": {
						"type": "string",
						"defaultValue": "MainAcc_Mapping"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prev_max_timestamp": {
						"type": "String"
					},
					"v_last_mod_tmstmp_opsfinance": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T12:07:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_salesline_to_fact_sales_order')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prv_max_upd_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "load_to_raw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "load_to_raw",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "switch_nala_retail_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_load_fact_sales_order",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"salesLineParquet": {
										"p_directory": {
											"value": "@pipeline().parameters.p_temp_directory",
											"type": "Expression"
										},
										"p_root_system": {
											"value": "@pipeline().globalParameters.rootDir",
											"type": "Expression"
										},
										"p_file_name": {
											"value": "@pipeline().parameters.p_temp_file_nm",
											"type": "Expression"
										}
									},
									"salesLine": {
										"p_tgt_table_name": {
											"value": "@pipeline().parameters.p_tgt_raw_table_nm",
											"type": "Expression"
										},
										"p_tgt_schema_name": {
											"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
											"type": "Expression"
										},
										"p_ls_DbName": {
											"value": "@pipeline().globalParameters.snow_rawDb",
											"type": "Expression"
										},
										"p_ls_Env": {
											"value": "@pipeline().globalParameters.environment",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "IR-Snowflake-NALA",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "load_raw_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "load_to_raw",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('load_to_raw').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('load_to_raw').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('load_to_raw').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('load_to_raw').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_retail_d365",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_adls",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select \n    ltrim(rtrim(sl1.DATAAREAID)) as DATAAREAID,\n     ltrim(rtrim(sl1.INVENTTRANSID)) as INVENTTRANSID,\n     ltrim(rtrim(sl1.RECID)) as RECID,\n     ltrim(rtrim(sl1.CUSTACCOUNT)) as CUSTACCOUNT,\n     ltrim(rtrim(sl1.CURRENCYCODE)) as CURRENCYCODE,\n     ltrim(rtrim(sl1.CUSTGROUP)) as CUSTGROUP,\n     ltrim(rtrim(sl1.DEFAULTDIMENSION)) as DEFAULTDIMENSION,\n     ltrim(rtrim(sl1.TRANSACTIONCODE)) as TRANSACTIONCODE,\n     ltrim(rtrim(sl1.INVENTDIMID)) as INVENTDIMID,\n     ltrim(rtrim(sl1.ITEMID)) as ITEMID,\n     ltrim(rtrim(sl1.MCSALTITEMNO)) as MCSALTITEMNO,\n     ltrim(rtrim(sl1.TPX_RETURNREASONCODEID)) as TPX_RETURNREASONCODEID,\n     ltrim(rtrim(sl1.DELIVERYPOSTALADDRESS)) as DELIVERYPOSTALADDRESS,\n     ltrim(rtrim(sl1.SHIPCARRIERPOSTALADDRESS)) as SHIPCARRIERPOSTALADDRESS,\n     ltrim(rtrim(sl1.DLVMODE)) as DLVMODE,\n     ltrim(rtrim(sl1.DLVTERM)) as DLVTERM,\n     ltrim(rtrim(sl1.SALESCATEGORY)) as SALESCATEGORY,\n     ltrim(rtrim(sl1.RETURNDISPOSITIONCODEID)) as RETURNDISPOSITIONCODEID,\n     ltrim(rtrim(sl1.SALESGROUP)) as SALESGROUP,\n     ltrim(rtrim(sl1.SALESID)) as SALESID,\n     ltrim(rtrim(sl1.SHIPCARRIERID)) as SHIPCARRIERID,\n     ltrim(rtrim(sl1.TAXGROUP)) as TAXGROUP,\n     ltrim(rtrim(sl1.TAXITEMGROUP)) as TAXITEMGROUP,\n     ltrim(rtrim(sl1.MCSATHENACATALOG)) as MCSATHENACATALOG,\n     ltrim(rtrim(sl1.SALESUNIT)) as SALESUNIT,\n     ltrim(rtrim(sl1.CREATEDBY)) as CREATEDBY,\n     ltrim(rtrim(sl1.LINEDISC)) as LINEDISC,\n     ltrim(rtrim(sl1.LINEPERCENT)) as LINEPERCENT,\n     ltrim(rtrim(sl1.RETURNSTATUS)) as RETURNSTATUS,\n     ltrim(rtrim(sl1.SALESSTATUS)) as SALESSTATUS,\n     ltrim(rtrim(sl1.SHIPCARRIERDLVTYPE)) as SHIPCARRIERDLVTYPE,\n     ltrim(rtrim(sl1.DELIVERYTYPE)) as DELIVERYTYPE,\n     ltrim(rtrim(sl1.COMPLETE)) as COMPLETE,\n     ltrim(rtrim(sl1.ORDERBLOCKED)) as ORDERBLOCKED,\n     ltrim(rtrim(sl1.SCRAP)) as SCRAP,\n     ltrim(rtrim(sl1.STOCKEDPRODUCT)) as STOCKEDPRODUCT,\n     convert(date,ltrim(rtrim(sl1.CONFIRMEDDLV)), 10) as CONFIRMEDDLV,\n     convert(date,ltrim(rtrim(sl1.RECEIPTDATECONFIRMED)), 10) as RECEIPTDATECONFIRMED,\n     convert(date,ltrim(rtrim(sl1.SHIPPINGDATECONFIRMED)), 10) as SHIPPINGDATECONFIRMED,\n     convert(date,ltrim(rtrim(sl1.TPX_MANUFACTUREDATE)), 10) as TPX_MANUFACTUREDATE,\n     convert(date,ltrim(rtrim(sl1.TPX_RELATEDORDERDATE)), 10) as TPX_RELATEDORDERDATE,\n     convert(date,ltrim(rtrim(sl1.RECEIPTDATEREQUESTED)), 10) as RECEIPTDATEREQUESTED,\n     convert(date,ltrim(rtrim(sl1.RETURNARRIVALDATE)), 10) as RETURNARRIVALDATE,\n     convert(date,ltrim(rtrim(sl1.RETURNCLOSEDDATE)), 10) as RETURNCLOSEDDATE,\n     convert(date,ltrim(rtrim(sl1.RETURNDEADLINE)), 10) as RETURNDEADLINE,\n     convert(datetime,ltrim(rtrim(sl1.CREATEDDATETIME)), 10) as CREATEDDATETIME,\n     convert(date,ltrim(rtrim(sl1.SHIPPINGDATEREQUESTED)), 10) as SHIPPINGDATEREQUESTED,\n     ltrim(rtrim(sl1.LINENUM)) as LINENUM,\n     ltrim(rtrim(sl1.TPX_PRODUCTIONTIME)) as TPX_PRODUCTIONTIME,\n     ltrim(rtrim(sl1.TPX_REGISTRYNUMBER)) as TPX_REGISTRYNUMBER,\n     ltrim(rtrim(sl1.INVENTTRANSIDRETURN)) as INVENTTRANSIDRETURN,\n     ltrim(rtrim(sl1.EXPECTEDRETQTY)) as EXPECTEDRETQTY,\n     ltrim(rtrim(sl1.QTYORDERED)) as QTYORDERED,\n     ltrim(rtrim(sl1.SALESQTY)) as SALESQTY,\n     ltrim(rtrim(sl1.SALESPRICE)) as SALESPRICE,\n     ltrim(rtrim(sl1.PRICEUNIT)) as PRICEUNIT,\n     ltrim(rtrim(sl1.COSTPRICE)) as COSTPRICE,\n     ltrim(rtrim(sl1.LINEAMOUNT)) as LINEAMOUNT,\n     ltrim(rtrim(sl1.REMAINSALESPHYSICAL)) as REMAINSALESPHYSICAL,\n     ltrim(rtrim(sl1.REMAINSALESFINANCIAL)) as REMAINSALESFINANCIAL,\n     ltrim(rtrim(sl1.TPX_KITITEMID)) as TPX_KITITEMID,\n     ltrim(rtrim(sl1.MCSTAGID)) as MCSTAGID,\n     convert(date,ltrim(rtrim(sl1.TPXORIGRECEIPTDATECONFIRMED)), 10) as TPXORIGRECEIPTDATECONFIRMED,\n     ltrim(rtrim(sl1.MCSALTSERIALNO)) as MCSALTSERIALNO,\n     ltrim(rtrim(sl1.MULTILNDISC)) as MULTILNDISC,\n     ltrim(rtrim(sl1.MULTILNPERCENT)) as MULTILNPERCENT,\n    convert(datetime , ltrim(rtrim(sl1.MODIFIEDDATETIME)), 10) as MODIFIEDDATETIME,\n    ltrim(rtrim(def1.BUSINESS_UNIT)) as DEFAULTDIMENSION_BUSINESS_UNIT,\n    convert(datetime ,ltrim(rtrim(def1.DEFAULTDIMENSION_MODIFIEDDATETIME)), 10) as DEFAULTDIMENSION_MODIFIEDDATETIME,\n    ltrim(rtrim(st1.SMMCAMPAIGNID)) as SALESTABLE_SMMCAMPAIGNID,\n    ltrim(rtrim(st1.COMMISSIONGROUP)) as SALESTABLE_COMMISSIONGROUP,\n    ltrim(rtrim(st1.INVOICEACCOUNT)) as SALESTABLE_INVOICEACCOUNT,\n    ltrim(rtrim(st1.MARKUPGROUP)) as SALESTABLE_MARKUPGROUP,\n    ltrim(rtrim(st1.PAYMMODE)) as SALESTABLE_PAYMMODE,\n    ltrim(rtrim(st1.PAYMENT)) as SALESTABLE_PAYMENT,\n    ltrim(rtrim(st1.RETURNREASONCODEID)) as SALESTABLE_RETURNREASONCODEID,\n    ltrim(rtrim(st1.LINEDISC)) as SALESTABLE_LINEDISC,\n    ltrim(rtrim(st1.SALESORIGINID)) as SALESTABLE_SALESORIGINID,\n    ltrim(rtrim(st1.SALESPOOLID)) as SALESTABLE_SALESPOOLID,\n    ltrim(rtrim(st1.PRICEGROUPID)) as SALESTABLE_PRICEGROUPID,\n    ltrim(rtrim(st1.INVENTSITEID)) as SALESTABLE_INVENTSITEID,\n    ltrim(rtrim(st1.MODIFIEDBY)) as SALESTABLE_MODIFIEDBY,\n    ltrim(rtrim(st1.CREATEDBY)) as SALESTABLE_CREATEDBY,\n    ltrim(rtrim(st1.INVENTLOCATIONID)) as SALESTABLE_INVENTLOCATIONID,\n    ltrim(rtrim(st1.WORKERSALESRESPONSIBLE)) as SALESTABLE_WORKERSALESRESPONSIBLE,\n    ltrim(rtrim(st1.WORKERSALESTAKER)) as SALESTABLE_WORKERSALESTAKER,\n    convert(date,ltrim(rtrim(st1.DEADLINE)), 10) as SALESTABLE_DEADLINE,\n    convert(date, ltrim(rtrim(st1.DELIVERYDATE)), 10) as SALESTABLE_DELIVERYDATE,\n    ltrim(rtrim(st1.DOCUMENTSTATUS)) as SALESTABLE_DOCUMENTSTATUS,\n    ltrim(rtrim(st1.RETURNSTATUS)) as SALESTABLE_RETURNSTATUS,\n    ltrim(rtrim(st1.SALESSTATUS)) as SALESTABLE_SALESSTATUS,\n    ltrim(rtrim(st1.SALESTYPE)) as SALESTABLE_SALESTYPE,\n    ltrim(rtrim(st1.ATAGENT)) as SALESTABLE_ATAGENT,\n    ltrim(rtrim(st1.SHIPCARRIERBLINDSHIPMENT)) as SALESTABLE_SHIPCARRIERBLINDSHIPMENT,\n    ltrim(rtrim(st1.SHIPCARRIEREXPEDITEDSHIPMENT)) as SALESTABLE_SHIPCARRIEREXPEDITEDSHIPMENT,\n    ltrim(rtrim(st1.ORDERBLOCKED)) as SALESTABLE_ORDERBLOCKED,\n    ltrim(rtrim(st1.MCRORDERSTOPPED)) as SALESTABLE_MCRORDERSTOPPED,\n    ltrim(rtrim(st1.SHIPCARRIERFUELSURCHARGE)) as SALESTABLE_SHIPCARRIERFUELSURCHARGE,\n    convert(datetime,  ltrim(rtrim(st1.CREATEDDATETIME)), 10) as SALESTABLE_CREATEDDATETIME,\n    convert(date,ltrim(rtrim(st1.RECEIPTDATEREQUESTED)), 10) as SALESTABLE_RECEIPTDATEREQUESTED,\n    convert(date,ltrim(rtrim(st1.SHIPPINGDATEREQUESTED)), 10) as SALESTABLE_SHIPPINGDATEREQUESTED,\n    convert(date, ltrim(rtrim(st1.RECEIPTDATECONFIRMED)), 10) as SALESTABLE_RECEIPTDATECONFIRMED,\n    ltrim(rtrim(st1.NDS_SUSALLOWCHG)) as SALESTABLE_NDS_SUSALLOWCHG,\n    ltrim(rtrim(st1.SHIPCARRIERRESIDENTIAL)) as SALESTABLE_SHIPCARRIERRESIDENTIAL,\n    convert(date,ltrim(rtrim(st1.TPXORIGRECEIPTDATECONFIRMED)), 10) as SALESTABLE_TPXORIGRECEIPTDATECONFIRMED,\n     convert(datetime, ltrim(rtrim(st1.MODIFIEDDATETIME)), 10) as SALESTABLE_MODIFIEDDATETIME,\n    ltrim(rtrim(id1.CONFIGID)) as INVENTDIM1_CONFIGID,\n    convert(datetime, ltrim(rtrim(id1.MODIFIEDDATETIME)), 10) as INVENTDIM1_MODIFIEDDATETIME,\n    ltrim(rtrim(idc1.PDMSTATUS)) as INVENTDIMCOMBINATION_PDMSTATUS,\n   convert(datetime, ltrim(rtrim(idc1.MODIFIEDDATETIME)), 10) as INVENTDIMCOMBINATION_MODIFIEDDATETIME,\n    ltrim(rtrim(ttp1.PROMOTIONID)) as TAMTRADEPROMOTION_PROMOTIONID,\n    convert(datetime, ltrim(rtrim(ttp1.MODIFIEDDATETIME)), 10) as TAMTRADEPROMOTION_MODIFIEDDATETIME,\n    ltrim(rtrim(mslds1.DROPSHIPMENT)) as MCRSALESLINEDROPSHIPMENT_DROPSHIPMENT,\n    convert(date,ltrim(rtrim(iokey1.FIRSTLARGEITEMSHIPDATE)), 10) as CUSTPACKINGSLIPTRANS_FIRSTLARGEITEMSHIPDATE,\n    ltrim(rtrim(iokey1.FIRSTLARGEITEMSHIPPEDQTY)) as CUSTPACKINGSLIPTRANS_FIRSTLARGEITEMSHIPPEDQTY,\n    ltrim(rtrim(iokey1.SHIPPEDQTY)) as CUSTPACKINGSLIPTRANS_SHIPPEDQTY,\n    convert(datetime, ltrim(rtrim(iokey1.MODIFIEDDATETIME)), 10) as CUSTPACKINGSLIPTRANS_MODIFIEDDATETIME,\n    convert(datetime, ltrim(rtrim(sl2.CREATEDDATETIME)), 10) as SALESLINE2_CREATEDDATETIME,\n    ltrim(rtrim(sl2.INVENTDIMID)) as SALESLINE2_INVENTDIMID,\n    ltrim(rtrim(sl2.SALESID)) as SALESLINE2_SALESID,\n    convert(datetime, ltrim(rtrim(sl2.MODIFIEDDATETIME)), 10) as SALESLINE2_MODIFIEDDATETIME,\n    ltrim(rtrim(id2.TIMEZONE)) as INVENTDIM2_TIMEZONE,\n    convert(datetime, ltrim(rtrim(id2.INVENTDIM_MODIFIEDDATETIME)), 10) as INVENTDIM2_INVENTDIM_MODIFIEDDATETIME,\n    convert(datetime, ltrim(rtrim(id2.INVENTSITE_MODIFIEDDATETIME)), 10) as INVENTDIM2_INVENTSITE_MODIFIEDDATETIME,\n    ltrim(rtrim(da1.TIMEZONE)) as DATAAREA1_TIMEZONE,\n    ltrim(rtrim(tzi1.TIMEBIAS)) as TIMEZONEINFO1_TIMEBIAS,\n    ltrim(rtrim(da2.TIMEZONE)) as DATAAREA2_TIMEZONE,\n    ltrim(rtrim(tzi2.TIMEBIAS)) as TIMEZONEINFO2_TIMEBIAS,\n    ltrim(rtrim(da3.TIMEZONE)) as DATAAREA3_TIMEZONE,\n    ltrim(rtrim(tzi3.TIMEBIAS)) as TIMEZONEINFO3_TIMEBIAS,\n    ltrim(rtrim(mslpo1.RECID)) as MCRSALESLINEPRICEOVERRIDE1_RECID,\n    ltrim(rtrim(mslpo2.REASONCODE)) as MCRSALESLINEPRICEOVERRIDE2_REASONCODE,\n    ltrim(rtrim(tport1.DESCRIPTION)) as TPXPRICEOVERRIDEREASONTABLE_DESCRIPTION,\n    ltrim(rtrim(tet1.ENUMVALUELABEL)) as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_DOCUMENTSTATUS,\n    ltrim(rtrim(tet2.ENUMVALUELABEL)) as TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_RETURNSTATUSHEADER,\n    ltrim(rtrim(tet3.ENUMVALUELABEL)) as TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_SALESSTATUSHEADER,\n    ltrim(rtrim(tet4.ENUMVALUELABEL)) as TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_RETURNSTATUSLINE,\n    ltrim(rtrim(tet5.ENUMVALUELABEL)) as TIMEXTENDERENUMTABLE5_ENUMVALUELABEL_SALESSTATUSLINE,\n    ltrim(rtrim(tet6.ENUMVALUELABEL)) as TIMEXTENDERENUMTABLE6_ENUMVALUELABEL_SALESTYPE,\n    ltrim(rtrim(tet7.ENUMVALUELABEL)) as TIMEXTENDERENUMTABLE7_ENUMVALUELABEL_SHIPCARRIERDLVTYPE,\n    ltrim(rtrim(tet8.ENUMVALUELABEL)) as TIMEXTENDERENUMTABLE8_ENUMVALUELABEL_TRADELINEDLVTYPE,\n    ltrim(rtrim(rtt1.DISCOUNTORIGINTYPE)) as RETAILTRANSACTIONDISCOUNTTRANS_DISCOUNTORIGINTYPE,\n    ltrim(rtrim(tet9.ENUMVALUELABEL)) as TIMEXTENDERENUMTABLE8_ENUMVALUELABEL_RETAILTRANSACTIONTYPE,\n    null as RETAILPERIODICDISCOUNT_NAME,\n    null as RETAILPERIODICDISCOUNT_MODIFIEDDATETIME,\n    null as RETAILTRANSACTIONTABLE_DISCAMOUNT,\n    null as RETAILTRANSACTIONTABLE_MODIFIEDDATETIME,\n    null as RETAILDISCOUNTCODE_DISCOUNTCODE,\n    null as RETAILPERIODICDISCOUNTLINE_DISCPCT,\n    null as TIMEXTENDERENUMTABLE10_ENUMVALUELABEL_DISCOUNTORIGINTYPE,\n    null as TIMEXTENDERENUMTABLE11_ENUMVALUELABEL_PERIODICDISCOUNTTYPE,\n    ps1.name as PDMSTATUS_NAME,\n\tinvs.PRODDATE,\n    (\n        SELECT\n            MAX(LastUpdateDate)\n        FROM\n            (\n                VALUES\n                    (sl1.MODIFIEDDATETIME),\n                    (\n                        isnull(\n                            def1.DEFAULTDIMENSION_MODIFIEDDATETIME,\n                            '1950-01-01'\n                        )\n                    ),\n                    (isnull(st1.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull(id1.MODIFIEDDATETIME, '1950-01-01')),\n\t\t\t\t\t(ISNULL(invs.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull(idc1.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull(ttp1.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull(iokey1.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull(sl2.MODIFIEDDATETIME, '1950-01-01')),\n                    (\n                        isnull(id2.INVENTDIM_MODIFIEDDATETIME, '1950-01-01')\n                    ),\n                    (\n                        isnull(id2.INVENTSITE_MODIFIEDDATETIME, '1950-01-01')\n                    )\n            ) AS UpdateDate(LastUpdateDate)\n    ) AS LATEST_MODIFIEDDATETIME\nfrom\ndbo.SALESLINE sl1\nleft join (select distinct sl10.DEFAULTDIMENSION\n\t\t\t\t, max(\n\t\t\t\t\tcase when da1.NAME = 'BusinessUnit' then davsi1.DISPLAYVALUE\n\t\t\t\t\t\telse null\n\t\t\t\t\t\tend\n\t\t\t\t\t) over (partition by sl10.DEFAULTDIMENSION) as BUSINESS_UNIT\n\t\t\t\t, max(\n\t\t\t\t\t(select max(i) from (values (davsi1.MODIFIEDDATETIME), (dav1.MODIFIEDDATETIME), (da1.MODIFIEDDATETIME), (desc1.DESC_MODIFIEDDATETIME)) AS T(i))\n\t\t\t\t\t) over (partition by sl10.DEFAULTDIMENSION) as DEFAULTDIMENSION_MODIFIEDDATETIME\n\t\t\tfrom (select distinct DEFAULTDIMENSION from dbo.SALESLINE) sl10\n\t\t\tleft join dbo.DIMENSIONATTRIBUTEVALUESETITEM davsi1 on\n\t\t\t\tsl10.DEFAULTDIMENSION = davsi1.DIMENSIONATTRIBUTEVALUESET\n\t\t\tleft join dbo.DIMENSIONATTRIBUTEVALUE dav1 on\n\t\t\t\tdavsi1.DIMENSIONATTRIBUTEVALUE = dav1.RECID\n\t\t\tleft join dbo.DIMENSIONATTRIBUTE da1 on\n\t\t\t\tdav1.DIMENSIONATTRIBUTE = da1.RECID\n\t\t\tleft join (select dft1.VALUE, da2.NAME, dft1.DESCRIPTION\n\t\t\t\t\t\t\t, (select max(i) from (values (dft1.MODIFIEDDATETIME), (dadc1.MODIFIEDDATETIME), (da2.MODIFIEDDATETIME)) AS T(i)) as DESC_MODIFIEDDATETIME\n\t\t\t\t\t\tfrom dbo.DIMENSIONFINANCIALTAG dft1\n\t\t\t\t\t\tleft join dbo.DIMENSIONATTRIBUTEDIRCATEGORY dadc1 on\n\t\t\t\t\t\t\tdft1.FINANCIALTAGCATEGORY = dadc1.DIRCATEGORY\n\t\t\t\t\t\tleft join dbo.DIMENSIONATTRIBUTE da2 on\n\t\t\t\t\t\t\tdadc1.DIMENSIONATTRIBUTE = da2.RECID) desc1 on\n\t\t\t\tdavsi1.DISPLAYVALUE = desc1.VALUE and\n\t\t\t\tda1.NAME = desc1.NAME\n\t\t\t) def1 on\n\tsl1.DEFAULTDIMENSION = def1.DEFAULTDIMENSION\nleft join dbo.SALESTABLE st1 on\n\tsl1.DATAAREAID = st1.DATAAREAID and\n\tsl1.SALESID = st1.SALESID\nleft join dbo.INVENTDIM id1 on\n\tsl1.DATAAREAID = id1.DATAAREAID and\n\tsl1.INVENTDIMID = id1.INVENTDIMID\nLEFT JOIN dbo.INVENTSERIAL invs ON sl1.DATAAREAID = invs.DATAAREAID\n\tAND sl1.ITEMID = invs.ITEMID\n\tAND id1.INVENTSERIALID = invs.INVENTSERIALID\nleft join (select idc10.DATAAREAID, idc10.ITEMID, id10.CONFIGID, idc10.PDMSTATUS\n\t\t\t, max(id10.MODIFIEDDATETIME) as MODIFIEDDATETIME\n\t\tfrom dbo.INVENTDIMCOMBINATION idc10\n\t\tleft join dbo.INVENTDIM id10 on\n\t\t\tidc10.DATAAREAID = id10.DATAAREAID and\n\t\t\tidc10.INVENTDIMID = id10.INVENTDIMID\n\t\tgroup by idc10.DATAAREAID, idc10.ITEMID, id10.CONFIGID, idc10.PDMSTATUS) idc1 on\n\tsl1.DATAAREAID = idc1.DATAAREAID and\n\tid1.CONFIGID = idc1.CONFIGID and\n\tsl1.ITEMID = idc1.ITEMID\nleft join (select PROMOTIONDESCRIPTION\n\t\t\t, max(PROMOTIONID) as PROMOTIONID\n\t\t\t, max(MODIFIEDDATETIME) as MODIFIEDDATETIME\n\t\tfrom dbo.TAMTRADEPROMOTION\n\t\twhere isnull(PROMOTIONDESCRIPTION, '') != ''\n\t\tgroup by PROMOTIONDESCRIPTION) ttp1 on\n\tsl1.MCSATHENACATALOG = ttp1.PROMOTIONDESCRIPTION\nleft join dbo.MCRSALESLINEDROPSHIPMENT mslds1 on\n\tsl1.DATAAREAID = mslds1.DATAAREAID and\n\tsl1.RECID = mslds1.SALESLINE\nleft join (select distinct cpst1.DATAAREAID, cpst1.INVENTTRANSID\n\t\t\t, min(cpst2.FIRSTLARGEITEMSHIPDATE) over (partition by cpst1.DATAAREAID, cpst1.INVENTTRANSID) as FIRSTLARGEITEMSHIPDATE\n\t\t\t, sum(case when cpst2.FIRSTLARGEITEMSHIPDATE = cpst2.LARGEITEMSHIPDATE then cpst1.QTY else 0 end) over (partition by cpst1.DATAAREAID, cpst1.INVENTTRANSID) as FIRSTLARGEITEMSHIPPEDQTY\n\t\t\t, sum(cpst1.QTY) over (partition by cpst1.DATAAREAID, cpst1.INVENTTRANSID) as SHIPPEDQTY\n\t\t\t, max(cpst1.MODIFIEDDATETIME) over (partition by cpst1.DATAAREAID, cpst1.INVENTTRANSID) as MODIFIEDDATETIME\n\t\tfrom dbo.CUSTPACKINGSLIPTRANS cpst1\n\t\tleft join (select cpst10.DATAAREAID, cpst10.INVENTTRANSID\n\t\t\t\t\t, min(it10.FIRSTLARGEITEMSHIPDATE) as FIRSTLARGEITEMSHIPDATE\n\t\t\t\t\t, max(it10.LARGEITEMSHIPDATE) as LARGEITEMSHIPDATE\n\t\t\t\tfrom dbo.CUSTPACKINGSLIPTRANS cpst10\n\t\t\t\tleft join (select cpst20.DATAAREAID, cpst20.INVENTTRANSID\n\t\t\t\t\t\t\t\t, max(case when it20.ISLARGEITEM = 1 then scp20.SHIPDATE else null end) over (partition by cpst20.DATAAREAID, cpst20.INVENTTRANSID) as LARGEITEMSHIPDATE\n\t\t\t\t\t\t\t\t, min(case when it20.ISLARGEITEM = 1 then scp20.SHIPDATE else null end) over (partition by cpst20.DATAAREAID, cpst20.SALESID) as FIRSTLARGEITEMSHIPDATE\n\t\t\t\t\t\t\tfrom dbo.CUSTPACKINGSLIPTRANS cpst20\n\t\t\t\t\t\t\tleft join dbo.SHIPCARRIERPACKAGE scp20 on\n\t\t\t\t\t\t\t\tcpst20.PACKINGSLIPID = scp20.PACKINGSLIPID and\n\t\t\t\t\t\t\t\tcpst20.DATAAREAID = scp20.DATAAREAID and\n\t\t\t\t\t\t\t\tcpst20.ORIGSALESID = scp20.SALESID\n\t\t\t\t\t\t\tleft join (select it10.DATAAREAID, it10.ITEMID\n\t\t\t\t\t\t\t\t\t\t, max(case when def10.E_CATEGORY in ('10', '50', '60') then 1 else 0 end) as ISLARGEITEM\n\t\t\t\t\t\t\t\t\tfrom dbo.INVENTTABLE it10\n\t\t\t\t\t\t\t\t\tleft join (select distinct it1.DEFAULTDIMENSION\n\t\t\t\t\t\t\t\t\t\t\t\t\t, max(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase when da1.NAME = 'E_Category' then davsi1.DISPLAYVALUE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse null\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t) over (partition by it1.DEFAULTDIMENSION) as E_CATEGORY\n\t\t\t\t\t\t\t\t\t\t\t\tfrom (select distinct DEFAULTDIMENSION from dbo.INVENTTABLE) it1\n\t\t\t\t\t\t\t\t\t\t\t\tleft join dbo.DIMENSIONATTRIBUTEVALUESETITEM davsi1 on\n\t\t\t\t\t\t\t\t\t\t\t\t\tit1.DEFAULTDIMENSION = davsi1.DIMENSIONATTRIBUTEVALUESET\n\t\t\t\t\t\t\t\t\t\t\t\tleft join dbo.DIMENSIONATTRIBUTEVALUE dav1 on\n\t\t\t\t\t\t\t\t\t\t\t\t\tdavsi1.DIMENSIONATTRIBUTEVALUE = dav1.RECID\n\t\t\t\t\t\t\t\t\t\t\t\tleft join dbo.DIMENSIONATTRIBUTE da1 on\n\t\t\t\t\t\t\t\t\t\t\t\t\tdav1.DIMENSIONATTRIBUTE = da1.RECID\n\t\t\t\t\t\t\t\t\t\t\t\t) def10 on\n\t\t\t\t\t\t\t\t\t\tit10.DEFAULTDIMENSION = def10.DEFAULTDIMENSION\n\t\t\t\t\t\t\t\t\tgroup by it10.DATAAREAID, it10.ITEMID) it20 on\n\t\t\t\t\t\t\t\tcpst20.DATAAREAID = it20.DATAAREAID and\n\t\t\t\t\t\t\t\tcpst20.ITEMID = it20.ITEMID\n\t\t\t\t\t\t\t) it10 on\n\t\t\t\t\tcpst10.DATAAREAID = it10.DATAAREAID and\n\t\t\t\t\tcpst10.INVENTTRANSID = it10.INVENTTRANSID\n\t\t\t\twhere it10.LARGEITEMSHIPDATE != '1900-01-01'\n\t\t\t\tgroup by cpst10.DATAAREAID, cpst10.INVENTTRANSID) cpst2 on\n\t\t\tcpst1.DATAAREAID = cpst2.DATAAREAID and\n\t\t\tcpst1.INVENTTRANSID = cpst2.INVENTTRANSID --and\n\t\t\t--cpst2.FIRSTLARGEITEMSHIPDATE = cpst2.LARGEITEMSHIPDATE\n\t\t) iokey1 on\n\tsl1.DATAAREAID = iokey1.DATAAREAID and\n\tsl1.INVENTTRANSID = iokey1.INVENTTRANSID\nleft join (select distinct DATAAREAID, INVENTTRANSID\n\t\t\t, max(CREATEDDATETIME) over (partition by DATAAREAID, INVENTTRANSID) as CREATEDDATETIME\n\t\t\t, max(INVENTDIMID) over (partition by DATAAREAID, INVENTTRANSID) as INVENTDIMID\n\t\t\t, max(SALESID) over (partition by DATAAREAID, INVENTTRANSID) as SALESID\n\t\t\t, max(MODIFIEDDATETIME) over (partition by DATAAREAID, INVENTTRANSID) as MODIFIEDDATETIME\n\t\tfrom dbo.SALESLINE) sl2 on\n\tsl1.DATAAREAID = sl2.DATAAREAID and\n\tsl1.INVENTTRANSIDRETURN = sl2.INVENTTRANSID\nleft join (select id20.DATAAREAID, id20.INVENTDIMID\n\t\t\t, max(is20.TIMEZONE) over (partition by id20.DATAAREAID, id20.INVENTDIMID) as TIMEZONE\n\t\t\t, max(id20.MODIFIEDDATETIME) over (partition by id20.DATAAREAID, id20.INVENTDIMID) as INVENTDIM_MODIFIEDDATETIME\n\t\t\t, max(is20.MODIFIEDDATETIME) over (partition by id20.DATAAREAID, id20.INVENTDIMID) as INVENTSITE_MODIFIEDDATETIME\n\t\tfrom dbo.INVENTDIM id20\n\t\tleft join dbo.INVENTSITE is20 on\n\t\t\tid20.DATAAREAID = is20.DATAAREAID and\n\t\t\tid20.INVENTSITEID = is20.SITEID) id2 on\n\tsl2.DATAAREAID = id2.DATAAREAID and\n\tsl2.INVENTDIMID = id2.INVENTDIMID\nleft join dbo.DATAAREA da1 on\n\tsl2.DATAAREAID = da1.ID\nleft join dbo.TIMEZONEINFO tzi1 on\n\tsl2.CREATEDDATETIME >= tzi1.STARTDATE and\n\tsl2.CREATEDDATETIME < tzi1.ENDDATE and\n\tisnull(id2.TIMEZONE, da1.TIMEZONE) = tzi1.TIMEZONEID\nleft join dbo.DATAAREA da2 on\n\tst1.DATAAREAID = da2.ID\nleft join dbo.TIMEZONEINFO tzi2 on\n\tst1.CREATEDDATETIME >= tzi2.STARTDATE and\n\tst1.CREATEDDATETIME < tzi2.ENDDATE and\n\tda2.TIMEZONE = tzi2.TIMEZONEID\nleft join (select id30.DATAAREAID, id30.INVENTDIMID, max(is30.TIMEZONE) over (partition by id30.DATAAREAID, id30.INVENTDIMID) as TIMEZONE\n          from dbo.INVENTDIM id30\n          left join dbo.INVENTSITE is30 on\n          id30.DATAAREAID = is30.DATAAREAID and\n          id30.INVENTSITEID = is30.SITEID) id3 on\n    sl1.DATAAREAID = id3.DATAAREAID and\n    sl1.INVENTDIMID = id3.INVENTDIMID\nleft join dbo.DATAAREA da3 on\n\tsl1.DATAAREAID = da3.ID\nleft join dbo.TIMEZONEINFO tzi3 on\n\tsl1.CREATEDDATETIME >= tzi3.STARTDATE and\n\tsl1.CREATEDDATETIME < tzi3.ENDDATE and\n\t isnull(id3.TIMEZONE, da3.TIMEZONE) = tzi3.TIMEZONEID\nleft join dbo.MCRSALESLINEPRICEOVERRIDE mslpo1 on\n\tsl1.RECID = mslpo1.SALESLINE\nleft join dbo.MCRSALESLINEPRICEOVERRIDE mslpo2 on\n\tmslpo1.RECID = mslpo2.RECID\nleft join dbo.TPXPRICEOVERRIDEREASONTABLE tport1 on\n\tmslpo1.DATAAREAID = tport1.DATAAREAID and\n\tmslpo1.REASONCODE = tport1.SUBCODEID and\n\tmslpo1.PARTITION = tport1.PARTITION\nleft join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\n\t\twhere ENUMNAME = 'DocumentStatus'\n\t\tgroup by ENUMNAME, ENUMVALUE) tet1 on\n\tst1.DOCUMENTSTATUS = tet1.ENUMVALUE\nleft join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\n\t\twhere ENUMNAME = 'ReturnStatusHeader'\n\t\tgroup by ENUMNAME, ENUMVALUE) tet2 on\n\tst1.RETURNSTATUS = tet2.ENUMVALUE\nleft join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\n\t\twhere ENUMNAME = 'SalesStatus'\n\t\tgroup by ENUMNAME, ENUMVALUE) tet3 on\n\tst1.SALESSTATUS = tet3.ENUMVALUE\nleft join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\n\t\twhere ENUMNAME = 'ReturnStatusLine'\n\t\tgroup by ENUMNAME, ENUMVALUE) tet4 on\n\tsl1.RETURNSTATUS = tet4.ENUMVALUE\nleft join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\n\t\twhere ENUMNAME = 'SalesStatus'\n\t\tgroup by ENUMNAME, ENUMVALUE) tet5 on\n\tsl1.SALESSTATUS = tet5.ENUMVALUE\nleft join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\n\t\twhere ENUMNAME = 'SalesType'\n\t\tgroup by ENUMNAME, ENUMVALUE) tet6 on\n\tst1.SALESTYPE = tet6.ENUMVALUE\nleft join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\n\t\twhere ENUMNAME = 'ShipCarrierDlvType'\n\t\tgroup by ENUMNAME, ENUMVALUE) tet7 on\n\tsl1.SHIPCARRIERDLVTYPE = tet7.ENUMVALUE\nleft join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\n\t\twhere ENUMNAME = 'TradeLineDlvType'\n\t\tgroup by ENUMNAME, ENUMVALUE) tet8 on\n\tsl1.DELIVERYTYPE = tet8.ENUMVALUE\nleft join (select rtt10.DATAAREAID, rtt10.SALESORDERID\n\t\t\t, max(rtdt10.DISCOUNTORIGINTYPE) as DISCOUNTORIGINTYPE\n\t\tfrom dbo.RETAILTRANSACTIONTABLE rtt10\n\t\tleft join dbo.RETAILTRANSACTIONDISCOUNTTRANS rtdt10 on\n\t\t\trtt10.DATAAREAID = rtdt10.DATAAREAID and\n\t\t\trtt10.TERMINAL = rtdt10.TERMINALID and\n\t\t\trtt10.STORE = rtdt10.STOREID and\n\t\t\trtt10.TRANSACTIONID = rtdt10.TRANSACTIONID\n\t\tgroup by rtt10.DATAAREAID, rtt10.SALESORDERID) rtt1 on\n\tsl1.DATAAREAID = rtt1.DATAAREAID and\n\tsl1.SALESID = rtt1.SALESORDERID\nleft join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\n\t\twhere ENUMNAME = 'RetailTransactionType'\n\t\tgroup by ENUMNAME, ENUMVALUE) tet9 on\n\trtt1.DISCOUNTORIGINTYPE = tet9.ENUMVALUE\n    left join dbo.PDMSTATUS ps1 on\n\tidc1.PDMSTATUS = ps1.RECID\n    where \n(SELECT MAX(LastUpdateDate) FROM ( VALUES\n                    (sl1.MODIFIEDDATETIME),\n    \t\t\t\t(isnull(def1.DEFAULTDIMENSION_MODIFIEDDATETIME,'1950-01-01')),\n                    (isnull(st1.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull(id1.MODIFIEDDATETIME, '1950-01-01')),\n\t\t\t\t\t(ISNULL(invs.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull(idc1.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull(ttp1.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull(iokey1.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull(sl2.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull(id2.INVENTDIM_MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull(id2.INVENTSITE_MODIFIEDDATETIME, '1950-01-01'))) AS UpdateDate(LastUpdateDate))\n> '@{variables('v_prv_max_upd_timestamp')}'",
														"type": "Expression"
													},
													"queryTimeout": "23:19:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "ParquetSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "ParquetWriteSettings"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"parallelCopies": 32,
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "INVENTTRANSID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "INVENTTRANSID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "RECID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "CUSTACCOUNT",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "CUSTACCOUNT",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "CURRENCYCODE",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "CURRENCYCODE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "CUSTGROUP",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "CUSTGROUP",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "DEFAULTDIMENSION",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "DEFAULTDIMENSION",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "TRANSACTIONCODE",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "TRANSACTIONCODE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "INVENTDIMID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "INVENTDIMID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "ITEMID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "ITEMID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "MCSALTITEMNO",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "MCSALTITEMNO",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "TPX_RETURNREASONCODEID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "TPX_RETURNREASONCODEID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "DELIVERYPOSTALADDRESS",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "DELIVERYPOSTALADDRESS",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SHIPCARRIERPOSTALADDRESS",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "SHIPCARRIERPOSTALADDRESS",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "DLVMODE",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "DLVMODE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "DLVTERM",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "DLVTERM",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESCATEGORY",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "SALESCATEGORY",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "RETURNDISPOSITIONCODEID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "RETURNDISPOSITIONCODEID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESGROUP",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "SALESGROUP",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "SALESID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SHIPCARRIERID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "SHIPCARRIERID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "TAXGROUP",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "TAXGROUP",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "TAXITEMGROUP",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "TAXITEMGROUP",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "MCSATHENACATALOG",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "MCSATHENACATALOG",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESUNIT",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "SALESUNIT",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "CREATEDBY",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "CREATEDBY",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "LINEDISC",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "LINEDISC",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "LINEPERCENT",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "LINEPERCENT",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "RETURNSTATUS",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "RETURNSTATUS",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESSTATUS",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "SALESSTATUS",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SHIPCARRIERDLVTYPE",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "SHIPCARRIERDLVTYPE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "DELIVERYTYPE",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "DELIVERYTYPE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "COMPLETE",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "COMPLETE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "ORDERBLOCKED",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "ORDERBLOCKED",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SCRAP",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "SCRAP",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "STOCKEDPRODUCT",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "STOCKEDPRODUCT",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "CONFIRMEDDLV",
																"type": "DateTime",
																"physicalType": "date"
															},
															"sink": {
																"name": "CONFIRMEDDLV",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "RECEIPTDATECONFIRMED",
																"type": "DateTime",
																"physicalType": "date"
															},
															"sink": {
																"name": "RECEIPTDATECONFIRMED",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "SHIPPINGDATECONFIRMED",
																"type": "DateTime",
																"physicalType": "date"
															},
															"sink": {
																"name": "SHIPPINGDATECONFIRMED",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "TPX_MANUFACTUREDATE",
																"type": "DateTime",
																"physicalType": "date"
															},
															"sink": {
																"name": "TPX_MANUFACTUREDATE",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "TPX_RELATEDORDERDATE",
																"type": "DateTime",
																"physicalType": "date"
															},
															"sink": {
																"name": "TPX_RELATEDORDERDATE",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "RECEIPTDATEREQUESTED",
																"type": "DateTime",
																"physicalType": "date"
															},
															"sink": {
																"name": "RECEIPTDATEREQUESTED",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "RETURNARRIVALDATE",
																"type": "DateTime",
																"physicalType": "date"
															},
															"sink": {
																"name": "RETURNARRIVALDATE",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "RETURNCLOSEDDATE",
																"type": "DateTime",
																"physicalType": "date"
															},
															"sink": {
																"name": "RETURNCLOSEDDATE",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "RETURNDEADLINE",
																"type": "DateTime",
																"physicalType": "date"
															},
															"sink": {
																"name": "RETURNDEADLINE",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "CREATEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "CREATEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "SHIPPINGDATEREQUESTED",
																"type": "DateTime",
																"physicalType": "date"
															},
															"sink": {
																"name": "SHIPPINGDATEREQUESTED",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "LINENUM",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "LINENUM",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "TPX_PRODUCTIONTIME",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "TPX_PRODUCTIONTIME",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "TPX_REGISTRYNUMBER",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "TPX_REGISTRYNUMBER",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "INVENTTRANSIDRETURN",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "INVENTTRANSIDRETURN",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "EXPECTEDRETQTY",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "EXPECTEDRETQTY",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "QTYORDERED",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "QTYORDERED",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESQTY",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "SALESQTY",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESPRICE",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "SALESPRICE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "PRICEUNIT",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "PRICEUNIT",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "COSTPRICE",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "COSTPRICE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "LINEAMOUNT",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "LINEAMOUNT",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "REMAINSALESPHYSICAL",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "REMAINSALESPHYSICAL",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "REMAINSALESFINANCIAL",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "REMAINSALESFINANCIAL",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "TPX_KITITEMID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "TPX_KITITEMID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "MCSTAGID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "MCSTAGID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "TPXORIGRECEIPTDATECONFIRMED",
																"type": "DateTime",
																"physicalType": "date"
															},
															"sink": {
																"name": "TPXORIGRECEIPTDATECONFIRMED",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "MCSALTSERIALNO",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "MCSALTSERIALNO",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "MULTILNDISC",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "MULTILNDISC",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "MULTILNPERCENT",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "MULTILNPERCENT",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "DEFAULTDIMENSION_BUSINESS_UNIT",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "DEFAULTDIMENSION_BUSINESS_UNIT",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "DEFAULTDIMENSION_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "DEFAULTDIMENSION_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_SMMCAMPAIGNID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "SALESTABLE_SMMCAMPAIGNID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_COMMISSIONGROUP",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "SALESTABLE_COMMISSIONGROUP",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_INVOICEACCOUNT",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "SALESTABLE_INVOICEACCOUNT",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_MARKUPGROUP",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "SALESTABLE_MARKUPGROUP",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_PAYMMODE",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "SALESTABLE_PAYMMODE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_PAYMENT",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "SALESTABLE_PAYMENT",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_RETURNREASONCODEID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "SALESTABLE_RETURNREASONCODEID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_LINEDISC",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "SALESTABLE_LINEDISC",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_SALESORIGINID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "SALESTABLE_SALESORIGINID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_SALESPOOLID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "SALESTABLE_SALESPOOLID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_PRICEGROUPID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "SALESTABLE_PRICEGROUPID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_INVENTSITEID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "SALESTABLE_INVENTSITEID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_MODIFIEDBY",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "SALESTABLE_MODIFIEDBY",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_CREATEDBY",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "SALESTABLE_CREATEDBY",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_INVENTLOCATIONID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "SALESTABLE_INVENTLOCATIONID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_WORKERSALESRESPONSIBLE",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "SALESTABLE_WORKERSALESRESPONSIBLE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_WORKERSALESTAKER",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "SALESTABLE_WORKERSALESTAKER",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_DEADLINE",
																"type": "DateTime",
																"physicalType": "date"
															},
															"sink": {
																"name": "SALESTABLE_DEADLINE",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_DELIVERYDATE",
																"type": "DateTime",
																"physicalType": "date"
															},
															"sink": {
																"name": "SALESTABLE_DELIVERYDATE",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_DOCUMENTSTATUS",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "SALESTABLE_DOCUMENTSTATUS",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_RETURNSTATUS",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "SALESTABLE_RETURNSTATUS",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_SALESSTATUS",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "SALESTABLE_SALESSTATUS",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_SALESTYPE",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "SALESTABLE_SALESTYPE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_ATAGENT",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "SALESTABLE_ATAGENT",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_SHIPCARRIERBLINDSHIPMENT",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "SALESTABLE_SHIPCARRIERBLINDSHIPMENT",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_SHIPCARRIEREXPEDITEDSHIPMENT",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "SALESTABLE_SHIPCARRIEREXPEDITEDSHIPMENT",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_ORDERBLOCKED",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "SALESTABLE_ORDERBLOCKED",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_MCRORDERSTOPPED",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "SALESTABLE_MCRORDERSTOPPED",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_SHIPCARRIERFUELSURCHARGE",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "SALESTABLE_SHIPCARRIERFUELSURCHARGE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_CREATEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "SALESTABLE_CREATEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_RECEIPTDATEREQUESTED",
																"type": "DateTime",
																"physicalType": "date"
															},
															"sink": {
																"name": "SALESTABLE_RECEIPTDATEREQUESTED",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_SHIPPINGDATEREQUESTED",
																"type": "DateTime",
																"physicalType": "date"
															},
															"sink": {
																"name": "SALESTABLE_SHIPPINGDATEREQUESTED",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_RECEIPTDATECONFIRMED",
																"type": "DateTime",
																"physicalType": "date"
															},
															"sink": {
																"name": "SALESTABLE_RECEIPTDATECONFIRMED",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_NDS_SUSALLOWCHG",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "SALESTABLE_NDS_SUSALLOWCHG",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_SHIPCARRIERRESIDENTIAL",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "SALESTABLE_SHIPCARRIERRESIDENTIAL",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_TPXORIGRECEIPTDATECONFIRMED",
																"type": "DateTime",
																"physicalType": "date"
															},
															"sink": {
																"name": "SALESTABLE_TPXORIGRECEIPTDATECONFIRMED",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "SALESTABLE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "INVENTDIM1_CONFIGID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "INVENTDIM1_CONFIGID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "INVENTDIM1_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "INVENTDIM1_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "INVENTDIMCOMBINATION_PDMSTATUS",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "INVENTDIMCOMBINATION_PDMSTATUS",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "INVENTDIMCOMBINATION_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "INVENTDIMCOMBINATION_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "TAMTRADEPROMOTION_PROMOTIONID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "TAMTRADEPROMOTION_PROMOTIONID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "TAMTRADEPROMOTION_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "TAMTRADEPROMOTION_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "MCRSALESLINEDROPSHIPMENT_DROPSHIPMENT",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "MCRSALESLINEDROPSHIPMENT_DROPSHIPMENT",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "CUSTPACKINGSLIPTRANS_FIRSTLARGEITEMSHIPDATE",
																"type": "DateTime",
																"physicalType": "date"
															},
															"sink": {
																"name": "CUSTPACKINGSLIPTRANS_FIRSTLARGEITEMSHIPDATE",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "CUSTPACKINGSLIPTRANS_FIRSTLARGEITEMSHIPPEDQTY",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "CUSTPACKINGSLIPTRANS_FIRSTLARGEITEMSHIPPEDQTY",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "CUSTPACKINGSLIPTRANS_SHIPPEDQTY",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "CUSTPACKINGSLIPTRANS_SHIPPEDQTY",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "CUSTPACKINGSLIPTRANS_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "CUSTPACKINGSLIPTRANS_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "SALESLINE2_CREATEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "SALESLINE2_CREATEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "SALESLINE2_INVENTDIMID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "SALESLINE2_INVENTDIMID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESLINE2_SALESID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "SALESLINE2_SALESID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESLINE2_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "SALESLINE2_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "INVENTDIM2_TIMEZONE",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "INVENTDIM2_TIMEZONE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "INVENTDIM2_INVENTDIM_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "INVENTDIM2_INVENTDIM_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "INVENTDIM2_INVENTSITE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "INVENTDIM2_INVENTSITE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "DATAAREA1_TIMEZONE",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "DATAAREA1_TIMEZONE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "TIMEZONEINFO1_TIMEBIAS",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "TIMEZONEINFO1_TIMEBIAS",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "DATAAREA2_TIMEZONE",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "DATAAREA2_TIMEZONE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "TIMEZONEINFO2_TIMEBIAS",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "TIMEZONEINFO2_TIMEBIAS",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "DATAAREA3_TIMEZONE",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "DATAAREA3_TIMEZONE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "TIMEZONEINFO3_TIMEBIAS",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "TIMEZONEINFO3_TIMEBIAS",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "MCRSALESLINEPRICEOVERRIDE1_RECID",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "MCRSALESLINEPRICEOVERRIDE1_RECID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "MCRSALESLINEPRICEOVERRIDE2_REASONCODE",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "MCRSALESLINEPRICEOVERRIDE2_REASONCODE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "TPXPRICEOVERRIDEREASONTABLE_DESCRIPTION",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "TPXPRICEOVERRIDEREASONTABLE_DESCRIPTION",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_DOCUMENTSTATUS",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_DOCUMENTSTATUS",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_RETURNSTATUSHEADER",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_RETURNSTATUSHEADER",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_SALESSTATUSHEADER",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_SALESSTATUSHEADER",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_RETURNSTATUSLINE",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_RETURNSTATUSLINE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE5_ENUMVALUELABEL_SALESSTATUSLINE",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE5_ENUMVALUELABEL_SALESSTATUSLINE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE6_ENUMVALUELABEL_SALESTYPE",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE6_ENUMVALUELABEL_SALESTYPE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE7_ENUMVALUELABEL_SHIPCARRIERDLVTYPE",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE7_ENUMVALUELABEL_SHIPCARRIERDLVTYPE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE8_ENUMVALUELABEL_TRADELINEDLVTYPE",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE8_ENUMVALUELABEL_TRADELINEDLVTYPE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "RETAILTRANSACTIONDISCOUNTTRANS_DISCOUNTORIGINTYPE",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "RETAILTRANSACTIONDISCOUNTTRANS_DISCOUNTORIGINTYPE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE8_ENUMVALUELABEL_RETAILTRANSACTIONTYPE",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE8_ENUMVALUELABEL_RETAILTRANSACTIONTYPE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "RETAILPERIODICDISCOUNT_NAME",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "RETAILPERIODICDISCOUNT_NAME",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "RETAILPERIODICDISCOUNT_MODIFIEDDATETIME",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "RETAILPERIODICDISCOUNT_MODIFIEDDATETIME",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "RETAILTRANSACTIONTABLE_DISCAMOUNT",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "RETAILTRANSACTIONTABLE_DISCAMOUNT",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "RETAILTRANSACTIONTABLE_MODIFIEDDATETIME",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "RETAILTRANSACTIONTABLE_MODIFIEDDATETIME",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "RETAILDISCOUNTCODE_DISCOUNTCODE",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "RETAILDISCOUNTCODE_DISCOUNTCODE",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "RETAILPERIODICDISCOUNTLINE_DISCPCT",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "RETAILPERIODICDISCOUNTLINE_DISCPCT",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE10_ENUMVALUELABEL_DISCOUNTORIGINTYPE",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE10_ENUMVALUELABEL_DISCOUNTORIGINTYPE",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE11_ENUMVALUELABEL_PERIODICDISCOUNTTYPE",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE11_ENUMVALUELABEL_PERIODICDISCOUNTTYPE",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "PDMSTATUS_NAME",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "PDMSTATUS_NAME",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "PRODDATE",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "PRODDATE",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String",
																"physicalType": "UTF8"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_parquet",
													"type": "DatasetReference",
													"parameters": {
														"p_directory": {
															"value": "@pipeline().parameters.p_temp_directory",
															"type": "Expression"
														},
														"p_root_system": {
															"value": "@pipeline().globalParameters.rootDir",
															"type": "Expression"
														},
														"p_file_name": {
															"value": "@pipeline().parameters.p_temp_file_nm",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_adls",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_adls').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_adls').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_adls').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_adls').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_adls').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "d365_raw_load_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "d365_to_adls",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('d365_to_adls').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('d365_to_adls').Error['message']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('d365_to_adls').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('d365_to_adls').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "d365_load_to_raw_fail",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "d365_raw_load_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('d365_to_adls').Error['message']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								},
								{
									"name": "d365_to_adls",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "WarehouseSource",
											"additionalColumns": [
												{
													"name": "HK_SOURCE_NAME",
													"value": {
														"value": "@pipeline().parameters.p_src_nm",
														"type": "Expression"
													}
												},
												{
													"name": "HK_JOB_RUN_ID",
													"value": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "select \n    sl1.dataareaid as DATAAREAID,\n    sl1.inventtransid as INVENTTRANSID,\n    sl1.recid as RECID,\n    sl1.custaccount AS CUSTACCOUNT,\n    sl1.currencycode AS CURRENCYCODE,\n    sl1.custgroup AS CUSTGROUP,\n    sl1.defaultdimension AS DEFAULTDIMENSION,\n    sl1.transactioncode AS TRANSACTIONCODE,\n    sl1.inventdimid AS INVENTDIMID,\n    sl1.itemid AS ITEMID,\n    sl1.mcsaltitemno AS MCSALTITEMNO,\n    sl1.tpx_returnreasoncodeid AS TPX_RETURNREASONCODEID,\n    sl1.deliverypostaladdress AS DELIVERYPOSTALADDRESS,\n    sl1.shipcarrierpostaladdress AS SHIPCARRIERPOSTALADDRESS,\n    sl1.dlvmode AS DLVMODE,\n    sl1.dlvterm AS DLVTERM,\n    sl1.salescategory AS SALESCATEGORY,\n    sl1.returndispositioncodeid AS RETURNDISPOSITIONCODEID,\n    sl1.salesgroup AS SALESGROUP,\n    sl1.salesid AS SALESID,\n    sl1.shipcarrierid AS SHIPCARRIERID,\n    sl1.taxgroup AS TAXGROUP,\n    sl1.taxitemgroup AS TAXITEMGROUP,\n    sl1.mcsathenacatalog AS MCSATHENACATALOG,\n    sl1.salesunit AS SALESUNIT,\n    sl1.createdby AS CREATEDBY,\n    sl1.linedisc AS LINEDISC,\n    sl1.linepercent AS LINEPERCENT,\n    sl1.returnstatus AS RETURNSTATUS,\n    sl1.salesstatus AS SALESSTATUS,\n    sl1.shipcarrierdlvtype AS SHIPCARRIERDLVTYPE,\n    sl1.deliverytype AS DELIVERYTYPE,\n    sl1.complete AS COMPLETE,\n    sl1.orderblocked AS ORDERBLOCKED,\n    sl1.scrap AS SCRAP,\n    sl1.stockedproduct AS STOCKEDPRODUCT,\n    sl1.confirmeddlv AS CONFIRMEDDLV,\n    sl1.receiptdateconfirmed AS RECEIPTDATECONFIRMED,\n    sl1.shippingdateconfirmed AS SHIPPINGDATECONFIRMED,\n    sl1.tpx_manufacturedate AS TPX_MANUFACTUREDATE,\n    sl1.tpx_relatedorderdate AS TPX_RELATEDORDERDATE,\n    sl1.receiptdaterequested AS RECEIPTDATEREQUESTED,\n    sl1.returnarrivaldate AS RETURNARRIVALDATE,\n    sl1.returncloseddate AS RETURNCLOSEDDATE,\n    sl1.returndeadline AS RETURNDEADLINE,\n    sl1.createddatetime AS CREATEDDATETIME,\n    sl1.shippingdaterequested AS SHIPPINGDATEREQUESTED,\n    sl1.linenum AS LINENUM,\n    sl1.tpx_productiontime AS TPX_PRODUCTIONTIME,\n    sl1.tpx_registrynumber AS TPX_REGISTRYNUMBER,\n    sl1.inventtransidreturn AS INVENTTRANSIDRETURN,\n    sl1.expectedretqty AS EXPECTEDRETQTY,\n    sl1.qtyordered AS QTYORDERED,\n    sl1.salesqty AS SALESQTY,\n    sl1.salesprice AS SALESPRICE,\n    sl1.priceunit AS PRICEUNIT,\n    sl1.costprice AS COSTPRICE,\n    sl1.lineamount AS LINEAMOUNT,\n    sl1.remainsalesphysical AS REMAINSALESPHYSICAL,\n    sl1.remainsalesfinancial AS REMAINSALESFINANCIAL,\n    sl1.tpx_kititemid AS TPX_KITITEMID,\n    sl1.mcstagid AS MCSTAGID,\n    sl1.tpxorigreceiptdateconfirmed AS TPXORIGRECEIPTDATECONFIRMED,\n    sl1.mcsaltserialno AS MCSALTSERIALNO,\n    sl1.multilndisc AS MULTILNDISC,\n    sl1.multilnpercent AS MULTILNPERCENT,\n    sl1.modifieddatetime AS MODIFIEDDATETIME,\n    def1.BUSINESS_UNIT AS DEFAULTDIMENSION_BUSINESS_UNIT,\n    def1.DEFAULTDIMENSION_MODIFIEDDATETIME AS DEFAULTDIMENSION_MODIFIEDDATETIME,\n    st1.smmcampaignid AS SALESTABLE_SMMCAMPAIGNID,\n    st1.commissiongroup AS SALESTABLE_COMMISSIONGROUP,\n    st1.invoiceaccount AS SALESTABLE_INVOICEACCOUNT,\n    st1.markupgroup AS SALESTABLE_MARKUPGROUP,\n    st1.paymmode AS SALESTABLE_PAYMMODE,\n    st1.payment AS SALESTABLE_PAYMENT,\n    st1.returnreasoncodeid AS SALESTABLE_RETURNREASONCODEID,\n    st1.linedisc AS SALESTABLE_LINEDISC,\n    st1.salesoriginid AS SALESTABLE_SALESORIGINID,\n    st1.salespoolid AS SALESTABLE_SALESPOOLID,\n    st1.pricegroupid AS SALESTABLE_PRICEGROUPID,\n    st1.inventsiteid AS SALESTABLE_INVENTSITEID,\n    st1.modifiedby AS SALESTABLE_MODIFIEDBY,\n    st1.createdby AS SALESTABLE_CREATEDBY,\n    st1.inventlocationid AS SALESTABLE_INVENTLOCATIONID,\n    st1.workersalesresponsible AS SALESTABLE_WORKERSALESRESPONSIBLE,\n    st1.workersalestaker AS SALESTABLE_WORKERSALESTAKER,\n    st1.deadline AS SALESTABLE_DEADLINE,\n    st1.deliverydate AS SALESTABLE_DELIVERYDATE,\n    st1.documentstatus AS SALESTABLE_DOCUMENTSTATUS,\n    st1.returnstatus AS SALESTABLE_RETURNSTATUS,\n    st1.salesstatus AS SALESTABLE_SALESSTATUS,\n    st1.salestype AS SALESTABLE_SALESTYPE,\n    st1.atagent AS SALESTABLE_ATAGENT,\n    st1.shipcarrierblindshipment AS SALESTABLE_SHIPCARRIERBLINDSHIPMENT,\n    st1.shipcarrierexpeditedshipment AS SALESTABLE_SHIPCARRIEREXPEDITEDSHIPMENT,\n    st1.orderblocked AS SALESTABLE_ORDERBLOCKED,\n    st1.mcrorderstopped AS SALESTABLE_MCRORDERSTOPPED,\n    st1.shipcarrierfuelsurcharge AS SALESTABLE_SHIPCARRIERFUELSURCHARGE,\n    st1.createddatetime AS SALESTABLE_CREATEDDATETIME,\n    st1.receiptdaterequested AS SALESTABLE_RECEIPTDATEREQUESTED,\n    st1.shippingdaterequested AS SALESTABLE_SHIPPINGDATEREQUESTED,\n    st1.receiptdateconfirmed AS SALESTABLE_RECEIPTDATECONFIRMED,\n    st1.nds_susallowchg AS SALESTABLE_NDS_SUSALLOWCHG,\n    st1.shipcarrierresidential AS SALESTABLE_SHIPCARRIERRESIDENTIAL,\n    st1.tpxorigreceiptdateconfirmed AS SALESTABLE_TPXORIGRECEIPTDATECONFIRMED,\n    st1.modifieddatetime AS SALESTABLE_MODIFIEDDATETIME,\n    id1.configid AS INVENTDIM1_CONFIGID,\n    id1.modifieddatetime AS INVENTDIM1_MODIFIEDDATETIME,\n\tidc1.productlifecyclestateid AS INVENTDIMCOMBINATION_PDMSTATUS,\n    idc1.MODIFIEDDATETIME AS INVENTDIMCOMBINATION_MODIFIEDDATETIME,\n    ttp1.promotionid AS TAMTRADEPROMOTION_PROMOTIONID,\n    ttp1.MODIFIEDDATETIME AS TAMTRADEPROMOTION_MODIFIEDDATETIME,\n    mslds1.dropshipment AS MCRSALESLINEDROPSHIPMENT_DROPSHIPMENT,\n    iokey1.FIRSTLARGEITEMSHIPDATE AS CUSTPACKINGSLIPTRANS_FIRSTLARGEITEMSHIPDATE,\n    iokey1.FIRSTLARGEITEMSHIPPEDQTY AS CUSTPACKINGSLIPTRANS_FIRSTLARGEITEMSHIPPEDQTY,\n    iokey1.SHIPPEDQTY AS CUSTPACKINGSLIPTRANS_SHIPPEDQTY,\n    iokey1.MODIFIEDDATETIME AS CUSTPACKINGSLIPTRANS_MODIFIEDDATETIME,\n    sl2.CREATEDDATETIME AS SALESLINE2_CREATEDDATETIME,\n    sl2.INVENTDIMID AS SALESLINE2_INVENTDIMID,\n    sl2.SALESID AS SALESLINE2_SALESID,\n    sl2.MODIFIEDDATETIME AS SALESLINE2_MODIFIEDDATETIME,\n    id2.TIMEZONE AS INVENTDIM2_TIMEZONE,\n    id2.INVENTDIM_MODIFIEDDATETIME AS INVENTDIM2_INVENTDIM_MODIFIEDDATETIME,\n    id2.INVENTSITE_MODIFIEDDATETIME AS INVENTDIM2_INVENTSITE_MODIFIEDDATETIME,\n    da1.timezone AS DATAAREA1_TIMEZONE,\n    tzi1.timebias AS TIMEZONEINFO1_TIMEBIAS,\n    da2.timezone AS DATAAREA2_TIMEZONE,\n    tzi2.timebias AS TIMEZONEINFO2_TIMEBIAS,\n    da3.timezone AS DATAAREA3_TIMEZONE,\n    tzi3.timebias AS TIMEZONEINFO3_TIMEBIAS,\n    mslpo1.recid AS MCRSALESLINEPRICEOVERRIDE1_RECID,\n    mslpo2.reasoncode AS MCRSALESLINEPRICEOVERRIDE2_REASONCODE,\n    tport1.description AS TPXPRICEOVERRIDEREASONTABLE_DESCRIPTION,\n    tet1.ENUMVALUELABEL AS TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_DOCUMENTSTATUS,\n    tet2.ENUMVALUELABEL AS TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_RETURNSTATUSHEADER,\n    tet3.ENUMVALUELABEL AS TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_SALESSTATUSHEADER,\n    tet4.ENUMVALUELABEL AS TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_RETURNSTATUSLINE,\n    tet5.ENUMVALUELABEL AS TIMEXTENDERENUMTABLE5_ENUMVALUELABEL_SALESSTATUSLINE,\n    tet6.ENUMVALUELABEL AS TIMEXTENDERENUMTABLE6_ENUMVALUELABEL_SALESTYPE,\n    tet7.ENUMVALUELABEL AS TIMEXTENDERENUMTABLE7_ENUMVALUELABEL_SHIPCARRIERDLVTYPE,\n    tet8.ENUMVALUELABEL AS TIMEXTENDERENUMTABLE8_ENUMVALUELABEL_TRADELINEDLVTYPE,\n    rtt1.DISCOUNTORIGINTYPE AS RETAILTRANSACTIONDISCOUNTTRANS_DISCOUNTORIGINTYPE,\n    tet9.ENUMVALUELABEL AS TIMEXTENDERENUMTABLE8_ENUMVALUELABEL_RETAILTRANSACTIONTYPE,\n\trtst1.name AS RETAILPERIODICDISCOUNT_NAME, \n\trtst1.modifieddatetime AS RETAILPERIODICDISCOUNT_MODIFIEDDATETIME,\n\trtt2.discamount AS RETAILTRANSACTIONTABLE_DISCAMOUNT,\n\trtt2.modifieddatetime AS RETAILTRANSACTIONTABLE_MODIFIEDDATETIME,\n\trtst1.discountcode AS RETAILDISCOUNTCODE_DISCOUNTCODE,\n\trtst1.discountpercentorvalue AS RETAILPERIODICDISCOUNTLINE_DISCPCT,\n\ttet10.enumvaluelabel AS TIMEXTENDERENUMTABLE10_ENUMVALUELABEL_DISCOUNTORIGINTYPE,\n\ttet11.enumvaluelabel AS TIMEXTENDERENUMTABLE11_ENUMVALUELABEL_PERIODICDISCOUNTTYPE,\n\tidc1.productlifecyclestateid AS PDMSTATUS_NAME,\n\tinvs.proddate AS PRODDATE,\n    (\n        SELECT\n            MAX(lastupdatedate)\n        FROM\n            (\n                VALUES\n                    (sl1.modifieddatetime),\n                    (\n                        ISNULL(\n                            def1.DEFAULTDIMENSION_MODIFIEDDATETIME,\n                            '1950-01-01'\n                        )\n                    ),\n                    (ISNULL(st1.modifieddatetime, '1950-01-01')),\n                    (ISNULL(id1.modifieddatetime, '1950-01-01')),\n\t\t\t\t\t(ISNULL(invs.modifieddatetime, '1950-01-01')),\n                    (ISNULL(idc1.MODIFIEDDATETIME, '1950-01-01')),\n                    (ISNULL(ttp1.MODIFIEDDATETIME, '1950-01-01')),\n                    (ISNULL(iokey1.MODIFIEDDATETIME, '1950-01-01')),\n                    (ISNULL(sl2.MODIFIEDDATETIME, '1950-01-01')),\n                    (\n                        ISNULL(id2.INVENTDIM_MODIFIEDDATETIME, '1950-01-01')\n                    ),\n                    (\n                        ISNULL(id2.INVENTSITE_MODIFIEDDATETIME, '1950-01-01')\n                    ),\n\t\t\t\t\t(\n                        ISNULL(rtst1.modifieddatetime, '1950-01-01')\n                    ),\n\t\t\t\t\t(\n                        ISNULL(rtt2.modifieddatetime, '1950-01-01')\n                    )\n            ) AS updatedate(lastupdatedate)\n    ) AS LATEST_MODIFIEDDATETIME\nFROM\ndataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.salesline sl1\nLEFT JOIN (SELECT DISTINCT sl10.defaultdimension\n\t\t\t\t, MAX(\n\t\t\t\t\tCASE WHEN da1.name = 'BusinessUnit' THEN davsi1.displayvalue\n\t\t\t\t\t\tELSE NULL\n\t\t\t\t\t\tEND\n\t\t\t\t\t) OVER (PARTITION BY sl10.defaultdimension) AS BUSINESS_UNIT\n\t\t\t\t, MAX(\n\t\t\t\t\t(SELECT MAX(i) FROM (VALUES (davsi1.modifieddatetime), (dav1.modifieddatetime), (da1.modifieddatetime), (desc1.DESC_MODIFIEDDATETIME)) AS t(i))\n\t\t\t\t\t) OVER (PARTITION BY sl10.defaultdimension) AS DEFAULTDIMENSION_MODIFIEDDATETIME\n\t\t\tFROM (SELECT DISTINCT defaultdimension FROM dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.salesline) sl10\n\t\t\tLEFT JOIN dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattributevaluesetitem davsi1 ON\n\t\t\t\tsl10.defaultdimension = davsi1.dimensionattributevalueset\n\t\t\tLEFT JOIN dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattributevalue dav1 ON\n\t\t\t\tdavsi1.dimensionattributevalue = dav1.recid\n\t\t\tLEFT JOIN dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattribute da1 ON\n\t\t\t\tdav1.dimensionattribute = da1.recid\n\t\t\tLEFT JOIN (SELECT dft1.value, da2.name, dft1.description\n\t\t\t\t\t\t\t, (SELECT MAX(i) FROM (VALUES (dft1.modifieddatetime), (dadc1.modifieddatetime), (da2.modifieddatetime)) AS t(i)) AS DESC_MODIFIEDDATETIME\n\t\t\t\t\t\tFROM dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionfinancialtag dft1\n\t\t\t\t\t\tLEFT JOIN dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattributedircategory dadc1 ON\n\t\t\t\t\t\t\tdft1.financialtagcategory = dadc1.dircategory\n\t\t\t\t\t\tLEFT JOIN dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattribute da2 ON\n\t\t\t\t\t\t\tdadc1.dimensionattribute = da2.recid) desc1 ON\n\t\t\t\tdavsi1.displayvalue = desc1.value AND\n\t\t\t\tda1.name = desc1.name\n\t\t\t) def1 ON\n\tsl1.defaultdimension = def1.defaultdimension\nLEFT JOIN dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.salestable st1 ON\n\tsl1.dataareaid = st1.dataareaid AND\n\tsl1.salesid = st1.salesid\nLEFT JOIN dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.inventdim id1 ON\n\tsl1.dataareaid = id1.dataareaid AND\n\tsl1.inventdimid = id1.inventdimid\nLEFT JOIN dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.inventserial invs ON sl1.dataareaid = invs.dataareaid\n\tAND sl1.itemid = invs.itemid\n\tAND id1.inventserialid = invs.inventserialid\nLEFT JOIN (SELECT idp10.dataareaid, idp10.configid, idp10.itemid, idp10.productlifecyclestateid\n\t\t\t, MAX(GREATEST(idc10.modifieddatetime, id10.modifieddatetime, idp10.modifieddatetime)) AS MODIFIEDDATETIME\n\t\tFROM dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.inventdimcombination idc10\n\t\tINNER JOIN dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.inventdim id10 ON\n\t\t\tidc10.dataareaid = id10.dataareaid AND\n\t\t\tidc10.inventdimid = id10.inventdimid\n\t\tINNER JOIN dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.inventdistinctproduct idp10 ON\n\t\t\tid10.dataareaid = idp10.dataareaid AND\n\t\t\tid10.configid = idp10.configid\n\t\tGROUP BY idp10.dataareaid, idp10.configid, idp10.itemid, idp10.productlifecyclestateid) idc1 ON\n\tsl1.dataareaid = idc1.dataareaid AND\n\tid1.configid = idc1.configid AND\n\tsl1.itemid = idc1.itemid\nLEFT JOIN (SELECT promotiondescription\n\t\t\t, MAX(promotionid) AS promotionid\n\t\t\t, MAX(modifieddatetime) AS MODIFIEDDATETIME\n\t\tFROM dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.tamtradepromotion\n\t\tWHERE ISNULL(promotiondescription, '') != ''\n\t\tGROUP BY promotiondescription) ttp1 ON\n\tsl1.mcsathenacatalog = ttp1.promotiondescription\nLEFT JOIN dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.mcrsaleslinedropshipment mslds1 ON\n\tsl1.dataareaid = mslds1.dataareaid AND\n\tsl1.recid = mslds1.salesline\nLEFT JOIN (SELECT DISTINCT cpst1.dataareaid, cpst1.inventtransid\n\t\t\t, MIN(cpst2.FIRSTLARGEITEMSHIPDATE) OVER (PARTITION BY cpst1.dataareaid, cpst1.inventtransid) AS FIRSTLARGEITEMSHIPDATE\n\t\t\t, SUM(CASE WHEN cpst2.FIRSTLARGEITEMSHIPDATE = cpst2.LARGEITEMSHIPDATE THEN cpst1.qty ELSE 0 END) OVER (PARTITION BY cpst1.dataareaid, cpst1.inventtransid) AS FIRSTLARGEITEMSHIPPEDQTY\n\t\t\t, SUM(cpst1.qty) OVER (PARTITION BY cpst1.dataareaid, cpst1.inventtransid) AS SHIPPEDQTY\n\t\t\t, MAX(cpst1.modifieddatetime) OVER (PARTITION BY cpst1.dataareaid, cpst1.inventtransid) AS MODIFIEDDATETIME\n\t\tFROM dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.custpackingsliptrans cpst1\n\t\tLEFT JOIN (SELECT cpst10.dataareaid, cpst10.inventtransid\n\t\t\t\t\t, MIN(it10.FIRSTLARGEITEMSHIPDATE) AS FIRSTLARGEITEMSHIPDATE\n\t\t\t\t\t, MAX(it10.LARGEITEMSHIPDATE) AS LARGEITEMSHIPDATE\n\t\t\t\tFROM dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.custpackingsliptrans cpst10\n\t\t\t\tLEFT JOIN (SELECT cpst20.dataareaid, cpst20.inventtransid\n\t\t\t\t\t\t\t\t, MAX(CASE WHEN it20.ISLARGEITEM = 1 THEN scp20.deliverydate ELSE NULL END) OVER (PARTITION BY cpst20.dataareaid, cpst20.inventtransid) AS LARGEITEMSHIPDATE\n\t\t\t\t\t\t\t\t, MIN(CASE WHEN it20.ISLARGEITEM = 1 THEN scp20.deliverydate ELSE NULL END) OVER (PARTITION BY cpst20.dataareaid, cpst20.salesid) AS FIRSTLARGEITEMSHIPDATE\n\t\t\t\t\t\t\tFROM dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.custpackingsliptrans cpst20\n\t\t\t\t\t\t\tLEFT JOIN (SELECT cpsj1.salesid, cpsj1.packingslipid, cpsj1.dataareaid, cpsj1.deliverydate\n\t\t\t\t\t\t\t\t\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.custpackingslipjour cpsj1\n\t\t\t\t\t\t\t\t\tinner join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.tmscarrierservice tcs1 on\n\t\t\t\t\t\t\t\t\t\tcpsj1.dataareaid = tcs1.dataareaid and\n\t\t\t\t\t\t\t\t\t\tcpsj1.dlvmode = tcs1.dlvmodeid) scp20 on\n\t\t\t\t\t\t\t\tcpst20.packingslipid = scp20.packingslipid and\n\t\t\t\t\t\t\t\tcpst20.dataareaid = scp20.dataareaid and\n\t\t\t\t\t\t\t\tcpst20.origsalesid = scp20.salesid\n\t\t\t\t\t\t\tleft join (select it10.dataareaid, it10.itemid\n\t\t\t\t\t\t\t\t\t\t, max(case when def10.E_CATEGORY in ('10', '50', '60') then 1 else 0 end) as ISLARGEITEM\n\t\t\t\t\t\t\t\t\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.inventtable it10\n\t\t\t\t\t\t\t\t\tleft join (select distinct it1.defaultdimension\n\t\t\t\t\t\t\t\t\t\t\t\t\t, max(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase when da1.name = 'E_Category' then davsi1.displayvalue\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse null\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t) over (partition by it1.defaultdimension) as E_CATEGORY\n\t\t\t\t\t\t\t\t\t\t\t\tfrom (select distinct defaultdimension from dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.inventtable) it1\n\t\t\t\t\t\t\t\t\t\t\t\tleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattributevaluesetitem davsi1 on\n\t\t\t\t\t\t\t\t\t\t\t\t\tit1.defaultdimension = davsi1.dimensionattributevalueset\n\t\t\t\t\t\t\t\t\t\t\t\tleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattributevalue dav1 on\n\t\t\t\t\t\t\t\t\t\t\t\t\tdavsi1.dimensionattributevalue = dav1.recid\n\t\t\t\t\t\t\t\t\t\t\t\tleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dimensionattribute da1 on\n\t\t\t\t\t\t\t\t\t\t\t\t\tdav1.dimensionattribute = da1.recid\n\t\t\t\t\t\t\t\t\t\t\t\t) def10 on\n\t\t\t\t\t\t\t\t\t\tit10.defaultdimension = def10.defaultdimension\n\t\t\t\t\t\t\t\t\tgroup by it10.dataareaid, it10.itemid) it20 on\n\t\t\t\t\t\t\t\tcpst20.dataareaid = it20.dataareaid and\n\t\t\t\t\t\t\t\tcpst20.itemid = it20.itemid\n\t\t\t\t\t\t\t) it10 on\n\t\t\t\t\tcpst10.dataareaid = it10.dataareaid and\n\t\t\t\t\tcpst10.inventtransid = it10.inventtransid\n\t\t\t\twhere it10.LARGEITEMSHIPDATE != '1900-01-01'\n\t\t\t\tgroup by cpst10.dataareaid, cpst10.inventtransid) cpst2 on\n\t\t\tcpst1.dataareaid = cpst2.dataareaid and\n\t\t\tcpst1.inventtransid = cpst2.inventtransid --and\n\t\t\t--cpst2.firstlargeitemshipdate = cpst2.LARGEITEMSHIPDATE\n\t\t) iokey1 on\n\tsl1.dataareaid = iokey1.dataareaid and\n\tsl1.inventtransid = iokey1.inventtransid\nleft join (select distinct dataareaid, inventtransid\n\t\t\t, max(createddatetime) over (partition by dataareaid, inventtransid) as CREATEDDATETIME\n\t\t\t, max(inventdimid) over (partition by dataareaid, inventtransid) as INVENTDIMID\n\t\t\t, max(salesid) over (partition by dataareaid, inventtransid) as SALESID\n\t\t\t, max(modifieddatetime) over (partition by dataareaid, inventtransid) as MODIFIEDDATETIME\n\t\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.salesline) sl2 on\n\tsl1.dataareaid = sl2.dataareaid and\n\tsl1.inventtransidreturn = sl2.inventtransid\nleft join (select id20.dataareaid, id20.inventdimid\n\t\t\t, max(is20.timezone) over (partition by id20.dataareaid, id20.inventdimid) as TIMEZONE\n\t\t\t, max(id20.modifieddatetime) over (partition by id20.dataareaid, id20.inventdimid) as INVENTDIM_MODIFIEDDATETIME\n\t\t\t, max(is20.modifieddatetime) over (partition by id20.dataareaid, id20.inventdimid) as INVENTSITE_MODIFIEDDATETIME\n\t\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.inventdim id20\n\t\tleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.inventsite is20 on\n\t\t\tid20.dataareaid = is20.dataareaid and\n\t\t\tid20.inventsiteid = is20.siteid) id2 on\n\tsl2.dataareaid = id2.dataareaid and\n\tsl2.INVENTDIMID = id2.inventdimid\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dataarea da1 on\n\tsl2.dataareaid = da1.Id\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timezoneinfo tzi1 on\n\tsl2.CREATEDDATETIME >= tzi1.startdate and\n\tsl2.CREATEDDATETIME < tzi1.enddate and\n\tisnull(id2.TIMEZONE, da1.timezone) = tzi1.timezoneid\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dataarea da2 on\n\tst1.dataareaid = da2.Id\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timezoneinfo tzi2 on\n\tst1.createddatetime >= tzi2.startdate and\n\tst1.createddatetime < tzi2.enddate and\n\tda2.timezone = tzi2.timezoneid\nleft join (select id30.dataareaid, id30.inventdimid, max(is30.timezone) over (partition by id30.dataareaid, id30.inventdimid) as timezone\n          from dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.inventdim id30\n          left join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.inventsite is30 on\n                id30.dataareaid = is30.dataareaid and\n                id30.inventsiteid = is30.siteid) id3 on\n    sl1.dataareaid = id3.dataareaid and\n    sl1.inventdimid = id3.inventdimid\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dataarea da3 on\n\tsl1.dataareaid = da3.Id\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timezoneinfo tzi3 on\n\tsl1.createddatetime >= tzi3.startdate and\n\tsl1.createddatetime < tzi3.enddate and\n\tisnull(id3.timezone, da3.timezone) = tzi3.timezoneid\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.mcrsaleslinepriceoverride mslpo1 on\n\tsl1.recid = mslpo1.salesline\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.mcrsaleslinepriceoverride mslpo2 on\n\tmslpo1.recid = mslpo2.recid\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.tpxpriceoverridereasontable tport1 on\n\tmslpo1.dataareaid = tport1.dataareaid and\n\tmslpo1.reasoncode = tport1.subcodeid and\n\tmslpo1.partition = tport1.partition\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as ENUMVALUELABEL\n\t\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\n\t\twhere enumname = 'DocumentStatus'\n\t\tgroup by enumname, enumvalue) tet1 on\n\tst1.documentstatus = tet1.enumvalue\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as ENUMVALUELABEL\n\t\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\n\t\twhere enumname = 'ReturnStatusHeader'\n\t\tgroup by enumname, enumvalue) tet2 on\n\tst1.returnstatus = tet2.enumvalue\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as ENUMVALUELABEL\n\t\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\n\t\twhere enumname = 'SalesStatus'\n\t\tgroup by enumname, enumvalue) tet3 on\n\tst1.salesstatus = tet3.enumvalue\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as ENUMVALUELABEL\n\t\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\n\t\twhere enumname = 'ReturnStatusLine'\n\t\tgroup by enumname, enumvalue) tet4 on\n\tsl1.returnstatus = tet4.enumvalue\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as ENUMVALUELABEL\n\t\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\n\t\twhere enumname = 'SalesStatus'\n\t\tgroup by enumname, enumvalue) tet5 on\n\tsl1.salesstatus = tet5.enumvalue\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as ENUMVALUELABEL\n\t\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\n\t\twhere enumname = 'SalesType'\n\t\tgroup by enumname, enumvalue) tet6 on\n\tst1.salestype = tet6.enumvalue\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as ENUMVALUELABEL\n\t\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\n\t\twhere enumname = 'ShipCarrierDlvType'\n\t\tgroup by enumname, enumvalue) tet7 on\n\tsl1.shipcarrierdlvtype = tet7.enumvalue\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as ENUMVALUELABEL\n\t\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\n\t\twhere enumname = 'TradeLineDlvType'\n\t\tgroup by enumname, enumvalue) tet8 on\n\tsl1.deliverytype = tet8.enumvalue\nleft join (select rtt10.dataareaid, rtt10.salesorderid\n\t\t\t, max(rtdt10.discountorigintype) as DISCOUNTORIGINTYPE\n\t\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.retailtransactiontable rtt10\n\t\tleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.retailtransactiondiscounttrans rtdt10 on\n\t\t\trtt10.dataareaid = rtdt10.dataareaid and\n\t\t\trtt10.terminal = rtdt10.terminalid and\n\t\t\trtt10.store = rtdt10.storeid and\n\t\t\trtt10.transactionid = rtdt10.transactionid\n\t\tgroup by rtt10.dataareaid, rtt10.salesorderid) rtt1 on\n\tsl1.dataareaid = rtt1.dataareaid and\n\tsl1.salesid = rtt1.salesorderid\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as ENUMVALUELABEL\n\t\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\n\t\twhere enumname = 'RetailTransactionType'\n\t\tgroup by enumname, enumvalue) tet9 on\n\trtt1.DISCOUNTORIGINTYPE = tet9.enumvalue\nleft join (select dataareaid, salesorderid, transactionid, discamount, modifieddatetime\n\t\t\t, row_number() over (partition by dataareaid, salesorderid order by receiptid desc, transactionid desc) as ROW_NUM\n\t\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.retailtransactiontable\n\t\twhere entrystatus = 2) rtt2 on\n\trtt2.ROW_NUM = 1 and\n\tsl1.dataareaid = rtt2.dataareaid and\n\tsl1.salesid = rtt2.salesorderid\nleft join (select rtst10.dataareaid, rtst10.transactionid, rtst10.linenum, rtst10.itemid\n\t\t\t\t, row_number() over (partition by rtst10.dataareaid, rtst10.transactionid, rtst10.linenum, rtst10.itemid order by rtst10.terminalid) as ROW_NUM2\n\t\t\t\t, rtdt10.periodicdiscountofferid, rtdt10.discountorigintype\n\t\t\t\t, rpd10.periodicdiscounttype, rpd10.name, rpd10.modifieddatetime\n\t\t\t\t, rdc10.discountcode\n\t\t\t\t, rpdl10.discountpercentorvalue\n\t\t\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.retailtransactionsalestrans rtst10\n\t\t\tleft join (select rtdt20.dataareaid, rtdt20.transactionid, rtdt20.terminalid, rtdt20.salelinenum, rtdt20.storeid, rtdt20.periodicdiscountofferid, rtdt20.discountorigintype\n\t\t\t\t\t\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.retailtransactiondiscounttrans as rtdt20\n\t\t\t\t\t\tinner join (select recid\n\t\t\t\t\t\t\t\t\t\t, row_number() over (partition by dataareaid, transactionid,  terminalid, salelinenum, storeid order by linenum) as ROW_NUM\n\t\t\t\t\t\t\t\t\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.retailtransactiondiscounttrans) rtdt21 on\n\t\t\t\t\t\t\trtdt21.ROW_NUM = 1 and\n\t\t\t\t\t\t\trtdt20.recid = rtdt21.recid) rtdt10 on\n\t\t\t\trtst10.dataareaid = rtdt10.dataareaid and\n\t\t\t\trtst10.transactionid = rtdt10.transactionid and\n\t\t\t\trtst10.terminalid = rtdt10.terminalid and\n\t\t\t\trtst10.linenum = rtdt10.salelinenum and\n\t\t\t\trtst10.store = rtdt10.storeid\n\t\t\tleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.retailperiodicdiscount rpd10 on\n\t\t\t\trtdt10.dataareaid = rpd10.dataareaid and\n\t\t\t\trtdt10.periodicdiscountofferid = rpd10.offerid\n\t\t\tleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.retaildiscountcode rdc10 on\n\t\t\t\trpd10.dataareaid = rdc10.dataareaid and\n\t\t\t\trpd10.discountcode = rdc10.recid\n\t\t\tleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.retailperiodicdiscountline rpdl10 on\n\t\t\t\trtdt10.dataareaid = rpdl10.dataareaid and\n\t\t\t\trtdt10.periodicdiscountofferid = rpdl10.offerid and\n\t\t\t\trtdt10.salelinenum = rpdl10.linenum\n\t\t\t) rtst1 on\n\trtst1.ROW_NUM2 = 1 and\n\tsl1.dataareaid = rtst1.dataareaid and\n\trtt2.transactionid = rtst1.transactionid and\n\tsl1.linenum = rtst1.linenum and\n\tsl1.itemid = rtst1.itemid\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as enumvaluelabel\n\t\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\n\t\twhere enumname = 'RetailDiscountOriginType'\n\t\tgroup by enumname, enumvalue) tet10 on\n\trtst1.discountorigintype = tet10.enumvalue\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as enumvaluelabel\n\t\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\n\t\twhere enumname = 'RetailDiscountOfferTypeBase'\n\t\tgroup by enumname, enumvalue) tet11 on\n\trtst1.periodicdiscounttype = tet11.enumvalue\nwhere \nisnull(sl1.inventtransid , '') != ''\nand isnull(sl1.dataareaid, '') != ''\nand (SELECT MAX(LastUpdateDate) FROM ( VALUES\n                    (sl1.modifieddatetime),\n    \t\t\t\t(isnull(def1.DEFAULTDIMENSION_MODIFIEDDATETIME,'1950-01-01')),\n                    (isnull(st1.modifieddatetime, '1950-01-01')),\n                    (isnull(id1.modifieddatetime, '1950-01-01')),\n\t\t\t\t\t(isnull(invs.modifieddatetime, '1950-01-01')),\n                    (isnull(idc1.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull(ttp1.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull(iokey1.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull(sl2.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull(id2.INVENTDIM_MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull(id2.INVENTSITE_MODIFIEDDATETIME, '1950-01-01')),\n\t\t\t\t\t(isnull(rtst1.modifieddatetime, '1950-01-01')),\n\t\t\t\t\t(isnull(rtt2.modifieddatetime, '1950-01-01'))) AS UpdateDate(LastUpdateDate))\n> '@{variables('v_prv_max_upd_timestamp')}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "DATAAREAID",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DATAAREAID",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "INVENTTRANSID",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "INVENTTRANSID",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "RECID",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "RECID",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "CUSTACCOUNT",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "CUSTACCOUNT",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "CURRENCYCODE",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "CURRENCYCODE",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "CUSTGROUP",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "CUSTGROUP",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "DEFAULTDIMENSION",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "DEFAULTDIMENSION",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "TRANSACTIONCODE",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "TRANSACTIONCODE",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "INVENTDIMID",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "INVENTDIMID",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "ITEMID",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "ITEMID",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "MCSALTITEMNO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "MCSALTITEMNO",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "TPX_RETURNREASONCODEID",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "TPX_RETURNREASONCODEID",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "DELIVERYPOSTALADDRESS",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "DELIVERYPOSTALADDRESS",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "SHIPCARRIERPOSTALADDRESS",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "SHIPCARRIERPOSTALADDRESS",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "DLVMODE",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DLVMODE",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "DLVTERM",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DLVTERM",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "SALESCATEGORY",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "SALESCATEGORY",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "RETURNDISPOSITIONCODEID",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "RETURNDISPOSITIONCODEID",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "SALESGROUP",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "SALESGROUP",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "SALESID",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "SALESID",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "SHIPCARRIERID",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "SHIPCARRIERID",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "TAXGROUP",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "TAXGROUP",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "TAXITEMGROUP",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "TAXITEMGROUP",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "MCSATHENACATALOG",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "MCSATHENACATALOG",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "SALESUNIT",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "SALESUNIT",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "CREATEDBY",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "CREATEDBY",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "LINEDISC",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 6,
														"precision": 38
													},
													"sink": {
														"name": "LINEDISC",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													}
												},
												{
													"source": {
														"name": "LINEPERCENT",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 6,
														"precision": 38
													},
													"sink": {
														"name": "LINEPERCENT",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													}
												},
												{
													"source": {
														"name": "RETURNSTATUS",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "RETURNSTATUS",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "SALESSTATUS",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "SALESSTATUS",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "SHIPCARRIERDLVTYPE",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "SHIPCARRIERDLVTYPE",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "DELIVERYTYPE",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "DELIVERYTYPE",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "COMPLETE",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "COMPLETE",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "ORDERBLOCKED",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "ORDERBLOCKED",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "SCRAP",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "SCRAP",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "STOCKEDPRODUCT",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "STOCKEDPRODUCT",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "CONFIRMEDDLV",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "CONFIRMEDDLV",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "RECEIPTDATECONFIRMED",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "RECEIPTDATECONFIRMED",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "SHIPPINGDATECONFIRMED",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "SHIPPINGDATECONFIRMED",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "TPX_MANUFACTUREDATE",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "TPX_MANUFACTUREDATE",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "TPX_RELATEDORDERDATE",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "TPX_RELATEDORDERDATE",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "RECEIPTDATEREQUESTED",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "RECEIPTDATEREQUESTED",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "RETURNARRIVALDATE",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "RETURNARRIVALDATE",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "RETURNCLOSEDDATE",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "RETURNCLOSEDDATE",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "RETURNDEADLINE",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "RETURNDEADLINE",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "CREATEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "CREATEDDATETIME",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "SHIPPINGDATEREQUESTED",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "SHIPPINGDATEREQUESTED",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "LINENUM",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 16,
														"precision": 38
													},
													"sink": {
														"name": "LINENUM",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													}
												},
												{
													"source": {
														"name": "TPX_PRODUCTIONTIME",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "TPX_PRODUCTIONTIME",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "TPX_REGISTRYNUMBER",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "TPX_REGISTRYNUMBER",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "INVENTTRANSIDRETURN",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "INVENTTRANSIDRETURN",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "EXPECTEDRETQTY",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 6,
														"precision": 38
													},
													"sink": {
														"name": "EXPECTEDRETQTY",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													}
												},
												{
													"source": {
														"name": "QTYORDERED",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 6,
														"precision": 38
													},
													"sink": {
														"name": "QTYORDERED",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													}
												},
												{
													"source": {
														"name": "SALESQTY",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 6,
														"precision": 38
													},
													"sink": {
														"name": "SALESQTY",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													}
												},
												{
													"source": {
														"name": "SALESPRICE",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 6,
														"precision": 38
													},
													"sink": {
														"name": "SALESPRICE",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													}
												},
												{
													"source": {
														"name": "PRICEUNIT",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 12,
														"precision": 38
													},
													"sink": {
														"name": "PRICEUNIT",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													}
												},
												{
													"source": {
														"name": "COSTPRICE",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 6,
														"precision": 38
													},
													"sink": {
														"name": "COSTPRICE",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													}
												},
												{
													"source": {
														"name": "LINEAMOUNT",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 6,
														"precision": 38
													},
													"sink": {
														"name": "LINEAMOUNT",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													}
												},
												{
													"source": {
														"name": "REMAINSALESPHYSICAL",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 6,
														"precision": 38
													},
													"sink": {
														"name": "REMAINSALESPHYSICAL",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													}
												},
												{
													"source": {
														"name": "REMAINSALESFINANCIAL",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 6,
														"precision": 38
													},
													"sink": {
														"name": "REMAINSALESFINANCIAL",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													}
												},
												{
													"source": {
														"name": "TPX_KITITEMID",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "TPX_KITITEMID",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "MCSTAGID",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "MCSTAGID",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "TPXORIGRECEIPTDATECONFIRMED",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "TPXORIGRECEIPTDATECONFIRMED",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "MCSALTSERIALNO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "MCSALTSERIALNO",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "MULTILNDISC",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 6,
														"precision": 38
													},
													"sink": {
														"name": "MULTILNDISC",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													}
												},
												{
													"source": {
														"name": "MULTILNPERCENT",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 6,
														"precision": 38
													},
													"sink": {
														"name": "MULTILNPERCENT",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													}
												},
												{
													"source": {
														"name": "MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "DEFAULTDIMENSION_BUSINESS_UNIT",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DEFAULTDIMENSION_BUSINESS_UNIT",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "DEFAULTDIMENSION_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "DEFAULTDIMENSION_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_SMMCAMPAIGNID",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "SALESTABLE_SMMCAMPAIGNID",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_COMMISSIONGROUP",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "SALESTABLE_COMMISSIONGROUP",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_INVOICEACCOUNT",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "SALESTABLE_INVOICEACCOUNT",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_MARKUPGROUP",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "SALESTABLE_MARKUPGROUP",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_PAYMMODE",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "SALESTABLE_PAYMMODE",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_PAYMENT",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "SALESTABLE_PAYMENT",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_RETURNREASONCODEID",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "SALESTABLE_RETURNREASONCODEID",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_LINEDISC",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "SALESTABLE_LINEDISC",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_SALESORIGINID",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "SALESTABLE_SALESORIGINID",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_SALESPOOLID",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "SALESTABLE_SALESPOOLID",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_PRICEGROUPID",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "SALESTABLE_PRICEGROUPID",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_INVENTSITEID",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "SALESTABLE_INVENTSITEID",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_MODIFIEDBY",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "SALESTABLE_MODIFIEDBY",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_CREATEDBY",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "SALESTABLE_CREATEDBY",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_INVENTLOCATIONID",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "SALESTABLE_INVENTLOCATIONID",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_WORKERSALESRESPONSIBLE",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "SALESTABLE_WORKERSALESRESPONSIBLE",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_WORKERSALESTAKER",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "SALESTABLE_WORKERSALESTAKER",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_DEADLINE",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "SALESTABLE_DEADLINE",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_DELIVERYDATE",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "SALESTABLE_DELIVERYDATE",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_DOCUMENTSTATUS",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "SALESTABLE_DOCUMENTSTATUS",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_RETURNSTATUS",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "SALESTABLE_RETURNSTATUS",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_SALESSTATUS",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "SALESTABLE_SALESSTATUS",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_SALESTYPE",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "SALESTABLE_SALESTYPE",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_ATAGENT",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "SALESTABLE_ATAGENT",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_SHIPCARRIERBLINDSHIPMENT",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "SALESTABLE_SHIPCARRIERBLINDSHIPMENT",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_SHIPCARRIEREXPEDITEDSHIPMENT",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "SALESTABLE_SHIPCARRIEREXPEDITEDSHIPMENT",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_ORDERBLOCKED",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "SALESTABLE_ORDERBLOCKED",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_MCRORDERSTOPPED",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "SALESTABLE_MCRORDERSTOPPED",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_SHIPCARRIERFUELSURCHARGE",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "SALESTABLE_SHIPCARRIERFUELSURCHARGE",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_CREATEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "SALESTABLE_CREATEDDATETIME",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_RECEIPTDATEREQUESTED",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "SALESTABLE_RECEIPTDATEREQUESTED",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_SHIPPINGDATEREQUESTED",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "SALESTABLE_SHIPPINGDATEREQUESTED",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_RECEIPTDATECONFIRMED",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "SALESTABLE_RECEIPTDATECONFIRMED",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_NDS_SUSALLOWCHG",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "SALESTABLE_NDS_SUSALLOWCHG",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_SHIPCARRIERRESIDENTIAL",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "SALESTABLE_SHIPCARRIERRESIDENTIAL",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_TPXORIGRECEIPTDATECONFIRMED",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "SALESTABLE_TPXORIGRECEIPTDATECONFIRMED",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "SALESTABLE_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "SALESTABLE_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "INVENTDIM1_CONFIGID",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "INVENTDIM1_CONFIGID",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "INVENTDIM1_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "INVENTDIM1_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "INVENTDIMCOMBINATION_PDMSTATUS",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "INVENTDIMCOMBINATION_PDMSTATUS",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "INVENTDIMCOMBINATION_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "INVENTDIMCOMBINATION_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "TAMTRADEPROMOTION_PROMOTIONID",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "TAMTRADEPROMOTION_PROMOTIONID",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "TAMTRADEPROMOTION_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "TAMTRADEPROMOTION_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "MCRSALESLINEDROPSHIPMENT_DROPSHIPMENT",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "MCRSALESLINEDROPSHIPMENT_DROPSHIPMENT",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "CUSTPACKINGSLIPTRANS_FIRSTLARGEITEMSHIPDATE",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "CUSTPACKINGSLIPTRANS_FIRSTLARGEITEMSHIPDATE",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "CUSTPACKINGSLIPTRANS_FIRSTLARGEITEMSHIPPEDQTY",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 6,
														"precision": 38
													},
													"sink": {
														"name": "CUSTPACKINGSLIPTRANS_FIRSTLARGEITEMSHIPPEDQTY",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													}
												},
												{
													"source": {
														"name": "CUSTPACKINGSLIPTRANS_SHIPPEDQTY",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 6,
														"precision": 38
													},
													"sink": {
														"name": "CUSTPACKINGSLIPTRANS_SHIPPEDQTY",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													}
												},
												{
													"source": {
														"name": "CUSTPACKINGSLIPTRANS_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "CUSTPACKINGSLIPTRANS_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "SALESLINE2_CREATEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "SALESLINE2_CREATEDDATETIME",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "SALESLINE2_INVENTDIMID",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "SALESLINE2_INVENTDIMID",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "SALESLINE2_SALESID",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "SALESLINE2_SALESID",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "SALESLINE2_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "SALESLINE2_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "INVENTDIM2_TIMEZONE",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "INVENTDIM2_TIMEZONE",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "INVENTDIM2_INVENTDIM_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "INVENTDIM2_INVENTDIM_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "INVENTDIM2_INVENTSITE_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "INVENTDIM2_INVENTSITE_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "DATAAREA1_TIMEZONE",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "DATAAREA1_TIMEZONE",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "TIMEZONEINFO1_TIMEBIAS",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "TIMEZONEINFO1_TIMEBIAS",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "DATAAREA2_TIMEZONE",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "DATAAREA2_TIMEZONE",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "TIMEZONEINFO2_TIMEBIAS",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "TIMEZONEINFO2_TIMEBIAS",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "DATAAREA3_TIMEZONE",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "DATAAREA3_TIMEZONE",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "TIMEZONEINFO3_TIMEBIAS",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "TIMEZONEINFO3_TIMEBIAS",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "MCRSALESLINEPRICEOVERRIDE1_RECID",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "MCRSALESLINEPRICEOVERRIDE1_RECID",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "MCRSALESLINEPRICEOVERRIDE2_REASONCODE",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "MCRSALESLINEPRICEOVERRIDE2_REASONCODE",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "TPXPRICEOVERRIDEREASONTABLE_DESCRIPTION",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "TPXPRICEOVERRIDEREASONTABLE_DESCRIPTION",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_DOCUMENTSTATUS",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_DOCUMENTSTATUS",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_RETURNSTATUSHEADER",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_RETURNSTATUSHEADER",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_SALESSTATUSHEADER",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_SALESSTATUSHEADER",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_RETURNSTATUSLINE",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_RETURNSTATUSLINE",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "TIMEXTENDERENUMTABLE5_ENUMVALUELABEL_SALESSTATUSLINE",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "TIMEXTENDERENUMTABLE5_ENUMVALUELABEL_SALESSTATUSLINE",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "TIMEXTENDERENUMTABLE6_ENUMVALUELABEL_SALESTYPE",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "TIMEXTENDERENUMTABLE6_ENUMVALUELABEL_SALESTYPE",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "TIMEXTENDERENUMTABLE7_ENUMVALUELABEL_SHIPCARRIERDLVTYPE",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "TIMEXTENDERENUMTABLE7_ENUMVALUELABEL_SHIPCARRIERDLVTYPE",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "TIMEXTENDERENUMTABLE8_ENUMVALUELABEL_TRADELINEDLVTYPE",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "TIMEXTENDERENUMTABLE8_ENUMVALUELABEL_TRADELINEDLVTYPE",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "RETAILTRANSACTIONDISCOUNTTRANS_DISCOUNTORIGINTYPE",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "RETAILTRANSACTIONDISCOUNTTRANS_DISCOUNTORIGINTYPE",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "TIMEXTENDERENUMTABLE8_ENUMVALUELABEL_RETAILTRANSACTIONTYPE",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "TIMEXTENDERENUMTABLE8_ENUMVALUELABEL_RETAILTRANSACTIONTYPE",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "RETAILPERIODICDISCOUNT_NAME",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "RETAILPERIODICDISCOUNT_NAME",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "RETAILPERIODICDISCOUNT_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "RETAILPERIODICDISCOUNT_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "RETAILTRANSACTIONTABLE_DISCAMOUNT",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 6,
														"precision": 38
													},
													"sink": {
														"name": "RETAILTRANSACTIONTABLE_DISCAMOUNT",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													}
												},
												{
													"source": {
														"name": "RETAILTRANSACTIONTABLE_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "RETAILTRANSACTIONTABLE_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "RETAILDISCOUNTCODE_DISCOUNTCODE",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "RETAILDISCOUNTCODE_DISCOUNTCODE",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "RETAILPERIODICDISCOUNTLINE_DISCPCT",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 6,
														"precision": 38
													},
													"sink": {
														"name": "RETAILPERIODICDISCOUNTLINE_DISCPCT",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													}
												},
												{
													"source": {
														"name": "TIMEXTENDERENUMTABLE10_ENUMVALUELABEL_DISCOUNTORIGINTYPE",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "TIMEXTENDERENUMTABLE10_ENUMVALUELABEL_DISCOUNTORIGINTYPE",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "TIMEXTENDERENUMTABLE11_ENUMVALUELABEL_PERIODICDISCOUNTTYPE",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "TIMEXTENDERENUMTABLE11_ENUMVALUELABEL_PERIODICDISCOUNTTYPE",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "PDMSTATUS_NAME",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "PDMSTATUS_NAME",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "PRODDATE"
													},
													"sink": {
														"name": "PRODDATE"
													}
												},
												{
													"source": {
														"name": "LATEST_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "LATEST_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "HK_SOURCE_NAME",
														"type": "String"
													},
													"sink": {
														"name": "HK_SOURCE_NAME",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "HK_JOB_RUN_ID",
														"type": "String"
													},
													"sink": {
														"name": "HK_JOB_RUN_ID",
														"type": "String",
														"physicalType": "UTF8"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_fabric_wh",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_parquet",
											"type": "DatasetReference",
											"parameters": {
												"p_directory": {
													"value": "@pipeline().parameters.p_temp_directory",
													"type": "Expression"
												},
												"p_root_system": {
													"value": "@pipeline().globalParameters.rootDir",
													"type": "Expression"
												},
												"p_file_name": {
													"value": "@pipeline().parameters.p_temp_file_nm",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "FACT_SALES_ORDERS"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "SALESLINE"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "SALESLINE"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_temp_directory": {
						"type": "string",
						"defaultValue": "temp_files"
					},
					"p_temp_file_nm": {
						"type": "string",
						"defaultValue": "fact_sales_order_nala.parquet"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					},
					"p_tgt_raw_table_nm2": {
						"type": "string",
						"defaultValue": "INVENTSERIAL"
					}
				},
				"variables": {
					"v_prv_max_upd_timestamp": {
						"type": "String"
					},
					"v_prv_max_upd_timestamp2": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-12T01:28:30Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_salestable_to_dim_sales_order')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "load_dim_sales_order",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "load_dim_sales_order",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "switch_nala_retail_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_load_dim_sales_order",
								"type": "DataFlowReference",
								"parameters": {
									"df_prev_max_timestamp": {
										"value": "'@{variables('v_prev_max_timestamp')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SrcSalestable": {
										"p_directory": {
											"value": "@pipeline().parameters.p_temp_directory",
											"type": "Expression"
										},
										"p_root_system": {
											"value": "@pipeline().globalParameters.rootDir",
											"type": "Expression"
										},
										"p_file_name": {
											"value": "@pipeline().parameters.p_temp_file_nm",
											"type": "Expression"
										}
									},
									"LkpTruckVolume": {
										"p_tgt_table_name": {
											"value": "@pipeline().parameters.p_lkp_curate_table_nm",
											"type": "Expression"
										},
										"p_tgt_schema_name": {
											"value": "@pipeline().parameters.p_tgt_curate_schema_nm",
											"type": "Expression"
										},
										"p_ls_DbName": {
											"value": "@pipeline().globalParameters.snow_curateDb",
											"type": "Expression"
										},
										"p_ls_Env": {
											"value": "@pipeline().globalParameters.environment",
											"type": "Expression"
										}
									},
									"Salestable": {
										"p_tgt_table_name": {
											"value": "@pipeline().parameters.p_tgt_raw_table_nm",
											"type": "Expression"
										},
										"p_tgt_schema_name": {
											"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
											"type": "Expression"
										},
										"p_ls_DbName": {
											"value": "@pipeline().globalParameters.snow_rawDb",
											"type": "Expression"
										},
										"p_ls_Env": {
											"value": "@pipeline().globalParameters.environment",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "IR-Snowflake-NALA",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prev_max_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')\n\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "switch_nala_retail_d365",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "salestable_to_adls_nala",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select st1.DATAAREAID, st1.SALESID, st1.CUSTOMERREF, st1.PURCHORDERFORMNUM, st1.SALESTYPE, st1.RETURNITEMNUM, st1.RETURNREPLACEMENTCREATED, st1.SALESPOOLID, st1.PLANNUMBER as PLANNUMBER, st1.RETURNREPLACEMENTID, st1.MODIFIEDDATETIME, mhct1.MCRHOLDCODE, sl1.LARGEITEMORDEREDQTY as SALESLINE_LARGEITEMORDEREDQTY, sl1.TOTALLARGEITEMVOLUME as SALESLINE_TOTALLARGEITEMVOLUME, sl1.MODIFIEDDATETIME as SALESLINE_MODIFIEDDATETIME, iokey1.FIRSTLARGEITEMSHIPPEDQTY as CUSTPACKINGSLIPTRANS_FIRSTLARGEITEMSHIPPEDQTY ,iokey1.MODIFIEDDATETIME as CUSTPACKINGSLIPTRANS_MODIFIEDDATETIME ,(SELECT MAX(LastUpdateDate) FROM (VALUES (st1.MODIFIEDDATETIME), (isnull(sl1.MODIFIEDDATETIME, '1950-01-01')), (isnull(iokey1.MODIFIEDDATETIME, '1950-01-01'))) AS UpdateDate(LastUpdateDate)) AS LATEST_MODIFIEDDATETIME from dbo.SALESTABLE st1 left join (select DATAAREAID, INVENTREFID, MCRHOLDCODE                 , row_number() over (partition by DATAAREAID, INVENTREFID order by MCRHOLDDATETIME desc) as ROW_NUM             from dbo.MCRHOLDCODETRANS             where MCRCLEARED = 0) mhct1 on     mhct1.ROW_NUM = 1 and     st1.DATAAREAID = mhct1.DATAAREAID and     st1.SALESID = mhct1.INVENTREFID left join (select sl20.DATAAREAID, sl20.SALESID, max(sl20.MODIFIEDDATETIME) as MODIFIEDDATETIME             , sum(case when it20.ISLARGEITEM = 1 then sl20.SALESQTY else 0 end) as LARGEITEMORDEREDQTY             , sum(sl20.SALESQTY * (case when it20.ISLARGEITEM = 1 then it20.UNITVOLUME else 0 end)) as TOTALLARGEITEMVOLUME         from dbo.SALESLINE sl20         left join (select it10.DATAAREAID, it10.ITEMID, it10.UNITVOLUME                     , max(case when def10.E_CATEGORY in ('10', '50', '60') then 1 else 0 end) as ISLARGEITEM                 from dbo.INVENTTABLE it10                 left join (select distinct it1.DEFAULTDIMENSION                                 , max(                                     case when da1.NAME = 'E_Category' then davsi1.DISPLAYVALUE                                         else null                                         end                                     ) over (partition by it1.DEFAULTDIMENSION) as E_CATEGORY                             from (select distinct DEFAULTDIMENSION from dbo.INVENTTABLE) it1                             left join dbo.DIMENSIONATTRIBUTEVALUESETITEM davsi1 on                                 it1.DEFAULTDIMENSION = davsi1.DIMENSIONATTRIBUTEVALUESET                             left join dbo.DIMENSIONATTRIBUTEVALUE dav1 on                                 davsi1.DIMENSIONATTRIBUTEVALUE = dav1.RECID                             left join dbo.DIMENSIONATTRIBUTE da1 on                                 dav1.DIMENSIONATTRIBUTE = da1.RECID                             ) def10 on                     it10.DEFAULTDIMENSION = def10.DEFAULTDIMENSION                 group by it10.DATAAREAID, it10.ITEMID, it10.UNITVOLUME) it20 on             sl20.DATAAREAID = it20.DATAAREAID and             sl20.ITEMID = it20.ITEMID         group by sl20.DATAAREAID, sl20.SALESID) sl1 on     st1.DATAAREAID = sl1.DATAAREAID and     st1.SALESID = sl1.SALESID left join (select cpst1.DATAAREAID, cpst1.SALESID , max(cpst1.MODIFIEDDATETIME) as MODIFIEDDATETIME             , sum(cpst1.QTY) as FIRSTLARGEITEMSHIPPEDQTY         from dbo.CUSTPACKINGSLIPTRANS cpst1         left join (select cpst10.DATAAREAID, cpst10.SALESID                     , min(it10.LARGEITEMSHIPDATE) as FIRSTLARGEITEMSHIPDATE                     , max(it10.LARGEITEMSHIPDATE) as LARGEITEMSHIPDATE                 from dbo.CUSTPACKINGSLIPTRANS cpst10                 left join (select cpst20.DATAAREAID, cpst20.ORIGSALESID                                 , max(case when it20.ISLARGEITEM = 1 then scp20.SHIPDATE else '1900-01-01' end) as LARGEITEMSHIPDATE                             from dbo.CUSTPACKINGSLIPTRANS cpst20                             left join dbo.SHIPCARRIERPACKAGE scp20 on                                 cpst20.PACKINGSLIPID = scp20.PACKINGSLIPID and                                 cpst20.DATAAREAID = scp20.DATAAREAID and                                 cpst20.ORIGSALESID = scp20.SALESID                             left join (select it10.DATAAREAID, it10.ITEMID                                         , max(case when def10.E_CATEGORY in ('10', '50', '60') then 1 else 0 end) as ISLARGEITEM                                     from dbo.INVENTTABLE it10                                     left join (select distinct it1.DEFAULTDIMENSION                                                     , max(                                                         case when da1.NAME = 'E_Category' then davsi1.DISPLAYVALUE                                                             else null                                                             end                                                         ) over (partition by it1.DEFAULTDIMENSION) as E_CATEGORY                                                 from (select distinct DEFAULTDIMENSION from dbo.INVENTTABLE) it1                                                 left join dbo.DIMENSIONATTRIBUTEVALUESETITEM davsi1 on                                                     it1.DEFAULTDIMENSION = davsi1.DIMENSIONATTRIBUTEVALUESET                                                 left join dbo.DIMENSIONATTRIBUTEVALUE dav1 on                                                     davsi1.DIMENSIONATTRIBUTEVALUE = dav1.RECID                                                 left join dbo.DIMENSIONATTRIBUTE da1 on                                                     dav1.DIMENSIONATTRIBUTE = da1.RECID                                                 ) def10 on                                         it10.DEFAULTDIMENSION = def10.DEFAULTDIMENSION                                     group by it10.DATAAREAID, it10.ITEMID) it20 on                                 cpst20.DATAAREAID = it20.DATAAREAID and                                 cpst20.ITEMID = it20.ITEMID                             group by cpst20.DATAAREAID, cpst20.ORIGSALESID) it10 on                     cpst10.DATAAREAID = it10.DATAAREAID and                     cpst10.SALESID = it10.ORIGSALESID                 where it10.LARGEITEMSHIPDATE != '1900-01-01'                 group by cpst10.DATAAREAID, cpst10.SALESID) cpst2 on             cpst1.DATAAREAID = cpst2.DATAAREAID and             cpst1.SALESID = cpst2.SALESID and             cpst2.FIRSTLARGEITEMSHIPDATE = cpst2.LARGEITEMSHIPDATE         group by cpst1.DATAAREAID, cpst1.SALESID) iokey1 on     st1.DATAAREAID = iokey1.DATAAREAID and     st1.SALESID = iokey1.SALESID where st1.SALESID is not null",
														"type": "Expression"
													},
													"queryTimeout": "20:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "ParquetSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "ParquetWriteSettings"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "SALESID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "CUSTOMERREF",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "CUSTOMERREF",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "PURCHORDERFORMNUM",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "PURCHORDERFORMNUM",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTYPE",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "SALESTYPE",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "RETURNITEMNUM",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "RETURNITEMNUM",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "RETURNREPLACEMENTCREATED",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "RETURNREPLACEMENTCREATED",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "SALESPOOLID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "SALESPOOLID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "PLANNUMBER",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "PLANNUMBER",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "RETURNREPLACEMENTID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "RETURNREPLACEMENTID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "MCRHOLDCODE",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "MCRHOLDCODE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESLINE_LARGEITEMORDEREDQTY",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 16,
																"precision": 38
															},
															"sink": {
																"name": "SALESLINE_LARGEITEMORDEREDQTY",
																"type": "Decimal",
																"physicalType": "DECIMAL"
															}
														},
														{
															"source": {
																"name": "SALESLINE_TOTALLARGEITEMVOLUME",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 6,
																"precision": 38
															},
															"sink": {
																"name": "SALESLINE_TOTALLARGEITEMVOLUME",
																"type": "Decimal",
																"physicalType": "DECIMAL"
															}
														},
														{
															"source": {
																"name": "SALESLINE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "SALESLINE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "CUSTPACKINGSLIPTRANS_FIRSTLARGEITEMSHIPPEDQTY",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 16,
																"precision": 38
															},
															"sink": {
																"name": "CUSTPACKINGSLIPTRANS_FIRSTLARGEITEMSHIPPEDQTY",
																"type": "Decimal",
																"physicalType": "DECIMAL"
															}
														},
														{
															"source": {
																"name": "CUSTPACKINGSLIPTRANS_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "CUSTPACKINGSLIPTRANS_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String",
																"physicalType": "UTF8"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": true
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_parquet",
													"type": "DatasetReference",
													"parameters": {
														"p_directory": {
															"value": "@pipeline().parameters.p_temp_directory",
															"type": "Expression"
														},
														"p_root_system": {
															"value": "@pipeline().globalParameters.rootDir",
															"type": "Expression"
														},
														"p_file_name": {
															"value": "@pipeline().parameters.p_temp_file_nm",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "salestable_to_adls_nala",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('salestable_to_adls_nala').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('salestable_to_adls_nala').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('salestable_to_adls_nala').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('salestable_to_adls_nala').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('salestable_to_adls_nala').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "2",
									"activities": [
										{
											"name": "salestable_to_adls_retail",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select st1.DATAAREAID, st1.SALESID, st1.CUSTOMERREF, st1.PURCHORDERFORMNUM, st1.SALESTYPE, st1.RETURNITEMNUM, st1.RETURNREPLACEMENTCREATED, st1.SALESPOOLID, null as PLANNUMBER, st1.RETURNREPLACEMENTID, st1.MODIFIEDDATETIME, mhct1.MCRHOLDCODE, sl1.LARGEITEMORDEREDQTY as SALESLINE_LARGEITEMORDEREDQTY, sl1.TOTALLARGEITEMVOLUME as SALESLINE_TOTALLARGEITEMVOLUME, sl1.MODIFIEDDATETIME as SALESLINE_MODIFIEDDATETIME, iokey1.FIRSTLARGEITEMSHIPPEDQTY as CUSTPACKINGSLIPTRANS_FIRSTLARGEITEMSHIPPEDQTY ,iokey1.MODIFIEDDATETIME as CUSTPACKINGSLIPTRANS_MODIFIEDDATETIME ,(SELECT MAX(LastUpdateDate) FROM (VALUES (st1.MODIFIEDDATETIME), (isnull(sl1.MODIFIEDDATETIME, '1950-01-01')), (isnull(iokey1.MODIFIEDDATETIME, '1950-01-01'))) AS UpdateDate(LastUpdateDate)) AS LATEST_MODIFIEDDATETIME from dbo.SALESTABLE st1 left join (select DATAAREAID, INVENTREFID, MCRHOLDCODE                 , row_number() over (partition by DATAAREAID, INVENTREFID order by MCRHOLDDATETIME desc) as ROW_NUM             from dbo.MCRHOLDCODETRANS             where MCRCLEARED = 0) mhct1 on     mhct1.ROW_NUM = 1 and     st1.DATAAREAID = mhct1.DATAAREAID and     st1.SALESID = mhct1.INVENTREFID left join (select sl20.DATAAREAID, sl20.SALESID, max(sl20.MODIFIEDDATETIME) as MODIFIEDDATETIME             , sum(case when it20.ISLARGEITEM = 1 then sl20.SALESQTY else 0 end) as LARGEITEMORDEREDQTY             , sum(sl20.SALESQTY * (case when it20.ISLARGEITEM = 1 then it20.UNITVOLUME else 0 end)) as TOTALLARGEITEMVOLUME         from dbo.SALESLINE sl20         left join (select it10.DATAAREAID, it10.ITEMID, it10.UNITVOLUME                     , max(case when def10.E_CATEGORY in ('10', '50', '60') then 1 else 0 end) as ISLARGEITEM                 from dbo.INVENTTABLE it10                 left join (select distinct it1.DEFAULTDIMENSION                                 , max(                                     case when da1.NAME = 'E_Category' then davsi1.DISPLAYVALUE                                         else null                                         end                                     ) over (partition by it1.DEFAULTDIMENSION) as E_CATEGORY                             from (select distinct DEFAULTDIMENSION from dbo.INVENTTABLE) it1                             left join dbo.DIMENSIONATTRIBUTEVALUESETITEM davsi1 on                                 it1.DEFAULTDIMENSION = davsi1.DIMENSIONATTRIBUTEVALUESET                             left join dbo.DIMENSIONATTRIBUTEVALUE dav1 on                                 davsi1.DIMENSIONATTRIBUTEVALUE = dav1.RECID                             left join dbo.DIMENSIONATTRIBUTE da1 on                                 dav1.DIMENSIONATTRIBUTE = da1.RECID                             ) def10 on                     it10.DEFAULTDIMENSION = def10.DEFAULTDIMENSION                 group by it10.DATAAREAID, it10.ITEMID, it10.UNITVOLUME) it20 on             sl20.DATAAREAID = it20.DATAAREAID and             sl20.ITEMID = it20.ITEMID         group by sl20.DATAAREAID, sl20.SALESID) sl1 on     st1.DATAAREAID = sl1.DATAAREAID and     st1.SALESID = sl1.SALESID left join (select cpst1.DATAAREAID, cpst1.SALESID , max(cpst1.MODIFIEDDATETIME) as MODIFIEDDATETIME             , sum(cpst1.QTY) as FIRSTLARGEITEMSHIPPEDQTY         from dbo.CUSTPACKINGSLIPTRANS cpst1         left join (select cpst10.DATAAREAID, cpst10.SALESID                     , min(it10.LARGEITEMSHIPDATE) as FIRSTLARGEITEMSHIPDATE                     , max(it10.LARGEITEMSHIPDATE) as LARGEITEMSHIPDATE                 from dbo.CUSTPACKINGSLIPTRANS cpst10                 left join (select cpst20.DATAAREAID, cpst20.ORIGSALESID                                 , max(case when it20.ISLARGEITEM = 1 then scp20.SHIPDATE else '1900-01-01' end) as LARGEITEMSHIPDATE                             from dbo.CUSTPACKINGSLIPTRANS cpst20                             left join dbo.SHIPCARRIERPACKAGE scp20 on                                 cpst20.PACKINGSLIPID = scp20.PACKINGSLIPID and                                 cpst20.DATAAREAID = scp20.DATAAREAID and                                 cpst20.ORIGSALESID = scp20.SALESID                             left join (select it10.DATAAREAID, it10.ITEMID                                         , max(case when def10.E_CATEGORY in ('10', '50', '60') then 1 else 0 end) as ISLARGEITEM                                     from dbo.INVENTTABLE it10                                     left join (select distinct it1.DEFAULTDIMENSION                                                     , max(                                                         case when da1.NAME = 'E_Category' then davsi1.DISPLAYVALUE                                                             else null                                                             end                                                         ) over (partition by it1.DEFAULTDIMENSION) as E_CATEGORY                                                 from (select distinct DEFAULTDIMENSION from dbo.INVENTTABLE) it1                                                 left join dbo.DIMENSIONATTRIBUTEVALUESETITEM davsi1 on                                                     it1.DEFAULTDIMENSION = davsi1.DIMENSIONATTRIBUTEVALUESET                                                 left join dbo.DIMENSIONATTRIBUTEVALUE dav1 on                                                     davsi1.DIMENSIONATTRIBUTEVALUE = dav1.RECID                                                 left join dbo.DIMENSIONATTRIBUTE da1 on                                                     dav1.DIMENSIONATTRIBUTE = da1.RECID                                                 ) def10 on                                         it10.DEFAULTDIMENSION = def10.DEFAULTDIMENSION                                     group by it10.DATAAREAID, it10.ITEMID) it20 on                                 cpst20.DATAAREAID = it20.DATAAREAID and                                 cpst20.ITEMID = it20.ITEMID                             group by cpst20.DATAAREAID, cpst20.ORIGSALESID) it10 on                     cpst10.DATAAREAID = it10.DATAAREAID and                     cpst10.SALESID = it10.ORIGSALESID                 where it10.LARGEITEMSHIPDATE != '1900-01-01'                 group by cpst10.DATAAREAID, cpst10.SALESID) cpst2 on             cpst1.DATAAREAID = cpst2.DATAAREAID and             cpst1.SALESID = cpst2.SALESID and             cpst2.FIRSTLARGEITEMSHIPDATE = cpst2.LARGEITEMSHIPDATE         group by cpst1.DATAAREAID, cpst1.SALESID) iokey1 on     st1.DATAAREAID = iokey1.DATAAREAID and     st1.SALESID = iokey1.SALESID where st1.SALESID is not null",
														"type": "Expression"
													},
													"queryTimeout": "20:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "ParquetSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "ParquetWriteSettings"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "SALESID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "CUSTOMERREF",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "CUSTOMERREF",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "PURCHORDERFORMNUM",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "PURCHORDERFORMNUM",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTYPE",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "SALESTYPE",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "RETURNITEMNUM",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "RETURNITEMNUM",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "RETURNREPLACEMENTCREATED",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "RETURNREPLACEMENTCREATED",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "SALESPOOLID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "SALESPOOLID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "PLANNUMBER",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "PLANNUMBER",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "RETURNREPLACEMENTID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "RETURNREPLACEMENTID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "MCRHOLDCODE",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "MCRHOLDCODE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESLINE_LARGEITEMORDEREDQTY",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 16,
																"precision": 38
															},
															"sink": {
																"name": "SALESLINE_LARGEITEMORDEREDQTY",
																"type": "Decimal",
																"physicalType": "DECIMAL"
															}
														},
														{
															"source": {
																"name": "SALESLINE_TOTALLARGEITEMVOLUME",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 6,
																"precision": 38
															},
															"sink": {
																"name": "SALESLINE_TOTALLARGEITEMVOLUME",
																"type": "Decimal",
																"physicalType": "DECIMAL"
															}
														},
														{
															"source": {
																"name": "SALESLINE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "SALESLINE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "CUSTPACKINGSLIPTRANS_FIRSTLARGEITEMSHIPPEDQTY",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 16,
																"precision": 38
															},
															"sink": {
																"name": "CUSTPACKINGSLIPTRANS_FIRSTLARGEITEMSHIPPEDQTY",
																"type": "Decimal",
																"physicalType": "DECIMAL"
															}
														},
														{
															"source": {
																"name": "CUSTPACKINGSLIPTRANS_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "CUSTPACKINGSLIPTRANS_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String",
																"physicalType": "UTF8"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": true
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.retail_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.retail_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_parquet",
													"type": "DatasetReference",
													"parameters": {
														"p_directory": {
															"value": "@pipeline().parameters.p_temp_directory",
															"type": "Expression"
														},
														"p_root_system": {
															"value": "@pipeline().globalParameters.rootDir",
															"type": "Expression"
														},
														"p_file_name": {
															"value": "@pipeline().parameters.p_temp_file_nm",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "retail_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "salestable_to_adls_retail",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('salestable_to_adls_retail').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('salestable_to_adls_retail').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('salestable_to_adls_retail').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('salestable_to_adls_retail').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_retail_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "retail_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('salestable_to_adls_retail').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "salestable_to_adls_d365",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "WarehouseSource",
											"additionalColumns": [
												{
													"name": "HK_JOB_RUN_ID",
													"value": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													}
												},
												{
													"name": "HK_SOURCE_NAME",
													"value": {
														"value": "@pipeline().parameters.p_src_nm",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "@concat('select\nst1.dataareaid as DATAAREAID\n, st1.salesid as SALESID\n, st1.customerref as CUSTOMERREF\n, st1.purchorderformnum as PURCHORDERFORMNUM\n, st1.salestype as SALESTYPE\n, st1.returnitemnum as RETURNITEMNUM\n, st1.returnreplacementcreated as RETURNREPLACEMENTCREATED\n, st1.salespoolid as SALESPOOLID\n, st1.plannumber as PLANNUMBER\n, st1.returnreplacementid as RETURNREPLACEMENTID\n, st1.modifieddatetime as MODIFIEDDATETIME\n, mhct1.mcrholdcode as MCRHOLDCODE\n, sl1.LARGEITEMORDEREDQTY as SALESLINE_LARGEITEMORDEREDQTY\n, sl1.TOTALLARGEITEMVOLUME as SALESLINE_TOTALLARGEITEMVOLUME\n, sl1.MODIFIEDDATETIME as SALESLINE_MODIFIEDDATETIME\n, iokey1.FIRSTLARGEITEMSHIPPEDQTY as CUSTPACKINGSLIPTRANS_FIRSTLARGEITEMSHIPPEDQTY\n,iokey1.MODIFIEDDATETIME as CUSTPACKINGSLIPTRANS_MODIFIEDDATETIME\n,(select max(lastupdatedate)\nfrom (values (st1.modifieddatetime),\n(isnull(sl1.MODIFIEDDATETIME, ''1950-01-01'')),\n(isnull(iokey1.MODIFIEDDATETIME, ''1950-01-01''))) as updatedate(lastupdatedate)) as LATEST_MODIFIEDDATETIME\nfrom\n',pipeline().globalParameters.d365_dbName,'.','salestable st1\nleft join (select dataareaid, inventrefid, mcrholdcode\n\t\t\t\t, row_number() over (partition by dataareaid, inventrefid order by mcrholddatetime desc) as ROW_NUM\n\t\t\tfrom ',pipeline().globalParameters.d365_dbName,'.','mcrholdcodetrans\n\t\t\twhere mcrcleared = 0) mhct1 on\n\tmhct1.ROW_NUM = 1 and\n\tst1.dataareaid = mhct1.dataareaid and\n\tst1.salesid = mhct1.inventrefid\nleft join (select sl20.dataareaid, sl20.salesid, max(sl20.modifieddatetime) as MODIFIEDDATETIME\n\t\t\t, sum(case when it20.ISLARGEITEM = 1 then sl20.salesqty else 0 end) as LARGEITEMORDEREDQTY\n\t\t\t, sum(sl20.salesqty * (case when it20.ISLARGEITEM = 1 then it20.unitvolume else 0 end)) as TOTALLARGEITEMVOLUME\n\t\tfrom ',pipeline().globalParameters.d365_dbName,'.','salesline sl20\n\t\tleft join (select it10.dataareaid, it10.itemid, it10.unitvolume\n\t\t\t\t\t, max(case when def10.E_CATEGORY in (''10'', ''50'', ''60'') then 1 else 0 end) as ISLARGEITEM\n\t\t\t\tfrom ',pipeline().globalParameters.d365_dbName,'.','inventtable it10\n\t\t\t\tleft join (select distinct it1.defaultdimension\n\t\t\t\t\t\t\t\t, max(\n\t\t\t\t\t\t\t\t\tcase when da1.name = ''E_category'' then davsi1.displayvalue\n\t\t\t\t\t\t\t\t\t\telse null\n\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t\t) over (partition by it1.defaultdimension) as E_CATEGORY\n\t\t\t\t\t\t\tfrom (select distinct defaultdimension from ',pipeline().globalParameters.d365_dbName,'.','inventtable) it1\n\t\t\t\t\t\t\tleft join ',pipeline().globalParameters.d365_dbName,'.','dimensionattributevaluesetitem davsi1 on\n\t\t\t\t\t\t\t\tit1.defaultdimension = davsi1.dimensionattributevalueset\n\t\t\t\t\t\t\tleft join ',pipeline().globalParameters.d365_dbName,'.','dimensionattributevalue dav1 on\n\t\t\t\t\t\t\t\tdavsi1.dimensionattributevalue = dav1.recid\n\t\t\t\t\t\t\tleft join ',pipeline().globalParameters.d365_dbName,'.','dimensionattribute da1 on\n\t\t\t\t\t\t\t\tdav1.dimensionattribute = da1.recid\n\t\t\t\t\t\t\t) def10 on\n\t\t\t\t\tit10.defaultdimension = def10.defaultdimension\n\t\t\t\tgroup by it10.dataareaid, it10.itemid, it10.unitvolume) it20 on\n\t\t\tsl20.dataareaid = it20.dataareaid and\n\t\t\tsl20.itemid = it20.itemid\n\t\tgroup by sl20.dataareaid, sl20.salesid) sl1 on\n\tst1.dataareaid = sl1.dataareaid and\n\tst1.salesid = sl1.salesid\nleft join (select cpst1.dataareaid, cpst1.salesid, max(cpst1.modifieddatetime) as MODIFIEDDATETIME\n\t\t\t, sum(cpst1.qty) as FIRSTLARGEITEMSHIPPEDQTY\n\t\tfrom ',pipeline().globalParameters.d365_dbName,'.','custpackingsliptrans cpst1\n\t\tleft join (select cpst10.dataareaid, cpst10.salesid\n\t\t\t\t\t, min(it10.LARGEITEMSHIPDATE) as FIRSTLARGEITEMSHIPDATE\n\t\t\t\t\t, max(it10.LARGEITEMSHIPDATE) as LARGEITEMSHIPDATE\n\t\t\t\tfrom ',pipeline().globalParameters.d365_dbName,'.','custpackingsliptrans cpst10\n\t\t\t\tleft join (select cpst20.dataareaid, cpst20.origsalesid\n\t\t\t\t\t\t\t\t, max(case when it20.ISLARGEITEM = 1 then scp20.deliverydate else ''1900-01-01'' end) as LARGEITEMSHIPDATE\n\t\t\t\t\t\t\tfrom ',pipeline().globalParameters.d365_dbName,'.','custpackingsliptrans cpst20\n\t\t\t\t\t\t\tleft join (select cpsj1.salesid, cpsj1.packingslipid, cpsj1.dataareaid, cpsj1.deliverydate\n\t\t\t\t\t\t\t\t\tfrom ',pipeline().globalParameters.d365_dbName,'.','custpackingslipjour cpsj1\n\t\t\t\t\t\t\t\t\tinner join ',pipeline().globalParameters.d365_dbName,'.','tmscarrierservice tcs1 on\n\t\t\t\t\t\t\t\t\t\tcpsj1.dataareaid = tcs1.dataareaid and\n\t\t\t\t\t\t\t\t\t\tcpsj1.dlvmode = tcs1.dlvmodeid) scp20 on\n\t\t\t\t\t\t\t\tcpst20.packingslipid = scp20.packingslipid and\n\t\t\t\t\t\t\t\tcpst20.dataareaid = scp20.dataareaid and\n\t\t\t\t\t\t\t\tcpst20.origsalesid = scp20.salesid\n\t\t\t\t\t\t\tleft join (select it10.dataareaid, it10.itemid\n\t\t\t\t\t\t\t\t\t\t, max(case when def10.E_CATEGORY in (''10'', ''50'', ''60'') then 1 else 0 end) as ISLARGEITEM\n\t\t\t\t\t\t\t\t\tfrom ',pipeline().globalParameters.d365_dbName,'.','inventtable it10\n\t\t\t\t\t\t\t\t\tleft join (select distinct it1.defaultdimension\n\t\t\t\t\t\t\t\t\t\t\t\t\t, max(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase when da1.name = ''E_category'' then davsi1.displayvalue\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse null\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t) over (partition by it1.defaultdimension) as E_CATEGORY\n\t\t\t\t\t\t\t\t\t\t\t\tfrom (select distinct defaultdimension from ',pipeline().globalParameters.d365_dbName,'.','inventtable) it1\n\t\t\t\t\t\t\t\t\t\t\t\tleft join ',pipeline().globalParameters.d365_dbName,'.','dimensionattributevaluesetitem davsi1 on\n\t\t\t\t\t\t\t\t\t\t\t\t\tit1.defaultdimension = davsi1.dimensionattributevalueset\n\t\t\t\t\t\t\t\t\t\t\t\tleft join ',pipeline().globalParameters.d365_dbName,'.','dimensionattributevalue dav1 on\n\t\t\t\t\t\t\t\t\t\t\t\t\tdavsi1.dimensionattributevalue = dav1.recid\n\t\t\t\t\t\t\t\t\t\t\t\tleft join ',pipeline().globalParameters.d365_dbName,'.','dimensionattribute da1 on\n\t\t\t\t\t\t\t\t\t\t\t\t\tdav1.dimensionattribute = da1.recid\n\t\t\t\t\t\t\t\t\t\t\t\t) def10 on\n\t\t\t\t\t\t\t\t\t\tit10.defaultdimension = def10.defaultdimension\n\t\t\t\t\t\t\t\t\tgroup by it10.dataareaid, it10.itemid) it20 on\n\t\t\t\t\t\t\t\tcpst20.dataareaid = it20.dataareaid and\n\t\t\t\t\t\t\t\tcpst20.itemid = it20.itemid\n\t\t\t\t\t\t\tgroup by cpst20.dataareaid, cpst20.origsalesid) it10 on\n\t\t\t\t\tcpst10.dataareaid = it10.dataareaid and\n\t\t\t\t\tcpst10.salesid = it10.origsalesid\n\t\t\t\twhere it10.LARGEITEMSHIPDATE != ''1900-01-01''\n\t\t\t\tgroup by cpst10.dataareaid, cpst10.salesid) cpst2 on\n\t\t\tcpst1.dataareaid = cpst2.dataareaid and\n\t\t\tcpst1.salesid = cpst2.salesid and\n\t\t\tcpst2.FIRSTLARGEITEMSHIPDATE = cpst2.LARGEITEMSHIPDATE\n\t\tgroup by cpst1.dataareaid, cpst1.salesid) iokey1 on\n\tst1.dataareaid = iokey1.dataareaid and\n\tst1.salesid = iokey1.salesid where st1.salesid is not null')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "DATAAREAID",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DATAAREAID",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "SALESID",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "SALESID",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "CUSTOMERREF",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "CUSTOMERREF",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "PURCHORDERFORMNUM",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "PURCHORDERFORMNUM",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "SALESTYPE",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "SALESTYPE",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "RETURNITEMNUM",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "RETURNITEMNUM",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "RETURNREPLACEMENTCREATED",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "RETURNREPLACEMENTCREATED",
														"type": "Int64",
														"physicalType": "INT_64"
													}
												},
												{
													"source": {
														"name": "SALESPOOLID",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "SALESPOOLID",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "PLANNUMBER",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "PLANNUMBER",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "RETURNREPLACEMENTID",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "RETURNREPLACEMENTID",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "MCRHOLDCODE",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "MCRHOLDCODE",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "SALESLINE_LARGEITEMORDEREDQTY",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 6,
														"precision": 38
													},
													"sink": {
														"name": "SALESLINE_LARGEITEMORDEREDQTY",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													}
												},
												{
													"source": {
														"name": "SALESLINE_TOTALLARGEITEMVOLUME",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 6,
														"precision": 38
													},
													"sink": {
														"name": "SALESLINE_TOTALLARGEITEMVOLUME",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													}
												},
												{
													"source": {
														"name": "SALESLINE_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "SALESLINE_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "CUSTPACKINGSLIPTRANS_FIRSTLARGEITEMSHIPPEDQTY",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 6,
														"precision": 38
													},
													"sink": {
														"name": "CUSTPACKINGSLIPTRANS_FIRSTLARGEITEMSHIPPEDQTY",
														"type": "Decimal",
														"physicalType": "DECIMAL"
													}
												},
												{
													"source": {
														"name": "CUSTPACKINGSLIPTRANS_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "CUSTPACKINGSLIPTRANS_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "LATEST_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "datetime2"
													},
													"sink": {
														"name": "LATEST_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "INT_96"
													}
												},
												{
													"source": {
														"name": "HK_JOB_RUN_ID",
														"type": "String"
													},
													"sink": {
														"name": "HK_JOB_RUN_ID",
														"type": "String",
														"physicalType": "UTF8"
													}
												},
												{
													"source": {
														"name": "HK_SOURCE_NAME",
														"type": "String"
													},
													"sink": {
														"name": "HK_SOURCE_NAME",
														"type": "String",
														"physicalType": "UTF8"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": true
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_fabric_wh",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_parquet",
											"type": "DatasetReference",
											"parameters": {
												"p_directory": {
													"value": "@pipeline().parameters.p_temp_directory",
													"type": "Expression"
												},
												"p_root_system": {
													"value": "@pipeline().globalParameters.rootDir",
													"type": "Expression"
												},
												"p_file_name": {
													"value": "@pipeline().parameters.p_temp_file_nm",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "d365_raw_load_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "salestable_to_adls_d365",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('salestable_to_adls_d365').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('salestable_to_adls_d365').Error['message']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('salestable_to_adls_d365').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('salestable_to_adls_d365').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "d365_load_to_raw_fail",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "d365_raw_load_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('salestable_to_adls_d365').Error['message']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "SALESTABLE"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "SALESTABLE"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_SALES_ORDER"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_temp_directory": {
						"type": "string",
						"defaultValue": "temp_files"
					},
					"p_temp_file_nm": {
						"type": "string",
						"defaultValue": "dim_sales_order_nala.parquet"
					},
					"p_lkp_curate_table_nm": {
						"type": "string",
						"defaultValue": "LKP_TRUCK_VOLUME"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prev_max_timestamp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-05T05:32:28Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_tamtradepromotion_to_dim_trade_promotion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "load_dim_trade_promotion",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prev_max_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')\n\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "tamtradepromotion_to_adls_nala",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "SELECT\nttp1.dataareaid as DATAAREAID\n,ttp1.promotionid as PROMOTIONID\n,ttp1.promotiondescription as PROMOTIONDESCRIPTION\n,ttp1.activity as ACTIVITY\n,ttp1.currency as CURRENCY\n,ttp1.hcmworkerid as HCMWORKERID\n,ttp1.ordersenddate as ORDERSENDDATE\n,ttp1.ordersstartdate as ORDERSSTARTDATE\n,ttp1.promotionstatus as PROMOTIONSTATUS\n,ttp1.tpxdealtype as TPXDEALTYPE\n,ttp1.unitid as UNITID\n,ttp1.tpxdealid as TPXDEALID\n,ttp1.mcstamdealstatus as MCSTAMDEALSTATUS\n,ttp1.modifieddatetime as MODIFIEDDATETIME\n,c1.txt as CURRENCY_TXT\n,c1.modifieddatetime as CURRENCY_MODIFIEDDATETIME\n,hw1.person as HCMWORKER_PERSON\n,hw1.modifieddatetime as HCMWORKER_MODIFIEDDATETIME\n,dpt1.name as DIRPARTYTABLE_NAME\n,dpt1.modifieddatetime as DIRPARTYTABLE_MODIFIEDDATETIME\n,uom1.symbol as UNITOFMEASURE_SYMBOL\n,uom1.modifieddatetime as UNITOFMEASURE_MODIFIEDDATETIME\n,uomt1.description as UNITOFMEASURETRANSLATION_DESCRIPTION\n,uomt1.modifieddatetime as UNITOFMEASURETRANSLATION_MODIFIEDDATETIME\n,tet1.enumvaluelabel as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PROMOTIONSTATUS\n,tet2.enumvaluelabel as TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_TPXDEALTYPE\n,tet3.enumvaluelabel as TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_TPXDEALTYPE\n,(SELECT MAX(LastUpdateDate)\nFROM ( \t\t\t\tVALUES\n        (ttp1.modifieddatetime),\n        ( isnull( c1.modifieddatetime, '1950-01-01' )),\n        ( isnull( hw1.modifieddatetime, '1950-01-01' )),\n        ( isnull( dpt1.modifieddatetime, '1950-01-01' )),\n\t\t( isnull( uom1.modifieddatetime, '1950-01-01' )),\n        ( isnull( uomt1.modifieddatetime, '1950-01-01' ))) AS UpdateDate(LastUpdateDate)\n) AS LATEST_MODIFIEDDATETIME \nFROM\ndbo.TAMTRADEPROMOTION ttp1\nleft join dbo.CURRENCY c1 on\n\tttp1.CURRENCY = c1.CURRENCYCODE\nleft join dbo.HCMWORKER hw1 on\n\tttp1.HCMWORKERID = hw1.RECID\nleft join dbo.DIRPARTYTABLE dpt1 on\n\thw1.PERSON = dpt1.RECID\nleft join dbo.UNITOFMEASURE uom1 on\n\tttp1.UNITID = uom1.SYMBOL\nleft join dbo.UNITOFMEASURETRANSLATION uomt1 on\n\tuomt1.LANGUAGEID = 'en-us' and\n\tuom1.RECID = uomt1.UNITOFMEASURE\nleft join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\n\t\twhere ENUMNAME = 'TAMStatus'\n\t\tgroup by ENUMNAME, ENUMVALUE) tet1 on\n\tttp1.PROMOTIONSTATUS = tet1.ENUMVALUE\nleft join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\n\t\twhere ENUMNAME = 'TpxCmSubsidiesDiscountType'\n\t\tgroup by ENUMNAME, ENUMVALUE) tet2 on\n\tttp1.TPXDEALTYPE = tet2.ENUMVALUE\nleft join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\n\t\twhere ENUMNAME = 'TpxCmSubsidyHeaderDealType'\n\t\tgroup by ENUMNAME, ENUMVALUE) tet3 on\n\tttp1.TPXDEALTYPE = tet3.ENUMVALUE",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "ParquetSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "ParquetWriteSettings"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "PROMOTIONID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "PROMOTIONID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "PROMOTIONDESCRIPTION",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "PROMOTIONDESCRIPTION",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "ACTIVITY",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "ACTIVITY",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "CURRENCY",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "CURRENCY",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "HCMWORKERID",
																"type": "Int64",
																"physicalType": "bigint"
															},
															"sink": {
																"name": "HCMWORKERID",
																"type": "Int64",
																"physicalType": "INT_64"
															}
														},
														{
															"source": {
																"name": "ORDERSENDDATE",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "ORDERSENDDATE",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "ORDERSSTARTDATE",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "ORDERSSTARTDATE",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "PROMOTIONSTATUS",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "PROMOTIONSTATUS",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "TPXDEALTYPE",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "TPXDEALTYPE",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "UNITID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "UNITID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "TPXDEALID",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "TPXDEALID",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "MCSTAMDEALSTATUS",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "MCSTAMDEALSTATUS",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "CURRENCY_TXT",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "CURRENCY_TXT",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "CURRENCY_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "CURRENCY_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "HCMWORKER_PERSON",
																"type": "Int64",
																"physicalType": "bigint"
															},
															"sink": {
																"name": "HCMWORKER_PERSON",
																"type": "Int64",
																"physicalType": "INT_64"
															}
														},
														{
															"source": {
																"name": "HCMWORKER_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "HCMWORKER_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "DIRPARTYTABLE_NAME",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "DIRPARTYTABLE_NAME",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "DIRPARTYTABLE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "DIRPARTYTABLE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "UNITOFMEASURE_SYMBOL",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "UNITOFMEASURE_SYMBOL",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "UNITOFMEASURE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "UNITOFMEASURE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "UNITOFMEASURETRANSLATION_DESCRIPTION",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "UNITOFMEASURETRANSLATION_DESCRIPTION",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "UNITOFMEASURETRANSLATION_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "UNITOFMEASURETRANSLATION_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PROMOTIONSTATUS",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PROMOTIONSTATUS",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_TPXDEALTYPE",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_TPXDEALTYPE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_TPXDEALTYPE",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_TPXDEALTYPE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String",
																"physicalType": "UTF8"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_parquet",
													"type": "DatasetReference",
													"parameters": {
														"p_directory": {
															"value": "@pipeline().parameters.p_temp_directory",
															"type": "Expression"
														},
														"p_root_system": {
															"value": "@pipeline().globalParameters.rootDir",
															"type": "Expression"
														},
														"p_file_name": {
															"value": "@pipeline().parameters.p_temp_file_1",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification_1",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "tamtradepromotion_to_adls_nala",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('tamtradepromotion_to_adls_nala').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('tamtradepromotion_to_adls_nala').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('tamtradepromotion_to_adls_nala').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('tamtradepromotion_to_adls_nala').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail_1",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification_1",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('tamtradepromotion_to_adls_nala').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										},
										{
											"name": "deal_to_adls_nala",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"sqlReaderQuery": {
														"value": "SELECT\nd1.dealid as DEALID\n,d1.dealdesc as DEALDESC\n,d1.lasteditdate as LASTEDITDATE\nFROM sls.Deal d1\n",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "ParquetSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "ParquetWriteSettings"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "DEALID",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "DEALID",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "DEALDESC",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "DEALDESC",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "LASTEDITDATE",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "LASTEDITDATE",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.athena_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.athena_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_parquet",
													"type": "DatasetReference",
													"parameters": {
														"p_directory": {
															"value": "@pipeline().parameters.p_temp_directory",
															"type": "Expression"
														},
														"p_root_system": {
															"value": "@pipeline().globalParameters.rootDir",
															"type": "Expression"
														},
														"p_file_name": {
															"value": "@pipeline().parameters.p_temp_file_2",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification_2",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "deal_to_adls_nala",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('deal_to_adls_nala').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('deal_to_adls_nala').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('deal_to_adls_nala').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('deal_to_adls_nala').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail_2",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification_2",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('deal_to_adls_nala').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "tamtradepromotion_to_adls_d365",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "SELECT\nttp1.dataareaid as dataareaid\n,ttp1.promotionid as promotionid\n,ttp1.promotiondescription as promotiondescription\n,ttp1.activity as activity\n,ttp1.currency as currency\n,ttp1.hcmworkerid as hcmworkerid\n,ttp1.ordersenddate as ordersenddate\n,ttp1.ordersstartdate as ordersstartdate\n,ttp1.promotionstatus as promotionstatus\n,ttp1.tpxdealtype as tpxdealtype\n,ttp1.unitid as unitid\n,ttp1.tpxdealid as tpxdealid\n,ttp1.mcstamdealstatus as mcstamdealstatus\n,ttp1.modifieddatetime as modifieddatetime\n,c1.txt as currency_txt\n,c1.modifieddatetime as currency_modifieddatetime\n,hw1.person as hcmworker_person\n,hw1.modifieddatetime as hcmworker_modifieddatetime\n,dpt1.name as dirpartytable_name\n,dpt1.modifieddatetime as dirpartytable_modifieddatetime\n,uom1.symbol as unitofmeasure_symbol\n,uom1.modifieddatetime as unitofmeasure_modifieddatetime\n,uomt1.description as unitofmeasuretranslation_description\n,uomt1.modifieddatetime as unitofmeasuretranslation_modifieddatetime\n,tet1.enumvaluelabel as timextenderenumtable1_enumvaluelabel_promotionstatus\n,tet2.enumvaluelabel as timextenderenumtable2_enumvaluelabel_tpxdealtype\n,tet3.enumvaluelabel as timextenderenumtable3_enumvaluelabel_tpxdealtype\n,(select max(lastupdatedate)\nfrom ( \t\t\t\tvalues\n        (ttp1.modifieddatetime),\n        ( isnull( c1.modifieddatetime, '1950-01-01' )),\n        ( isnull( hw1.modifieddatetime, '1950-01-01' )),\n        ( isnull( dpt1.modifieddatetime, '1950-01-01' )),\n\t\t( isnull( uom1.modifieddatetime, '1950-01-01' )),\n        ( isnull( uomt1.modifieddatetime, '1950-01-01' ))) as updatedate(lastupdatedate)\n) as latest_modifieddatetime \nfrom\ndataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.tamtradepromotion ttp1\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.currency c1 on\n\tttp1.currency = c1.currencycode\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.hcmworker hw1 on\n\tttp1.hcmworkerid = hw1.recid\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.dirpartytable dpt1 on\n\thw1.person = dpt1.recid\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.unitofmeasure uom1 on\n\tttp1.unitid = uom1.symbol\nleft join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.unitofmeasuretranslation uomt1 on\n\tuomt1.languageid = 'en-us' and\n\tuom1.recid = uomt1.unitofmeasure\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as enumvaluelabel\n\t\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\n\t\twhere enumname = 'tamstatus'\n\t\tgroup by enumname, enumvalue) tet1 on\n\tttp1.promotionstatus = tet1.enumvalue\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as enumvaluelabel\n\t\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\n\t\twhere enumname = 'tpxcmsubsidiesdiscounttype'\n\t\tgroup by enumname, enumvalue) tet2 on\n\tttp1.tpxdealtype = tet2.enumvalue\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as enumvaluelabel\n\t\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\n\t\twhere enumname = 'tpxcmsubsidyheaderdealtype'\n\t\tgroup by enumname, enumvalue) tet3 on\n\tttp1.tpxdealtype = tet3.enumvalue\n",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "ParquetSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "ParquetWriteSettings"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "dataareaid",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "dataareaid",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "promotionid",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "promotionid",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "promotiondescription",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "promotiondescription",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "activity",
																"type": "Int64",
																"physicalType": "bigint"
															},
															"sink": {
																"name": "activity",
																"type": "Int64",
																"physicalType": "INT_64"
															}
														},
														{
															"source": {
																"name": "currency",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "currency",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "hcmworkerid",
																"type": "Int64",
																"physicalType": "bigint"
															},
															"sink": {
																"name": "hcmworkerid",
																"type": "Int64",
																"physicalType": "INT_64"
															}
														},
														{
															"source": {
																"name": "ordersenddate",
																"type": "DateTime",
																"physicalType": "datetime2"
															},
															"sink": {
																"name": "ordersenddate",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "ordersstartdate",
																"type": "DateTime",
																"physicalType": "datetime2"
															},
															"sink": {
																"name": "ordersstartdate",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "promotionstatus",
																"type": "Int64",
																"physicalType": "bigint"
															},
															"sink": {
																"name": "promotionstatus",
																"type": "Int64",
																"physicalType": "INT_64"
															}
														},
														{
															"source": {
																"name": "tpxdealtype",
																"type": "Int64",
																"physicalType": "bigint"
															},
															"sink": {
																"name": "tpxdealtype",
																"type": "Int64",
																"physicalType": "INT_64"
															}
														},
														{
															"source": {
																"name": "unitid",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "unitid",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "tpxdealid",
																"type": "Int64",
																"physicalType": "bigint"
															},
															"sink": {
																"name": "tpxdealid",
																"type": "Int64",
																"physicalType": "INT_64"
															}
														},
														{
															"source": {
																"name": "mcstamdealstatus",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "mcstamdealstatus",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "modifieddatetime",
																"type": "DateTime",
																"physicalType": "datetime2"
															},
															"sink": {
																"name": "modifieddatetime",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "currency_txt",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "currency_txt",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "currency_modifieddatetime",
																"type": "DateTime",
																"physicalType": "datetime2"
															},
															"sink": {
																"name": "currency_modifieddatetime",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "hcmworker_person",
																"type": "Int64",
																"physicalType": "bigint"
															},
															"sink": {
																"name": "hcmworker_person",
																"type": "Int64",
																"physicalType": "INT_64"
															}
														},
														{
															"source": {
																"name": "hcmworker_modifieddatetime",
																"type": "DateTime",
																"physicalType": "datetime2"
															},
															"sink": {
																"name": "hcmworker_modifieddatetime",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "dirpartytable_name",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "dirpartytable_name",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "dirpartytable_modifieddatetime",
																"type": "DateTime",
																"physicalType": "datetime2"
															},
															"sink": {
																"name": "dirpartytable_modifieddatetime",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "unitofmeasure_symbol",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "unitofmeasure_symbol",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "unitofmeasure_modifieddatetime",
																"type": "DateTime",
																"physicalType": "datetime2"
															},
															"sink": {
																"name": "unitofmeasure_modifieddatetime",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "unitofmeasuretranslation_description",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "unitofmeasuretranslation_description",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "unitofmeasuretranslation_modifieddatetime",
																"type": "DateTime",
																"physicalType": "datetime2"
															},
															"sink": {
																"name": "unitofmeasuretranslation_modifieddatetime",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "timextenderenumtable1_enumvaluelabel_promotionstatus",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "timextenderenumtable1_enumvaluelabel_promotionstatus",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "timextenderenumtable2_enumvaluelabel_tpxdealtype",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "timextenderenumtable2_enumvaluelabel_tpxdealtype",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "timextenderenumtable3_enumvaluelabel_tpxdealtype",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "timextenderenumtable3_enumvaluelabel_tpxdealtype",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "latest_modifieddatetime",
																"type": "DateTime",
																"physicalType": "datetime2"
															},
															"sink": {
																"name": "latest_modifieddatetime",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String",
																"physicalType": "UTF8"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_parquet",
													"type": "DatasetReference",
													"parameters": {
														"p_directory": {
															"value": "@pipeline().parameters.p_temp_directory",
															"type": "Expression"
														},
														"p_root_system": {
															"value": "@pipeline().globalParameters.rootDir",
															"type": "Expression"
														},
														"p_file_name": {
															"value": "@pipeline().parameters.p_temp_file_1",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification_1",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "tamtradepromotion_to_adls_d365",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('tamtradepromotion_to_adls_d365').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('tamtradepromotion_to_adls_d365').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('tamtradepromotion_to_adls_d365').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('tamtradepromotion_to_adls_d365').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail_1_copy1",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification_1",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('tamtradepromotion_to_adls_d365').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										},
										{
											"name": "deal_to_adls_d365",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"sqlReaderQuery": {
														"value": "SELECT\nd1.dealid as DEALID\n,d1.dealdesc as DEALDESC\n,d1.lasteditdate as LASTEDITDATE\nFROM sls.Deal d1\n",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "ParquetSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "ParquetWriteSettings"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "DEALID",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "DEALID",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "DEALDESC",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "DEALDESC",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "LASTEDITDATE",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "LASTEDITDATE",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.athena_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.athena_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_parquet",
													"type": "DatasetReference",
													"parameters": {
														"p_directory": {
															"value": "@pipeline().parameters.p_temp_directory",
															"type": "Expression"
														},
														"p_root_system": {
															"value": "@pipeline().globalParameters.rootDir",
															"type": "Expression"
														},
														"p_file_name": {
															"value": "@pipeline().parameters.p_temp_file_2",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification_2",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "deal_to_adls_d365",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('deal_to_adls_d365').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('deal_to_adls_d365').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('deal_to_adls_d365').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('deal_to_adls_d365').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail_2",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification_2",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('deal_to_adls_d365').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "dataflow_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "load_dim_trade_promotion",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('load_dim_trade_promotion').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('load_dim_trade_promotion').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('load_dim_trade_promotion').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('load_dim_trade_promotion').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "load_dim_trade_promotion",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_load_dim_trade_promotion",
								"type": "DataFlowReference",
								"parameters": {
									"df_prev_max_timestamp": {
										"value": "'@{variables('v_prev_max_timestamp')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SrcTamTradePromotion": {
										"p_directory": {
											"value": "@pipeline().parameters.p_temp_directory",
											"type": "Expression"
										},
										"p_root_system": {
											"value": "@pipeline().globalParameters.rootDir",
											"type": "Expression"
										},
										"p_file_name": {
											"value": "@pipeline().parameters.p_temp_file_1",
											"type": "Expression"
										}
									},
									"SrcDeal": {
										"p_directory": {
											"value": "@pipeline().parameters.p_temp_directory",
											"type": "Expression"
										},
										"p_root_system": {
											"value": "@pipeline().globalParameters.rootDir",
											"type": "Expression"
										},
										"p_file_name": {
											"value": "@pipeline().parameters.p_temp_file_2",
											"type": "Expression"
										}
									},
									"TamTradePromotion": {
										"p_tgt_table_name": {
											"value": "@pipeline().parameters.p_tgt_raw_table_nm",
											"type": "Expression"
										},
										"p_tgt_schema_name": {
											"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
											"type": "Expression"
										},
										"p_ls_DbName": {
											"value": "@pipeline().globalParameters.snow_rawDb",
											"type": "Expression"
										},
										"p_ls_Env": {
											"value": "@pipeline().globalParameters.environment",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "IR-Snowflake-NALA",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_TRADE_PROMOTION"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "TAMTRADEPROMOTION"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "TAMTRADEPROMOTION"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_temp_file_1": {
						"type": "string",
						"defaultValue": "tamtradepromotion_nala.parquet"
					},
					"p_temp_file_2": {
						"type": "string",
						"defaultValue": "deal_tbl_nala.parquet"
					},
					"p_temp_directory": {
						"type": "string",
						"defaultValue": "temp_files"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prev_max_timestamp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-04T13:47:58Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_taxtrans_to_fact_tax_transactions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "load_fact_tax_transactions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prev_max_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')\n\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "switch_nala_retail_d365",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_to_raw_nala",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "SELECT\ntt1.recid as RECID\n,tt1.currencycode as CURRENCYCODE\n,tt1.taxcode as TAXCODE\n,tt1.taxgroup as TAXGROUP\n,tt1.transdate as TRANSDATE\n,tt1.inventtransid as INVENTTRANSID\n,tt1.invoiceid as INVOICEID\n,tt1.journalnum as JOURNALNUM\n,tt1.dataareaid as DATAAREAID\n,tt1.voucher as VOUCHER\n,cast(cast(tt1.taxamount as numeric(38,2)) as varchar ) as TAXAMOUNT\n,cast(cast(tt1.taxamountcur as numeric(38,2)) as varchar ) as TAXAMOUNTCUR\n,cast(cast(tt1.taxbaseamount as numeric(38,2))as varchar ) as TAXBASEAMOUNT\n,cast(cast(tt1.taxbaseamountcur as numeric(38,2))as varchar )  as TAXBASEAMOUNTCUR \n,tt1.modifieddatetime as LATEST_MODIFIEDDATETIME\nFROM dbo.TAXTRANS tt1 WHERE tt1.modifieddatetime > '@{variables('v_prev_max_timestamp')}'",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "ParquetSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "ParquetWriteSettings"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "Int64"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "CURRENCYCODE",
																"type": "String"
															},
															"sink": {
																"name": "CURRENCYCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TAXCODE",
																"type": "String"
															},
															"sink": {
																"name": "TAXCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TAXGROUP",
																"type": "String"
															},
															"sink": {
																"name": "TAXGROUP",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TRANSDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "TRANSDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTTRANSID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTTRANSID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVOICEID",
																"type": "String"
															},
															"sink": {
																"name": "INVOICEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "JOURNALNUM",
																"type": "String"
															},
															"sink": {
																"name": "JOURNALNUM",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "VOUCHER",
																"type": "String"
															},
															"sink": {
																"name": "VOUCHER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TAXAMOUNT",
																"type": "Decimal"
															},
															"sink": {
																"name": "TAXAMOUNT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TAXAMOUNTCUR",
																"type": "Decimal"
															},
															"sink": {
																"name": "TAXAMOUNTCUR",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TAXBASEAMOUNT",
																"type": "Decimal"
															},
															"sink": {
																"name": "TAXBASEAMOUNT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TAXBASEAMOUNTCUR",
																"type": "Decimal"
															},
															"sink": {
																"name": "TAXBASEAMOUNTCUR",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_parquet",
													"type": "DatasetReference",
													"parameters": {
														"p_directory": {
															"value": "@pipeline().parameters.p_temp_directory",
															"type": "Expression"
														},
														"p_root_system": {
															"value": "@pipeline().globalParameters.rootDir",
															"type": "Expression"
														},
														"p_file_name": {
															"value": "@pipeline().parameters.p_temp_file_nm",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_to_raw_nala",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_to_raw_nala').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_to_raw_nala').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_to_raw_nala').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_to_raw_nala').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_to_raw_nala').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_to_raw_d365",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@Concat('SELECT\ntt1.recid as RECID\n,tt1.currencycode as CURRENCYCODE\n,tt1.taxcode as TAXCODE\n,tt1.taxgroup as TAXGROUP\n,tt1.transdate as TRANSDATE\n,tt1.inventtransid as INVENTTRANSID\n,tt1.invoiceid as INVOICEID\n,tt1.journalnum as JOURNALNUM\n,tt1.dataareaid as DATAAREAID\n,tt1.voucher as VOUCHER\n,cast(cast(tt1.taxamount as numeric(38,2)) as varchar ) as TAXAMOUNT\n,cast(cast(tt1.taxamountcur as numeric(38,2)) as varchar ) as TAXAMOUNTCUR\n,cast(cast(tt1.taxbaseamount as numeric(38,2))as varchar ) as TAXBASEAMOUNT\n,cast(cast(tt1.taxbaseamountcur as numeric(38,2))as varchar )  as TAXBASEAMOUNTCUR \n,tt1.modifieddatetime as LATEST_MODIFIEDDATETIME\nFROM '\n,pipeline().globalParameters.d365_dbName,'.','taxtrans tt1 WHERE tt1.modifieddatetime >  ','''',variables('v_prev_max_timestamp'),'''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "ParquetSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "ParquetWriteSettings"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "Int64"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "CURRENCYCODE",
																"type": "String"
															},
															"sink": {
																"name": "CURRENCYCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TAXCODE",
																"type": "String"
															},
															"sink": {
																"name": "TAXCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TAXGROUP",
																"type": "String"
															},
															"sink": {
																"name": "TAXGROUP",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TRANSDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "TRANSDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTTRANSID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTTRANSID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVOICEID",
																"type": "String"
															},
															"sink": {
																"name": "INVOICEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "JOURNALNUM",
																"type": "String"
															},
															"sink": {
																"name": "JOURNALNUM",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "VOUCHER",
																"type": "String"
															},
															"sink": {
																"name": "VOUCHER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TAXAMOUNT",
																"type": "Decimal"
															},
															"sink": {
																"name": "TAXAMOUNT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TAXAMOUNTCUR",
																"type": "Decimal"
															},
															"sink": {
																"name": "TAXAMOUNTCUR",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TAXBASEAMOUNT",
																"type": "Decimal"
															},
															"sink": {
																"name": "TAXBASEAMOUNT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TAXBASEAMOUNTCUR",
																"type": "Decimal"
															},
															"sink": {
																"name": "TAXBASEAMOUNTCUR",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_parquet",
													"type": "DatasetReference",
													"parameters": {
														"p_directory": {
															"value": "@pipeline().parameters.p_temp_directory",
															"type": "Expression"
														},
														"p_root_system": {
															"value": "@pipeline().globalParameters.rootDir",
															"type": "Expression"
														},
														"p_file_name": {
															"value": "@pipeline().parameters.p_temp_file_nm",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_to_raw_d365",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_to_raw_d365').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_to_raw_d365').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_to_raw_d365').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_to_raw_d365').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_faild",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_to_raw_d365').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "load_fact_tax_transactions",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "switch_nala_retail_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_load_fact_tax_transactions",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcTaxTrans": {
										"p_directory": {
											"value": "@pipeline().parameters.p_temp_directory",
											"type": "Expression"
										},
										"p_root_system": {
											"value": "@pipeline().globalParameters.rootDir",
											"type": "Expression"
										},
										"p_file_name": {
											"value": "@pipeline().parameters.p_temp_file_nm",
											"type": "Expression"
										}
									},
									"TaxTrans": {
										"p_tgt_table_name": {
											"value": "@pipeline().parameters.p_tgt_raw_table_nm",
											"type": "Expression"
										},
										"p_tgt_schema_name": {
											"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
											"type": "Expression"
										},
										"p_ls_DbName": {
											"value": "@pipeline().globalParameters.snow_rawDb",
											"type": "Expression"
										},
										"p_ls_Env": {
											"value": "@pipeline().globalParameters.environment",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "IR-Snowflake-NALA",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "FACT_TAX_TRANSACTIONS"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "TAXTRANS"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "TAXTRANS"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					},
					"p_temp_directory": {
						"type": "string",
						"defaultValue": "temp_files"
					},
					"p_temp_file_nm": {
						"type": "string",
						"defaultValue": "tax_transactions_nala.parquet"
					}
				},
				"variables": {
					"v_prev_max_timestamp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-04T13:47:58Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_tpx_linereturnreasoncode_to_dim_line_return_reason')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "df_load_dim_line_return_reason",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_retail_d365",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "linereturnreasoncode_to_raw_nala",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('linereturnreasoncode_to_raw_nala').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('linereturnreasoncode_to_raw_nala').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('linereturnreasoncode_to_raw_nala').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('linereturnreasoncode_to_raw_nala').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "linereturnreasoncode_to_raw_nala",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select tlrrc1.DATAAREAID ,tlrrc1.REASONCODEID ,tlrrc1.RETURNREASONCODEGROUPID ,tlrrc1.DESCRIPTION ,rrcg1.DESCRIPTION as DESCRIPTION_CODEGROUP from dbo.TPX_LINERETURNREASONCODE tlrrc1 left join dbo.RETURNREASONCODEGROUP rrcg1 on \ttlrrc1.DATAAREAID = rrcg1.DATAAREAID and \ttlrrc1.RETURNREASONCODEGROUPID = rrcg1.REASONCODEGROUPID \twhere tlrrc1.RETURNREASONCODEGROUPID !=''",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "ParquetSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "ParquetWriteSettings"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													}
												},
												"enableSkipIncompatibleRow": true,
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "REASONCODEID",
																"type": "String"
															},
															"sink": {
																"name": "REASONCODEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RETURNREASONCODEGROUPID",
																"type": "String"
															},
															"sink": {
																"name": "RETURNREASONCODEGROUPID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DESCRIPTION_CODEGROUP",
																"type": "String"
															},
															"sink": {
																"name": "DESCRIPTION_CODEGROUP",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_parquet",
													"type": "DatasetReference",
													"parameters": {
														"p_directory": {
															"value": "@pipeline().parameters.p_temp_directory",
															"type": "Expression"
														},
														"p_root_system": {
															"value": "@pipeline().globalParameters.rootDir",
															"type": "Expression"
														},
														"p_file_name": {
															"value": "@pipeline().parameters.p_temp_file_nm",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('linereturnreasoncode_to_raw_nala').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "linereturnreasoncode_to_raw_d365",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('linereturnreasoncode_to_raw_d365').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@activity('linereturnreasoncode_to_raw_d365').Error['message']",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('linereturnreasoncode_to_raw_d365').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('linereturnreasoncode_to_raw_d365').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "linereturnreasoncode_to_raw_d365",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('select tlrrc1.dataareaid as dataareaid , tlrrc1.reasoncodeid as reasoncodeid , tlrrc1.returnreasoncodegroupid as returnreasoncodegroupid , tlrrc1.description as description , rrcg1.description as description_codegroup from ',pipeline().globalParameters.d365_dbName,'.','tpx_linereturnreasoncode tlrrc1 left join ',pipeline().globalParameters.d365_dbName,'.','returnreasoncodegroup rrcg1  on        tlrrc1.dataareaid = rrcg1.dataareaid and tlrrc1.returnreasoncodegroupid = rrcg1.reasoncodegroupid where tlrrc1.returnreasoncodegroupid !=''''''''' )",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "ParquetSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "ParquetWriteSettings"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													}
												},
												"enableSkipIncompatibleRow": true,
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "dataareaid",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "DATAAREAID",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "reasoncodeid",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "REASONCODEID",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "returnreasoncodegroupid",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "RETURNREASONCODEGROUPID",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "description",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "DESCRIPTION",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "description_codegroup",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "DESCRIPTION_CODEGROUP",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"physicalType": "UTF8"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_parquet",
													"type": "DatasetReference",
													"parameters": {
														"p_directory": {
															"value": "@pipeline().parameters.p_temp_directory",
															"type": "Expression"
														},
														"p_root_system": {
															"value": "@pipeline().globalParameters.rootDir",
															"type": "Expression"
														},
														"p_file_name": {
															"value": "@pipeline().parameters.p_temp_file_nm",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('linereturnreasoncode_to_raw_d365').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "df_load_dim_line_return_reason",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "switch_nala_retail_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_load_dim_line_return_reason",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcLineReturnReasonCode": {
										"p_directory": {
											"value": "@pipeline().parameters.p_temp_directory",
											"type": "Expression"
										},
										"p_root_system": {
											"value": "@pipeline().globalParameters.rootDir",
											"type": "Expression"
										},
										"p_file_name": {
											"value": "@pipeline().parameters.p_temp_file_nm",
											"type": "Expression"
										}
									},
									"ReturnReasonGroupMap": {},
									"TpxLinereturnreasoncode": {
										"p_tgt_table_name": {
											"value": "@pipeline().parameters.p_tgt_raw_table_nm",
											"type": "Expression"
										},
										"p_tgt_schema_name": {
											"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
											"type": "Expression"
										},
										"p_ls_DbName": {
											"value": "@pipeline().globalParameters.snow_rawDb",
											"type": "Expression"
										},
										"p_ls_Env": {
											"value": "@pipeline().globalParameters.environment",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "IR-Snowflake-NALA",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "TPX_LINERETURNREASONCODE"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "TPX_LINERETURNREASONCODE"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_LINE_RETURN_REASON"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					},
					"p_src_directory": {
						"type": "string",
						"defaultValue": "business_files"
					},
					"p_temp_directory": {
						"type": "string",
						"defaultValue": "temp_files"
					},
					"p_temp_file_nm": {
						"type": "string",
						"defaultValue": "linereturnreasoncode_nala.parquet"
					},
					"p_src_file_nm": {
						"type": "string",
						"defaultValue": "ReturnReasonGroupMapping.xlsx"
					},
					"p_src_file_sheet": {
						"type": "string",
						"defaultValue": "Sheet1"
					}
				},
				"variables": {
					"pipeline_start_time": {
						"type": "String"
					},
					"pipeline_end_time": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T12:09:51Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_whsloadline_to_fact_transportation_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_curate_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_curate_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prev_max_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')\n\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "whsloadline_to_adls_nala",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select \nwll1.DATAAREAID,\nwll1.LOADID,\nwll1.ORDERNUM,\nwll1.ITEMID,\nwll1.QTY,\nwll1.MODIFIEDDATETIME,\nmel2.ACTUALPIECES as MCSRNAEVENTLINE_ACTUALPIECES,\nmel2.UNITVOLUME as MCSRNAEVENTLINE_UNITVOLUME,\nmel2.INVENTTABLE_MODIFIEDDATETIME as MCSRNAEVENTLINE_INVENTTABLE_MODIFIEDDATETIME,\nmel2.SALESLINE_MODIFIEDDATETIME as MCSRNAEVENTLINE_SALESLINE_MODIFIEDDATETIME,\nit1.UNITVOLUME as INVENTTABLE_UNITVOLUME,\nit1.MODIFIEDDATETIME as INVENTTABLE_MODIFIEDDATETIME,\nst1.SALESID as SALESTABLE_SALESID,\nst1.CUSTACCOUNT as SALESTABLE_CUSTACCOUNT,\nst1.DELIVERYPOSTALADDRESS as SALESTABLE_DELIVERYPOSTALADDRESS,\nst1.SHIPPINGDATECONFIRMED as SALESTABLE_SHIPPINGDATECONFIRMED,\nst1.MODIFIEDDATETIME as SALESTABLE_MODIFIEDDATETIME,\nwlt1.EBCCARRIERID as WHSLOADTABLE_EBCCARRIERID,\nwlt1.INVENTSITEID as WHSLOADTABLE_INVENTSITEID,\nwlt1.EBCTRAILERID as WHSLOADTABLE_EBCTRAILERID,\nwlt1.LOADSCHEDSHIPUTCDATETIME as WHSLOADTABLE_LOADSCHEDSHIPUTCDATETIME,\nwlt1.LOADSTATUS as WHSLOADTABLE_LOADSTATUS,\nwlt1.MODIFIEDDATETIME as WHSLOADTABLE_MODIFIEDDATETIME,\nmrst1.ENTITYKEY as WHSLOADTABLE_ENTITYKEY,\nmrst1.MODIFIEDDATETIME as MCSROADNETSTAGINGTABLE_MODIFIEDDATETIME,\nmrs1.STOPCOUNT as MCSRNAROUTESTOP_STOPCOUNT,\nmrs1.MILEAGE as MCSRNAROUTESTOP_MILEAGE,\nmeh1.ACTUALMILES as MCSRNAEVENTHEADER_ACTUALMILES,\nmeh1.ACTUALSTOPCOUNT as MCSRNAEVENTHEADER_ACTUALSTOPCOUNT,\nmt1.CUBICVOLUME as MCSTRAILERS_CUBICVOLUME,\ntet1.ENUMVALUELABEL as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_SALESTYPE,\ntet2.ENUMVALUELABEL as TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_LOADSTATUS,\nconvert(varchar(max), hashbytes('SHA2_256', concat(wll1.DATAAREAID, wll1.LOADID, wll1.ORDERNUM, \nwll1.ITEMID,mel2.ACTUALPIECES,mel2.UNITVOLUME,mrs1.STOPCOUNT,mrs1.MILEAGE,meh1.ACTUALMILES,meh1.ACTUALSTOPCOUNT,mt1.CUBICVOLUME\n)), 2) as WHSLOADLINE_EXT_HASH_KEY,\nrow_number() over (partition by wll1.LOADID, \n    wll1.ORDERNUM, \n    wll1.ITEMID,\n    mel2.ACTUALPIECES,\n    mel2.UNITVOLUME,\n    mrs1.STOPCOUNT,\n    mrs1.MILEAGE,\n    meh1.ACTUALMILES,\n    meh1.ACTUALSTOPCOUNT,\n    mt1.CUBICVOLUME,\n\tconvert(varchar(max), hashbytes('SHA2_256', concat(wll1.DATAAREAID, \n    wll1.LOADID, \n    wll1.ORDERNUM, \n    wll1.ITEMID,\n    mel2.ACTUALPIECES,\n    mel2.UNITVOLUME,\n    mrs1.STOPCOUNT,\n    mrs1.MILEAGE,\n    meh1.ACTUALMILES,\n    meh1.ACTUALSTOPCOUNT,\n    mt1.CUBICVOLUME\n    )), 2)\n\tORDER BY\n\t (SELECT MAX(LastUpdateDate)\n    FROM (VALUES (wll1.MODIFIEDDATETIME), (isnull(mel2.INVENTTABLE_MODIFIEDDATETIME, '1950-01-01')),(isnull(mel2.SALESLINE_MODIFIEDDATETIME, '1950-01-01')),\n    (isnull(it1.MODIFIEDDATETIME, '1950-01-01')),(isnull(wlt1.MODIFIEDDATETIME, '1950-01-01')), (isnull(st1.MODIFIEDDATETIME, '1950-01-01')),\n    (isnull(mrst1.MODIFIEDDATETIME, '1950-01-01'))) AS UpdateDate(LastUpdateDate))\n    DESC) as WHS_EXT_RANK,\n(SELECT MAX(LastUpdateDate)\nFROM (VALUES (wll1.MODIFIEDDATETIME),\n(isnull(mel2.INVENTTABLE_MODIFIEDDATETIME, '1950-01-01')),\n(isnull(mel2.SALESLINE_MODIFIEDDATETIME, '1950-01-01')),\n(isnull(it1.MODIFIEDDATETIME, '1950-01-01')),\n(isnull(wlt1.MODIFIEDDATETIME, '1950-01-01')),\n(isnull(st1.MODIFIEDDATETIME, '1950-01-01')),\n(isnull(mrst1.MODIFIEDDATETIME, '1950-01-01'))) AS UpdateDate(LastUpdateDate)) AS LAST_MODIFIEDDATETIME\nfrom\n(select dataareaid as DATAAREAID, loadid as LOADID, ordernum as ORDERNUM, itemid as ITEMID\n\t\t, sum(qty) as QTY\n\t\t, max(modifieddatetime) as MODIFIEDDATETIME\n\tfrom dbo.whsloadline\n\tgroup by dataareaid, loadid, ordernum, itemid) wll1\nleft join (select mel20.dataareaid, mel20.loadid, mel20.ordernum, mel20.itemid\n\t\t\t\t, max(case when mel20.itemid like '%MERGE%' then sl20.MCSTOTALVOLUME / isnull(sl20.SALESQTY, 1)\n\t\t\t\t\t\telse it10.UNITVOLUME\n\t\t\t\t\t\tend) as UNITVOLUME\n\t\t\t\t, sum(\n\t\t\t\t\t-- ACTUALQTY\n\t\t\t\t\tcase when mel20.EVENTTYPE = 'StopDeparted' and mel20.ITEMID like '%MERGE%' then isnull(sl20.SALESQTY, 0)\n\t\t\t\t\t\twhen mel20.EVENTTYPE = 'StopDeparted' then isnull(mel20.ACTUALQTY, 0)\n\t\t\t\t\telse 0\n\t\t\t\t\tend\n\t\t\t\t\t) as ACTUALPIECES\n\t\t\t\t, max(it10.MODIFIEDDATETIME) as INVENTTABLE_MODIFIEDDATETIME\n\t\t\t\t, max(sl20.MODIFIEDDATETIME) as SALESLINE_MODIFIEDDATETIME\n\t\t\tfrom dbo.mcsrnaeventline mel20\n\t\t\tleft join (select dataareaid, itemid\n\t\t\t\t\t\t, max(unitvolume) as UNITVOLUME\n\t\t\t\t\t\t, max(modifieddatetime) as MODIFIEDDATETIME\n\t\t\t\t\tfrom dbo.inventtable\n\t\t\t\t\tgroup by dataareaid, itemid) it10 on\n\t\t\t\tmel20.dataareaid = it10.dataareaid and\n\t\t\t\tmel20.itemid = it10.itemid\n\t\t\tleft join (select dataareaid, salesid, itemid\n\t\t\t\t\t\t, max(mcstotalvolume) as MCSTOTALVOLUME\n\t\t\t\t\t\t, max(salesqty) as SALESQTY\n\t\t\t\t\t\t, max(modifieddatetime) as MODIFIEDDATETIME\n\t\t\t\t\tfrom dbo.salesline\n\t\t\t\t\tgroup by dataareaid, salesid, itemid) sl20 on\n\t\t\t\tmel20.dataareaid = sl20.dataareaid and\n\t\t\t\tmel20.ordernum = sl20.salesid and\n\t\t\t\tmel20.itemid = sl20.itemid\n\t\t\twhere mel20.eventtype = 'StopDeparted'\n\t\t\tgroup by mel20.dataareaid, mel20.loadid, mel20.ordernum, mel20.itemid, it10.UNITVOLUME) mel2 on\n\twll1.DATAAREAID = mel2.dataareaid and\n\twll1.LOADID = mel2.loadid and\n\twll1.ORDERNUM = mel2.ordernum and\n\twll1.ITEMID = mel2.itemid\nleft join (select dataareaid, itemid\n\t\t\t, max(unitvolume) As UNITVOLUME\n\t\t\t, max(modifieddatetime) as MODIFIEDDATETIME\n\t\tfrom dbo.inventtable\n\t\tgroup by dataareaid, itemid) it1 on\n\twll1.DATAAREAID = it1.dataareaid and\n\twll1.ITEMID = it1.itemid\nleft join (select dataareaid, salesid As SALESID\n\t\t\t, max(salestype) as SALESTYPE\n\t\t\t, max(custaccount) as CUSTACCOUNT\n\t\t\t, max(deliverypostaladdress) as DELIVERYPOSTALADDRESS\n\t\t\t, max(shippingdateconfirmed) as SHIPPINGDATECONFIRMED\n\t\t\t, max(modifieddatetime) as MODIFIEDDATETIME\n\t\tfrom dbo.salestable\n\t\tgroup by dataareaid, salesid) st1 on\n\twll1.DATAAREAID = st1.dataareaid and\n\twll1.ORDERNUM = st1.SALESID\nleft join (select dataareaid, loadid\n\t\t\t, max(ebccarrierid) as EBCCARRIERID\n\t\t\t, max(inventsiteid) as INVENTSITEID\n\t\t\t, max(ebctrailerid) as EBCTRAILERID\n\t\t\t, max(loadschedshiputcdatetime) as LOADSCHEDSHIPUTCDATETIME\n\t\t\t, max(loadstatus) as LOADSTATUS\n\t\t\t, max(modifieddatetime) as MODIFIEDDATETIME\n\t\tfrom dbo.whsloadtable\n\t\tgroup by dataareaid, loadid) wlt1 on\n\twll1.DATAAREAID = wlt1.dataareaid and\n\twll1.LOADID = wlt1.loadid\nleft join (select dataareaid, loadid\n\t\t\t, max(entitykey) as ENTITYKEY\n\t\t\t, max(modifieddatetime) as MODIFIEDDATETIME\n\t\tfrom dbo.mcsroadnetstagingtable\n\t\tgroup by dataareaid, loadid) mrst1 on\n\twll1.DATAAREAID = mrst1.dataareaid and\n\twll1.LOADID = mrst1.loadid\nleft join (select dataareaid, entitykey\n\t\t\t, sum(case when stopnumber = 0 or stoptype = 'DestinationDepotStop' then 0 else 1 end) as STOPCOUNT\n\t\t\t, sum(mileage) as MILEAGE\n\t\tfrom dbo.mcsrnaroutestop\n\t\tgroup by dataareaid, entitykey) mrs1 on\n\tmrst1.dataareaid = mrs1.dataareaid and\n\tmrst1.ENTITYKEY = mrs1.entitykey\nleft join (select dataareaid, loadid\n\t\t\t, sum(case when eventtype = 'RouteCompleted' and ISNUMERIC(distancemiles) = 1 then isnull(convert(decimal(38,16), nullif(rtrim(distancemiles), '')), 0.00) else 0.00 end) as ACTUALMILES\n\t\t\t, sum(case when eventtype = 'StopDeparted' then 1 else 0 end) as ACTUALSTOPCOUNT\n\t\tfrom dbo.mcsrnaeventheader\n\t\tgroup by dataareaid, loadid) meh1 on\n\twll1.DATAAREAID = meh1.dataareaid and\n\twll1.LOADID = meh1.loadid\nleft join (select trailerno\n\t\t\t, max(convert(int, isnull(nullif(rtrim(\n\t\t\t\tcase when isnumeric(cubicvolume) = 0 then '0' else cubicvolume end\n\t\t\t\t), ''), 0))) as CUBICVOLUME\n\t\tfrom dbo.mcstrailers\n\t\tgroup by trailerno) mt1 on\n\twlt1.EBCTRAILERID = mt1.trailerno\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as ENUMVALUELABEL\n\t\tfrom dbo.timextenderenumtable\n\t\twhere enumname = 'SalesType'\n\t\tgroup by enumname, enumvalue) tet1 on\n\tst1.SALESTYPE = tet1.enumvalue\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as ENUMVALUELABEL\n\t\tfrom dbo.timextenderenumtable\n\t\twhere enumname = 'WHSLoadStatus'\n\t\tgroup by enumname, enumvalue) tet2 on\n\twlt1.LOADSTATUS = tet2.enumvalue",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "ParquetSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "ParquetWriteSettings"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "LOADID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "LOADID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "ORDERNUM",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "ORDERNUM",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "ITEMID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "ITEMID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "QTY",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 16,
																"precision": 38
															},
															"sink": {
																"name": "QTY",
																"type": "Decimal",
																"physicalType": "DECIMAL"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "MCSRNAEVENTLINE_ACTUALPIECES",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 16,
																"precision": 38
															},
															"sink": {
																"name": "MCSRNAEVENTLINE_ACTUALPIECES",
																"type": "Decimal",
																"physicalType": "DECIMAL"
															}
														},
														{
															"source": {
																"name": "MCSRNAEVENTLINE_UNITVOLUME",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 6,
																"precision": 38
															},
															"sink": {
																"name": "MCSRNAEVENTLINE_UNITVOLUME",
																"type": "Decimal",
																"physicalType": "DECIMAL"
															}
														},
														{
															"source": {
																"name": "MCSRNAEVENTLINE_INVENTTABLE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "MCSRNAEVENTLINE_INVENTTABLE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "MCSRNAEVENTLINE_SALESLINE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "MCSRNAEVENTLINE_SALESLINE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "INVENTTABLE_UNITVOLUME",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 16,
																"precision": 32
															},
															"sink": {
																"name": "INVENTTABLE_UNITVOLUME",
																"type": "Decimal",
																"physicalType": "DECIMAL"
															}
														},
														{
															"source": {
																"name": "INVENTTABLE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "INVENTTABLE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_SALESID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "SALESTABLE_SALESID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_CUSTACCOUNT",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "SALESTABLE_CUSTACCOUNT",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_DELIVERYPOSTALADDRESS",
																"type": "Int64",
																"physicalType": "bigint"
															},
															"sink": {
																"name": "SALESTABLE_DELIVERYPOSTALADDRESS",
																"type": "Int64",
																"physicalType": "INT_64"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_SHIPPINGDATECONFIRMED",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "SALESTABLE_SHIPPINGDATECONFIRMED",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "SALESTABLE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "WHSLOADTABLE_EBCCARRIERID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "WHSLOADTABLE_EBCCARRIERID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "WHSLOADTABLE_INVENTSITEID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "WHSLOADTABLE_INVENTSITEID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "WHSLOADTABLE_EBCTRAILERID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "WHSLOADTABLE_EBCTRAILERID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "WHSLOADTABLE_LOADSCHEDSHIPUTCDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "WHSLOADTABLE_LOADSCHEDSHIPUTCDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "WHSLOADTABLE_LOADSTATUS",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "WHSLOADTABLE_LOADSTATUS",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "WHSLOADTABLE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "WHSLOADTABLE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "WHSLOADTABLE_ENTITYKEY",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "WHSLOADTABLE_ENTITYKEY",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "MCSROADNETSTAGINGTABLE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "MCSROADNETSTAGINGTABLE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "MCSRNAROUTESTOP_STOPCOUNT",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "MCSRNAROUTESTOP_STOPCOUNT",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "MCSRNAROUTESTOP_MILEAGE",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 16,
																"precision": 38
															},
															"sink": {
																"name": "MCSRNAROUTESTOP_MILEAGE",
																"type": "Decimal",
																"physicalType": "DECIMAL"
															}
														},
														{
															"source": {
																"name": "MCSRNAEVENTHEADER_ACTUALMILES",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 16,
																"precision": 38
															},
															"sink": {
																"name": "MCSRNAEVENTHEADER_ACTUALMILES",
																"type": "Decimal",
																"physicalType": "DECIMAL"
															}
														},
														{
															"source": {
																"name": "MCSRNAEVENTHEADER_ACTUALSTOPCOUNT",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "MCSRNAEVENTHEADER_ACTUALSTOPCOUNT",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "MCSTRAILERS_CUBICVOLUME",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "MCSTRAILERS_CUBICVOLUME",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_SALESTYPE",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_SALESTYPE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_LOADSTATUS",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_LOADSTATUS",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "WHSLOADLINE_EXT_HASH_KEY",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "WHSLOADLINE_EXT_HASH_KEY",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "WHS_EXT_RANK",
																"type": "Int64",
																"physicalType": "bigint"
															},
															"sink": {
																"name": "WHS_EXT_RANK",
																"type": "Int64",
																"physicalType": "INT_64"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "LAST_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String",
																"physicalType": "UTF8"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_parquet",
													"type": "DatasetReference",
													"parameters": {
														"p_directory": {
															"value": "@pipeline().parameters.p_temp_directory",
															"type": "Expression"
														},
														"p_root_system": {
															"value": "@pipeline().globalParameters.rootDir",
															"type": "Expression"
														},
														"p_file_name": {
															"value": "@pipeline().parameters.p_temp_file_nm",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "whsloadline_to_adls_nala",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('whsloadline_to_adls_nala').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('whsloadline_to_adls_nala').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('whsloadline_to_adls_nala').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('whsloadline_to_adls_nala').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('whsloadline_to_adls_nala').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "whsloadline_to_adls_d365",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "Select \nwll1.dataareaid as DATAAREAID,\nwll1.loadid as LOADID,\nwll1.ordernum as ORDERNUM,\nwll1.itemid as ITEMID,\nwll1.qty as QTY,\nwll1.modifieddatetime As MODIFIEDDATETIME,\nmel2.actualpieces as MCSRNAEVENTLINE_ACTUALPIECES,\nmel2.unitvolume as MCSRNAEVENTLINE_UNITVOLUME,\nmel2.inventtable_modifieddatetime as MCSRNAEVENTLINE_INVENTTABLE_MODIFIEDDATETIME,\nmel2.salesline_modifieddatetime as MCSRNAEVENTLINE_SALESLINE_MODIFIEDDATETIME,\nit1.unitvolume as INVENTTABLE_UNITVOLUME,\nit1.modifieddatetime as INVENTTABLE_MODIFIEDDATETIME,\nst1.salesid as SALESTABLE_SALESID,\nst1.custaccount as SALESTABLE_CUSTACCOUNT,\nst1.deliverypostaladdress as SALESTABLE_DELIVERYPOSTALADDRESS,\nst1.shippingdateconfirmed as SALESTABLE_SHIPPINGDATECONFIRMED,\nst1.modifieddatetime as SALESTABLE_MODIFIEDDATETIME,\nwlt1.ebccarrierid as WHSLOADTABLE_EBCCARRIERID,\nwlt1.inventsiteid as WHSLOADTABLE_INVENTSITEID,\nwlt1.ebctrailerid as WHSLOADTABLE_EBCTRAILERID,\nwlt1.loadschedshiputcdatetime as WHSLOADTABLE_LOADSCHEDSHIPUTCDATETIME,\nwlt1.loadstatus as WHSLOADTABLE_LOADSTATUS,\nwlt1.modifieddatetime as WHSLOADTABLE_MODIFIEDDATETIME,\nmrst1.entitykey as WHSLOADTABLE_ENTITYKEY,\nmrst1.modifieddatetime as MCSROADNETSTAGINGTABLE_MODIFIEDDATETIME,\nmrs1.stopcount as MCSRNAROUTESTOP_STOPCOUNT,\nmrs1.mileage as MCSRNAROUTESTOP_MILEAGE,\nmeh1.actualmiles as MCSRNAEVENTHEADER_ACTUALMILES,\nmeh1.actualstopcount as MCSRNAEVENTHEADER_ACTUALSTOPCOUNT,\nmt1.cubicvolume as MCSTRAILERS_CUBICVOLUME,\ntet1.enumvaluelabel as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_SALESTYPE,\ntet2.enumvaluelabel as TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_LOADSTATUS,\nconvert(varchar(max), hashbytes('sha2_256', concat(wll1.dataareaid, wll1.loadid, wll1.ordernum, \nwll1.itemid,mel2.actualpieces,mel2.unitvolume,mrs1.stopcount,mrs1.mileage,meh1.actualmiles,meh1.actualstopcount,mt1.cubicvolume\n)), 2) as WHSLOADLINE_EXT_HASH_KEY,\nrow_number() over (partition by wll1.loadid, \n    wll1.ordernum, \n    wll1.itemid,\n    mel2.actualpieces,\n    mel2.unitvolume,\n    mrs1.stopcount,\n    mrs1.mileage,\n    meh1.actualmiles,\n    meh1.actualstopcount,\n    mt1.cubicvolume,\n\tconvert(varchar(max), hashbytes('sha2_256', concat(wll1.dataareaid, \n    wll1.loadid, \n    wll1.ordernum, \n    wll1.itemid,\n    mel2.actualpieces,\n    mel2.unitvolume,\n    mrs1.stopcount,\n    mrs1.mileage,\n    meh1.actualmiles,\n    meh1.actualstopcount,\n    mt1.cubicvolume\n    )), 2)\n\torder by\n\t (select max(lastupdatedate)\n    from (values (wll1.modifieddatetime), (isnull(mel2.inventtable_modifieddatetime, '1950-01-01')),(isnull(mel2.salesline_modifieddatetime, '1950-01-01')),\n    (isnull(it1.modifieddatetime, '1950-01-01')),(isnull(wlt1.modifieddatetime, '1950-01-01')), (isnull(st1.modifieddatetime, '1950-01-01')),\n    (isnull(mrst1.modifieddatetime, '1950-01-01'))) as UPDATEDATE(lastupdatedate))\n    desc) as WHS_EXT_RANK,\n(select max(lastupdatedate)\nfrom (values (wll1.modifieddatetime),\n(isnull(mel2.inventtable_modifieddatetime, '1950-01-01')),\n(isnull(mel2.salesline_modifieddatetime, '1950-01-01')),\n(isnull(it1.modifieddatetime, '1950-01-01')),\n(isnull(wlt1.modifieddatetime, '1950-01-01')),\n(isnull(st1.modifieddatetime, '1950-01-01')),\n(isnull(mrst1.modifieddatetime, '1950-01-01'))) as updatedate(lastupdatedate)) as LAST_MODIFIEDDATETIME\nfrom\n(select dataareaid, loadid, ordernum, itemid\n\t\t, sum(qty) as qty\n\t\t, max(modifieddatetime) as modifieddatetime\n\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.whsloadline\n\tgroup by dataareaid, loadid, ordernum, itemid) wll1\nleft join (select mel20.dataareaid, mel20.loadid, mel20.ordernum, mel20.itemid\n\t\t\t\t, max(case when mel20.itemid like '%merge%' then sl20.mcstotalvolume / isnull(sl20.salesqty, 1)\n\t\t\t\t\t\telse it10.unitvolume\n\t\t\t\t\t\tend) as unitvolume\n\t\t\t\t, sum(\n\t\t\t\t\t-- actualqty\n\t\t\t\t\tcase when mel20.eventtype = 'StopDeparted' and mel20.itemid like '%MERGE%' then isnull(sl20.salesqty, 0)\n\t\t\t\t\t\twhen mel20.eventtype = 'StopDeparted' then isnull(mel20.actualqty, 0)\n\t\t\t\t\telse 0\n\t\t\t\t\tend\n\t\t\t\t\t) as actualpieces\n\t\t\t\t, max(it10.modifieddatetime) as inventtable_modifieddatetime\n\t\t\t\t, max(sl20.modifieddatetime) as salesline_modifieddatetime\n\t\t\tfrom  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.mcsrnaeventline mel20\n\t\t\tleft join (select dataareaid, itemid\n\t\t\t\t\t\t, max(unitvolume) as unitvolume\n\t\t\t\t\t\t, max(modifieddatetime) as modifieddatetime\n\t\t\t\t\tfrom  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.inventtable\n\t\t\t\t\tgroup by dataareaid, itemid) it10 on\n\t\t\t\tmel20.dataareaid = it10.dataareaid and\n\t\t\t\tmel20.itemid = it10.itemid\n\t\t\tleft join (select dataareaid, salesid, itemid\n\t\t\t\t\t\t, max(mcstotalvolume) as mcstotalvolume\n\t\t\t\t\t\t, max(salesqty) as salesqty\n\t\t\t\t\t\t, max(modifieddatetime) as modifieddatetime\n\t\t\t\t\tfrom  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.salesline\n\t\t\t\t\tgroup by dataareaid, salesid, itemid) sl20 on\n\t\t\t\tmel20.dataareaid = sl20.dataareaid and\n\t\t\t\tmel20.ordernum = sl20.salesid and\n\t\t\t\tmel20.itemid = sl20.itemid\n\t\t\twhere mel20.eventtype = 'stopdeparted'\n\t\t\tgroup by mel20.dataareaid, mel20.loadid, mel20.ordernum, mel20.itemid, it10.unitvolume) mel2 on\n\twll1.dataareaid = mel2.dataareaid and\n\twll1.loadid = mel2.loadid and\n\twll1.ordernum = mel2.ordernum and\n\twll1.itemid = mel2.itemid\nleft join (select dataareaid, itemid\n\t\t\t, max(unitvolume) as unitvolume\n\t\t\t, max(modifieddatetime) as modifieddatetime\n\t\tfrom  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.inventtable\n\t\tgroup by dataareaid, itemid) it1 on\n\twll1.dataareaid = it1.dataareaid and\n\twll1.itemid = it1.itemid\nleft join (select dataareaid, salesid\n\t\t\t, max(salestype) as salestype\n\t\t\t, max(custaccount) as custaccount\n\t\t\t, max(deliverypostaladdress) as deliverypostaladdress\n\t\t\t, max(shippingdateconfirmed) as shippingdateconfirmed\n\t\t\t, max(modifieddatetime) as modifieddatetime\n\t\tfrom  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.salestable\n\t\tgroup by dataareaid, salesid) st1 on\n\twll1.dataareaid = st1.dataareaid and\n\twll1.ordernum = st1.salesid\nleft join (select dataareaid, loadid\n\t\t\t, max(ebccarrierid) as ebccarrierid\n\t\t\t, max(inventsiteid) as inventsiteid\n\t\t\t, max(ebctrailerid) as ebctrailerid\n\t\t\t, max(loadschedshiputcdatetime) as loadschedshiputcdatetime\n\t\t\t, max(loadstatus) as loadstatus\n\t\t\t, max(modifieddatetime) as modifieddatetime\n\t\tfrom  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.whsloadtable\n\t\tgroup by dataareaid, loadid) wlt1 on\n\twll1.dataareaid = wlt1.dataareaid and\n\twll1.loadid = wlt1.loadid\nleft join (select dataareaid, loadid\n\t\t\t, max(entitykey) as entitykey\n\t\t\t, max(modifieddatetime) as modifieddatetime\n\t\tfrom  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.mcsroadnetstagingtable\n\t\tgroup by dataareaid, loadid) mrst1 on\n\twll1.dataareaid = mrst1.dataareaid and\n\twll1.loadid = mrst1.loadid\nleft join (select dataareaid, entitykey\n\t\t\t, sum(case when stopnumber = 0 or stoptype = 'destinationdepotstop' then 0 else 1 end) as stopcount\n\t\t\t, sum(mileage) as mileage\n\t\tfrom dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.mcsrnaroutestop\n\t\tgroup by dataareaid, entitykey) mrs1 on\n\tmrst1.dataareaid = mrs1.dataareaid and\n\tmrst1.entitykey = mrs1.entitykey\nleft join (select dataareaid, loadid\n\t\t\t, sum(case when eventtype = 'routecompleted' and isnumeric(distancemiles) = 1 then isnull(convert(decimal(38,16), nullif(rtrim(distancemiles), '')), 0.00) else 0.00 end) as actualmiles\n\t\t\t, sum(case when eventtype = 'stopdeparted' then 1 else 0 end) as actualstopcount\n\t\tfrom  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.mcsrnaeventheader\n\t\tgroup by dataareaid, loadid) meh1 on\n\twll1.dataareaid = meh1.dataareaid and\n\twll1.loadid = meh1.loadid\nleft join (select trailerno\n\t\t\t, max(convert(int, isnull(nullif(rtrim(\n\t\t\t\tcase when isnumeric(cubicvolume) = 0 then '0' else cubicvolume end\n\t\t\t\t), ''), 0))) as cubicvolume\n\t\tfrom  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.mcstrailers\n\t\tgroup by trailerno) mt1 on\n\twlt1.ebctrailerid = mt1.trailerno\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as enumvaluelabel\n\t\tfrom  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\n\t\twhere enumname = 'salestype'\n\t\tgroup by enumname, enumvalue) tet1 on\n\tst1.salestype = tet1.enumvalue\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as enumvaluelabel\n\t\tfrom  dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\n\t\twhere enumname = 'whsloadstatus'\n\t\tgroup by enumname, enumvalue) tet2 on\n\twlt1.loadstatus = tet2.enumvalue\n\twhere wll1.loadid is not null",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "ParquetSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "ParquetWriteSettings"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "LOADID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "LOADID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "ORDERNUM",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "ORDERNUM",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "ITEMID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "ITEMID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "QTY",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 16,
																"precision": 38
															},
															"sink": {
																"name": "QTY",
																"type": "Decimal",
																"physicalType": "DECIMAL"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "MCSRNAEVENTLINE_ACTUALPIECES",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 16,
																"precision": 38
															},
															"sink": {
																"name": "MCSRNAEVENTLINE_ACTUALPIECES",
																"type": "Decimal",
																"physicalType": "DECIMAL"
															}
														},
														{
															"source": {
																"name": "MCSRNAEVENTLINE_UNITVOLUME",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 6,
																"precision": 38
															},
															"sink": {
																"name": "MCSRNAEVENTLINE_UNITVOLUME",
																"type": "Decimal",
																"physicalType": "DECIMAL"
															}
														},
														{
															"source": {
																"name": "MCSRNAEVENTLINE_INVENTTABLE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "MCSRNAEVENTLINE_INVENTTABLE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "MCSRNAEVENTLINE_SALESLINE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "MCSRNAEVENTLINE_SALESLINE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "INVENTTABLE_UNITVOLUME",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 16,
																"precision": 32
															},
															"sink": {
																"name": "INVENTTABLE_UNITVOLUME",
																"type": "Decimal",
																"physicalType": "DECIMAL"
															}
														},
														{
															"source": {
																"name": "INVENTTABLE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "INVENTTABLE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_SALESID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "SALESTABLE_SALESID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_CUSTACCOUNT",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "SALESTABLE_CUSTACCOUNT",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_DELIVERYPOSTALADDRESS",
																"type": "Int64",
																"physicalType": "bigint"
															},
															"sink": {
																"name": "SALESTABLE_DELIVERYPOSTALADDRESS",
																"type": "Int64",
																"physicalType": "INT_64"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_SHIPPINGDATECONFIRMED",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "SALESTABLE_SHIPPINGDATECONFIRMED",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "SALESTABLE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "SALESTABLE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "WHSLOADTABLE_EBCCARRIERID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "WHSLOADTABLE_EBCCARRIERID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "WHSLOADTABLE_INVENTSITEID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "WHSLOADTABLE_INVENTSITEID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "WHSLOADTABLE_EBCTRAILERID",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "WHSLOADTABLE_EBCTRAILERID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "WHSLOADTABLE_LOADSCHEDSHIPUTCDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "WHSLOADTABLE_LOADSCHEDSHIPUTCDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "WHSLOADTABLE_LOADSTATUS",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "WHSLOADTABLE_LOADSTATUS",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "WHSLOADTABLE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "WHSLOADTABLE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "WHSLOADTABLE_ENTITYKEY",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "WHSLOADTABLE_ENTITYKEY",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "MCSROADNETSTAGINGTABLE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "MCSROADNETSTAGINGTABLE_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "MCSRNAROUTESTOP_STOPCOUNT",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "MCSRNAROUTESTOP_STOPCOUNT",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "MCSRNAROUTESTOP_MILEAGE",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 16,
																"precision": 38
															},
															"sink": {
																"name": "MCSRNAROUTESTOP_MILEAGE",
																"type": "Decimal",
																"physicalType": "DECIMAL"
															}
														},
														{
															"source": {
																"name": "MCSRNAEVENTHEADER_ACTUALMILES",
																"type": "Decimal",
																"physicalType": "decimal",
																"scale": 16,
																"precision": 38
															},
															"sink": {
																"name": "MCSRNAEVENTHEADER_ACTUALMILES",
																"type": "Decimal",
																"physicalType": "DECIMAL"
															}
														},
														{
															"source": {
																"name": "MCSRNAEVENTHEADER_ACTUALSTOPCOUNT",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "MCSRNAEVENTHEADER_ACTUALSTOPCOUNT",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "MCSTRAILERS_CUBICVOLUME",
																"type": "Int32",
																"physicalType": "int"
															},
															"sink": {
																"name": "MCSTRAILERS_CUBICVOLUME",
																"type": "Int32",
																"physicalType": "INT_32"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_SALESTYPE",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_SALESTYPE",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_LOADSTATUS",
																"type": "String",
																"physicalType": "nvarchar"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_LOADSTATUS",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "WHSLOADLINE_EXT_HASH_KEY",
																"type": "String",
																"physicalType": "varchar"
															},
															"sink": {
																"name": "WHSLOADLINE_EXT_HASH_KEY",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "WHS_EXT_RANK",
																"type": "Int64",
																"physicalType": "bigint"
															},
															"sink": {
																"name": "WHS_EXT_RANK",
																"type": "Int64",
																"physicalType": "INT_64"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "datetime"
															},
															"sink": {
																"name": "LAST_MODIFIEDDATETIME",
																"type": "DateTime",
																"physicalType": "INT_96"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String",
																"physicalType": "UTF8"
															}
														},
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String",
																"physicalType": "UTF8"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_parquet",
													"type": "DatasetReference",
													"parameters": {
														"p_directory": {
															"value": "@pipeline().parameters.p_temp_directory",
															"type": "Expression"
														},
														"p_root_system": {
															"value": "@pipeline().globalParameters.rootDir",
															"type": "Expression"
														},
														"p_file_name": {
															"value": "@pipeline().parameters.p_temp_file_nm",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365aw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "whsloadline_to_adls_d365",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('whsloadline_to_adls_d365').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('whsloadline_to_adls_d365').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('whsloadline_to_adls_d365').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('whsloadline_to_adls_d365').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365aw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('whsloadline_to_adls_d365').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "load_fact_transportation_load",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_load_fact_transportation_load",
								"type": "DataFlowReference",
								"parameters": {
									"df_prev_max_timestamp": {
										"value": "'@{variables('v_prev_max_timestamp')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"srcWhsLoadLine": {
										"p_directory": {
											"value": "@pipeline().parameters.p_temp_directory",
											"type": "Expression"
										},
										"p_root_system": {
											"value": "@pipeline().globalParameters.rootDir",
											"type": "Expression"
										},
										"p_file_name": {
											"value": "@pipeline().parameters.p_temp_file_nm",
											"type": "Expression"
										}
									},
									"srcWhsLoadLineExt": {
										"p_tgt_table_name": {
											"value": "@pipeline().parameters.p_tgt_raw_table_nm_2",
											"type": "Expression"
										},
										"p_tgt_schema_name": {
											"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
											"type": "Expression"
										},
										"p_ls_DbName": {
											"value": "@pipeline().globalParameters.snow_rawDb",
											"type": "Expression"
										},
										"p_ls_Env": {
											"value": "@pipeline().globalParameters.environment",
											"type": "Expression"
										}
									},
									"whsLoadLineExt": {
										"p_tgt_table_name": {
											"value": "@pipeline().parameters.p_tgt_raw_table_nm_2",
											"type": "Expression"
										},
										"p_tgt_schema_name": {
											"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
											"type": "Expression"
										},
										"p_ls_DbName": {
											"value": "@pipeline().globalParameters.snow_rawDb",
											"type": "Expression"
										},
										"p_ls_Env": {
											"value": "@pipeline().globalParameters.environment",
											"type": "Expression"
										}
									},
									"whsLoadLine": {
										"p_tgt_table_name": {
											"value": "@pipeline().parameters.p_tgt_raw_table_nm",
											"type": "Expression"
										},
										"p_tgt_schema_name": {
											"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
											"type": "Expression"
										},
										"p_ls_DbName": {
											"value": "@pipeline().globalParameters.snow_rawDb",
											"type": "Expression"
										},
										"p_ls_Env": {
											"value": "@pipeline().globalParameters.environment",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "IR-Snowflake-NALA",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "load_fact_trans_load__failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "load_fact_transportation_load",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('load_fact_transportation_load').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('load_fact_transportation_load').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('load_fact_transportation_load').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('load_fact_transportation_load').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "load_fact_transportation_load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "raw_to_curate_storedprocedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "WHSLOADLINE"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "WHSLOADLINE"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "FACT_TRANSPORTATION_LOAD"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_temp_file_nm": {
						"type": "string",
						"defaultValue": "whsloadline_nala.parquet"
					},
					"p_tgt_raw_table_nm_2": {
						"type": "string",
						"defaultValue": "WHSLOADLINE_EXT"
					},
					"p_temp_directory": {
						"type": "string",
						"defaultValue": "temp_files"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prev_max_timestamp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-22T15:58:29Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_edw_hist_fact_customer_settlements')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy from sqlserver to ADLS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select f1.DW_Id,\n\tf1.CustomerSettlementKey,\n\tf1.LegalEntityKey,\n\tf1.TransactionDate,\n\tf1.RecordID,\n\tf1.LegalEntity,\n\tf1.CompanyCurrencySettleAmount,\n\tf1.TransactionCurrencySettleAmount,\n\tf1.IncrementalTimestamp,\n\tf2.transcompany,\n\tf2.accountnum,\n\tf2.transrecid,\n\tf1.DW_Batch,\n\tf1.DW_SourceCode,\n\tf1.DW_TimeStamp\nfrom dbo.FACTCUSTOMERSETTLEMENTS f1 with (nolock)\n\tleft join edw_hka.dbo.FACTCUSTOMERSETTLEMENTS f2 with (nolock) on\n\t\tf1.RecordID = f2.RecordID\n;\n\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_server",
								"type": "DatasetReference",
								"parameters": {
									"p_src_table_name": {
										"value": "@pipeline().parameters.p_src_table_nm",
										"type": "Expression"
									},
									"p_src_schema_name": {
										"value": "@pipeline().parameters.p_src_schema_nm",
										"type": "Expression"
									},
									"p_ls_serverName": {
										"value": "@pipeline().globalParameters.edw_sql_serverName",
										"type": "Expression"
									},
									"p_ls_dbName": {
										"value": "@pipeline().globalParameters.edw_sql_dbName",
										"type": "Expression"
									},
									"p_ls_sqlUsername": {
										"value": "@pipeline().globalParameters.sql_userName",
										"type": "Expression"
									},
									"p_ls_sqlPassword": {
										"value": "@pipeline().globalParameters.sql_password",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_parq_edw",
								"type": "DatasetReference",
								"parameters": {
									"p_root_system": {
										"value": "@pipeline().globalParameters.rootDir",
										"type": "Expression"
									},
									"p_directory": {
										"value": "@pipeline().parameters.p_temp_directory",
										"type": "Expression"
									},
									"p_file_name": {
										"value": "@concat(toUpper(pipeline().parameters.p_curate_table_name),'_HIST_',substring(string(utcNow()),0,4),'_',substring(string(utcNow()),5,2),'_',substring(string(utcNow()),8,2),'.snappy.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "ADLS to Snowflake RAW with HK columns",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy from sqlserver to ADLS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_load_edw_history",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"adlsSource": {
										"p_root_system": {
											"value": "@pipeline().globalParameters.rootDir",
											"type": "Expression"
										},
										"p_directory": {
											"value": "@pipeline().parameters.p_temp_directory",
											"type": "Expression"
										},
										"p_file_name": {
											"value": "@concat(toUpper(pipeline().parameters.p_curate_table_name),'_HIST_',substring(string(utcNow()),0,4),'_',substring(string(utcNow()),5,2),'_',substring(string(utcNow()),8,2),'.snappy.parquet')",
											"type": "Expression"
										}
									},
									"snowflakeRawTarget": {
										"p_tgt_table_name": {
											"value": "@pipeline().parameters.p_src_table_nm",
											"type": "Expression"
										},
										"p_tgt_schema_name": {
											"value": "@pipeline().parameters.p_tgt_schema_nm",
											"type": "Expression"
										},
										"p_ls_DbName": {
											"value": "@pipeline().globalParameters.snow_rawDb",
											"type": "Expression"
										},
										"p_ls_Env": {
											"value": "@pipeline().globalParameters.environment",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "IR-Snowflake-NALA",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "RAW to CURATE SP",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ADLS to Snowflake RAW with HK columns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_curateDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "truncate table global.FACT_CUSTOMER_SETTLEMENTS;\n\ninsert into global.FACT_CUSTOMER_SETTLEMENTS (fact_customer_settlements_key, source_name, record_id, dim_source_system_key, dim_source_system_snkey, transaction_date_dim_date_key, transaction_date_dim_date_snkey, dim_legal_entity_key, dim_legal_entity_snkey, customer_settlement_key, trans_company, account_num, trans_rec_id, transaction_date, legal_entity, company_currency_settle_amount, transaction_currency_settle_amount, hk_hash_key, hk_source_name, hk_soft_delete_flag, hk_source_created_timestamp, hk_source_last_updated_timestamp, hk_created_job_run_id, hk_last_updated_job_run_id, hk_created_timestamp, hk_last_updated_timestamp, hk_warehouse_id)\n\tselect hash(a.source_name, '~', to_char(a.record_id))::number as FACT_CUSTOMER_SETTLEMENTS_KEY\n\t\t, a.source_name as SOURCE_NAME, a.record_id as RECORD_ID\n\t\t\n\t\t, case when a.source_name = '' then -2\n\t\t\telse nvl(dss1.dim_source_system_key, -1)\n\t\t\tend::number as DIM_SOURCE_SYSTEM_KEY\n\t\t, a.dim_source_system_snkey as DIM_SOURCE_SYSTEM_SNKEY\n\t\t\n\t\t, nvl(dd1.dim_date_key, -1)::number as TRANSACTION_DATE_DIM_DATE_KEY\n\t\t, a.transaction_date_dim_date_snkey as TRANSACTION_DATE_DIM_DATE_SNKEY\n\t\t\n\t\t, case when a.dim_legal_entity_snkey = -2 then -2\n\t\t\t\telse nvl(dle1.dim_legal_entity_key, -1)\n\t\t\tend::number as DIM_LEGAL_ENTITY_KEY\n\t\t, a.dim_legal_entity_snkey as DIM_LEGAL_ENTITY_SNKEY\n\t\t, a.customer_settlement_key as CUSTOMER_SETTLEMENT_KEY\n\t\t\n\t\t, a.trans_company as TRANS_COMPANY, a.account_num as ACCOUNT_NUM, a.trans_rec_id as TRANS_REC_ID, a.transaction_date as TRANSACTION_DATE, a.legal_entity as LEGAL_ENTITY, a.company_currency_settle_amount as COMPANY_CURRENCY_SETTLE_AMOUNT, a.transaction_currency_settle_amount as TRANSACTION_CURRENCY_SETTLE_AMOUNT\n\t\t\n\t\t, hash(a.source_name, '~', to_char(a.record_id), '~', a.trans_company, '~', a.account_num, '~', to_char(a.trans_rec_id), '~', to_char(a.transaction_date, 'yyyymmdd'), '~', a.legal_entity, '~', to_char(a.company_currency_settle_amount), '~', to_char(a.transaction_currency_settle_amount))::number as HK_HASH_KEY\n\t\t\n\t\t, a.hk_source_name as HK_SOURCE_NAME\n\t\t, false::boolean as HK_SOFT_DELETE_FLAG\n\t\t, a.hk_source_created_timestamp as HK_SOURCE_CREATED_TIMESTAMP, a.hk_source_last_updated_timestamp as HK_SOURCE_LAST_UPDATED_TIMESTAMP, a.hk_created_job_run_id as HK_CREATED_JOB_RUN_ID, a.hk_last_updated_job_run_id as HK_LAST_UPDATED_JOB_RUN_ID\n\t\t, current_timestamp::timestamp_tz as HK_CREATED_TIMESTAMP\n\t\t, current_timestamp::timestamp_tz as HK_LAST_UPDATED_TIMESTAMP\n\t\t, uuid_string()::varchar as HK_WAREHOUSE_ID\n\t\n\tfrom (select 'AXNALA'::varchar as SOURCE_NAME\n\t\t\t, nvl(b.recordid, 0)::number(38, 0) as RECORD_ID\n\t\t\t\n\t\t\t, nvl(b.transcompany, '')::varchar as TRANS_COMPANY\n\t\t\t, nvl(b.accountnum, '')::varchar as ACCOUNT_NUM\n\t\t\t, nvl(b.transrecid, 0)::number(38, 0) as TRANS_REC_ID\n\t\t\t, case when nvl(b.transactiondate, '1900-01-01') in ('1900-01-01') then '1950-01-01'\n\t\t\t\t\twhen b.transactiondate < dd1.min_date_value then '1951-12-31'\n\t\t\t\t\twhen b.transactiondate > dd1.max_date_value then '9951-12-31'\n\t\t\t\telse b.transactiondate\n\t\t\t\tend::date as TRANSACTION_DATE\n\t\t\t, nvl(b.legalentity, '')::varchar as LEGAL_ENTITY\n\t\t\t, nvl(b.companycurrencysettleamount, 0)::number(38, 16) as COMPANY_CURRENCY_SETTLE_AMOUNT\n\t\t\t, nvl(b.transactioncurrencysettleamount, 0)::number(38, 16) as TRANSACTION_CURRENCY_SETTLE_AMOUNT\n\t\t\t\n\t\t\t, case when nvl(SOURCE_NAME, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME)\n\t\t\t\tend::number as DIM_SOURCE_SYSTEM_SNKEY\n\t\t\t, case when nvl(TRANSACTION_DATE, '1950-01-01') = '1950-01-01' then -2\n\t\t\t\telse hash('', '~', to_char(TRANSACTION_DATE, 'yyyymmdd'))\n\t\t\t\tend::number as TRANSACTION_DATE_DIM_DATE_SNKEY\n\t\t\t\n\t\t\t, case when nvl(LEGAL_ENTITY, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY)\n\t\t\t\tend::number as DIM_LEGAL_ENTITY_SNKEY\n\t\t\t, hash(TRANS_COMPANY, '~', ACCOUNT_NUM, '~', to_char(TRANS_REC_ID))::number(38, 0) as CUSTOMER_SETTLEMENT_KEY\n\t\n\t\t\t, nvl(b.dw_sourcecode, '')::varchar as HK_SOURCE_NAME\n\t\t\t, '1950-01-01 00:00:00'::timestamp_tz as HK_SOURCE_CREATED_TIMESTAMP\n\t\t\t, nvl(b.dw_timestamp, '1950-01-01 00:00:00')::timestamp_tz as HK_SOURCE_LAST_UPDATED_TIMESTAMP\n\t\t\t, '-1'::varchar as HK_CREATED_JOB_RUN_ID\n\t\t\t, nvl(b.dw_batch, '-1')::varchar as HK_LAST_UPDATED_JOB_RUN_ID\n\t\t\t\n\t\tfrom (select hk_source_name, hk_job_run_id, hk_created_timestamp, hk_warehouse_id, dw_id, customersettlementkey, legalentitykey, transactiondate, recordid, legalentity, companycurrencysettleamount, transactioncurrencysettleamount, incrementaltimestamp, transcompany, accountnum, transrecid, dw_batch, dw_sourcecode, dw_timestamp\n\t\t\tfrom @{pipeline().globalParameters.environment}_raw.edw_dwh.FACTCUSTOMERSETTLEMENTS\n\t\t\t) b\n\t\t\tinner join (select min(date_value) as MIN_DATE_VALUE\n\t\t\t\t\t\t\t, max(date_value) as MAX_DATE_VALUE\n\t\t\t\t\t\tfrom global.DIM_DATE\n\t\t\t\t\t\twhere date_value not in ('1950-01-01', '1951-12-31', '9000-01-01', '9951-12-31')) dd1 on\n\t\t\t\t1=1\n\t\t) a\n\tleft join global.DIM_SOURCE_SYSTEM dss1 on\n\t\ta.dim_source_system_snkey = dss1.dim_source_system_snkey\n\tleft join global.DIM_DATE dd1 on\n\t\ta.transaction_date_dim_date_snkey = dd1.dim_date_snkey\n\tleft join global.DIM_LEGAL_ENTITY dle1 on\n\t\ta.dim_legal_entity_snkey = dle1.dim_legal_entity_snkey\n;",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "FACTCUSTOMERSETTLEMENTS"
					},
					"p_temp_directory": {
						"type": "string",
						"defaultValue": "temp_files"
					},
					"p_tgt_schema_nm": {
						"type": "string",
						"defaultValue": "EDW_DWH"
					},
					"p_curate_table_name": {
						"type": "string",
						"defaultValue": "FACT_CUSTOMER_SETTLEMENTS"
					}
				},
				"folder": {
					"name": "history_fact"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_edw_hist_fact_inventory_journal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy from sqlserver to ADLS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT --TOP (100) \n\t\tf1.DW_ID\n      ,f1.DEFAULTDIMENSIONKEY\n      ,f1.INVENTORYJOURNALDETAILSKEY\n      ,f1.INVENTORYJOURNALKEY\n      ,f1.INVENTORYKEY\n      ,f1.ITEMKEY\n      ,f1.LEDGERDIMENSIONKEY\n      ,f1.LEGALENTITYKEY\n      ,f1.RECEIVINGINVENTORYKEY\n      ,f1.USERINFOKEY\n      ,f1.POSTEDDATE\n      ,f1.TRANSACTIONDATE\n      ,f1.LEGALENTITY\n      ,f1.JOURNALID\n      ,f1.LINENUMBER\n      ,f1.VOUCHER\n      ,f1.QUANTITY\n      ,f1.COUNTEDQUANTITY\n      ,f1.ONHANDQUANTITY\n      ,f1.COSTAMOUNT\n      ,f1.COSTPRICE\n      ,f1.PRICEUNIT\n      ,f1.INCREMENTALTIMESTAMP\n\t  ,cast(case when f1.defaultdimensionkey in (-1, -2) then f2.DEFAULTDIMENSION \n\t\telse dd1.defaultdimension end as varchar) as DEFAULTDIMENSION\n\t ,f2.JOURNALNAMEID\n\t  ,case when f1.InventoryKey in (-1, -2) then f2.INVENTDIMID \n\t\telse di1.InventoryDimensionID end as INVENTDIMID\n\t  ,case when f1.ItemKey in (-1, -2) then f2.itemid \n\t\t\telse dit1.itemid end as ITEMID\n\t  ,cast(case when f1.LedgerDimensionKey in (-1, -2) then f2.LEDGERDIMENSION \n\t\t\telse dld1.LedgerDimension end as varchar) as LEDGERDIMENSION\n\t  ,case when f1.RECEIVINGINVENTORYKEY in (-1, -2) then f2.TOINVENTDIMID \n\t\telse di2.InventoryDimensionID end as TOINVENTDIMID\n\t  ,case when f1.USERINFOKEY in (-1, -2) then f2.POSTEDUSERID  \n\t\telse dui1.USERID end as POSTEDUSERID\n\t  ,dijd1.JOURNALTYPE\n      ,dijd1.ISINVENTORYJOURNALPOSTED\n      ,dijd1.ISINVENTORYJOURNALBLOCKED\n      ,dijd1.DROPSHIPMENT\n      ,f1.DW_BATCH\n      ,f1.DW_SOURCECODE\n      ,f1.DW_TIMESTAMP\n  FROM\tEDW_DWH.DBO.FACTINVENTORYJOURNAL f1 with (nolock)\n\t\tLEFT JOIN EDW_HKA.DBO.FACTINVENTORYJOURNAL f2 with (nolock) ON\n\t\tf1.DW_Id = f2.DW_Id\n\t\tleft join edw_hka.dbo.DIMDEFAULTDIMENSION dd1 with (nolock) on\n\t\tf1.defaultdimensionkey = dd1.defaultdimensionkey\n\t\tleft join dbo.DimInventory di1 with (nolock) on\n\t\tf1.InventoryKey = di1.InventoryKey\n\t\tleft join dbo.DimInventory di2 with (nolock) on\n\t\tf1.RECEIVINGINVENTORYKEY = di2.InventoryKey\n\t\tleft join dbo.DIMITEM dit1 with (nolock) on\n\t\tf1.itemkey = dit1.itemkey\t\n\t\tleft join dbo.DIMUSERINFO dui1 with (nolock) on\n\t\tf1.UserInfoKey = dui1.UserInfoKey\n\t\tleft join edw_hka.dbo.DimLedgerDimension dld1 with (nolock) on\n\t\tf1.LedgerDimensionKey = dld1.LedgerDimensionKey\n\t\tleft join dbo.DimInventoryJournalDetails dijd1 with (nolock) on\n\t\tf1.InventoryJournalDetailsKey =dijd1.InventoryJournalDetailsKey;\n\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_server",
								"type": "DatasetReference",
								"parameters": {
									"p_src_table_name": {
										"value": "@pipeline().parameters.p_src_table_nm",
										"type": "Expression"
									},
									"p_src_schema_name": {
										"value": "@pipeline().parameters.p_src_schema_nm",
										"type": "Expression"
									},
									"p_ls_serverName": {
										"value": "@pipeline().globalParameters.edw_sql_serverName",
										"type": "Expression"
									},
									"p_ls_dbName": {
										"value": "@pipeline().globalParameters.edw_sql_dbName",
										"type": "Expression"
									},
									"p_ls_sqlUsername": {
										"value": "@pipeline().globalParameters.sql_userName",
										"type": "Expression"
									},
									"p_ls_sqlPassword": {
										"value": "@pipeline().globalParameters.sql_password",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_parq_edw",
								"type": "DatasetReference",
								"parameters": {
									"p_root_system": {
										"value": "@pipeline().globalParameters.rootDir",
										"type": "Expression"
									},
									"p_directory": {
										"value": "@pipeline().parameters.p_temp_directory",
										"type": "Expression"
									},
									"p_file_name": {
										"value": "@concat(toUpper(pipeline().parameters.p_curate_table_name),'_HIST_',substring(string(utcNow()),0,4),'_',substring(string(utcNow()),5,2),'_',substring(string(utcNow()),8,2),'.snappy.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "ADLS to Snowflake RAW with HK columns",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy from sqlserver to ADLS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_load_edw_history",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"adlsSource": {
										"p_root_system": {
											"value": "@pipeline().globalParameters.rootDir",
											"type": "Expression"
										},
										"p_directory": {
											"value": "@pipeline().parameters.p_temp_directory",
											"type": "Expression"
										},
										"p_file_name": {
											"value": "@concat(toUpper(pipeline().parameters.p_curate_table_name),'_HIST_',substring(string(utcNow()),0,4),'_',substring(string(utcNow()),5,2),'_',substring(string(utcNow()),8,2),'.snappy.parquet')",
											"type": "Expression"
										}
									},
									"snowflakeRawTarget": {
										"p_tgt_table_name": {
											"value": "@pipeline().parameters.p_src_table_nm",
											"type": "Expression"
										},
										"p_tgt_schema_name": {
											"value": "@pipeline().parameters.p_tgt_schema_nm",
											"type": "Expression"
										},
										"p_ls_DbName": {
											"value": "@pipeline().globalParameters.snow_rawDb",
											"type": "Expression"
										},
										"p_ls_Env": {
											"value": "@pipeline().globalParameters.environment",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "IR-Snowflake-NALA",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "RAW to CURATE SP",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ADLS to Snowflake RAW with HK columns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_curateDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "TRUNCATE TABLE GLOBAL.FACT_INVENTORY_JOURNAL;\n\nINSERT INTO GLOBAL.FACT_INVENTORY_JOURNAL (\nFACT_INVENTORY_JOURNAL_KEY,\nSOURCE_NAME,\nLEGAL_ENTITY,\nJOURNAL_ID,\nLINE_NUMBER,\nDIM_SOURCE_SYSTEM_KEY,\nDIM_SOURCE_SYSTEM_SNKEY,\nDIM_DEFAULT_DIMENSION_KEY,\nDIM_DEFAULT_DIMENSION_SNKEY,\n-- DIM_INVENTORY_JOURNAL_DETAILS_KEY,\n-- DIM_INVENTORY_JOURNAL_DETAILS_SNKEY,\nDIM_INVENTORY_JOURNAL_KEY,\nDIM_INVENTORY_JOURNAL_SNKEY,\nDIM_INVENTORY_KEY,\nDIM_INVENTORY_SNKEY,\nDIM_ITEM_KEY,\nDIM_ITEM_SNKEY,\nDIM_LEDGER_DIMENSION_KEY,\nDIM_LEDGER_DIMENSION_SNKEY,\nDIM_LEGAL_ENTITY_KEY,\nDIM_LEGAL_ENTITY_SNKEY,\nDIM_RECIEVING_INVENTORY_KEY,\nDIM_RECIEVING_INVENTORY_SNKEY,\nDIM_USER_INFO_KEY,\nDIM_USER_INFO_SNKEY,\nPOSTED_DATE_DIM_DATE_KEY,\nPOSTED_DATE_DIM_DATE_SNKEY,\nTRANSACTION_DATE_DIM_DATE_KEY,\nTRANSACTION_DATE_DIM_DATE_SNKEY,\nPOSTED_DATE,\nTRANSACTION_DATE,\nDEFAULT_DIMENSION,\nINVENTORY_JOURNAL_ID,\nINVENTORY_DIMENSION_ID,\nITEM_ID,\nLEDGER_DIMENSION,\nRECIEVING_INVENTORY_DIMENSION_ID,\nPOSTED_USER_ID,\nVOUCHER,\nQUANTITY,\nCOUNTED_QUANTITY,\nON_HAND_QUANTITY,\nCOST_AMOUNT,\nCOST_PRICE,\nPRICE_UNIT,\nJOURNAL_TYPE,\nIS_INVENTORY_JOURNAL_POSTED,\nIS_INVENTORY_JOURNAL_BLOCKED,\nDROP_SHIPMENT,\nHK_HASH_KEY,\nHK_SOURCE_NAME,\nHK_SOFT_DELETE_FLAG,\nHK_SOURCE_CREATED_TIMESTAMP,\nHK_SOURCE_LAST_UPDATED_TIMESTAMP,\nHK_CREATED_JOB_RUN_ID,\nHK_LAST_UPDATED_JOB_RUN_ID,\nHK_CREATED_TIMESTAMP,\nHK_LAST_UPDATED_TIMESTAMP,\nHK_WAREHOUSE_ID)\n\nSELECT hash(a.SOURCE_NAME, '~',a.LEGAL_ENTITY, '~',a.JOURNAL_ID, '~', to_char(a.LINE_NUMBER)) AS FACT_INVENTORY_JOURNAL_KEY\n    ,a.SOURCE_NAME\n    ,a.LEGAL_ENTITY\n    ,a.JOURNAL_ID\n    ,a.LINE_NUMBER\n    ,case when a.source_name = '' then -2\n\t\t\telse nvl(dss1.dim_source_system_key, -1)\n\t\t\tend::number as DIM_SOURCE_SYSTEM_KEY\n    ,a.DIM_SOURCE_SYSTEM_SNKEY    \n\t\t, case when a.dim_default_dimension_snkey = -2 then -2\n\t\t\t\telse nvl(ddim1.dim_default_dimension_key, -1)\n\t\t\tend::number as DIM_DEFAULT_DIMENSION_KEY\n    ,a.DIM_DEFAULT_DIMENSION_SNKEY \n   -- ,a.DIM_INVENTORY_JOURNAL_DETAILS_SNKEY AS DIM_INVENTORY_JOURNAL_DETAILS_KEY\n   -- ,a.DIM_INVENTORY_JOURNAL_DETAILS_SNKEY\n          \t, case when a.DIM_INVENTORY_JOURNAL_SNKEY = -2 then -2\n\t\t\t\telse nvl(dij1.DIM_INVENTORY_JOURNAL_KEY, -1)\n\t\t\tend::number as DIM_INVENTORY_JOURNAL_KEY\n,a.DIM_INVENTORY_JOURNAL_SNKEY\n    , case when a.dim_inventory_snkey = -2 then -2\n\t\t\t\telse nvl(dinv1.dim_inventory_key, -1)\n\t\t\tend::number as DIM_INVENTORY_KEY\n    ,a.DIM_INVENTORY_SNKEY \n  \t, case when a.dim_item_snkey = -2 then -2\n\t\t\t\telse nvl(dit1.dim_item_key, -1)\n\t\t\tend::number as DIM_ITEM_KEY\n,a.DIM_ITEM_SNKEY\n  \t, case when a.DIM_LEDGER_DIMENSION_SNKEY = -2 then -2\n\t\t\t\telse nvl(dld1.DIM_LEDGER_DIMENSION_KEY, -1)\n\t\t\tend::number as DIM_LEDGER_DIMENSION_KEY\n,a.DIM_LEDGER_DIMENSION_SNKEY\n\t\t, case when a.dim_legal_entity_snkey = -2 then -2\n\t\t\t\telse nvl(dle1.dim_legal_entity_key, -1)\n\t\t\tend::number as DIM_LEGAL_ENTITY_KEY\n,a.DIM_LEGAL_ENTITY_SNKEY\n     , case when a.DIM_RECIEVING_INVENTORY_SNKEY = -2 then -2\n\t\t\t\telse nvl(dinv2.dim_inventory_key, -1)\n\t\t\tend::number as DIM_RECIEVING_INVENTORY_KEY\n,a.DIM_RECIEVING_INVENTORY_SNKEY\n     , case when a.DIM_USER_INFO_SNKEY = -2 then -2\n\t\t\t\telse nvl(dui1.DIM_USER_INFO_KEY, -1)\n\t\t\tend::number as DIM_USER_INFO_KEY\n,a.DIM_USER_INFO_SNKEY\n, nvl(dd1.dim_date_key, -1)::number as POSTED_DATE_DIM_DATE_KEY\n,a.POSTED_DATE_DIM_DATE_SNKEY\n, nvl(dd2.dim_date_key, -1)::number as TRANSACTION_DATE_DIM_DATE_KEY\n,a.TRANSACTION_DATE_DIM_DATE_SNKEY\n,a.POSTED_DATE\n,a.TRANSACTION_DATE\n,a.DEFAULT_DIMENSION\n,a.INVENTORY_JOURNAL_ID\n,a.INVENTORY_DIMENSION_ID\n,a.ITEM_ID\n,a.LEDGER_DIMENSION\n,a.RECIEVING_INVENTORY_DIMENSION_ID\n,a.POSTED_USER_ID\n,a.VOUCHER\n,a.QUANTITY\n,a.COUNTED_QUANTITY\n,a.ON_HAND_QUANTITY\n,a.COST_AMOUNT\n,a.COST_PRICE\n,a.PRICE_UNIT\n,a.JOURNAL_TYPE\n,a.IS_INVENTORY_JOURNAL_POSTED\n,a.IS_INVENTORY_JOURNAL_BLOCKED\n,a.DROP_SHIPMENT\n,hash(a.source_name, '~', a.legal_entity, '~', a.journal_id, '~', to_char(a.line_number), '~', to_char(a.posted_date, 'yyyymmddhh24missff3'), '~', to_char(a.transaction_date, 'yyyymmddhh24missff3'), '~', a.default_dimension, '~', a.INVENTORY_JOURNAL_ID, '~', a.inventory_dimension_id, '~', a.item_id, '~', a.ledger_dimension, '~', a.recieving_inventory_dimension_id, '~', a.posted_user_id, '~', a.voucher, '~', to_char(a.quantity), '~', to_char(a.counted_quantity), '~', to_char(a.on_hand_quantity), '~', to_char(a.cost_amount), '~', to_char(a.cost_price), '~', to_char(a.price_unit), '~', a.journal_type, '~', a.is_inventory_journal_posted, '~', a.is_inventory_journal_blocked, '~', a.drop_shipment) as HK_HASH_KEY\n\t\t, a.hk_source_name as HK_SOURCE_NAME\n\t\t, false::boolean as HK_SOFT_DELETE_FLAG\n\t\t, a.hk_source_created_timestamp as HK_SOURCE_CREATED_TIMESTAMP, a.hk_source_last_updated_timestamp as HK_SOURCE_LAST_UPDATED_TIMESTAMP, a.hk_created_job_run_id as HK_CREATED_JOB_RUN_ID, a.hk_last_updated_job_run_id as HK_LAST_UPDATED_JOB_RUN_ID\n\t\t, current_timestamp::timestamp_tz as HK_CREATED_TIMESTAMP\n\t\t, current_timestamp::timestamp_tz as HK_LAST_UPDATED_TIMESTAMP\n\t\t, uuid_string()::varchar as HK_WAREHOUSE_ID\n \nFROM\n(SELECT     'AXNALA'::varchar as SOURCE_NAME\n            , nvl(LEGALENTITY, '') AS LEGAL_ENTITY \n            , nvl(JOURNALID,'') AS JOURNAL_ID\n            , NVL(LINENUMBER,0) AS LINE_NUMBER\n            , case when nvl(SOURCE_NAME, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME)\n\t\t\t\tend::number as DIM_SOURCE_SYSTEM_SNKEY\n\t\t\t, case when nvl(DEFAULTDIMENSION, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', DEFAULTDIMENSION)\n\t\t\t\tend::number as DIM_DEFAULT_DIMENSION_SNKEY\n           -- ,hash(JOURNALTYPE, '~', ISINVENTORYJOURNALPOSTED, '~', ISINVENTORYJOURNALBLOCKED, '~', DROPSHIPMENT) AS DIM_INVENTORY_JOURNAL_DETAILS_SNKEY\n            , case when nvl(LEGALENTITY, '') = '' or nvl(JOURNALNAMEID, '') = '' then -2\n              else hash(SOURCE_NAME, '~',LEGALENTITY, '~',JOURNALNAMEID)\n                end::number as DIM_INVENTORY_JOURNAL_SNKEY \n            ,case when nvl(LEGALENTITY, '') = '' or nvl(INVENTDIMID, '') = '' then -2\n             else hash(SOURCE_NAME, '~', LEGALENTITY, '~', INVENTDIMID) \n                end::number as DIM_INVENTORY_SNKEY \n            ,case when nvl(LEGALENTITY, '') = '' or nvl(ITEMID, '') = '' then -2\n                else hash('', '~', LEGALENTITY, '~', ITEMID)\n                end::number as DIM_ITEM_SNKEY\n            ,case when nvl(LEDGERDIMENSION, '') = '' then -2\n                else hash(SOURCE_NAME, '~',LEDGERDIMENSION)\n                end::number as DIM_LEDGER_DIMENSION_SNKEY\n            ,case when nvl(LEGALENTITY, '') = '' then -2\n                else hash(SOURCE_NAME, '~', LEGALENTITY)\n                end::number as DIM_LEGAL_ENTITY_SNKEY\n            ,case when nvl(LEGALENTITY, '') = '' or nvl(TOINVENTDIMID, '') = '' then -2\n                else hash(SOURCE_NAME, '~', LEGALENTITY, '~',TOINVENTDIMID)\n                end::number as DIM_RECIEVING_INVENTORY_SNKEY\n            ,case when nvl(POSTEDUSERID, '') = '' then -2\n                else hash(SOURCE_NAME, '~',POSTEDUSERID)\n                end::number as DIM_USER_INFO_SNKEY\n            ,case when POSTEDDATE = '1950-01-01' then -2\n                else hash('', '~', to_char(POSTEDDATE, 'yyyymmdd'))\n             end::number as POSTED_DATE_DIM_DATE_SNKEY\n           ,case when TRANSACTIONDATE = '1950-01-01' then -2\n                else hash('', '~', to_char(TRANSACTIONDATE, 'yyyymmdd'))\n                end::number as TRANSACTION_DATE_DIM_DATE_SNKEY\n           ,NVL(POSTEDDATE, '1950-01-01') AS POSTED_DATE\n            ,NVL(TRANSACTIONDATE, '1950-01-01') AS TRANSACTION_DATE\n           , NVL(DEFAULTDIMENSION,'') AS DEFAULT_DIMENSION\n        , NVL(JOURNALNAMEID,'') AS INVENTORY_JOURNAL_ID\n        , NVL(INVENTDIMID,'') AS INVENTORY_DIMENSION_ID\n        , NVL(ITEMID,'') AS ITEM_ID\n        , NVL(LEDGERDIMENSION,'') AS LEDGER_DIMENSION\n        ,nvl(TOINVENTDIMID,'') AS RECIEVING_INVENTORY_DIMENSION_ID\n,nvl(POSTEDUSERID,'')AS POSTED_USER_ID\n,nvl(VOUCHER,'') AS VOUCHER\n,nvl(QUANTITY,0) AS QUANTITY\n,nvl(COUNTEDQUANTITY,0) AS COUNTED_QUANTITY\n,nvl(ONHANDQUANTITY,0) AS ON_HAND_QUANTITY\n,nvl(COSTAMOUNT,0) AS COST_AMOUNT\n,nvl(COSTPRICE,0) AS COST_PRICE\n,nvl(PRICEUNIT,0) AS PRICE_UNIT\n,nvl(JOURNALTYPE,'') AS JOURNAL_TYPE\n,nvl(ISINVENTORYJOURNALPOSTED,'') AS IS_INVENTORY_JOURNAL_POSTED\n,nvl(ISINVENTORYJOURNALBLOCKED,'') AS IS_INVENTORY_JOURNAL_BLOCKED\n,nvl(DROPSHIPMENT,'') AS DROP_SHIPMENT\n            , nvl(b.dw_sourcecode, '')::varchar as HK_SOURCE_NAME\n\t\t\t, '1950-01-01 00:00:00'::timestamp_tz as HK_SOURCE_CREATED_TIMESTAMP\n\t\t\t, nvl(b.dw_timestamp, '1950-01-01 00:00:00')::timestamp_tz as HK_SOURCE_LAST_UPDATED_TIMESTAMP\n\t\t\t, '-1'::varchar as HK_CREATED_JOB_RUN_ID\n\t\t\t, nvl(b.dw_batch, '-1')::varchar as HK_LAST_UPDATED_JOB_RUN_ID\nFROM\n(SELECT\nHK_SOURCE_NAME,\nHK_JOB_RUN_ID,\nHK_CREATED_TIMESTAMP,\nHK_WAREHOUSE_ID,\n--DW_ID,\n--DEFAULTDIMENSIONKEY,\n--INVENTORYJOURNALDETAILSKEY,\n--INVENTORYJOURNALKEY,\n--INVENTORYKEY,\n--ITEMKEY,\n--LEDGERDIMENSIONKEY,\n--LEGALENTITYKEY,\n--RECEIVINGINVENTORYKEY,\n--USERINFOKEY,\nPOSTEDDATE,\nTRANSACTIONDATE,\nLEGALENTITY,\nJOURNALID,\nLINENUMBER,\nVOUCHER,\nQUANTITY,\nCOUNTEDQUANTITY,\nONHANDQUANTITY,\nCOSTAMOUNT,\nCOSTPRICE,\nPRICEUNIT,\nINCREMENTALTIMESTAMP,\nDEFAULTDIMENSION,\nJOURNALNAMEID,\nINVENTDIMID,\nITEMID,\nLEDGERDIMENSION,\nTOINVENTDIMID,\nPOSTEDUSERID,\nJOURNALTYPE,\nISINVENTORYJOURNALPOSTED,\nISINVENTORYJOURNALBLOCKED,\nDROPSHIPMENT,\nDW_BATCH,\nDW_SOURCECODE,\nDW_TIMESTAMP,\nFROM @{pipeline().globalParameters.environment}_RAW.EDW_DWH.FACTINVENTORYJOURNAL) b\n\t\t\tinner join (select min(date_value) as MIN_DATE_VALUE\n\t\t\t\t\t\t\t, max(date_value) as MAX_DATE_VALUE\n\t\t\t\t\t\tfrom global.DIM_DATE\n\t\t\t\t\t\twhere date_value not in ('1950-01-01', '1951-12-31', '9000-01-01', '9951-12-31')) dd1 on\n\t\t\t\t1=1\n\t\t) a\n\tleft join global.DIM_SOURCE_SYSTEM dss1 on\n\t\ta.dim_source_system_snkey = dss1.dim_source_system_snkey\n    left join global.DIM_DEFAULT_DIMENSION ddim1 on\n\t\ta.dim_default_dimension_snkey = ddim1.dim_default_dimension_snkey\n\tleft join global.DIM_INVENTORY dinv1 on\n\t\ta.dim_inventory_snkey = dinv1.dim_inventory_snkey\n    left join global.DIM_INVENTORY dinv2 on\n\t\ta.DIM_RECIEVING_INVENTORY_SNKEY = dinv2.dim_inventory_snkey\n\tleft join global.DIM_ITEM dit1 on\n\t\ta.dim_item_snkey = dit1.dim_item_snkey\n    left join global.DIM_INVENTORY_JOURNAL dij1 on\n        a.DIM_INVENTORY_JOURNAL_SNKEY = dij1.dim_inventory_journal_snkey\n    left join global.dim_ledger_dimension dld1 on\n        a.DIM_LEDGER_DIMENSION_SNKEY = dld1.dim_ledger_dimension_snkey\n\tleft join global.DIM_LEGAL_ENTITY dle1 on\n\t\ta.dim_legal_entity_snkey = dle1.dim_legal_entity_snkey\n    left join global.dim_user_info dui1 on\n        a.dim_user_info_snkey = dui1.dim_user_info_snkey\n\tleft join global.DIM_DATE dd1 on\n\t\ta.POSTED_DATE_DIM_DATE_SNKEY = dd1.dim_date_snkey\n\tleft join global.DIM_DATE dd2 on\n\t\ta.TRANSACTION_DATE_DIM_DATE_SNKEY = dd2.dim_date_snkey\n;",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "FACTINVENTORYJOURNAL"
					},
					"p_temp_directory": {
						"type": "string",
						"defaultValue": "temp_files"
					},
					"p_tgt_schema_nm": {
						"type": "string",
						"defaultValue": "EDW_DWH"
					},
					"p_curate_table_name": {
						"type": "string",
						"defaultValue": "FACT_INVENTORY_JOURNAL"
					}
				},
				"folder": {
					"name": "history_fact"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_edw_hist_fact_inventory_transactions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy from sqlserver to ADLS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select --top (10)\n\tf1.DW_Id as DW_ID,\n\tf1.CurrencyKey as CURRENCYKEY,\n\tf1.InventoryKey as INVENTORYKEY,\n\tf1.InventoryTransactionDetailsKey as INVENTORYTRANSACTIONDETAILSKEY,\n\tf1.ItemKey as ITEMKEY,\n\tf1.LegalEntityKey as LEGALENTITYKEY,\n\tf1.DateClosed as DATECLOSED,\n\tf1.DateExpected as DATEEXPECTED,\n\tf1.DateFinancial as DATEFINANCIAL,\n\tf1.DatePhysical as DATEPHYSICAL,\n\tf1.InventoryDate as INVENTORYDATE,\n\tf1.ShippingDateConfirmed as SHIPPINGDATECONFIRMED,\n\tf1.ShippingDateRequested as SHIPPINGDATEREQUESTED,\n\tf1.StatusDate as STATUSDATE,\n\tf1.RecordID as RECORDID,\n\tf1.InventoryTransactionID as INVENTORYTRANSACTIONID,\n\tf1.InvoiceID as INVOICEID,\n\tf1.LegalEntity as LEGALENTITY,\n\tf1.PackingSlipID as PACKINGSLIPID,\n\tf1.PickingRouteID as PICKINGROUTEID,\n\tf1.ReferenceID as REFERENCEID,\n\tf1.Voucher as VOUCHER,\n\tf1.VoucherPhysical as VOUCHERPHYSICAL,\n\tf1.Quantity as QUANTITY,\n\tf1.QuantitySettled as QUANTITYSETTLED,\n\tf1.CostAmountAdjustment as COSTAMOUNTADJUSTMENT,\n\tf1.CostAmountOperations as COSTAMOUNTOPERATIONS,\n\tf1.CostAmountPhysical as COSTAMOUNTPHYSICAL,\n\tf1.CostAmountPosted as COSTAMOUNTPOSTED,\n\tf1.CostAmountSettled as COSTAMOUNTSETTLED,\n\tf1.CostAmountStandard as COSTAMOUNTSTANDARD,\n\tf1.IncrementalTimeStamp as INCREMENTALTIMESTAMP,\n\tf1.InventorySiteID as INVENTORYSITEID,\n\tf1.InventoryWarehouseID as INVENTORYWAREHOUSEID,\n\tf1.DatePhysicalID as DATEPHYSICALID,\n\tcase when f1.CurrencyKey in (-1, -2) then f2.currencycode else dcurr1.currencycode end as CURRENCYCODE,\n\tcase when f1.InventoryKey in (-1, -2) then f2.inventdimid else dinv1.inventorydimensionid end as INVENTORYDIMENSIONID,\n\tcase when f1.ItemKey in (-1, -2) then f2.itemid else dit1.itemid end as ITEMID,\n\tditd1.financialstatus as FINANCIALSTATUS,\n\tditd1.referencecategory as REFERENCECATEGORY,\n\tditd1.statusissue as STATUSISSUE,\n\tditd1.statusreceipt as STATUSRECEIPT,\n\tf1.DW_Batch as DW_BATCH,\n\tf1.DW_SourceCode as DW_SOURCECODE,\n\tf1.DW_TimeStamp as DW_TIMESTAMP\nfrom dbo.FACTINVENTORYTRANSACTIONS f1 with (nolock)\n\t-- changed this to an \"inner join\" instead of a \"left join\" since it will return the same number of records and hopefully it will run faster.\n\tinner join edw_hka.dbo.FACTINVENTORYTRANSACTIONS f2 with (nolock) on\n\t\tf1.RecordID = f2.RECID\n\tleft join dbo.DIMCURRENCY dcurr1 with (nolock) on\n\t\tf1.currencykey = dcurr1.currencykey\n\tleft join dbo.DIMINVENTORY dinv1 with (nolock) on\n\t\tf1.inventorykey = dinv1.inventorykey\n\tleft join dbo.DIMITEM dit1 with (nolock) on\n\t\tf1.itemkey = dit1.itemkey\n\t\n\tleft join dbo.DIMINVENTORYTRANSACTIONDETAILS ditd1 with (nolock) on\n\t\tf1.inventorytransactiondetailskey = ditd1.inventorytransactiondetailskey;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_server",
								"type": "DatasetReference",
								"parameters": {
									"p_src_table_name": {
										"value": "@pipeline().parameters.p_src_table_nm",
										"type": "Expression"
									},
									"p_src_schema_name": {
										"value": "@pipeline().parameters.p_src_schema_nm",
										"type": "Expression"
									},
									"p_ls_serverName": {
										"value": "@pipeline().globalParameters.edw_sql_serverName",
										"type": "Expression"
									},
									"p_ls_dbName": {
										"value": "@pipeline().globalParameters.edw_sql_dbName",
										"type": "Expression"
									},
									"p_ls_sqlUsername": {
										"value": "@pipeline().globalParameters.sql_userName",
										"type": "Expression"
									},
									"p_ls_sqlPassword": {
										"value": "@pipeline().globalParameters.sql_password",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_parq_edw",
								"type": "DatasetReference",
								"parameters": {
									"p_root_system": {
										"value": "@pipeline().globalParameters.rootDir",
										"type": "Expression"
									},
									"p_directory": {
										"value": "@pipeline().parameters.p_temp_directory",
										"type": "Expression"
									},
									"p_file_name": {
										"value": "@concat(toUpper(pipeline().parameters.p_curate_table_name),'_HIST_',substring(string(utcNow()),0,4),'_',substring(string(utcNow()),5,2),'_',substring(string(utcNow()),8,2),'.snappy.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "ADLS to Snowflake RAW with HK columns",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy from sqlserver to ADLS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_load_edw_history",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"adlsSource": {
										"p_root_system": {
											"value": "@pipeline().globalParameters.rootDir",
											"type": "Expression"
										},
										"p_directory": {
											"value": "@pipeline().parameters.p_temp_directory",
											"type": "Expression"
										},
										"p_file_name": {
											"value": "@concat(toUpper(pipeline().parameters.p_curate_table_name),'_HIST_',substring(string(utcNow()),0,4),'_',substring(string(utcNow()),5,2),'_',substring(string(utcNow()),8,2),'.snappy.parquet')",
											"type": "Expression"
										}
									},
									"snowflakeRawTarget": {
										"p_tgt_table_name": {
											"value": "@pipeline().parameters.p_src_table_nm",
											"type": "Expression"
										},
										"p_tgt_schema_name": {
											"value": "@pipeline().parameters.p_tgt_schema_nm",
											"type": "Expression"
										},
										"p_ls_DbName": {
											"value": "@pipeline().globalParameters.snow_rawDb",
											"type": "Expression"
										},
										"p_ls_Env": {
											"value": "@pipeline().globalParameters.environment",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "IR-Snowflake-NALA",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "RAW to CURATE SP",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ADLS to Snowflake RAW with HK columns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_curateDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "truncate table global.FACT_INVENTORY_TRANSACTIONS;\n\ninsert into global.FACT_INVENTORY_TRANSACTIONS (fact_inventory_transactions_key, source_name, record_id, dim_source_system_key, dim_source_system_snkey, date_closed_dim_date_key, date_closed_dim_date_snkey, date_expected_dim_date_key, date_expected_dim_date_snkey, date_financial_dim_date_key, date_financial_dim_date_snkey, date_physical_dim_date_key, date_physical_dim_date_snkey, inventory_date_dim_date_key, inventory_date_dim_date_snkey, shipping_date_confirmed_dim_date_key, shipping_date_confirmed_dim_date_snkey, shipping_date_requested_dim_date_key, shipping_date_requested_dim_date_snkey, status_date_dim_date_key, status_date_dim_date_snkey, dim_currency_key, dim_currency_snkey, dim_inventory_key, dim_inventory_snkey, dim_item_key, dim_item_snkey, dim_legal_entity_key, dim_legal_entity_snkey, currency_code, inventory_dimension_id, item_id, financial_status, reference_category, status_issue, status_receipt, date_closed, date_expected, date_financial, date_physical, inventory_date, shipping_date_confirmed, shipping_date_requested, status_date, inventory_transaction_id, invoice_id, legal_entity, packing_slip_id, picking_route_id, reference_id, voucher, voucher_physical, quantity, quantity_settled, cost_amount_adjustment, cost_amount_operations, cost_amount_physical, cost_amount_posted, cost_amount_settled, cost_amount_standard, inventory_site_id, inventory_warehouse_id, date_physical_id, hk_hash_key, hk_source_name, hk_soft_delete_flag, hk_source_created_timestamp, hk_source_last_updated_timestamp, hk_created_job_run_id, hk_last_updated_job_run_id, hk_created_timestamp, hk_last_updated_timestamp, hk_warehouse_id)\n\tselect hash(a.source_name, '~', to_char(a.record_id))::number as FACT_INVENTORY_TRANSACTIONS_KEY\n\t\t, a.source_name as SOURCE_NAME, a.record_id as RECORD_ID\n\t\t\n\t\t, case when a.source_name = '' then -2\n\t\t\telse nvl(dss1.dim_source_system_key, -1)\n\t\t\tend::number as DIM_SOURCE_SYSTEM_KEY\n\t\t, a.dim_source_system_snkey as DIM_SOURCE_SYSTEM_SNKEY\n\t\t\n\t\t, nvl(dd1.dim_date_key, -1)::number as DATE_CLOSED_DIM_DATE_KEY\n\t\t, a.date_closed_dim_date_snkey as DATE_CLOSED_DIM_DATE_SNKEY\n\t\t, nvl(dd2.dim_date_key, -1)::number as DATE_EXPECTED_DIM_DATE_KEY\n\t\t, a.date_expected_dim_date_snkey as DATE_EXPECTED_DIM_DATE_SNKEY\n\t\t, nvl(dd3.dim_date_key, -1)::number as DATE_FINANCIAL_DIM_DATE_KEY\n\t\t, a.date_financial_dim_date_snkey as DATE_FINANCIAL_DIM_DATE_SNKEY\n\t\t, nvl(dd4.dim_date_key, -1)::number as DATE_PHYSICAL_DIM_DATE_KEY\n\t\t, a.date_physical_dim_date_snkey as DATE_PHYSICAL_DIM_DATE_SNKEY\n\t\t, nvl(dd5.dim_date_key, -1)::number as INVENTORY_DATE_DIM_DATE_KEY\n\t\t, a.inventory_date_dim_date_snkey as INVENTORY_DATE_DIM_DATE_SNKEY\n\t\t, nvl(dd6.dim_date_key, -1)::number as SHIPPING_DATE_CONFIRMED_DIM_DATE_KEY\n\t\t, a.shipping_date_confirmed_dim_date_snkey as SHIPPING_DATE_CONFIRMED_DIM_DATE_SNKEY\n\t\t, nvl(dd7.dim_date_key, -1)::number as SHIPPING_DATE_REQUESTED_DIM_DATE_KEY\n\t\t, a.shipping_date_requested_dim_date_snkey as SHIPPING_DATE_REQUESTED_DIM_DATE_SNKEY\n\t\t, nvl(dd8.dim_date_key, -1)::number as STATUS_DATE_DIM_DATE_KEY\n\t\t, a.status_date_dim_date_snkey as STATUS_DATE_DIM_DATE_SNKEY\n\t\t\n\t\t, case when a.dim_currency_snkey = -2 then -2\n\t\t\t\telse nvl(dcurr1.dim_currency_key, -1)\n\t\t\tend::number as DIM_CURRENCY_KEY\n\t\t, a.dim_currency_snkey as DIM_CURRENCY_SNKEY\n\t\t, case when a.dim_inventory_snkey = -2 then -2\n\t\t\t\telse nvl(dinv1.dim_inventory_key, -1)\n\t\t\tend::number as DIM_INVENTORY_KEY\n\t\t, case when a.dim_inventory_snkey = -2 then -2\n\t\t\t\telse a.dim_inventory_snkey\n\t\t\tend::number as DIM_INVENTORY_SNKEY\n\t\t, case when a.dim_item_snkey = -2 then -2\n\t\t\t\telse nvl(dit1.dim_item_key, -1)\n\t\t\tend::number as DIM_ITEM_KEY\n\t\t, a.dim_item_snkey as DIM_ITEM_SNKEY\n\t\t, case when a.dim_legal_entity_snkey = -2 then -2\n\t\t\t\telse nvl(dle1.dim_legal_entity_key, -1)\n\t\t\tend::number as DIM_LEGAL_ENTITY_KEY\n\t\t, a.dim_legal_entity_snkey as DIM_LEGAL_ENTITY_SNKEY\n\t\t\n\t\t, a.currency_code as CURRENCY_CODE, a.inventory_dimension_id as INVENTORY_DIMENSION_ID, a.item_id as ITEM_ID, a.financial_status as FINANCIAL_STATUS, a.reference_category as REFERENCE_CATEGORY, a.status_issue as STATUS_ISSUE, a.status_receipt as STATUS_RECEIPT, a.date_closed as DATE_CLOSED, a.date_expected as DATE_EXPECTED, a.date_financial as DATE_FINANCIAL, a.date_physical as DATE_PHYSICAL, a.inventory_date as INVENTORY_DATE, a.shipping_date_confirmed as SHIPPING_DATE_CONFIRMED, a.shipping_date_requested as SHIPPING_DATE_REQUESTED, a.status_date as STATUS_DATE, a.inventory_transaction_id as INVENTORY_TRANSACTION_ID, a.invoice_id as INVOICE_ID, a.legal_entity as LEGAL_ENTITY, a.packing_slip_id as PACKING_SLIP_ID, a.picking_route_id as PICKING_ROUTE_ID, a.reference_id as REFERENCE_ID, a.voucher as VOUCHER, a.voucher_physical as VOUCHER_PHYSICAL, a.quantity as QUANTITY, a.quantity_settled as QUANTITY_SETTLED, a.cost_amount_adjustment as COST_AMOUNT_ADJUSTMENT, a.cost_amount_operations as COST_AMOUNT_OPERATIONS, a.cost_amount_physical as COST_AMOUNT_PHYSICAL, a.cost_amount_posted as COST_AMOUNT_POSTED, a.cost_amount_settled as COST_AMOUNT_SETTLED, a.cost_amount_standard as COST_AMOUNT_STANDARD, a.inventory_site_id as INVENTORY_SITE_ID, a.inventory_warehouse_id as INVENTORY_WAREHOUSE_ID, a.date_physical_id as DATE_PHYSICAL_ID\n\t\t\n\t\t, hash(a.source_name, '~', to_char(a.record_id), '~', a.currency_code, '~', a.inventory_dimension_id, '~', a.item_id, '~', a.financial_status, '~', a.reference_category, '~', a.status_issue, '~', a.status_receipt, '~', to_char(a.date_closed, 'yyyymmdd'), '~', to_char(a.date_expected, 'yyyymmdd'), '~', to_char(a.date_financial, 'yyyymmdd'), '~', to_char(a.date_physical, 'yyyymmdd'), '~', to_char(a.inventory_date, 'yyyymmdd'), '~', to_char(a.shipping_date_confirmed, 'yyyymmdd'), '~', to_char(a.shipping_date_requested, 'yyyymmdd'), '~', to_char(a.status_date, 'yyyymmdd'), '~', a.inventory_transaction_id, '~', a.invoice_id, '~', a.legal_entity, '~', a.packing_slip_id, '~', a.picking_route_id, '~', a.reference_id, '~', a.voucher, '~', a.voucher_physical, '~', to_char(a.quantity), '~', to_char(a.quantity_settled), '~', to_char(a.cost_amount_adjustment), '~', to_char(a.cost_amount_operations), '~', to_char(a.cost_amount_physical), '~', to_char(a.cost_amount_posted), '~', to_char(a.cost_amount_settled), '~', to_char(a.cost_amount_standard), '~', a.inventory_site_id, '~', a.inventory_warehouse_id, '~', to_char(a.date_physical_id))::number as HK_HASH_KEY\n\t\t\n\t\t, a.hk_source_name as HK_SOURCE_NAME\n\t\t, false::boolean as HK_SOFT_DELETE_FLAG\n\t\t, a.hk_source_created_timestamp as HK_SOURCE_CREATED_TIMESTAMP, a.hk_source_last_updated_timestamp as HK_SOURCE_LAST_UPDATED_TIMESTAMP, a.hk_created_job_run_id as HK_CREATED_JOB_RUN_ID, a.hk_last_updated_job_run_id as HK_LAST_UPDATED_JOB_RUN_ID\n\t\t, current_timestamp::timestamp_tz as HK_CREATED_TIMESTAMP\n\t\t, current_timestamp::timestamp_tz as HK_LAST_UPDATED_TIMESTAMP\n\t\t, uuid_string()::varchar as HK_WAREHOUSE_ID\n\t\n\tfrom (select 'AXNALA'::varchar as SOURCE_NAME\n\t\t\t, nvl(b.recordid, 0)::number(38, 0) as RECORD_ID\n\t\t\t\n\t\t\t, nvl(b.currencycode, '')::varchar as CURRENCY_CODE\n\t\t\t, nvl(b.inventorydimensionid, '')::varchar as INVENTORY_DIMENSION_ID\n\t\t\t, nvl(b.itemid, '')::varchar as ITEM_ID\n\t\t\t, nvl(b.financialstatus, '')::varchar as FINANCIAL_STATUS\n\t\t\t, nvl(b.referencecategory, '')::varchar as REFERENCE_CATEGORY\n\t\t\t, nvl(b.statusissue, '')::varchar as STATUS_ISSUE\n\t\t\t, nvl(b.statusreceipt, '')::varchar as STATUS_RECEIPT\n\t\t\t, case when nvl(b.dateclosed, '1900-01-01') in ('1900-01-01') then '1950-01-01'\n\t\t\t\t\twhen b.dateclosed < dd1.min_date_value then '1951-12-31'\n\t\t\t\t\twhen b.dateclosed > dd1.max_date_value then '9951-12-31'\n\t\t\t\telse b.dateclosed\n\t\t\t\tend::date as DATE_CLOSED\n\t\t\t, case when nvl(b.dateexpected, '1900-01-01') in ('1900-01-01') then '1950-01-01'\n\t\t\t\t\twhen b.dateexpected < dd1.min_date_value then '1951-12-31'\n\t\t\t\t\twhen b.dateexpected > dd1.max_date_value then '9951-12-31'\n\t\t\t\telse b.dateexpected\n\t\t\t\tend::date as DATE_EXPECTED\n\t\t\t, case when nvl(b.datefinancial, '1900-01-01') in ('1900-01-01') then '1950-01-01'\n\t\t\t\t\twhen b.datefinancial < dd1.min_date_value then '1951-12-31'\n\t\t\t\t\twhen b.datefinancial > dd1.max_date_value then '9951-12-31'\n\t\t\t\telse b.datefinancial\n\t\t\t\tend::date as DATE_FINANCIAL\n\t\t\t, case when nvl(b.datephysical, '1900-01-01') in ('1900-01-01') then '1950-01-01'\n\t\t\t\t\twhen b.datephysical < dd1.min_date_value then '1951-12-31'\n\t\t\t\t\twhen b.datephysical > dd1.max_date_value then '9951-12-31'\n\t\t\t\telse b.datephysical\n\t\t\t\tend::date as DATE_PHYSICAL\n\t\t\t, case when nvl(b.inventorydate, '1900-01-01') in ('1900-01-01') then '1950-01-01'\n\t\t\t\t\twhen b.inventorydate < dd1.min_date_value then '1951-12-31'\n\t\t\t\t\twhen b.inventorydate > dd1.max_date_value then '9951-12-31'\n\t\t\t\telse b.inventorydate\n\t\t\t\tend::date as INVENTORY_DATE\n\t\t\t, case when nvl(b.shippingdateconfirmed, '1900-01-01') in ('1900-01-01') then '1950-01-01'\n\t\t\t\t\twhen b.shippingdateconfirmed < dd1.min_date_value then '1951-12-31'\n\t\t\t\t\twhen b.shippingdateconfirmed > dd1.max_date_value then '9951-12-31'\n\t\t\t\telse b.shippingdateconfirmed\n\t\t\t\tend::date as SHIPPING_DATE_CONFIRMED\n\t\t\t, case when nvl(b.shippingdaterequested, '1900-01-01') in ('1900-01-01') then '1950-01-01'\n\t\t\t\t\twhen b.shippingdaterequested < dd1.min_date_value then '1951-12-31'\n\t\t\t\t\twhen b.shippingdaterequested > dd1.max_date_value then '9951-12-31'\n\t\t\t\telse b.shippingdaterequested\n\t\t\t\tend::date as SHIPPING_DATE_REQUESTED\n\t\t\t, case when nvl(b.statusdate, '1900-01-01') in ('1900-01-01') then '1950-01-01'\n\t\t\t\t\twhen b.statusdate < dd1.min_date_value then '1951-12-31'\n\t\t\t\t\twhen b.statusdate > dd1.max_date_value then '9951-12-31'\n\t\t\t\telse b.statusdate\n\t\t\t\tend::date as STATUS_DATE\n\t\t\t, nvl(b.inventorytransactionid, '')::varchar as INVENTORY_TRANSACTION_ID\n\t\t\t, nvl(b.invoiceid, '')::varchar as INVOICE_ID\n\t\t\t, nvl(b.legalentity, '')::varchar as LEGAL_ENTITY\n\t\t\t, nvl(b.packingslipid, '')::varchar as PACKING_SLIP_ID\n\t\t\t, nvl(b.pickingrouteid, '')::varchar as PICKING_ROUTE_ID\n\t\t\t, nvl(b.referenceid, '')::varchar as REFERENCE_ID\n\t\t\t, nvl(b.voucher_src, '')::varchar as VOUCHER\n\t\t\t, nvl(b.voucherphysical, '')::varchar as VOUCHER_PHYSICAL\n\t\t\t, nvl(b.quantity_src, 0)::number(28, 16) as QUANTITY\n\t\t\t, nvl(b.quantitysettled, 0)::number(28, 16) as QUANTITY_SETTLED\n\t\t\t, nvl(b.costamountadjustment, 0)::number(28, 16) as COST_AMOUNT_ADJUSTMENT\n\t\t\t, nvl(b.costamountoperations, 0)::number(28, 16) as COST_AMOUNT_OPERATIONS\n\t\t\t, nvl(b.costamountphysical, 0)::number(28, 16) as COST_AMOUNT_PHYSICAL\n\t\t\t, nvl(b.costamountposted, 0)::number(28, 16) as COST_AMOUNT_POSTED\n\t\t\t, nvl(b.costamountsettled, 0)::number(28, 16) as COST_AMOUNT_SETTLED\n\t\t\t, nvl(b.costamountstandard, 0)::number(28, 16) as COST_AMOUNT_STANDARD\n\t\t\t, nvl(b.inventorysiteid, '')::varchar as INVENTORY_SITE_ID\n\t\t\t, nvl(b.inventorywarehouseid, '')::varchar as INVENTORY_WAREHOUSE_ID\n\t\t\t, nvl(b.datephysicalid, 0)::number(38, 0) as DATE_PHYSICAL_ID\n\t\t\t\n\t\t\t, case when nvl(SOURCE_NAME, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME)\n\t\t\t\tend::number as DIM_SOURCE_SYSTEM_SNKEY\n\t\t\t, case when nvl(DATE_CLOSED, '1950-01-01') = '1950-01-01' then -2\n\t\t\t\telse hash('', '~', to_char(DATE_CLOSED, 'yyyymmdd'))\n\t\t\t\tend::number as DATE_CLOSED_DIM_DATE_SNKEY\n\t\t\t, case when nvl(DATE_EXPECTED, '1950-01-01') = '1950-01-01' then -2\n\t\t\t\telse hash('', '~', to_char(DATE_EXPECTED, 'yyyymmdd'))\n\t\t\t\tend::number as DATE_EXPECTED_DIM_DATE_SNKEY\n\t\t\t, case when nvl(DATE_FINANCIAL, '1950-01-01') = '1950-01-01' then -2\n\t\t\t\telse hash('', '~', to_char(DATE_FINANCIAL, 'yyyymmdd'))\n\t\t\t\tend::number as DATE_FINANCIAL_DIM_DATE_SNKEY\n\t\t\t, case when nvl(DATE_PHYSICAL, '1950-01-01') = '1950-01-01' then -2\n\t\t\t\telse hash('', '~', to_char(DATE_PHYSICAL, 'yyyymmdd'))\n\t\t\t\tend::number as DATE_PHYSICAL_DIM_DATE_SNKEY\n\t\t\t, case when nvl(INVENTORY_DATE, '1950-01-01') = '1950-01-01' then -2\n\t\t\t\telse hash('', '~', to_char(INVENTORY_DATE, 'yyyymmdd'))\n\t\t\t\tend::number as INVENTORY_DATE_DIM_DATE_SNKEY\n\t\t\t, case when nvl(SHIPPING_DATE_CONFIRMED, '1950-01-01') = '1950-01-01' then -2\n\t\t\t\telse hash('', '~', to_char(SHIPPING_DATE_CONFIRMED, 'yyyymmdd'))\n\t\t\t\tend::number as SHIPPING_DATE_CONFIRMED_DIM_DATE_SNKEY\n\t\t\t, case when nvl(SHIPPING_DATE_REQUESTED, '1950-01-01') = '1950-01-01' then -2\n\t\t\t\telse hash('', '~', to_char(SHIPPING_DATE_REQUESTED, 'yyyymmdd'))\n\t\t\t\tend::number as SHIPPING_DATE_REQUESTED_DIM_DATE_SNKEY\n\t\t\t, case when nvl(STATUS_DATE, '1950-01-01') = '1950-01-01' then -2\n\t\t\t\telse hash('', '~', to_char(STATUS_DATE, 'yyyymmdd'))\n\t\t\t\tend::number as STATUS_DATE_DIM_DATE_SNKEY\n\t\t\t\n\t\t\t, case when nvl(CURRENCY_CODE, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', CURRENCY_CODE)\n\t\t\t\tend::number as DIM_CURRENCY_SNKEY\n\t\t\t, case when nvl(LEGAL_ENTITY, '') = '' or nvl(INVENTORY_DIMENSION_ID, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY, '~', INVENTORY_DIMENSION_ID)\n\t\t\t\tend::number as DIM_INVENTORY_SNKEY\n\t\t\t, case when nvl(LEGAL_ENTITY, '') = '' or nvl(ITEM_ID, '') = '' then -2\n\t\t\t\telse hash('', '~', LEGAL_ENTITY, '~', ITEM_ID)\t-- (NOTE: ITEM_KEY is unique across all source systems; therefore, this field will always be set to '')\n\t\t\t\tend::number as DIM_ITEM_SNKEY\n\t\t\t, case when nvl(LEGAL_ENTITY, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY)\n\t\t\t\tend::number as DIM_LEGAL_ENTITY_SNKEY\n\t\t\t\n\t\t\t, nvl(b.dw_sourcecode, '')::varchar as HK_SOURCE_NAME\n\t\t\t, '1950-01-01 00:00:00'::timestamp_tz as HK_SOURCE_CREATED_TIMESTAMP\n\t\t\t, nvl(b.dw_timestamp, '1950-01-01 00:00:00')::timestamp_tz as HK_SOURCE_LAST_UPDATED_TIMESTAMP\n\t\t\t, '-1'::varchar as HK_CREATED_JOB_RUN_ID\n\t\t\t, nvl(b.dw_batch, '-1')::varchar as HK_LAST_UPDATED_JOB_RUN_ID\n\t\t\t\n\t\tfrom (select hk_source_name, hk_job_run_id, hk_created_timestamp, hk_warehouse_id, dw_id, currencykey, inventorykey, inventorytransactiondetailskey, itemkey, legalentitykey, dateclosed, dateexpected, datefinancial, datephysical, inventorydate, shippingdateconfirmed, shippingdaterequested, statusdate, recordid, inventorytransactionid, invoiceid, legalentity, packingslipid, pickingrouteid, referenceid, voucher as VOUCHER_SRC, voucherphysical, quantity as QUANTITY_SRC, quantitysettled, costamountadjustment, costamountoperations, costamountphysical, costamountposted, costamountsettled, costamountstandard, incrementaltimestamp, inventorysiteid, inventorywarehouseid, datephysicalid, currencycode, inventorydimensionid, itemid, financialstatus, referencecategory, statusissue, statusreceipt, dw_batch, dw_sourcecode, dw_timestamp\n\t\t\tfrom @{pipeline().globalParameters.environment}_raw.edw_dwh.FACTINVENTORYTRANSACTIONS\n\t\t\t) b\n\t\t\tinner join (select min(date_value) as MIN_DATE_VALUE\n\t\t\t\t\t\t\t, max(date_value) as MAX_DATE_VALUE\n\t\t\t\t\t\tfrom global.DIM_DATE\n\t\t\t\t\t\twhere date_value not in ('1950-01-01', '1951-12-31', '9000-01-01', '9951-12-31')) dd1 on\n\t\t\t\t1=1\n\t\t) a\n\tleft join global.DIM_SOURCE_SYSTEM dss1 on\n\t\ta.dim_source_system_snkey = dss1.dim_source_system_snkey\n\tleft join global.DIM_DATE dd1 on\n\t\ta.date_closed_dim_date_snkey = dd1.dim_date_snkey\n\tleft join global.DIM_DATE dd2 on\n\t\ta.date_expected_dim_date_snkey = dd2.dim_date_snkey\n\tleft join global.DIM_DATE dd3 on\n\t\ta.date_financial_dim_date_snkey = dd3.dim_date_snkey\n\tleft join global.DIM_DATE dd4 on\n\t\ta.date_physical_dim_date_snkey = dd4.dim_date_snkey\n\tleft join global.DIM_DATE dd5 on\n\t\ta.inventory_date_dim_date_snkey = dd5.dim_date_snkey\n\tleft join global.DIM_DATE dd6 on\n\t\ta.shipping_date_confirmed_dim_date_snkey = dd6.dim_date_snkey\n\tleft join global.DIM_DATE dd7 on\n\t\ta.shipping_date_requested_dim_date_snkey = dd7.dim_date_snkey\n\tleft join global.DIM_DATE dd8 on\n\t\ta.status_date_dim_date_snkey = dd8.dim_date_snkey\n\tleft join global.DIM_CURRENCY dcurr1 on\n\t\ta.dim_currency_snkey = dcurr1.dim_currency_snkey\n\tleft join global.DIM_INVENTORY dinv1 on\n\t\ta.dim_inventory_snkey = dinv1.dim_inventory_snkey\n\tleft join global.DIM_ITEM dit1 on\n\t\ta.dim_item_snkey = dit1.dim_item_snkey\n\tleft join global.DIM_LEGAL_ENTITY dle1 on\n\t\ta.dim_legal_entity_snkey = dle1.dim_legal_entity_snkey\n;\n\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "FACTINVENTORYTRANSACTIONS"
					},
					"p_temp_directory": {
						"type": "string",
						"defaultValue": "temp_files"
					},
					"p_tgt_schema_nm": {
						"type": "string",
						"defaultValue": "EDW_DWH"
					},
					"p_curate_table_name": {
						"type": "string",
						"defaultValue": "FACT_INVENTORY_TRANSACTIONS"
					}
				},
				"folder": {
					"name": "history_fact"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_edw_hist_fact_purchase_invoices')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy from sqlserver to ADLS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select\n  f1.DW_Id as DW_ID,\n f1.CostKey as COSTKEY,\n f1.CurrencyKey as CURRENCYKEY,\n f1.DefaultDimensionKey as DEFAULTDIMENSIONKEY,\n f1.DeliveryModeKey as DELIVERYMODEKEY,\n f1.IntrastatTransactionCodeKey as INTRASTATTRANSACTIONCODEKEY,\n f1.InventoryKey as INVENTORYKEY,\n f1.ItemKey as ITEMKEY,\n f1.LegalEntityKey as LEGALENTITYKEY,\n f1.LocationKey as LOCATIONKEY,\n f1.ProcurementCategoryKey as PROCUREMENTCATEGORYKEY,\n f1.PurchaseOrderKey as PURCHASEORDERKEY,\n f1.PurchaseOrderDetailsKey as PURCHASEORDERDETAILSKEY,\n f1.ReturnReasonKey as RETURNREASONKEY,\n f1.TaxItemGroupKey as TAXITEMGROUPKEY,\n f1.UnitOfMeasurePurchaseKey as UNITOFMEASUREPURCHASEKEY,\n f1.UnitOfMeasureInventoryKey as UNITOFMEASUREINVENTORYKEY,\n f1.VendorInvoiceKey as VENDORINVOICEKEY,\n f1.VendorInvoiceHistoryKey as VENDORINVOICEHISTORYKEY,\n f1.VendorOrderKey as VENDORORDERKEY,\n f1.VendorOrderHistoryKey as VENDORORDERHISTORYKEY,\n f1.WorkerOrdererKey as WORKERORDERERKEY,\n f1.WorkerRequesterKey as WORKERREQUESTERKEY,\nf1.InventoryDate as INVENTORYDATE,\nf1.InvoiceDate as INVOICEDATE,\n f1.RecordID as RECORDID,\nf1.InventoryTransactionID as INVENTORYTRANSACTIONID,\nf1.LegalEntity as LEGALENTITY,\nf1.PurchaseOrderID as PURCHASEORDERID,\nf1.PurchaseInvoiceID as PURCHASEINVOICEID,\n f1.LineNumber as LINENUMBER,\n f1.PurchaseLineNumber as PURCHASELINENUMBER,\n f1.QtyPurchaseUnit as QTYPURCHASEUNIT,\nf1.PurchaseUnit as PURCHASEUNIT,\n f1.QtyInventoryUnit as QTYINVENTORYUNIT,\nf1.InventoryUnit as INVENTORYUNIT,\n f1.PriceUnit as PRICEUNIT,\n f1.PurchasePrice as PURCHASEPRICE,\n f1.NetAmountCompanyCurrency as NETAMOUNTCOMPANYCURRENCY,\n f1.NetAmountTransactionCurrency as NETAMOUNTTRANSACTIONCURRENCY,\n f1.TaxAmountSettlementCurrency as TAXAMOUNTSETTLEMENTCURRENCY,\n f1.StandardCost as STANDARDCOST,\nf1.IncrementalTimeStamp as INCREMENTALTIMESTAMP,\ncase when f1.CostKey in (-1, -2) then f2.inventdimid else dc1.inventorydimensionid end as INVENTORYDIMENSIONID,\ncase when f1.CostKey in (-1, -2) then f2.itemid else dc1.itemid end as ITEMID,\ndc1.pricetype as PRICETYPE,\ndc1.activationdate as ACTIVATIONDATE,\ndc1.createddatetime as CREATEDDATETIME,\ncase when f1.CurrencyKey in (-1, -2) then f2.currencycode else dcurr1.currencycode end as CURRENCYCODE,\ncast(case when f1.defaultdimensionkey in (-1, -2) then f2.defaultdimension else dd1.defaultdimension end as varchar) as DEFAULTDIMENSION,\ncase when f1.deliverymodekey in (-1, -2) then f2.dlvmode else ddm1.deliverymodeid end as DELIVERYMODEID,\ncase when f1.intrastattransactioncodekey in (-1, -2) then f2.transactioncode else distc1.intrastattransactioncode end as INTRASTATTRANSACTIONCODE,\n case when f1.LocationKey in (-1, -2) then f2.deliverypostaladdress else dl1.recordid end as RECORDIDLOCATION,\n case when f1.ProcurementCategoryKey in (-1, -2) then f2.procurementcategory else dspc1.recordid end  as PROCUREMENTCATEGORY,\ncase when f1.ReturnReasonKey in (-1, -2) then f2.returnreasoncodeid else drr1.returnreasonid end as RETURNREASONID,\ncase when f1.TaxItemGroupKey in (-1, -2) then f2.taxitemgroup else dtig1.taxitemgroupid end as TAXITEMGROUPID,\ncase when f1.UnitOfMeasureInventoryKey in (-1, -2) then f2.unitid else duomi1.unitofmeasurecode end as UNITOFMEASURECODEINVENTORY,\ncase when f1.UnitOfMeasurePurchaseKey in (-1, -2) then f2.purchunit else duomp1.unitofmeasurecode end as UNITOFMEASURECODEPURCHASE,\ncase when f1.VendorInvoiceHistoryKey in (-1, -2) then f2.invoiceaccount else dvi1.vendoraccountid end as VENDORACCOUNTIDINVOICE,\ncase when f1.VendorOrderHistoryKey in (-1, -2) then f2.orderaccount else dvo1.vendoraccountid end as VENDORACCOUNTIDORDER,\n case when f1.WorkerOrdererKey in (-1, -2) then f2.workerpurchplacer else dwo1.recordid end  as RECORDIDORDERER,\n case when f1.WorkerRequesterKey in (-1, -2) then f2.requester else dwr1.recordid end as RECORDIDREQUESTER,\ndpod1.assettransactiontype as ASSETTRANSACTIONTYPE,\ndpod1.deliverytype as DELIVERYTYPE,\ndpod1.documentstatus as DOCUMENTSTATUS,\ndpod1.isstockedproduct as ISSTOCKEDPRODUCT,\ndpod1.purchaselinestatus as PURCHASELINESTATUS,\ndpod1.purchaseheaderstatus as PURCHASEHEADERSTATUS,\ndpod1.purchasetype as PURCHASETYPE,\n f1.DW_Batch as DW_BATCH,\nf1.DW_SourceCode as DW_SOURCECODE,\nf1.DW_TimeStamp as DW_TIMESTAMP\n\n\tfrom dbo.FACTPURCHASEINVOICES f1 with (nolock)\n\tleft join edw_hka.dbo.FACTPURCHASEINVOICES f2 with (nolock) on\n\t\tf1.RecordID = f2.RECID\n\tleft join dbo.DIMCOST dc1 with (nolock) on\n\t\tf1.costkey = dc1.costkey\n\tleft join dbo.DIMCURRENCY dcurr1 with (nolock) on\n\t\tf1.currencykey = dcurr1.currencykey\n\tleft join edw_hka.dbo.DIMDEFAULTDIMENSION dd1 with (nolock) on\n\t\tf1.defaultdimensionkey = dd1.defaultdimensionkey\n\tleft join dbo.DIMDELIVERYMODE ddm1 with (nolock) on\n\t\tf1.deliverymodekey = ddm1.deliverymodekey\n\tleft join dbo.DIMINTRASTATTRANSACTIONCODE distc1 with (nolock) on\n\t\tf1.intrastattransactioncodekey = distc1.intrastattransactioncodekey\n\tleft join dbo.DIMLOCATION dl1 with (nolock) on\n\t\tf1.locationkey = dl1.locationkey\n\tleft join dbo.DIMSALESPROCUREMENTCATEGORY dspc1 with (nolock) on\n\t\tf1.procurementcategorykey = dspc1.procurementcategorykey\n\tleft join dbo.DIMRETURNREASON drr1 with (nolock) on\n\t\tf1.returnreasonkey = drr1.returnreasonkey\n\tleft join dbo.DIMTAXITEMGROUP dtig1 with (nolock) on\n\t\tf1.taxitemgroupkey = dtig1.taxitemgroupkey\n\tleft join dbo.DIMUNITOFMEASURE duomi1 with (nolock) on\n\t\tf1.unitofmeasureinventorykey = duomi1.unitofmeasurekey\n\tleft join dbo.DIMUNITOFMEASURE duomp1 with (nolock) on\n\t\tf1.unitofmeasurepurchasekey = duomp1.unitofmeasurekey\n\tleft join dbo.DIMVENDOR dvi1 with (nolock) on\n\t\tf1.vendorinvoicehistorykey = dvi1.vendorhistorykey\n\tleft join dbo.DIMVENDOR dvo1 with (nolock) on\n\t\tf1.vendororderhistorykey = dvo1.vendorhistorykey\n\tleft join dbo.DIMWORKER dwo1 with (nolock) on\n\t\tf1.workerordererkey = dwo1.workerkey\n\tleft join dbo.DIMWORKER dwr1 with (nolock) on\n\t\tf1.workerrequesterkey = dwr1.workerkey\n\t\n\tleft join dbo.DIMPURCHASEORDERDETAILS dpod1 with (nolock) on\n\t\tf1.purchaseorderdetailskey = dpod1.purchaseorderdetailskey\n;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_server",
								"type": "DatasetReference",
								"parameters": {
									"p_src_table_name": {
										"value": "@pipeline().parameters.p_src_table_nm",
										"type": "Expression"
									},
									"p_src_schema_name": {
										"value": "@pipeline().parameters.p_src_schema_nm",
										"type": "Expression"
									},
									"p_ls_serverName": {
										"value": "@pipeline().globalParameters.edw_sql_serverName",
										"type": "Expression"
									},
									"p_ls_dbName": {
										"value": "@pipeline().globalParameters.edw_sql_dbName",
										"type": "Expression"
									},
									"p_ls_sqlUsername": {
										"value": "@pipeline().globalParameters.sql_userName",
										"type": "Expression"
									},
									"p_ls_sqlPassword": {
										"value": "@pipeline().globalParameters.sql_password",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_parq_edw",
								"type": "DatasetReference",
								"parameters": {
									"p_root_system": {
										"value": "@pipeline().globalParameters.rootDir",
										"type": "Expression"
									},
									"p_directory": {
										"value": "@pipeline().parameters.p_temp_directory",
										"type": "Expression"
									},
									"p_file_name": {
										"value": "@concat(toUpper(pipeline().parameters.p_curate_table_name),'_HIST_',substring(string(utcNow()),0,4),'_',substring(string(utcNow()),5,2),'_',substring(string(utcNow()),8,2),'.snappy.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "ADLS to Snowflake RAW with HK columns",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy from sqlserver to ADLS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_load_edw_history",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"adlsSource": {
										"p_root_system": {
											"value": "@pipeline().globalParameters.rootDir",
											"type": "Expression"
										},
										"p_directory": {
											"value": "@pipeline().parameters.p_temp_directory",
											"type": "Expression"
										},
										"p_file_name": {
											"value": "@concat(toUpper(pipeline().parameters.p_curate_table_name),'_HIST_',substring(string(utcNow()),0,4),'_',substring(string(utcNow()),5,2),'_',substring(string(utcNow()),8,2),'.snappy.parquet')",
											"type": "Expression"
										}
									},
									"snowflakeRawTarget": {
										"p_tgt_table_name": {
											"value": "@pipeline().parameters.p_src_table_nm",
											"type": "Expression"
										},
										"p_tgt_schema_name": {
											"value": "@pipeline().parameters.p_tgt_schema_nm",
											"type": "Expression"
										},
										"p_ls_DbName": {
											"value": "@pipeline().globalParameters.snow_rawDb",
											"type": "Expression"
										},
										"p_ls_Env": {
											"value": "@pipeline().globalParameters.environment",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "IR-Snowflake-NALA",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "RAW to CURATE SP",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ADLS to Snowflake RAW with HK columns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_curateDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "truncate table global.FACT_PURCHASE_INVOICES;\n\ninsert into global.FACT_PURCHASE_INVOICES (fact_purchase_invoices_key, source_name, record_id, dim_source_system_key, dim_source_system_snkey, inventory_date_dim_date_key, inventory_date_dim_date_snkey, invoice_date_dim_date_key, invoice_date_dim_date_snkey, dim_cost_key, dim_cost_snkey, dim_currency_key, dim_currency_snkey, dim_default_dimension_key, dim_default_dimension_snkey, dim_delivery_mode_key, dim_delivery_mode_snkey, dim_intra_stat_transaction_code_key, dim_intra_stat_transaction_code_snkey, dim_inventory_key, dim_inventory_snkey, dim_item_key, dim_item_snkey, dim_legal_entity_key, dim_legal_entity_snkey, dim_location_key, dim_location_snkey, dim_procurement_category_key, dim_procurement_category_snkey, dim_purchase_order_key, dim_purchase_order_snkey, dim_return_reason_key, dim_return_reason_snkey, dim_tax_item_group_key, dim_tax_item_group_snkey, dim_unit_of_measure_inventory_key, dim_unit_of_measure_inventory_snkey, dim_unit_of_measure_purchase_key, dim_unit_of_measure_purchase_snkey, dim_vendor_invoice_key, dim_vendor_invoice_snkey, dim_vendor_order_key, dim_vendor_order_snkey, dim_worker_orderer_key, dim_worker_orderer_snkey, dim_worker_requester_key, dim_worker_requester_snkey, inventory_dimension_id, item_id, price_type, activation_date, created_datetime, currency_code, default_dimension, delivery_mode_id, intra_stat_transaction_code, record_id_location, procurement_category, return_reason_id, tax_item_group_id, unit_of_measure_code_inventory, unit_of_measure_code_purchase, vendor_account_id_invoice, vendor_account_id_order, record_id_orderer, record_id_requester, asset_transaction_type, delivery_type, document_status, is_stocked_product, purchase_line_status, purchase_header_status, purchase_type, inventory_date, invoice_date, inventory_transaction_id, legal_entity, purchase_order_id, purchase_invoice_id, line_number, purchase_line_number, qty_purchase_unit, purchase_unit, qty_inventory_unit, inventory_unit, price_unit, purchase_price, net_amount_company_currency, net_amount_transaction_currency, tax_amount_settlement_currency, standard_cost, hk_hash_key, hk_source_name, hk_soft_delete_flag, hk_source_created_timestamp, hk_source_last_updated_timestamp, hk_created_job_run_id, hk_last_updated_job_run_id, hk_created_timestamp, hk_last_updated_timestamp, hk_warehouse_id)\n\tselect hash(a.source_name, '~', to_char(a.record_id))::number as FACT_PURCHASE_INVOICES_KEY\n\t\t, a.source_name as SOURCE_NAME, a.record_id as RECORD_ID\n\t\t\n\t\t, case when a.source_name = '' then -2\n\t\t\telse nvl(dss1.dim_source_system_key, -1)\n\t\t\tend::number as DIM_SOURCE_SYSTEM_KEY\n\t\t, a.dim_source_system_snkey as DIM_SOURCE_SYSTEM_SNKEY\n\t\t\n\t\t, nvl(dd1.dim_date_key, -1)::number as INVENTORY_DATE_DIM_DATE_KEY\n\t\t, a.inventory_date_dim_date_snkey as INVENTORY_DATE_DIM_DATE_SNKEY\n\t\t, nvl(dd2.dim_date_key, -1)::number as INVOICE_DATE_DIM_DATE_KEY\n\t\t, a.invoice_date_dim_date_snkey as INVOICE_DATE_DIM_DATE_SNKEY\n\t\t\n\t\t/***************************************************************************************************************************************************************\n\t\tNOTE: any set of KEY/SNKEY combinations that are set to -1 are due to this FACT table being part of \"wave 3\" while the DIM tables are \"wave 2\".\n\t\t\tWe cannot guarantee that any \"wave 2\" DIMs are going to be migrated at or near the same time as \"wave 3\" tables; therefore, these DIMs will be technical debt\n\t\t\tand will be fixed later.\n\t\t****************************************************************************************************************************************************************/\n\t\t, case when a.dim_cost_snkey = -2 then -2\n\t\t\t\telse nvl(dc1.dim_cost_key, -1)\n\t\t\tend::number as DIM_COST_KEY\n\t\t, a.dim_cost_snkey as DIM_COST_SNKEY\n\t\t, case when a.dim_currency_snkey = -2 then -2\n\t\t\t\telse nvl(dcurr1.dim_currency_key, -1)\n\t\t\tend::number as DIM_CURRENCY_KEY\n\t\t, a.dim_currency_snkey as DIM_CURRENCY_SNKEY\n\t\t, case when a.dim_default_dimension_snkey = -2 then -2\n\t\t\t\telse nvl(ddim1.dim_default_dimension_key, -1)\n\t\t\tend::number as DIM_DEFAULT_DIMENSION_KEY\n\t\t, a.dim_default_dimension_snkey as DIM_DEFAULT_DIMENSION_SNKEY\n\t\t, case when a.dim_delivery_mode_snkey = -2 then -2\n\t\t\t\telse nvl(ddm1.dim_delivery_mode_key, -1)\n\t\t\tend::number as DIM_DELIVERY_MODE_KEY\n\t\t, a.dim_delivery_mode_snkey as DIM_DELIVERY_MODE_SNKEY\n\t\t, case when a.dim_intra_stat_transaction_code_snkey = -2 then -2\n\t\t\t\telse nvl(distc1.dim_intra_stat_transaction_code_key, -1)\n\t\t\tend::number as DIM_INTRA_STAT_TRANSACTION_CODE_KEY\n\t\t, a.dim_intra_stat_transaction_code_snkey as DIM_INTRA_STAT_TRANSACTION_CODE_SNKEY\n\t\t, case when a.dim_inventory_snkey = -2 then -2\n\t\t\t\telse nvl(dinv1.dim_inventory_key, -1)\n\t\t\tend::number as DIM_INVENTORY_KEY\n\t\t, case when a.dim_inventory_snkey = -2 then -2\n\t\t\t\telse a.dim_inventory_snkey\n\t\t\tend::number as DIM_INVENTORY_SNKEY\n\t\t, case when a.dim_item_snkey = -2 then -2\n\t\t\t\telse nvl(dit1.dim_item_key, -1)\n\t\t\tend::number as DIM_ITEM_KEY\n\t\t, a.dim_item_snkey as DIM_ITEM_SNKEY\n\t\t, case when a.dim_legal_entity_snkey = -2 then -2\n\t\t\t\telse nvl(dle1.dim_legal_entity_key, -1)\n\t\t\tend::number as DIM_LEGAL_ENTITY_KEY\n\t\t, a.dim_legal_entity_snkey as DIM_LEGAL_ENTITY_SNKEY\n\t\t, case when a.dim_location_snkey = -2 then -2\n\t\t\t\telse nvl(dl1.dim_location_key, -1)\n\t\t\tend::number as DIM_LOCATION_KEY\n\t\t, case when a.dim_location_snkey = -2 then -2\n\t\t\t\telse a.dim_location_snkey\n\t\t\tend::number as DIM_LOCATION_SNKEY\n\t\t, case when a.DIM_PROCUREMENT_CATEGORY_SNKEY= -2 then -2\n\t\t\t\telse nvl(dspc1.DIM_SALES_PROCUREMENT_CATEGORY_KEY, -1)\n\t\t\tend::number as DIM_PROCUREMENT_CATEGORY_KEY\n\t\t, a.dim_procurement_category_snkey as DIM_PROCUREMENT_CATEGORY_SNKEY\n\t\t, case when a.dim_purchase_order_snkey = -2 then -2\n\t\t\t\telse nvl(dpo1.dim_purchase_order_key, -1)\n\t\t\tend::number as DIM_PURCHASE_ORDER_KEY\n\t\t, a.dim_purchase_order_snkey as DIM_PURCHASE_ORDER_SNKEY\n\t\t, case when a.dim_return_reason_snkey = -2 then -2\n\t\t\t\telse nvl(drr1.dim_return_reason_key, -1)\n\t\t\tend::number as DIM_RETURN_REASON_KEY\n\t\t, a.dim_return_reason_snkey as DIM_RETURN_REASON_SNKEY\n\t\t, case when a.dim_tax_item_group_snkey = -2 then -2\n\t\t\t\telse nvl(dtig1.dim_tax_item_group_key, -1)\n\t\t\tend::number as DIM_TAX_ITEM_GROUP_KEY\n\t\t, a.dim_tax_item_group_snkey as DIM_TAX_ITEM_GROUP_SNKEY\n\t\t, case when a.dim_unit_of_measure_inventory_snkey = -2 then -2\n\t\t\t\telse nvl(duomi1.dim_unit_of_measure_key, -1)\n\t\t\tend::number as DIM_UNIT_OF_MEASURE_INVENTORY_KEY\n\t\t, a.dim_unit_of_measure_inventory_snkey as DIM_UNIT_OF_MEASURE_INVENTORY_SNKEY\n\t\t, case when a.dim_unit_of_measure_purchase_snkey = -2 then -2\n\t\t\t\telse nvl(duomp1.dim_unit_of_measure_key, -1)\n\t\t\tend::number as DIM_UNIT_OF_MEASURE_PURCHASE_KEY\n\t\t, a.dim_unit_of_measure_purchase_snkey as DIM_UNIT_OF_MEASURE_PURCHASE_SNKEY\n\t\t, case when a.dim_vendor_invoice_snkey = -2 then -2\n\t\t\t\telse nvl(dvi1.dim_vendor_key, -1)\n\t\t\tend::number as DIM_VENDOR_INVOICE_KEY\n\t\t, a.dim_vendor_invoice_snkey as DIM_VENDOR_INVOICE_SNKEY\n\t\t, case when a.dim_vendor_order_snkey = -2 then -2\n\t\t\t\telse nvl(dvo1.dim_vendor_key, -1)\n\t\t\tend::number as DIM_VENDOR_ORDER_KEY\n\t\t, a.dim_vendor_order_snkey as DIM_VENDOR_ORDER_SNKEY\n\t\t, case when a.dim_worker_orderer_snkey = -2 then -2\n\t\t\t\telse nvl(dwo1.dim_worker_key, -1)\n\t\t\tend::number as DIM_WORKER_ORDERER_KEY\n\t\t, a.dim_worker_orderer_snkey as DIM_WORKER_ORDERER_SNKEY\n\t\t, case when a.dim_worker_requester_snkey = -2 then -2\n\t\t\t\telse nvl(dwr1.dim_worker_key, -1)\n\t\t\tend::number as DIM_WORKER_REQUESTER_KEY\n\t\t, a.dim_worker_requester_snkey as DIM_WORKER_REQUESTER_SNKEY\n\t\t\n\t\t\n\t\t, a.inventory_dimension_id as INVENTORY_DIMENSION_ID, a.item_id as ITEM_ID, a.price_type as PRICE_TYPE, a.activation_date as ACTIVATION_DATE, a.created_datetime as CREATED_DATETIME, a.currency_code as CURRENCY_CODE, a.default_dimension as DEFAULT_DIMENSION, a.delivery_mode_id as DELIVERY_MODE_ID, a.intra_stat_transaction_code as INTRA_STAT_TRANSACTION_CODE, a.record_id_location as RECORD_ID_LOCATION, a.procurement_category as PROCUREMENT_CATEGORY, a.return_reason_id as RETURN_REASON_ID, a.tax_item_group_id as TAX_ITEM_GROUP_ID, a.unit_of_measure_code_inventory as UNIT_OF_MEASURE_CODE_INVENTORY, a.unit_of_measure_code_purchase as UNIT_OF_MEASURE_CODE_PURCHASE, a.vendor_account_id_invoice as VENDOR_ACCOUNT_ID_INVOICE, a.vendor_account_id_order as VENDOR_ACCOUNT_ID_ORDER, a.record_id_orderer as RECORD_ID_ORDERER, a.record_id_requester as RECORD_ID_REQUESTER, a.asset_transaction_type as ASSET_TRANSACTION_TYPE, a.delivery_type as DELIVERY_TYPE, a.document_status as DOCUMENT_STATUS, a.is_stocked_product as IS_STOCKED_PRODUCT, a.purchase_line_status as PURCHASE_LINE_STATUS, a.purchase_header_status as PURCHASE_HEADER_STATUS, a.purchase_type as PURCHASE_TYPE, a.inventory_date as INVENTORY_DATE, a.invoice_date as INVOICE_DATE, a.inventory_transaction_id as INVENTORY_TRANSACTION_ID, a.legal_entity as LEGAL_ENTITY, a.purchase_order_id as PURCHASE_ORDER_ID, a.purchase_invoice_id as PURCHASE_INVOICE_ID, a.line_number as LINE_NUMBER, a.purchase_line_number as PURCHASE_LINE_NUMBER, a.qty_purchase_unit as QTY_PURCHASE_UNIT, a.purchase_unit as PURCHASE_UNIT, a.qty_inventory_unit as QTY_INVENTORY_UNIT, a.inventory_unit as INVENTORY_UNIT, a.price_unit as PRICE_UNIT, a.purchase_price as PURCHASE_PRICE, a.net_amount_company_currency as NET_AMOUNT_COMPANY_CURRENCY, a.net_amount_transaction_currency as NET_AMOUNT_TRANSACTION_CURRENCY, a.tax_amount_settlement_currency as TAX_AMOUNT_SETTLEMENT_CURRENCY, a.standard_cost as STANDARD_COST\n\t\n\n\t\t, hash(a.source_name, '~', to_char(a.record_id), '~', a.inventory_dimension_id, '~', a.item_id, '~', a.price_type, '~', to_char(a.activation_date, 'yyyymmdd'), '~', to_char(a.created_datetime, 'yyyymmddhh24missff3'), '~', a.currency_code, '~', a.default_dimension, '~', a.delivery_mode_id, '~', a.intra_stat_transaction_code, '~', to_char(a.record_id_location), '~', to_char(a.procurement_category), '~', a.return_reason_id, '~', a.tax_item_group_id, '~', a.unit_of_measure_code_inventory, '~', a.unit_of_measure_code_purchase, '~', a.vendor_account_id_invoice, '~', a.vendor_account_id_order, '~', to_char(a.record_id_orderer), '~', to_char(a.record_id_requester), '~', a.asset_transaction_type, '~', a.delivery_type, '~', a.document_status, '~', a.is_stocked_product, '~', a.purchase_line_status, '~', a.purchase_header_status, '~', a.purchase_type, '~', to_char(a.inventory_date, 'yyyymmdd'), '~', to_char(a.invoice_date, 'yyyymmdd'), '~', a.inventory_transaction_id, '~', a.legal_entity, '~', a.purchase_order_id, '~', a.purchase_invoice_id, '~', to_char(a.line_number), '~', to_char(a.purchase_line_number), '~', to_char(a.qty_purchase_unit), '~', a.purchase_unit, '~', to_char(a.qty_inventory_unit), '~', a.inventory_unit, '~', to_char(a.price_unit), '~', to_char(a.purchase_price), '~', to_char(a.net_amount_company_currency), '~', to_char(a.net_amount_transaction_currency), '~', to_char(a.tax_amount_settlement_currency), '~', to_char(a.standard_cost))::number as HK_HASH_KEY\n\t\t\n\t\t, a.hk_source_name as HK_SOURCE_NAME\n\t\t, false::boolean as HK_SOFT_DELETE_FLAG\n\t\t, a.hk_source_created_timestamp as HK_SOURCE_CREATED_TIMESTAMP, a.hk_source_last_updated_timestamp as HK_SOURCE_LAST_UPDATED_TIMESTAMP, a.hk_created_job_run_id as HK_CREATED_JOB_RUN_ID, a.hk_last_updated_job_run_id as HK_LAST_UPDATED_JOB_RUN_ID\n\t\t, current_timestamp::timestamp_tz as HK_CREATED_TIMESTAMP\n\t\t, current_timestamp::timestamp_tz as HK_LAST_UPDATED_TIMESTAMP\n\t\t, uuid_string()::varchar as HK_WAREHOUSE_ID\n\t\n\t\n\tfrom (select 'AXNALA'::varchar as SOURCE_NAME\n\t\t\t, nvl(b.recordid, 0)::number(38, 0) as RECORD_ID\n\t\t\t\n\t\t\t, nvl(b.inventorydimensionid, '')::varchar as INVENTORY_DIMENSION_ID\n\t\t\t, nvl(b.itemid, '')::varchar as ITEM_ID\n\t\t\t, nvl(b.pricetype, '')::varchar as PRICE_TYPE\n\t\t\t, nvl(b.activationdate, '1950-01-01')::date as ACTIVATION_DATE\n\t\t\t, nvl(b.createddatetime, '1950-01-01 00:00:00')::timestamp_tz as CREATED_DATETIME\n\t\t\t, nvl(b.currencycode, '')::varchar as CURRENCY_CODE\n\t\t\t, nvl(b.defaultdimension, '')::varchar as DEFAULT_DIMENSION\n\t\t\t, nvl(b.deliverymodeid, '')::varchar as DELIVERY_MODE_ID\n\t\t\t, nvl(b.intrastattransactioncode, '')::varchar as INTRA_STAT_TRANSACTION_CODE\n\t\t\t, nvl(b.recordidlocation, 0)::number(38, 0) as RECORD_ID_LOCATION\n\t\t\t, nvl(b.procurementcategory, 0)::number(38, 0) as PROCUREMENT_CATEGORY\n\t\t\t, nvl(b.returnreasonid, '')::varchar as RETURN_REASON_ID\n\t\t\t, nvl(b.taxitemgroupid, '')::varchar as TAX_ITEM_GROUP_ID\n\t\t\t, nvl(b.unitofmeasurecodeinventory, '')::varchar as UNIT_OF_MEASURE_CODE_INVENTORY\n\t\t\t, nvl(b.unitofmeasurecodepurchase, '')::varchar as UNIT_OF_MEASURE_CODE_PURCHASE\n\t\t\t, nvl(b.vendoraccountidinvoice, '')::varchar as VENDOR_ACCOUNT_ID_INVOICE\n\t\t\t, nvl(b.vendoraccountidorder, '')::varchar as VENDOR_ACCOUNT_ID_ORDER\n\t\t\t, nvl(b.recordidorderer, 0)::number(38, 0) as RECORD_ID_ORDERER\n\t\t\t, nvl(b.recordidrequester, 0)::number(38, 0) as RECORD_ID_REQUESTER\n\t\t\t, nvl(b.assettransactiontype, '')::varchar as ASSET_TRANSACTION_TYPE\n\t\t\t, nvl(b.deliverytype, '')::varchar as DELIVERY_TYPE\n\t\t\t, nvl(b.documentstatus, '')::varchar as DOCUMENT_STATUS\n\t\t\t, nvl(b.isstockedproduct, '')::varchar as IS_STOCKED_PRODUCT\n\t\t\t, nvl(b.purchaselinestatus, '')::varchar as PURCHASE_LINE_STATUS\n\t\t\t, nvl(b.purchaseheaderstatus, '')::varchar as PURCHASE_HEADER_STATUS\n\t\t\t, nvl(b.purchasetype, '')::varchar as PURCHASE_TYPE\n\t\t\t, case when nvl(b.inventorydate, '1900-01-01') in ('1900-01-01') then '1950-01-01'\n\t\t\t\t\twhen b.inventorydate < dd1.min_date_value then '1951-12-31'\n\t\t\t\t\twhen b.inventorydate > dd1.max_date_value then '9951-12-31'\n\t\t\t\telse b.inventorydate\n\t\t\t\tend::date as INVENTORY_DATE\n\t\t\t, case when nvl(b.invoicedate, '1900-01-01') in ('1900-01-01') then '1950-01-01'\n\t\t\t\t\twhen b.invoicedate < dd1.min_date_value then '1951-12-31'\n\t\t\t\t\twhen b.invoicedate > dd1.max_date_value then '9951-12-31'\n\t\t\t\telse b.invoicedate\n\t\t\t\tend::date as INVOICE_DATE\n\t\t\t, nvl(b.inventorytransactionid, '')::varchar as INVENTORY_TRANSACTION_ID\n\t\t\t, nvl(b.legalentity, '')::varchar as LEGAL_ENTITY\n\t\t\t, nvl(b.purchaseorderid, '')::varchar as PURCHASE_ORDER_ID\n\t\t\t, nvl(b.purchaseinvoiceid, '')::varchar as PURCHASE_INVOICE_ID\n\t\t\t, nvl(b.linenumber, 0)::number(25, 16) as LINE_NUMBER\n\t\t\t, nvl(b.purchaselinenumber, 0)::number(38, 0) as PURCHASE_LINE_NUMBER\n\t\t\t, nvl(b.qtypurchaseunit, 0)::number(25, 16) as QTY_PURCHASE_UNIT\n\t\t\t, nvl(b.purchaseunit, '')::varchar as PURCHASE_UNIT\n\t\t\t, nvl(b.qtyinventoryunit, 0)::number(25, 16) as QTY_INVENTORY_UNIT\n\t\t\t, nvl(b.inventoryunit, '')::varchar as INVENTORY_UNIT\n\t\t\t, nvl(b.priceunit, 0)::number(25, 16) as PRICE_UNIT\n\t\t\t, nvl(b.purchaseprice, 0)::number(25, 16) as PURCHASE_PRICE\n\t\t\t, nvl(b.netamountcompanycurrency, 0)::number(25, 16) as NET_AMOUNT_COMPANY_CURRENCY\n\t\t\t, nvl(b.netamounttransactioncurrency, 0)::number(25, 16) as NET_AMOUNT_TRANSACTION_CURRENCY\n\t\t\t, nvl(b.taxamountsettlementcurrency, 0)::number(25, 16) as TAX_AMOUNT_SETTLEMENT_CURRENCY\n\t\t\t, nvl(b.standardcost, 0)::number(25, 16) as STANDARD_COST\n\t\t\t\n\t\t\t, nvl(b.dw_sourcecode, '')::varchar as HK_SOURCE_NAME\n\t\t\t, '1950-01-01 00:00:00'::timestamp_tz as HK_SOURCE_CREATED_TIMESTAMP\n\t\t\t, nvl(b.dw_timestamp, '1950-01-01 00:00:00')::timestamp_tz as HK_SOURCE_LAST_UPDATED_TIMESTAMP\n\t\t\t, '-1'::varchar as HK_CREATED_JOB_RUN_ID\n\t\t\t, nvl(b.dw_batch, '-1')::varchar as HK_LAST_UPDATED_JOB_RUN_ID\n\t\t\t\n\t\t\t, case when nvl(SOURCE_NAME, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME)\n\t\t\t\tend::number as DIM_SOURCE_SYSTEM_SNKEY\n\t\t\t, case when nvl(INVENTORY_DATE, '1950-01-01') = '1950-01-01' then -2\n\t\t\t\telse hash('', '~', to_char(INVENTORY_DATE, 'yyyymmdd'))\n\t\t\t\tend::number as INVENTORY_DATE_DIM_DATE_SNKEY\n\t\t\t, case when nvl(INVOICE_DATE, '1950-01-01') = '1950-01-01' then -2\n\t\t\t\telse hash('', '~', to_char(INVOICE_DATE, 'yyyymmdd'))\n\t\t\t\tend::number as INVOICE_DATE_DIM_DATE_SNKEY\n\t\t\t\n\n\t\t\t, case -- use the below for historical data since that is how DIM_COST was loaded\n\t\t\t\t\twhen substr(INVENTORY_DIMENSION_ID, 5, 1) = 'H' or LEGAL_ENTITY in ('429', '456', '457', '458', '469', '482', '605', '610', '620', '630', '640', '750', '751') then -2\n\t\t\t\t\twhen nvl(LEGAL_ENTITY, '') = '' or nvl(INVENTORY_DIMENSION_ID, '') = '' or nvl(ITEM_ID, '') = '' or nvl(PRICE_TYPE, '') = '' or nvl(ACTIVATION_DATE, '1950-01-01') = '1950-01-01' or nvl(CREATED_DATETIME,'1950-01-01 00:00:00') = '1950-01-01 00:00:00' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY, '~', INVENTORY_DIMENSION_ID, '~', ITEM_ID, '~', PRICE_TYPE, '~', to_char(ACTIVATION_DATE, 'yyyymmdd'), '~', to_char(CREATED_DATETIME, 'yyyymmddhh24missff3'))\n\t\t\t\tend::number as DIM_COST_SNKEY\n\t\t\t, case when nvl(CURRENCY_CODE, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', CURRENCY_CODE)\n\t\t\t\tend::number as DIM_CURRENCY_SNKEY\n\t\t\t, case when nvl(DEFAULT_DIMENSION, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', DEFAULT_DIMENSION)\n\t\t\t\tend::number as DIM_DEFAULT_DIMENSION_SNKEY\n\t\t\t, case when nvl(LEGAL_ENTITY, '') = '' or nvl(DELIVERY_MODE_ID, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY, '~', DELIVERY_MODE_ID)\n\t\t\t\tend::number as DIM_DELIVERY_MODE_SNKEY\n\t\t\t, case when nvl(LEGAL_ENTITY, '') = '' or nvl(INTRA_STAT_TRANSACTION_CODE, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY, '~', INTRA_STAT_TRANSACTION_CODE)\n\t\t\t\tend::number as DIM_INTRA_STAT_TRANSACTION_CODE_SNKEY\n\t\t\t, case when nvl(LEGAL_ENTITY, '') = '' or nvl(INVENTORY_DIMENSION_ID, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY, '~', INVENTORY_DIMENSION_ID)\n\t\t\t\tend::number as DIM_INVENTORY_SNKEY\n\t\t\t, case when nvl(LEGAL_ENTITY, '') = '' or nvl(ITEM_ID, '') = '' then -2\n\t\t\t\telse hash('', '~', LEGAL_ENTITY, '~', ITEM_ID)\t-- (NOTE: ITEM_KEY is unique across all source systems; therefore, this field will always be set to '')\n\t\t\t\tend::number as DIM_ITEM_SNKEY\n\t\t\t, case when nvl(LEGAL_ENTITY, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY)\n\t\t\t\tend::number as DIM_LEGAL_ENTITY_SNKEY\n\t\t\t, case when nvl(RECORD_ID_LOCATION, 0) = 0 then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', to_char(RECORD_ID_LOCATION))\n\t\t\t\tend::number as DIM_LOCATION_SNKEY\n\t\t\t, case when  nvl(PROCUREMENT_CATEGORY, 0) = 0 then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', to_char(PROCUREMENT_CATEGORY)) \n                end::number(38, 0) as DIM_PROCUREMENT_CATEGORY_SNKEY\n\t\t\t, case when nvl(LEGAL_ENTITY, '') = '' or nvl(PURCHASE_ORDER_ID, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY, '~', PURCHASE_ORDER_ID)\n\t\t\t\tend::number as DIM_PURCHASE_ORDER_SNKEY\n\t\t\t, case when nvl(LEGAL_ENTITY, '') = '' or nvl(RETURN_REASON_ID, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY, '~', RETURN_REASON_ID)\n\t\t\t\tend::number as DIM_RETURN_REASON_SNKEY\n\t\t\t, case when nvl(LEGAL_ENTITY, '') = '' or nvl(TAX_ITEM_GROUP_ID, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY, '~', TAX_ITEM_GROUP_ID)\n\t\t\t\tend::number as DIM_TAX_ITEM_GROUP_SNKEY\n\t\t\t, case when nvl(UNIT_OF_MEASURE_CODE_INVENTORY, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', UNIT_OF_MEASURE_CODE_INVENTORY)\n\t\t\t\tend::number as DIM_UNIT_OF_MEASURE_INVENTORY_SNKEY\n\t\t\t, case when nvl(UNIT_OF_MEASURE_CODE_PURCHASE, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', UNIT_OF_MEASURE_CODE_PURCHASE)\n\t\t\t\tend::number as DIM_UNIT_OF_MEASURE_PURCHASE_SNKEY\n\t\t\t, case when nvl(LEGAL_ENTITY, '') = '' or nvl(VENDOR_ACCOUNT_ID_INVOICE, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY, '~', VENDOR_ACCOUNT_ID_INVOICE)\n\t\t\t\tend::number as DIM_VENDOR_INVOICE_SNKEY\n\t\t\t, case when nvl(LEGAL_ENTITY, '') = '' or nvl(VENDOR_ACCOUNT_ID_ORDER, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY, '~', VENDOR_ACCOUNT_ID_ORDER)\n\t\t\t\tend::number as DIM_VENDOR_ORDER_SNKEY\n\t\t\t, case when nvl(RECORD_ID_ORDERER, 0) = 0 then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', to_char(RECORD_ID_ORDERER))\n\t\t\t\tend::number as DIM_WORKER_ORDERER_SNKEY\n\t\t\t, case when nvl(RECORD_ID_REQUESTER, 0) = 0 then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', to_char(RECORD_ID_REQUESTER))\n\t\t\t\tend::number as DIM_WORKER_REQUESTER_SNKEY\n\t\t\t\n\t\tfrom (select hk_source_name, hk_job_run_id, hk_created_timestamp, hk_warehouse_id, dw_id, costkey, currencykey, defaultdimensionkey, deliverymodekey, intrastattransactioncodekey, inventorykey, itemkey, legalentitykey, locationkey, procurementcategorykey, purchaseorderkey, purchaseorderdetailskey, returnreasonkey, taxitemgroupkey, unitofmeasurepurchasekey, unitofmeasureinventorykey, vendorinvoicekey, vendorinvoicehistorykey, vendororderkey, vendororderhistorykey, workerordererkey, workerrequesterkey, inventorydate, invoicedate, recordid, inventorytransactionid, legalentity, purchaseorderid, purchaseinvoiceid, linenumber, purchaselinenumber, qtypurchaseunit, purchaseunit, qtyinventoryunit, inventoryunit, priceunit, purchaseprice, netamountcompanycurrency, netamounttransactioncurrency, taxamountsettlementcurrency, standardcost, incrementaltimestamp, inventorydimensionid, itemid, pricetype, activationdate, createddatetime, currencycode, defaultdimension, deliverymodeid, intrastattransactioncode, recordidlocation, procurementcategory, returnreasonid, taxitemgroupid, unitofmeasurecodeinventory, unitofmeasurecodepurchase, vendoraccountidinvoice, vendoraccountidorder, recordidorderer, recordidrequester, assettransactiontype, deliverytype, documentstatus, isstockedproduct, purchaselinestatus, purchaseheaderstatus, purchasetype, dw_batch, dw_sourcecode, dw_timestamp\n\t\t\tfrom @{pipeline().globalParameters.environment}_raw.edw_dwh.FACTPURCHASEINVOICES\n\t\t\t) b\n\t\t\tinner join (select min(date_value) as MIN_DATE_VALUE\n\t\t\t\t\t\t\t, max(date_value) as MAX_DATE_VALUE\n\t\t\t\t\t\tfrom global.DIM_DATE\n\t\t\t\t\t\twhere date_value not in ('1950-01-01', '1951-12-31', '9000-01-01', '9951-12-31')) dd1 on\n\t\t\t\t1=1\n\t\t) a\n\tleft join global.DIM_SOURCE_SYSTEM dss1 on\n\t\ta.dim_source_system_snkey = dss1.dim_source_system_snkey\n\tleft join global.DIM_DATE dd1 on\n\t\ta.inventory_date_dim_date_snkey = dd1.dim_date_snkey\n\tleft join global.DIM_DATE dd2 on\n\t\ta.invoice_date_dim_date_snkey = dd2.dim_date_snkey\n\tleft join global.DIM_COST dc1 on\n\t\ta.dim_cost_snkey = dc1.dim_cost_snkey\n\tleft join global.DIM_CURRENCY dcurr1 on\n\t\ta.dim_currency_snkey = dcurr1.dim_currency_snkey\n\tleft join global.DIM_DEFAULT_DIMENSION ddim1 on\n\t\ta.dim_default_dimension_snkey = ddim1.dim_default_dimension_snkey\n\tleft join global.DIM_DELIVERY_MODE ddm1 on\n\t\ta.dim_delivery_mode_snkey = ddm1.dim_delivery_mode_snkey\n\tleft join global.DIM_INTRA_STAT_TRANSACTION_CODE distc1 on\n\t\ta.dim_intra_stat_transaction_code_snkey = distc1.dim_intra_stat_transaction_code_snkey\n\tleft join global.DIM_INVENTORY dinv1 on\n\t\ta.dim_inventory_snkey = dinv1.dim_inventory_snkey\n\tleft join global.DIM_ITEM dit1 on\n\t\ta.dim_item_snkey = dit1.dim_item_snkey\n\tleft join global.DIM_LEGAL_ENTITY dle1 on\n\t\ta.dim_legal_entity_snkey = dle1.dim_legal_entity_snkey\n\tleft join global.DIM_LOCATION dl1 on\n\t\ta.dim_location_snkey = dl1.dim_location_snkey\n    left join global.DIM_SALES_PROCUREMENT_CATEGORY dspc1 on\n\t\ta.dim_procurement_category_snkey = dspc1.dim_sales_procurement_category_snkey\n\tleft join global.DIM_PURCHASE_ORDER dpo1 on\n\t\ta.dim_purchase_order_snkey = dpo1.dim_purchase_order_snkey\n\tleft join global.DIM_RETURN_REASON drr1 on\n\t\ta.dim_return_reason_snkey = drr1.dim_return_reason_snkey\n\tleft join global.DIM_TAX_ITEM_GROUP dtig1 on\n\t\ta.dim_tax_item_group_snkey = dtig1.dim_tax_item_group_snkey\n\tleft join global.DIM_UNIT_OF_MEASURE duomi1 on\n\t\ta.dim_unit_of_measure_inventory_snkey = duomi1.dim_unit_of_measure_snkey\n\tleft join global.DIM_UNIT_OF_MEASURE duomp1 on\n\t\ta.dim_unit_of_measure_purchase_snkey = duomp1.dim_unit_of_measure_snkey\n\tleft join global.DIM_VENDOR dvi1 on\n\t\ta.dim_vendor_invoice_snkey = dvi1.dim_vendor_snkey and\n\t\ta.invoice_date >= dvi1.hk_effective_start_timestamp and\n\t\ta.invoice_date < dvi1.hk_effective_end_timestamp\n\tleft join global.DIM_VENDOR dvo1 on\n\t\ta.dim_vendor_order_snkey = dvo1.dim_vendor_snkey and\n\t\ta.invoice_date >= dvo1.hk_effective_start_timestamp and\n\t\ta.invoice_date < dvo1.hk_effective_end_timestamp\n\tleft join global.DIM_WORKER dwo1 on\n\t\ta.dim_worker_orderer_snkey = dwo1.dim_worker_snkey\n\tleft join global.DIM_WORKER dwr1 on\n\t\ta.dim_worker_requester_snkey = dwr1.dim_worker_snkey\n;",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "FACTPURCHASEINVOICES"
					},
					"p_temp_directory": {
						"type": "string",
						"defaultValue": "temp_files"
					},
					"p_tgt_schema_nm": {
						"type": "string",
						"defaultValue": "EDW_DWH"
					},
					"p_curate_table_name": {
						"type": "string",
						"defaultValue": "FACT_PURCHASE_INVOICES"
					}
				},
				"folder": {
					"name": "history_fact"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_edw_hist_fact_purchase_orders')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy from sqlserver to ADLS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT \n\t f1.DW_Id,\n      f1.CurrencyKey,\n      f1.DataSourceKey,\n      f1.DefaultDimensionKey,\n      f1.DeliveryModeKey,\n      f1.IntrastatTransactionCodeKey,\n      f1.InventoryKey,\n      f1.ItemKey,\n      f1.LegalEntityKey,\n      f1.LocationKey,\n      f1.ProcurementCategoryKey,\n      f1.PurchaseOrderKey,\n      f1.PurchaseOrderDetailsKey,\n      f1.ReturnReasonKey,\n      f1.TaxItemGroupKey,\n      f1.UnitOfMeasureInventoryKey,\n      f1.UnitOfMeasurePurchaseKey,\n      f1.VendorInvoiceKey,\n      f1.VendorInvoiceHistoryKey,\n      f1.VendorOrderKey,\n      f1.VendorOrderHistoryKey,\n      f1.WarehouseKey,\n      f1.WorkerOrdererKey,\n      f1.WorkerRequesterKey,\n      f1.AccountingDate,\n      f1.EarliestConfirmedDate,\n      f1.PurchaseHeaderLocalCreatedDate,\n      f1.PurchaseHeaderUTCCreatedDate,\n      f1.PurchaseLineLocalCreatedDate,\n      f1.PurchaseLineUTCCreatedDate,\n      f1.HeaderDeliveryDate,\n      f1.HeaderShipByDate,\n      f1.LineDeliveryDate,\n      f1.LineShipByDate,\n      f1.LegalEntity,\n      f1.InventoryTransactionID,\n      f1.PurchaseOrderID,\n      f1.LineNumber,\n      f1.QtyInventoryUnit,\n      f1.InventoryUnit,\n      f1.QtyPurchaseUnit,\n      f1.PurchaseUnit,\n      f1.PriceUnit,\n      f1.PurchasePrice,\n      f1.NetAmountTransactionCurrency,\n      f1.IncrementalTimeStamp,\n      f1.DropShipment,\n    case when f1.CurrencyKey in (-1, -2) then f2.currencycode else dcurr1.currencycode end as currencycode,\n    cast(case when f1.defaultdimensionkey in (-1, -2) then f2.defaultdimension else dd1.defaultdimension end as varchar) as defaultdimension,      case when f1.deliverymodekey in (-1, -2) then f2.dlvmode else ddm1.deliverymodeid end as deliverymodeid,\n    case when f1.intrastattransactioncodekey in (-1, -2) then f2.transactioncode else distc1.intrastattransactioncode end as intrastattransactioncode,\n    case when f1.InventoryKey in (-1, -2) then f2.INVENTDIMID else ddi.InventoryDimensionID end as InventoryDimensionID,\n    case when f1.LocationKey in (-1, -2) then f2.deliverypostaladdress else dl1.recordid end as deliverypostaladdress,\n    case when f1.ProcurementCategoryKey in (-1, -2) then f2.procurementcategory else dspc1.recordid end as procurementcategory_recordid ,\n    case when f1.ReturnReasonKey in (-1, -2) then f2.returnreasoncodeid else drr1.returnreasonid end as returnreasonid,\n    case when f1.TaxItemGroupKey in (-1, -2) then f2.taxitemgroup else dtig1.taxitemgroupid end as taxitemgroupid,\n    case when f1.UnitOfMeasureInventoryKey in (-1, -2) then f2.InventoryUnit else duomi1.unitofmeasurecode end as Inventoryunitofmeasurecode,\n    case when f1.UnitOfMeasurePurchaseKey in (-1, -2) then f2.PurchaseUnit else duomp1.unitofmeasurecode end as Purchaseunitofmeasurecode ,\n    case when f1.VendorInvoiceHistoryKey in (-1, -2) then f2.invoiceaccount else dvi1.vendoraccountid end as invoiceaccount,\n    case when f1.VendorOrderHistoryKey in (-1, -2) then f2.orderaccount else dvo1.vendoraccountid end as orderaccount,\n    case when f1.WorkerOrdererKey in (-1, -2) then f2.workerpurchplacer else dwo1.recordid end as RECORD_ID_ORDERER, \n    case when f1.WorkerRequesterKey in (-1, -2) then f2.requester else dwr1.recordid end as RECORD_ID_REQUESTER,\n    case when f1.ItemKey in (-1, -2) then f2.itemid else dit1.itemid end as itemid,\n    fpo.invoicedate,\n    fpo.INVENTDATE,\n\t-- f2.transactioncode,\n\t-- f2.procurementcategory,\n\t-- f2.taxitemgroup,\n    case when f1.WarehouseKey in (-1, -2) then f2.INVENTLOCATIONID else dw.WarehouseID end as INVENTLOCATIONID,\n\tdpod1.assettransactiontype,\n\tdpod1.deliverytype,\n\tdpod1.documentstatus,\n\tdpod1.isstockedproduct,\n\tdpod1.purchaselinestatus,\n\tdpod1.purchaseheaderstatus,\n\tdpod1.purchasetype,\n\tf1.DW_Batch,\n    f1.DW_SourceCode,\n    f1.DW_TimeStamp\nFROM\n\tdbo.FactPurchaseOrders f1\nwith\n\t(nolock)\n\tinner join (\n\t\tselect\n\t\t\tmin(datevalue) as MIN_DATE_VALUE,\n\t\t\tmax(datevalue) as MAX_DATE_VALUE\n\t\tfrom\n\t\t\tdbo.DimDate\n\t\twhere\n\t\t\tdatevalue not in (\n\t\t\t\t'1950-01-01',\n\t\t\t\t'1951-12-31',\n\t\t\t\t'9000-01-01',\n\t\t\t\t'9951-12-31'\n\t\t\t)\n\t) ddt1 on 1 = 1\n\tleft join edw_hka.dbo.FactPurchaseOrders f2\nwith\n\t(nolock) on f1.dw_id = f2.DW_Id\n\tleft join EDW_DWH.dbo.DimCurrency dcurr1\nwith\n\t(nolock) on f1.CurrencyKey = dcurr1.CurrencyKey\n\tleft join edw_hka.dbo.DIMDEFAULTDIMENSION dd1\nwith\n\t(nolock) on f1.defaultdimensionkey = dd1.defaultdimensionkey\n\tleft join EDW_DWH.dbo.DIMDELIVERYMODE ddm1\nwith\n\t(nolock) on f1.deliverymodekey = ddm1.deliverymodekey\n\tleft join EDW_DWH.dbo.DIMINTRASTATTRANSACTIONCODE distc1\nwith\n\t(nolock) on f1.intrastattransactioncodekey = distc1.intrastattransactioncodekey\n\tleft join dbo.DimInventory ddi\nwith\n\t(nolock) on f1.InventoryKey = ddi.InventoryKey\n\tleft join dbo.DIMLOCATION dl1\nwith\n\t(nolock) on f1.locationkey = dl1.locationkey\n\tleft join dbo.DIMSALESPROCUREMENTCATEGORY dspc1\nwith\n\t(nolock) on f1.procurementcategorykey = dspc1.procurementcategorykey\n\tleft join dbo.DIMRETURNREASON drr1\nwith\n\t(nolock) on f1.returnreasonkey = drr1.returnreasonkey\n\tleft join dbo.DIMTAXITEMGROUP dtig1\nwith\n\t(nolock) on f1.taxitemgroupkey = dtig1.taxitemgroupkey\n\tleft join dbo.DIMUNITOFMEASURE duomi1\nwith\n\t(nolock) on f1.unitofmeasureinventorykey = duomi1.unitofmeasurekey\n\tleft join dbo.DIMUNITOFMEASURE duomp1\nwith\n\t(nolock) on f1.unitofmeasurepurchasekey = duomp1.unitofmeasurekey\n\tleft join dbo.DIMVENDOR dvi1\nwith\n\t(nolock) on f1.vendorinvoicehistorykey = dvi1.vendorhistorykey\n\tleft join dbo.DIMVENDOR dvo1\nwith\n\t(nolock) on f1.vendororderhistorykey = dvo1.vendorhistorykey\n\tleft join dbo.DIMWORKER dwo1\nwith\n\t(nolock) on f1.workerordererkey = dwo1.workerkey\n\tleft join dbo.DIMWORKER dwr1\nwith\n\t(nolock) on f1.workerrequesterkey = dwr1.workerkey\n\tleft join dbo.DIMITEM dit1\nwith\n\t(nolock) on f1.itemkey = dit1.itemkey\n\tleft join dbo.DimWarehouse dw\nwith\n\t(nolock) on f1.LegalEntity = dw.LegalEntity\n\tand f1.WarehouseKey = dw.WarehouseKey\n\tleft join (\n\t\tselect\n\t\t\tLegalEntity,\n\t\t\tInventoryTransactionID,\n\t\t\tmax(InvoiceDate) invoicedate,\n\t\t\tmax(InventoryDate) INVENTDATE\n\t\tfrom\n\t\t\tdbo.FactPurchaseInvoices\n\t\tgroup by\n\t\t\tLegalEntity,\n\t\t\tInventoryTransactionID\n\t) fpo ON f1.LegalEntity = fpo.LegalEntity\n\tand f1.InventoryTransactionID = fpo.InventoryTransactionID\n\tleft join dbo.DIMPURCHASEORDERDETAILS dpod1\nwith\n\t(nolock) on f1.purchaseorderdetailskey = dpod1.purchaseorderdetailskey",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_server",
								"type": "DatasetReference",
								"parameters": {
									"p_src_table_name": {
										"value": "@pipeline().parameters.p_src_table_nm",
										"type": "Expression"
									},
									"p_src_schema_name": {
										"value": "@pipeline().parameters.p_src_schema_nm",
										"type": "Expression"
									},
									"p_ls_serverName": {
										"value": "@pipeline().globalParameters.edw_sql_serverName",
										"type": "Expression"
									},
									"p_ls_dbName": {
										"value": "@pipeline().globalParameters.edw_sql_dbName",
										"type": "Expression"
									},
									"p_ls_sqlUsername": {
										"value": "@pipeline().globalParameters.sql_userName",
										"type": "Expression"
									},
									"p_ls_sqlPassword": {
										"value": "@pipeline().globalParameters.sql_password",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_parq_edw",
								"type": "DatasetReference",
								"parameters": {
									"p_root_system": {
										"value": "@pipeline().globalParameters.rootDir",
										"type": "Expression"
									},
									"p_directory": {
										"value": "@pipeline().parameters.p_temp_directory",
										"type": "Expression"
									},
									"p_file_name": {
										"value": "@concat(toUpper(pipeline().parameters.p_curate_table_name),'_HIST_',substring(string(utcNow()),0,4),'_',substring(string(utcNow()),5,2),'_',substring(string(utcNow()),8,2),'.snappy.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "ADLS to Snowflake RAW with HK columns",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy from sqlserver to ADLS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_load_edw_history",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"adlsSource": {
										"p_root_system": {
											"value": "@pipeline().globalParameters.rootDir",
											"type": "Expression"
										},
										"p_directory": {
											"value": "@pipeline().parameters.p_temp_directory",
											"type": "Expression"
										},
										"p_file_name": {
											"value": "@concat(toUpper(pipeline().parameters.p_curate_table_name),'_HIST_',substring(string(utcNow()),0,4),'_',substring(string(utcNow()),5,2),'_',substring(string(utcNow()),8,2),'.snappy.parquet')",
											"type": "Expression"
										}
									},
									"snowflakeRawTarget": {
										"p_tgt_table_name": {
											"value": "@pipeline().parameters.p_src_table_nm",
											"type": "Expression"
										},
										"p_tgt_schema_name": {
											"value": "@pipeline().parameters.p_tgt_schema_nm",
											"type": "Expression"
										},
										"p_ls_DbName": {
											"value": "@pipeline().globalParameters.snow_rawDb",
											"type": "Expression"
										},
										"p_ls_Env": {
											"value": "@pipeline().globalParameters.environment",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "IR-Snowflake-NALA",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "RAW to CURATE SP",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ADLS to Snowflake RAW with HK columns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_curateDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "TRUNCATE TABLE global.FACT_PURCHASE_ORDERS;\n\nINSERT INTO global.FACT_PURCHASE_ORDERS(\nFACT_PURCHASE_ORDERS_KEY,\nSOURCE_NAME,\nLEGAL_ENTITY,\nINVENT_TRANS_ID,\nDIM_SOURCE_SYSTEM_KEY,\nDIM_SOURCE_SYSTEM_SNKEY,\nACCOUNTING_DATE_DIM_DATE_KEY,\nACCOUNTING_DATE_DIM_DATE_SNKEY,\nINVENTORY_DATE_DIM_DATE_KEY,\nINVENTORY_DATE_DIM_DATE_SNKEY,\nDIM_CURRENCY_KEY,\nDIM_CURRENCY_SNKEY,\nDIM_DEFAULT_DIMENSION_KEY,\nDIM_DEFAULT_DIMENSION_SNKEY,\nDIM_DELIVERY_MODE_KEY,\nDIM_DELIVERY_MODE_SNKEY,\nDIM_INTRA_STAT_TRANSACTION_CODE_KEY,\nDIM_INTRA_STAT_TRANSACTION_CODE_SNKEY,\nDIM_INVENTORY_KEY,\nDIM_INVENTORY_SNKEY,\nDIM_ITEM_KEY,\nDIM_ITEM_SNKEY,\nDIM_LEGAL_ENTITY_KEY,\nDIM_LEGAL_ENTITY_SNKEY,\nDIM_LOCATION_KEY,\nDIM_LOCATION_SNKEY,\nDIM_PROCUREMENT_CATEGORY_KEY,\nDIM_PROCUREMENT_CATEGORY_SNKEY,\nDIM_PURCHASE_ORDER_KEY,\nDIM_PURCHASE_ORDER_SNKEY,\nDIM_RETURN_REASON_KEY,\nDIM_RETURN_REASON_SNKEY,\nDIM_TAX_ITEM_GROUP_KEY,\nDIM_TAX_ITEM_GROUP_SNKEY,\nDIM_UNIT_OF_MEASURE_INVENTORY_KEY,\nDIM_UNIT_OF_MEASURE_INVENTORY_SNKEY,\nDIM_UNIT_OF_MEASURE_PURCHASE_KEY,\nDIM_UNIT_OF_MEASURE_PURCHASE_SNKEY,\nDIM_VENDOR_INVOICE_KEY,\nDIM_VENDOR_INVOICE_SNKEY,\nDIM_VENDOR_ORDER_KEY,\nDIM_VENDOR_ORDER_SNKEY,\nDIM_WAREHOUSE_KEY,\nDIM_WAREHOUSE_SNKEY,\nDIM_WORKER_ORDERER_KEY,\nDIM_WORKER_ORDERER_SNKEY,\nDIM_WORKER_REQUESTER_KEY,\nDIM_WORKER_REQUESTER_SNKEY,\nCURRENCY_CODE,\nDEFAULT_DIMENSION,\nQTY_ORDERED,\nITEM_ID,\nUNIT_OF_MEASURE_CODE_INVENTORY,\nQTY_PURCHASE_UNIT,\nUNIT_OF_MEASURE_CODE_PURCHASE,\nPRICE_UNIT,\nPURCH_PRICE,\nNET_AMOUNT_TRANSACTION_CURRENCY,\nACCOUNTING_DATE,\nEARLIEST_CONFIRMED_DATE,\nINVENTORY_DIMENSION_ID,\nPURCHASE_HEADER_LOCAL_CREATED_DATE,\nPURCHASE_HEADER_UTC_CREATED_DATE,\nPURCHASE_LINE_LOCAL_CREATED_DATE,\nPURCHASE_LINE_UTC_CREATED_DATE,\nPURCHASE_HEADER_DELIVERY_DATE,\nDELIVERY_MODE_ID,\nRETURN_REASON_ID,\nRECORD_ID_ORDERER,\nRECORD_ID_REQUESTER,\nVENDOR_ACCOUNT_ID_INVOICE,\nVENDOR_ACCOUNT_ID_ORDER,\nWAREHOUSE_ID,\nPURCHASE_HEADER_SHIP_BY_DATE,\nPURCHASE_LINE_DELIVERY_DATE,\nPURCHASE_LINE_SHIP_BY_DATE,\nPURCHASE_ORDER_ID,\nLINE_NUMBER,\nQTY_INVENTORY_UNIT,\nPURCHASE_UNIT,\nLINE_AMOUNT,\nASSET_TRANSACTION_TYPE,\nDELIVERY_TYPE,\nDOCUMENT_STATUS,\nIS_STOCKED_PRODUCT,\nPURCHASE_LINE_STATUS,\nPURCHASE_HEADER_STATUS,\nPURCHASE_TYPE,\nDROP_SHIPMENT,\nRECORD_ID_LOCATION,\nINVOICE_DATE,\nINVENTORY_DATE,\nTRANSACTION_CODE,\nPROCUREMENT_CATEGORY,\nTAX_ITEM_GROUP_ID,\nHK_HASH_KEY,\nHK_SOURCE_NAME,\nHK_SOFT_DELETE_FLAG,\nHK_SOURCE_CREATED_TIMESTAMP,\nHK_SOURCE_LAST_UPDATED_TIMESTAMP,\nHK_CREATED_JOB_RUN_ID,\nHK_LAST_UPDATED_JOB_RUN_ID,\nHK_CREATED_TIMESTAMP,\nHK_LAST_UPDATED_TIMESTAMP,\nHK_WAREHOUSE_ID\n)\nSELECT \nhash(a.SOURCE_NAME,'~',a.LEGAL_ENTITY ,'~',a.INVENT_TRANS_ID)::number as FACT_PURCHASE_ORDERS_KEY \n,a.SOURCE_NAME\n,a.LEGAL_ENTITY\n,a.INVENT_TRANS_ID\n,case when a.source_name = '' then -2\n\t\t\telse nvl(dss1.dim_source_system_key, -1)\n\t\t\tend::number as DIM_SOURCE_SYSTEM_KEY\n,a.DIM_SOURCE_SYSTEM_SNKEY\n, nvl(dd3.dim_date_key, -1)::number as ACCOUNTING_DATE_DIM_DATE_KEY\n,a.ACCOUNTING_DATE_DIM_DATE_SNKEY\n, nvl(dd1.dim_date_key, -1)::number as INVENTORY_DATE_DIM_DATE_KEY\n, a.inventory_date_dim_date_snkey as INVENTORY_DATE_DIM_DATE_SNKEY\n, case when a.dim_currency_snkey = -2 then -2\n\t\t\t\telse nvl(dcurr1.dim_currency_key, -1)\n\t\t\tend::number as DIM_CURRENCY_KEY\n,a.DIM_CURRENCY_SNKEY\n\t\t, case when a.dim_default_dimension_snkey = -2 then -2\n\t\t\t\telse nvl(ddim1.dim_default_dimension_key, -1)\n\t\t\tend::number as DIM_DEFAULT_DIMENSION_KEY\n,a.DIM_DEFAULT_DIMENSION_SNKEY\n\t\t, case when a.dim_delivery_mode_snkey = -2 then -2\n\t\t\t\telse nvl(ddm1.dim_delivery_mode_key, -1)\n\t\t\tend::number as DIM_DELIVERY_MODE_KEY\n,a.DIM_DELIVERY_MODE_SNKEY\n\t\t, case when a.dim_intra_stat_transaction_code_snkey = -2 then -2\n\t\t\t\telse nvl(distc1.dim_intra_stat_transaction_code_key, -1)\n\t\tend::number as DIM_INTRA_STAT_TRANSACTION_CODE_KEY\n,a.DIM_INTRA_STAT_TRANSACTION_CODE_SNKEY\n\t\t, case when a.dim_inventory_snkey = -2 then -2\n\t\t\t\telse nvl(dinv1.dim_inventory_key, -1)\n\t\t\tend::number as DIM_INVENTORY_KEY\n,a.DIM_INVENTORY_SNKEY\n\t\t, case when a.dim_item_snkey = -2 then -2\n\t\t\t\telse nvl(dit1.dim_item_key, -1)\n\t\t\tend::number as DIM_ITEM_KEY\n,a.DIM_ITEM_SNKEY\n\t\t, case when a.dim_legal_entity_snkey = -2 then -2\n\t\t\t\telse nvl(dle1.dim_legal_entity_key, -1)\n\t\t\tend::number as DIM_LEGAL_ENTITY_KEY\n,a.DIM_LEGAL_ENTITY_SNKEY\n\t\t, case when a.dim_location_snkey = -2 then -2\n\t\t\t\telse nvl(dl1.dim_location_key, -1)\n\t\t\tend::number as DIM_LOCATION_KEY\n,a.DIM_LOCATION_SNKEY\n\t\t, case when a.DIM_PROCUREMENT_CATEGORY_SNKEY= -2 then -2\n\t\t\t\telse nvl(dspc1.DIM_SALES_PROCUREMENT_CATEGORY_KEY, -1)\n\t\t\tend::number as DIM_PROCUREMENT_CATEGORY_KEY\n,a.DIM_PROCUREMENT_CATEGORY_SNKEY\n\t\t, case when a.dim_purchase_order_snkey = -2 then -2\n\t\t\t\telse nvl(dpo1.dim_purchase_order_key, -1)\n\t\t\tend::number as DIM_PURCHASE_ORDER_KEY\n,a.DIM_PURCHASE_ORDER_SNKEY\n\t\t, case when a.dim_return_reason_snkey = -2 then -2\n\t\t\t\telse nvl(drr1.dim_return_reason_key, -1)\n\t\t\tend::number as DIM_RETURN_REASON_KEY\n,a.DIM_RETURN_REASON_SNKEY\n\t\t, case when a.dim_tax_item_group_snkey = -2 then -2\n\t \t\telse nvl(dtig1.dim_tax_item_group_key, -1)\n\t\t end::number as DIM_TAX_ITEM_GROUP_KEY\n,a.DIM_TAX_ITEM_GROUP_SNKEY\n\t\t, case when a.dim_unit_of_measure_inventory_snkey = -2 then -2\n\t\t\t\telse nvl(duomi1.dim_unit_of_measure_key, -1)\n\t\tend::number as DIM_UNIT_OF_MEASURE_INVENTORY_KEY\n,a.DIM_UNIT_OF_MEASURE_INVENTORY_SNKEY\n\t\t, case when a.dim_unit_of_measure_purchase_snkey = -2 then -2\n\t\t\t\telse nvl(duomp1.dim_unit_of_measure_key, -1)\n\t\t\tend::number as DIM_UNIT_OF_MEASURE_PURCHASE_KEY\n,a.DIM_UNIT_OF_MEASURE_PURCHASE_SNKEY\n\t\t, case when a.dim_vendor_invoice_snkey = -2 then -2\n\t\t\t\telse nvl(dvi1.dim_vendor_key, -1)\n\t\t\tend::number as DIM_VENDOR_INVOICE_KEY\n,a.DIM_VENDOR_INVOICE_SNKEY\n\t\t, case when a.dim_vendor_order_snkey = -2 then -2\n\t\t\t\telse nvl(dvo1.dim_vendor_key, -1)\n\t\t\tend::number as DIM_VENDOR_ORDER_KEY\n,a.DIM_VENDOR_ORDER_SNKEY\n\t\t, case when a.DIM_WAREHOUSE_SNKEY = -2 then -2\n\t\t\t\telse nvl(dwh1.DIM_WAREHOUSE_KEY, -1)\n\t\t\tend::number as DIM_WAREHOUSE_KEY\n,a.DIM_WAREHOUSE_SNKEY\n\t\t, case when a.dim_worker_orderer_snkey = -2 then -2\n\t\t\t\telse nvl(dwo1.dim_worker_key, -1)\n\t\t\tend::number as DIM_WORKER_ORDERER_KEY\n,a.DIM_WORKER_ORDERER_SNKEY\n\t\t, case when a.dim_worker_requester_snkey = -2 then -2\n\t\t\t\telse nvl(dwr1.dim_worker_key, -1)\n\t\t\tend::number as DIM_WORKER_REQUESTER_KEY\n,a.DIM_WORKER_REQUESTER_SNKEY\n,a.CURRENCY_CODE\n,a.DEFAULT_DIMENSION\n,a.QTY_ORDERED\n,a.ITEM_ID\n,a.UNIT_OF_MEASURE_CODE_INVENTORY\n,a.QTY_PURCHASE_UNIT\n,a.UNIT_OF_MEASURE_CODE_PURCHASE\n,a.PRICE_UNIT\n,a.PURCH_PRICE\n,a.NET_AMOUNT_TRANSACTION_CURRENCY\n,a.ACCOUNTING_DATE\n,a.EARLIEST_CONFIRMED_DATE\n,a.INVENTORY_DIMENSION_ID\n,a.PURCHASE_HEADER_LOCAL_CREATED_DATE\n,a.PURCHASE_HEADER_UTC_CREATED_DATE\n,a.PURCHASE_LINE_LOCAL_CREATED_DATE\n,a.PURCHASE_LINE_UTC_CREATED_DATE\n,a.PURCHASE_HEADER_DELIVERY_DATE\n,a.DELIVERY_MODE_ID\n,a.RETURN_REASON_ID\n,a.RECORD_ID_ORDERER\n,a.RECORD_ID_REQUESTER\n,a.VENDOR_ACCOUNT_ID_INVOICE\n,a.VENDOR_ACCOUNT_ID_ORDER\n,a.WAREHOUSE_ID\n,a.PURCHASE_HEADER_SHIP_BY_DATE\n,a.PURCHASE_LINE_DELIVERY_DATE\n,a.PURCHASE_LINE_SHIP_BY_DATE\n,a.PURCHASE_ORDER_ID\n,a.LINE_NUMBER\n,a.QTY_INVENTORY_UNIT\n,a.PURCHASE_UNIT\n,a.LINE_AMOUNT\n,a.ASSET_TRANSACTION_TYPE\n,a.DELIVERY_TYPE\n,a.DOCUMENT_STATUS\n,a.IS_STOCKED_PRODUCT\n,a.PURCHASE_LINE_STATUS\n,a.PURCHASE_HEADER_STATUS\n,a.PURCHASE_TYPE\n,a.DROP_SHIPMENT\n,a.RECORD_ID_LOCATION\n,a.INVOICE_DATE\n,a.INVENTORY_DATE\n,a.TRANSACTION_CODE\n,a.PROCUREMENT_CATEGORY\n,a.TAX_ITEM_GROUP_ID\n,hash(a.source_name, '~', a.legal_entity, '~', a.invent_trans_id, '~', a.currency_code, '~', a.default_dimension, '~', to_char(a.qty_ordered), '~', a.item_id, '~', a.unit_of_measure_code_inventory, '~', to_char(a.qty_purchase_unit), '~', a.unit_of_measure_code_purchase, '~', to_char(a.price_unit), '~', to_char(a.purch_price), '~', to_char(a.net_amount_transaction_currency), '~', to_char(a.accounting_date, 'yyyymmddhh24missff3'), '~', to_char(a.earliest_confirmed_date, 'yyyymmddhh24missff3'), '~', a.inventory_dimension_id, '~', to_char(a.purchase_header_local_created_date, 'yyyymmdd'), '~', to_char(a.purchase_header_utc_created_date, 'yyyymmddhh24missff3'), '~', to_char(a.purchase_line_local_created_date, 'yyyymmdd'), '~', to_char(a.purchase_line_utc_created_date, 'yyyymmddhh24missff3'), '~', to_char(a.purchase_header_delivery_date, 'yyyymmddhh24missff3'), '~', a.delivery_mode_id, '~', a.return_reason_id, '~', to_char(a.record_id_orderer), '~', to_char(a.record_id_requester), '~', a.vendor_account_id_invoice, '~', a.vendor_account_id_order, '~', a.warehouse_id, '~', to_char(a.purchase_header_ship_by_date, 'yyyymmddhh24missff3'), '~', to_char(a.purchase_line_delivery_date, 'yyyymmddhh24missff3'), '~', to_char(a.purchase_line_ship_by_date, 'yyyymmddhh24missff3'),  '~', a.purchase_order_id, '~', to_char(a.line_number), '~', to_char(a.qty_inventory_unit), '~', a.purchase_unit, '~', to_char(a.line_amount), '~', a.asset_transaction_type, '~', a.delivery_type, '~', a.document_status, '~', a.is_stocked_product, '~', a.purchase_line_status, '~', a.purchase_header_status, '~', a.purchase_type, '~', a.drop_shipment, '~', to_char(a.record_id_location), '~', to_char(a.invoice_date, 'yyyymmdd'), '~', to_char(a.inventory_date, 'yyyymmdd'), '~',a.transaction_code, '~', to_char(a.procurement_category), '~',a.tax_item_group_id) AS  HK_HASH_KEY\n, a.hk_source_name as HK_SOURCE_NAME\n, false::boolean as HK_SOFT_DELETE_FLAG\n, a.hk_source_created_timestamp as HK_SOURCE_CREATED_TIMESTAMP, a.hk_source_last_updated_timestamp as HK_SOURCE_LAST_UPDATED_TIMESTAMP, a.hk_created_job_run_id as HK_CREATED_JOB_RUN_ID, a.hk_last_updated_job_run_id as HK_LAST_UPDATED_JOB_RUN_ID\n, current_timestamp::timestamp_tz as HK_CREATED_TIMESTAMP\n, current_timestamp::timestamp_tz as HK_LAST_UPDATED_TIMESTAMP\n, uuid_string()::varchar as HK_WAREHOUSE_ID\nFROM\n(SELECT     'AXNALA'::varchar as SOURCE_NAME\n            , nvl(LEGAL_ENTITY,'') as LEGAL_ENTITY\n            , nvl(INVENT_TRANS_ID, '') AS INVENT_TRANS_ID  \n            , case when nvl(SOURCE_NAME, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME)\n\t\t\t\tend::number as DIM_SOURCE_SYSTEM_SNKEY\n\t\t\t, case when nvl(ACCOUNTING_DATE, '1950-01-01') = '1950-01-01' then -2\n\t\t\t\telse hash('', '~', to_char(ACCOUNTING_DATE, 'yyyymmdd'))\n\t\t\t\tend::number as ACCOUNTING_DATE_DIM_DATE_SNKEY               \n\t\t\t, case when nvl(INVENTORY_DATE, '1950-01-01') = '1950-01-01' then -2\n\t\t\t\telse hash('', '~', to_char(INVENTORY_DATE, 'yyyymmdd'))\n\t\t\t\tend::number as INVENTORY_DATE_DIM_DATE_SNKEY\n\t\t\t, case when nvl(INVOICE_DATE, '1950-01-01') = '1950-01-01' then -2\n\t\t\t\telse hash('', '~', to_char(INVOICE_DATE, 'yyyymmdd'))\n\t\t\t\tend::number as INVOICE_DATE_DIM_DATE_SNKEY\n\t\t\t, case when nvl(CURRENCY_CODE, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', CURRENCY_CODE)\n\t\t\t\tend::number as DIM_CURRENCY_SNKEY\n\t\t\t, case when nvl(DEFAULT_DIMENSION, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', DEFAULT_DIMENSION)\n\t\t\t\tend::number as DIM_DEFAULT_DIMENSION_SNKEY\n\t\t\t, case when nvl(LEGAL_ENTITY, '') = '' or nvl(DELIVERY_MODE_ID, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY, '~', DELIVERY_MODE_ID)\n\t\t\t\tend::number as DIM_DELIVERY_MODE_SNKEY\n         , case when nvl(LEGAL_ENTITY,'') = '' or nvl(TRANSACTION_CODE,'') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY, '~', TRANSACTION_CODE)\n\t\t\t\tend::number as DIM_INTRA_STAT_TRANSACTION_CODE_SNKEY\n\t\t\t, case when nvl(LEGAL_ENTITY, '') = '' or nvl(INVENTORY_DIMENSION_ID, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY, '~', INVENTORY_DIMENSION_ID)\n\t\t\t\tend::number as DIM_INVENTORY_SNKEY\n\t\t\t, case when nvl(LEGAL_ENTITY, '') = '' or nvl(ITEM_ID, '') = '' then -2\n\t\t\t\telse hash('', '~', LEGAL_ENTITY, '~', ITEM_ID)\t-- (NOTE: ITEM_KEY is unique across all source systems; therefore, this field will always be set to '')\n\t\t\t\tend::number as DIM_ITEM_SNKEY\n\t\t\t, case when nvl(LEGAL_ENTITY, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY)\n\t\t\t\tend::number as DIM_LEGAL_ENTITY_SNKEY\n\t\t\t, case when nvl(RECORD_ID_LOCATION, 0) = 0 then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', to_char(RECORD_ID_LOCATION))\n\t\t\t\tend::number as DIM_LOCATION_SNKEY\n\t\t\t, case when  nvl(PROCUREMENT_CATEGORY, 0) = 0 then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', to_char(PROCUREMENT_CATEGORY)) \n\t\t\t\tend::number as DIM_PROCUREMENT_CATEGORY_SNKEY\n\t\t\t, case when nvl(LEGAL_ENTITY, '') = '' or nvl(PURCHASE_ORDER_ID, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY, '~', PURCHASE_ORDER_ID)\n\t\t\t\tend::number as DIM_PURCHASE_ORDER_SNKEY\n\t\t\t, case when nvl(LEGAL_ENTITY, '') = '' or nvl(RETURN_REASON_ID, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY, '~', RETURN_REASON_ID)\n\t\t\t\tend::number as DIM_RETURN_REASON_SNKEY\n\t\t\t, case when nvl(LEGAL_ENTITY,'') = '' or nvl(TAX_ITEM_GROUP_ID,'') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY, '~', nvl(TAX_ITEM_GROUP_ID,''))\n\t\t\t\tend::number as DIM_TAX_ITEM_GROUP_SNKEY\n\t\t\t, case when nvl(UNIT_OF_MEASURE_CODE_INVENTORY,'') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', UNIT_OF_MEASURE_CODE_INVENTORY)\n\t\t\t\tend::number as DIM_UNIT_OF_MEASURE_INVENTORY_SNKEY\n\t\t\t, case when nvl(UNIT_OF_MEASURE_CODE_PURCHASE,'') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', UNIT_OF_MEASURE_CODE_PURCHASE)\n\t\t\t\tend::number as DIM_UNIT_OF_MEASURE_PURCHASE_SNKEY\n\t\t\t, case when nvl(LEGAL_ENTITY,'') = '' or nvl(VENDOR_ACCOUNT_ID_INVOICE,'') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY, '~', VENDOR_ACCOUNT_ID_INVOICE)\n\t\t\t\tend::number as DIM_VENDOR_INVOICE_SNKEY\n\t\t\t, case when nvl(LEGAL_ENTITY,'') = '' or nvl(VENDOR_ACCOUNT_ID_ORDER,'') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY, '~', VENDOR_ACCOUNT_ID_ORDER)\n\t\t\t\tend::number as DIM_VENDOR_ORDER_SNKEY\n\t\t\t, case when nvl(LEGAL_ENTITY,'') = '' or nvl(WAREHOUSE_ID,'') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY, '~', WAREHOUSE_ID)\n\t\t\t\tend::number as DIM_WAREHOUSE_SNKEY\n\t\t\t, case when nvl(RECORD_ID_ORDERER, 0) = 0 then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', to_char(RECORD_ID_ORDERER))\n\t\t\t\tend::number as DIM_WORKER_ORDERER_SNKEY\n\t\t\t, case when nvl(RECORD_ID_REQUESTER, 0) = 0 then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', to_char(RECORD_ID_REQUESTER))\n\t\t\t\tend::number as DIM_WORKER_REQUESTER_SNKEY\n            ,NVL(CURRENCY_CODE,'') AS CURRENCY_CODE\n            ,NVL(DEFAULT_DIMENSION,'') AS DEFAULT_DIMENSION\n            ,NVL(QTY_INVENTORY_UNIT, 0) AS QTY_ORDERED\n            ,NVL(ITEM_ID,'') AS ITEM_ID\n            ,NVL(UNIT_OF_MEASURE_CODE_INVENTORY,'') AS UNIT_OF_MEASURE_CODE_INVENTORY\n            ,NVL(QTY_PURCHASE_UNIT,0) AS QTY_PURCHASE_UNIT\n            ,NVL(UNIT_OF_MEASURE_CODE_PURCHASE,'') AS UNIT_OF_MEASURE_CODE_PURCHASE\n            ,NVL(PRICE_UNIT,0) AS PRICE_UNIT\n            ,NVL(PURCH_PRICE,0) AS PURCH_PRICE\n            ,NVL(NET_AMOUNT_TRANSACTION_CURRENCY,0) AS NET_AMOUNT_TRANSACTION_CURRENCY\n            ,case when nvl(ACCOUNTING_DATE, '1900-01-01') in ('1900-01-01') then '1950-01-01'\n                when ACCOUNTING_DATE < MIN_DATE_VALUE then '1951-12-31'\n                when ACCOUNTING_DATE > MAX_DATE_VALUE then '9951-12-31'\n                else ACCOUNTING_DATE\n            end::TIMESTAMP_TZ AS ACCOUNTING_DATE\n            ,case when nvl(EARLIEST_CONFIRMED_DATE, '1900-01-01') in ('1900-01-01') then '1950-01-01'\n                when EARLIEST_CONFIRMED_DATE < MIN_DATE_VALUE then '1951-12-31'\n                when EARLIEST_CONFIRMED_DATE > MAX_DATE_VALUE then '9951-12-31'\n                else EARLIEST_CONFIRMED_DATE\n            end::TIMESTAMP_TZ AS EARLIEST_CONFIRMED_DATE\n            ,NVL(INVENTORY_DIMENSION_ID,'') AS INVENTORY_DIMENSION_ID\n            ,NVL( PURCHASE_HEADER_LOCAL_CREATED_DATE,'1900-01-01') AS PURCHASE_HEADER_LOCAL_CREATED_DATE\n            ,NVL(PURCHASE_HEADER_UTC_CREATED_DATE,'1900-01-01') AS PURCHASE_HEADER_UTC_CREATED_DATE\n            ,NVL(PURCHASE_LINE_LOCAL_CREATED_DATE,'1900-01-01') AS PURCHASE_LINE_LOCAL_CREATED_DATE\n            ,NVL(PURCHASE_LINE_UTC_CREATED_DATE,'1900-01-01') AS PURCHASE_LINE_UTC_CREATED_DATE\n            ,NVL(PURCHASE_HEADER_DELIVERY_DATE,'1900-01-01') AS PURCHASE_HEADER_DELIVERY_DATE\n            ,NVL(DELIVERY_MODE_ID,'') AS DELIVERY_MODE_ID\n            ,NVL(RETURN_REASON_ID,'') AS RETURN_REASON_ID\n            ,NVL(RECORD_ID_ORDERER,0) AS RECORD_ID_ORDERER\n            ,NVL(RECORD_ID_REQUESTER,0) AS RECORD_ID_REQUESTER\n            ,NVL(VENDOR_ACCOUNT_ID_INVOICE,'') AS VENDOR_ACCOUNT_ID_INVOICE\n            ,NVL(VENDOR_ACCOUNT_ID_ORDER,'') AS VENDOR_ACCOUNT_ID_ORDER\n            ,NVL(WAREHOUSE_ID,'') AS WAREHOUSE_ID\n            ,NVL(PURCHASE_HEADER_SHIP_BY_DATE,'1900-01-01') AS PURCHASE_HEADER_SHIP_BY_DATE\n            ,NVL(PURCHASE_LINE_DELIVERY_DATE,'1900-01-01') AS PURCHASE_LINE_DELIVERY_DATE\n            ,NVL(PURCHASE_LINE_SHIP_BY_DATE,'1900-01-01') AS PURCHASE_LINE_SHIP_BY_DATE\n            ,NVL(PURCHASE_ORDER_ID,'') AS PURCHASE_ORDER_ID\n            ,NVL(LINE_NUMBER,0) AS LINE_NUMBER\n            ,NVL(QTY_INVENTORY_UNIT,0) AS QTY_INVENTORY_UNIT\n            ,NVL(PURCHASE_UNIT,'') AS PURCHASE_UNIT\n            ,NVL(NET_AMOUNT_TRANSACTION_CURRENCY,0) AS LINE_AMOUNT\n            ,NVL(ASSET_TRANSACTION_TYPE,'') AS ASSET_TRANSACTION_TYPE\n            ,NVL(DELIVERY_TYPE,'') AS DELIVERY_TYPE\n            ,NVL(DOCUMENT_STATUS,'') AS DOCUMENT_STATUS\n            ,NVL(IS_STOCKED_PRODUCT,'') AS IS_STOCKED_PRODUCT\n            ,NVL(PURCHASE_LINE_STATUS,'') AS PURCHASE_LINE_STATUS\n            ,NVL(PURCHASE_HEADER_STATUS,'') AS PURCHASE_HEADER_STATUS\n            ,NVL(PURCHASE_TYPE,'') AS PURCHASE_TYPE\n            ,NVL(DROP_SHIPMENT,'') AS DROP_SHIPMENT\n            ,NVL(RECORD_ID_LOCATION,0) AS RECORD_ID_LOCATION\n            ,case when nvl(INVOICE_DATE, '1900-01-01') in ('1900-01-01') then '1950-01-01'\n                when INVOICE_DATE < MIN_DATE_VALUE then '1951-12-31'\n                when INVOICE_DATE > MAX_DATE_VALUE then '9951-12-31'\n                else INVOICE_DATE\n            end::DATE AS INVOICE_DATE\n            ,case when nvl(INVENTORY_DATE, '1900-01-01') in ('1900-01-01') then '1950-01-01'\n                when INVENTORY_DATE < MIN_DATE_VALUE then '1951-12-31'\n                when INVENTORY_DATE > MAX_DATE_VALUE then '9951-12-31'\n                else INVENTORY_DATE\n            end::DATE AS INVENTORY_DATE\n\t\t\t, NVL(TRANSACTION_CODE,'') AS TRANSACTION_CODE\n\t\t\t, NVL(PROCUREMENT_CATEGORY,0) AS PROCUREMENT_CATEGORY\n\t\t\t, NVL(TAX_ITEM_GROUP_ID,'') AS TAX_ITEM_GROUP_ID\n            , nvl(b.dw_sourcecode, '')::varchar as HK_SOURCE_NAME\n\t\t\t, '1950-01-01 00:00:00'::timestamp_tz as HK_SOURCE_CREATED_TIMESTAMP\n\t\t\t, nvl(b.dw_timestamp, '1950-01-01 00:00:00')::timestamp_tz as HK_SOURCE_LAST_UPDATED_TIMESTAMP\n\t\t\t, '-1'::varchar as HK_CREATED_JOB_RUN_ID\n\t\t\t, nvl(b.dw_batch, '-1')::varchar as HK_LAST_UPDATED_JOB_RUN_ID\n            FROM \n(SELECT\nHK_SOURCE_NAME,\nHK_JOB_RUN_ID,\nHK_CREATED_TIMESTAMP,\nHK_WAREHOUSE_ID,\nACCOUNTINGDATE AS ACCOUNTING_DATE,\nEARLIESTCONFIRMEDDATE AS EARLIEST_CONFIRMED_DATE,\nPURCHASEHEADERLOCALCREATEDDATE AS PURCHASE_HEADER_LOCAL_CREATED_DATE,\nPURCHASEHEADERUTCCREATEDDATE AS PURCHASE_HEADER_UTC_CREATED_DATE,\nPURCHASELINELOCALCREATEDDATE AS PURCHASE_LINE_LOCAL_CREATED_DATE,\nPURCHASELINEUTCCREATEDDATE AS PURCHASE_LINE_UTC_CREATED_DATE,\nHEADERDELIVERYDATE AS PURCHASE_HEADER_DELIVERY_DATE,\nHEADERSHIPBYDATE AS PURCHASE_HEADER_SHIP_BY_DATE,\nLINEDELIVERYDATE AS PURCHASE_LINE_DELIVERY_DATE,\nLINESHIPBYDATE AS PURCHASE_LINE_SHIP_BY_DATE,\nLEGALENTITY AS LEGAL_ENTITY,\nINVENTORYTRANSACTIONID AS INVENT_TRANS_ID,\nPURCHASEORDERID AS PURCHASE_ORDER_ID,\nLINENUMBER AS LINE_NUMBER,\nQTYINVENTORYUNIT AS QTY_INVENTORY_UNIT,\nINVENTORYUNIT,\nQTYPURCHASEUNIT AS QTY_PURCHASE_UNIT,\nPURCHASEUNIT AS PURCHASE_UNIT ,\nPRICEUNIT AS PRICE_UNIT,\nPURCHASEPRICE AS PURCH_PRICE,\nNETAMOUNTTRANSACTIONCURRENCY AS NET_AMOUNT_TRANSACTION_CURRENCY,\nINCREMENTALTIMESTAMP,\nDROPSHIPMENT AS DROP_SHIPMENT,\nCURRENCYCODE AS CURRENCY_CODE,\nDEFAULTDIMENSION AS DEFAULT_DIMENSION,\nDELIVERYMODEID AS DELIVERY_MODE_ID,\nINTRASTATTRANSACTIONCODE AS TRANSACTION_CODE,\nINVENTORYDIMENSIONID INVENTORY_DIMENSION_ID,\nDELIVERYPOSTALADDRESS AS RECORD_ID_LOCATION,\nPROCUREMENTCATEGORY_RECORDID AS PROCUREMENT_CATEGORY,\nRETURNREASONID AS RETURN_REASON_ID,\nTAXITEMGROUPID AS TAX_ITEM_GROUP_ID,\nINVENTORYUNITOFMEASURECODE AS UNIT_OF_MEASURE_CODE_INVENTORY,\nPURCHASEUNITOFMEASURECODE AS UNIT_OF_MEASURE_CODE_PURCHASE,\nINVOICEACCOUNT AS VENDOR_ACCOUNT_ID_INVOICE,\nORDERACCOUNT AS VENDOR_ACCOUNT_ID_ORDER,\nRECORD_ID_ORDERER,\nRECORD_ID_REQUESTER,\nITEMID AS ITEM_ID,\nINVENTDATE AS INVENTORY_DATE,\nINVENTLOCATIONID AS WAREHOUSE_ID,\nASSETTRANSACTIONTYPE AS ASSET_TRANSACTION_TYPE,\nDELIVERYTYPE AS DELIVERY_TYPE,\nDOCUMENTSTATUS AS DOCUMENT_STATUS,\nISSTOCKEDPRODUCT AS IS_STOCKED_PRODUCT,\nPURCHASELINESTATUS AS PURCHASE_LINE_STATUS,\nPURCHASEHEADERSTATUS AS PURCHASE_HEADER_STATUS ,\nPURCHASETYPE AS PURCHASE_TYPE,\nINVOICEDATE AS INVOICE_DATE,\n-- TRANSACTIONCODE AS TRANSACTION_CODE,\n-- PROCUREMENTCATEGORY AS PROCUREMENT_CATEGORY,\n-- TAXITEMGROUP AS TAX_ITEM_GROUP_ID,\nDW_BATCH,\nDW_SOURCECODE,\nDW_TIMESTAMP\nFROM @{pipeline().globalParameters.environment}_RAW.EDW_DWH.FACTPURCHASEORDERS) b\n\t\t\tinner join (select min(date_value) as MIN_DATE_VALUE\n\t\t\t\t\t\t\t, max(date_value) as MAX_DATE_VALUE\n\t\t\t\t\t\tfrom global.DIM_DATE\n\t\t\t\t\t\twhere date_value not in ('1950-01-01', '1951-12-31', '9000-01-01', '9951-12-31')) dd1 on\n\t\t\t\t1=1\n\t\t) a\n\tleft join global.DIM_SOURCE_SYSTEM dss1 on\n\t\ta.dim_source_system_snkey = dss1.dim_source_system_snkey\n\tleft join global.DIM_DATE dd1 on\n\t\ta.inventory_date_dim_date_snkey = dd1.dim_date_snkey\n\tleft join global.DIM_DATE dd2 on\n\t\ta.invoice_date_dim_date_snkey = dd2.dim_date_snkey\n    left join global.DIM_DATE dd3 on\n\t\ta.ACCOUNTING_DATE_DIM_DATE_SNKEY = dd3.dim_date_snkey\n\tleft join global.DIM_CURRENCY dcurr1 on\n\t\ta.dim_currency_snkey = dcurr1.dim_currency_snkey\n\tleft join global.DIM_DEFAULT_DIMENSION ddim1 on\n\t\ta.dim_default_dimension_snkey = ddim1.dim_default_dimension_snkey\n\tleft join global.DIM_DELIVERY_MODE ddm1 on\n\t\ta.dim_delivery_mode_snkey = ddm1.dim_delivery_mode_snkey\n\tleft join global.DIM_INTRA_STAT_TRANSACTION_CODE distc1 on\n\t\ta.dim_intra_stat_transaction_code_snkey = distc1.dim_intra_stat_transaction_code_snkey\n\tleft join global.DIM_INVENTORY dinv1 on\n\t\ta.dim_inventory_snkey = dinv1.dim_inventory_snkey\n\tleft join global.DIM_ITEM dit1 on\n\t\ta.dim_item_snkey = dit1.dim_item_snkey\n\tleft join global.DIM_LEGAL_ENTITY dle1 on\n\t\ta.dim_legal_entity_snkey = dle1.dim_legal_entity_snkey\n\tleft join global.DIM_LOCATION dl1 on\n\t\ta.dim_location_snkey = dl1.dim_location_snkey\n\tleft join global.DIM_SALES_PROCUREMENT_CATEGORY dspc1 on\n\t\ta.dim_procurement_category_snkey = dspc1.dim_sales_procurement_category_snkey\n\tleft join global.DIM_PURCHASE_ORDER dpo1 on\n\t\ta.dim_purchase_order_snkey = dpo1.dim_purchase_order_snkey\n\tleft join global.DIM_RETURN_REASON drr1 on\n\t\ta.dim_return_reason_snkey = drr1.dim_return_reason_snkey\n\tleft join global.DIM_TAX_ITEM_GROUP dtig1 on\n\t\ta.dim_tax_item_group_snkey = dtig1.dim_tax_item_group_snkey\n\tleft join global.DIM_UNIT_OF_MEASURE duomi1 on\n\t\ta.dim_unit_of_measure_inventory_snkey = duomi1.dim_unit_of_measure_snkey\n\tleft join global.DIM_UNIT_OF_MEASURE duomp1 on\n\t\ta.dim_unit_of_measure_purchase_snkey = duomp1.dim_unit_of_measure_snkey\n\tleft join global.DIM_VENDOR dvi1 on\n\t    a.dim_vendor_invoice_snkey = dvi1.dim_vendor_snkey and\n\t    a.INVOICE_DATE >= dvi1.hk_effective_start_timestamp and\n\t\ta.INVOICE_DATE < dvi1.hk_effective_end_timestamp\n\tleft join global.DIM_VENDOR dvo1 on\n\t\ta.dim_vendor_order_snkey = dvo1.dim_vendor_snkey and\n\t\ta.INVOICE_DATE >= dvo1.hk_effective_start_timestamp and\n\t    a.INVOICE_DATE < dvo1.hk_effective_end_timestamp\n\tleft join global.DIM_WAREHOUSE dwh1 on\n\t\ta.DIM_WAREHOUSE_SNKEY = dwh1.DIM_WAREHOUSE_SNKEY\n    left join global.DIM_WORKER dwo1 on\n\t\ta.dim_worker_orderer_snkey = dwo1.dim_worker_snkey\n\tleft join global.DIM_WORKER dwr1 on\n\t\ta.dim_worker_requester_snkey = dwr1.dim_worker_snkey\n;",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "FACTPURCHASEORDERS"
					},
					"p_temp_directory": {
						"type": "string",
						"defaultValue": "temp_files"
					},
					"p_tgt_schema_nm": {
						"type": "string",
						"defaultValue": "EDW_DWH"
					},
					"p_curate_table_name": {
						"type": "string",
						"defaultValue": "FACT_PURCHASE_ORDERS"
					}
				},
				"folder": {
					"name": "history_fact"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_edw_hist_fact_purchase_receipts')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy from sqlserver to ADLS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select --top (10)\nf1.DW_Id as DW_ID,\n f1.CurrencyKey as CURRENCYKEY,\n f1.DataSourceKey as DATASOURCEKEY,\n f1.DefaultDimensionKey as DEFAULTDIMENSIONKEY,\n f1.DeliveryModeKey as DELIVERYMODEKEY,\n f1.IntrastatTransactionCodeKey as INTRASTATTRANSACTIONCODEKEY,\n f1.InventoryKey as INVENTORYKEY,\n f1.ItemKey as ITEMKEY,\n f1.LegalEntityKey as LEGALENTITYKEY,\n f1.LocationKey as LOCATIONKEY,\n f1.ProcurementCategoryKey as PROCUREMENTCATEGORYKEY,\n f1.PurchaseOrderKey as PURCHASEORDERKEY,\n f1.PurchaseOrderDetailsKey as PURCHASEORDERDETAILSKEY,\n f1.ReturnReasonKey as RETURNREASONKEY,\n f1.UnitOfMeasurePurchaseKey as UNITOFMEASUREPURCHASEKEY,\n f1.UnitOfMeasureInventoryKey as UNITOFMEASUREINVENTORYKEY,\n f1.VendorInvoiceKey as VENDORINVOICEKEY,\n f1.VendorInvoiceHistoryKey as VENDORINVOICEHISTORYKEY,\n f1.VendorOrderKey as VENDORORDERKEY,\n f1.VendorOrderHistoryKey as VENDORORDERHISTORYKEY,\n f1.WorkerOrdererKey as WORKERORDERERKEY,\n f1.WorkerRequesterKey as WORKERREQUESTERKEY,\nf1.AccountingDate as ACCOUNTINGDATE,\nf1.InventoryDate as INVENTORYDATE,\nf1.PurchaseLineExpectedDeliveryDate as PURCHASELINEEXPECTEDDELIVERYDATE,\nf1.ReceivedDate as RECEIVEDDATE,\nf1.TargetDeliveryDate as TARGETDELIVERYDATE,\n f1.RecordID as RECORDID,\nf1.InventoryTransactionID as INVENTORYTRANSACTIONID,\nf1.LegalEntity as LEGALENTITY,\nf1.PurchaseOrderID as PURCHASEORDERID,\nf1.PurchaseReceiptID as PURCHASERECEIPTID,\n f1.LineNumber as LINENUMBER,\n f1.PurchaseLineNumber as PURCHASELINENUMBER,\n f1.QtyInventoryUnit as QTYINVENTORYUNIT,\nf1.InventoryUnit as INVENTORYUNIT,\n f1.QtyPurchaseUnit as QTYPURCHASEUNIT,\nf1.PurchaseUnit as PURCHASEUNIT,\n f1.NetAmountTransactionCurrency as NETAMOUNTTRANSACTIONCURRENCY,\nf1.IncrementalTimeStamp as INCREMENTALTIMESTAMP,\ncase when f1.CurrencyKey in (-1, -2) then f2.currencycode else dcurr1.currencycode end as CURRENCYCODE,\n cast(case when f1.defaultdimensionkey in (-1, -2) then f2.defaultdimension else dd1.defaultdimension end as varchar) as DEFAULTDIMENSION,\ncase when f1.deliverymodekey in (-1, -2) then f2.dlvmode else ddm1.deliverymodeid end as DELIVERYMODEID,\ncase when f1.intrastattransactioncodekey in (-1, -2) then f2.transactioncode else distc1.intrastattransactioncode end as INTRASTATTRANSACTIONCODE,\ncase when f1.InventoryKey in (-1, -2) then f2.inventdimid else dinv1.inventorydimensionid end as INVENTORYDIMENSIONID,\ncase when f1.ItemKey in (-1, -2) then f2.itemid else dit1.itemid end as ITEMID,\n case when f1.LocationKey in (-1, -2) then f2.deliverypostaladdress else dl1.recordid end as RECORDIDLOCATION,\n case when f1.ProcurementCategoryKey in (-1, -2) then f2.procurementcategory else dspc1.recordid end  as PROCUREMENTCATEGORY,\ncase when f1.ReturnReasonKey in (-1, -2) then f2.returnreasoncodeid else drr1.returnreasonid end as RETURNREASONID,\ncase when f1.UnitOfMeasureInventoryKey in (-1, -2) then f2.unitid else duomi1.unitofmeasurecode end as UNITOFMEASURECODEINVENTORY,\ncase when f1.UnitOfMeasurePurchaseKey in (-1, -2) then f2.purchunit else duomp1.unitofmeasurecode end as UNITOFMEASURECODEPURCHASE,\ncase when f1.VendorInvoiceHistoryKey in (-1, -2) then f2.invoiceaccount else dvi1.vendoraccountid end as VENDORACCOUNTIDINVOICE,\ncase when f1.VendorOrderHistoryKey in (-1, -2) then f2.orderaccount else dvo1.vendoraccountid end as VENDORACCOUNTIDORDER,\n case when f1.WorkerOrdererKey in (-1, -2) then f2.workerpurchplacer else dwo1.recordid end  as RECORDIDORDERER,\n case when f1.WorkerRequesterKey in (-1, -2) then f2.requester else dwr1.recordid end as RECORDIDREQUESTER,\ndpod1.assettransactiontype as ASSETTRANSACTIONTYPE,\ndpod1.deliverytype as DELIVERYTYPE,\ndpod1.documentstatus as DOCUMENTSTATUS,\ndpod1.isstockedproduct as ISSTOCKEDPRODUCT,\ndpod1.purchaselinestatus as PURCHASELINESTATUS,\ndpod1.purchaseheaderstatus as PURCHASEHEADERSTATUS,\ndpod1.purchasetype as PURCHASETYPE,\n f1.DW_Batch as DW_BATCH,\nf1.DW_SourceCode as DW_SOURCECODE,\nf1.DW_TimeStamp as DW_TIMESTAMP\n\n\n\tfrom dbo.FACTPURCHASERECEIPTS f1 with (nolock)\n\tleft join edw_hka.dbo.FACTPURCHASERECEIPTS f2 with (nolock) on\n\t\tf1.RecordID = f2.RECID\n\tleft join dbo.DIMCURRENCY dcurr1 with (nolock) on\n\t\tf1.currencykey = dcurr1.currencykey\n\tleft join edw_hka.dbo.DIMDEFAULTDIMENSION dd1 with (nolock) on\n\t\tf1.defaultdimensionkey = dd1.defaultdimensionkey\n\tleft join dbo.DIMDELIVERYMODE ddm1 with (nolock) on\n\t\tf1.deliverymodekey = ddm1.deliverymodekey\n\tleft join dbo.DIMINTRASTATTRANSACTIONCODE distc1 with (nolock) on\n\t\tf1.intrastattransactioncodekey = distc1.intrastattransactioncodekey\n\tleft join dbo.DIMINVENTORY dinv1 with (nolock) on\n\t\tf1.inventorykey = dinv1.inventorykey\n\tleft join dbo.DIMITEM dit1 with (nolock) on\n\t\tf1.itemkey = dit1.itemkey\n\tleft join dbo.DIMLOCATION dl1 with (nolock) on\n\t\tf1.locationkey = dl1.locationkey\n\tleft join dbo.DIMSALESPROCUREMENTCATEGORY dspc1 with (nolock) on\n\t\tf1.procurementcategorykey = dspc1.procurementcategorykey\n\tleft join dbo.DIMRETURNREASON drr1 with (nolock) on\n\t\tf1.returnreasonkey = drr1.returnreasonkey\n\tleft join dbo.DIMUNITOFMEASURE duomi1 with (nolock) on\n\t\tf1.unitofmeasureinventorykey = duomi1.unitofmeasurekey\n\tleft join dbo.DIMUNITOFMEASURE duomp1 with (nolock) on\n\t\tf1.unitofmeasurepurchasekey = duomp1.unitofmeasurekey\n\tleft join dbo.DIMVENDOR dvi1 with (nolock) on\n\t\tf1.vendorinvoicehistorykey = dvi1.vendorhistorykey\n\tleft join dbo.DIMVENDOR dvo1 with (nolock) on\n\t\tf1.vendororderhistorykey = dvo1.vendorhistorykey\n\tleft join dbo.DIMWORKER dwo1 with (nolock) on\n\t\tf1.workerordererkey = dwo1.workerkey\n\tleft join dbo.DIMWORKER dwr1 with (nolock) on\n\t\tf1.workerrequesterkey = dwr1.workerkey\n\t\n\tleft join dbo.DIMPURCHASEORDERDETAILS dpod1 with (nolock) on\n\t\tf1.purchaseorderdetailskey = dpod1.purchaseorderdetailskey;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_server",
								"type": "DatasetReference",
								"parameters": {
									"p_src_table_name": {
										"value": "@pipeline().parameters.p_src_table_nm",
										"type": "Expression"
									},
									"p_src_schema_name": {
										"value": "@pipeline().parameters.p_src_schema_nm",
										"type": "Expression"
									},
									"p_ls_serverName": {
										"value": "@pipeline().globalParameters.edw_sql_serverName",
										"type": "Expression"
									},
									"p_ls_dbName": {
										"value": "@pipeline().globalParameters.edw_sql_dbName",
										"type": "Expression"
									},
									"p_ls_sqlUsername": {
										"value": "@pipeline().globalParameters.sql_userName",
										"type": "Expression"
									},
									"p_ls_sqlPassword": {
										"value": "@pipeline().globalParameters.sql_password",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_parq_edw",
								"type": "DatasetReference",
								"parameters": {
									"p_root_system": {
										"value": "@pipeline().globalParameters.rootDir",
										"type": "Expression"
									},
									"p_directory": {
										"value": "@pipeline().parameters.p_temp_directory",
										"type": "Expression"
									},
									"p_file_name": {
										"value": "@concat(toUpper(pipeline().parameters.p_curate_table_name),'_HIST_',substring(string(utcNow()),0,4),'_',substring(string(utcNow()),5,2),'_',substring(string(utcNow()),8,2),'.snappy.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "ADLS to Snowflake RAW with HK columns",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy from sqlserver to ADLS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_load_edw_history",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"adlsSource": {
										"p_root_system": {
											"value": "@pipeline().globalParameters.rootDir",
											"type": "Expression"
										},
										"p_directory": {
											"value": "@pipeline().parameters.p_temp_directory",
											"type": "Expression"
										},
										"p_file_name": {
											"value": "@concat(toUpper(pipeline().parameters.p_curate_table_name),'_HIST_',substring(string(utcNow()),0,4),'_',substring(string(utcNow()),5,2),'_',substring(string(utcNow()),8,2),'.snappy.parquet')",
											"type": "Expression"
										}
									},
									"snowflakeRawTarget": {
										"p_tgt_table_name": {
											"value": "@pipeline().parameters.p_src_table_nm",
											"type": "Expression"
										},
										"p_tgt_schema_name": {
											"value": "@pipeline().parameters.p_tgt_schema_nm",
											"type": "Expression"
										},
										"p_ls_DbName": {
											"value": "@pipeline().globalParameters.snow_rawDb",
											"type": "Expression"
										},
										"p_ls_Env": {
											"value": "@pipeline().globalParameters.environment",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "IR-Snowflake-NALA",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "RAW to CURATE SP",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ADLS to Snowflake RAW with HK columns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_curateDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "truncate table global.FACT_PURCHASE_RECEIPTS;\n\ninsert into global.FACT_PURCHASE_RECEIPTS (fact_purchase_receipts_key, source_name, record_id, dim_source_system_key, dim_source_system_snkey, accounting_date_dim_date_key, accounting_date_dim_date_snkey, inventory_date_dim_date_key, inventory_date_dim_date_snkey, purchase_line_expected_delivery_date_dim_date_key, purchase_line_expected_delivery_date_dim_date_snkey, received_date_dim_date_key, received_date_dim_date_snkey, target_delivery_date_dim_date_key, target_delivery_date_dim_date_snkey, dim_currency_key, dim_currency_snkey, dim_default_dimension_key, dim_default_dimension_snkey, dim_delivery_mode_key, dim_delivery_mode_snkey, dim_intra_stat_transaction_code_key, dim_intra_stat_transaction_code_snkey, dim_inventory_key, dim_inventory_snkey, dim_item_key, dim_item_snkey, dim_legal_entity_key, dim_legal_entity_snkey, dim_location_key, dim_location_snkey, dim_procurement_category_key, dim_procurement_category_snkey, dim_purchase_order_key, dim_purchase_order_snkey, dim_return_reason_key, dim_return_reason_snkey, dim_unit_of_measure_inventory_key, dim_unit_of_measure_inventory_snkey, dim_unit_of_measure_purchase_key, dim_unit_of_measure_purchase_snkey, dim_vendor_invoice_key, dim_vendor_invoice_snkey, dim_vendor_order_key, dim_vendor_order_snkey, dim_worker_orderer_key, dim_worker_orderer_snkey, dim_worker_requester_key, dim_worker_requester_snkey, currency_code, default_dimension, delivery_mode_id, intra_stat_transaction_code, inventory_dimension_id, item_id, record_id_location, procurement_category, return_reason_id, unit_of_measure_code_inventory, unit_of_measure_code_purchase, vendor_account_id_invoice, vendor_account_id_order, record_id_orderer, record_id_requester, asset_transaction_type, delivery_type, document_status, is_stocked_product, purchase_line_status, purchase_header_status, purchase_type, accounting_date, inventory_date, purchase_line_expected_delivery_date, received_date, target_delivery_date, inventory_transaction_id, legal_entity, purchase_order_id, purchase_receipt_id, line_number, purchase_line_number, qty_inventory_unit, inventory_unit, qty_purchase_unit, purchase_unit, net_amount_transaction_currency, hk_hash_key, hk_source_name, hk_soft_delete_flag, hk_source_created_timestamp, hk_source_last_updated_timestamp, hk_created_job_run_id, hk_last_updated_job_run_id, hk_created_timestamp, hk_last_updated_timestamp, hk_warehouse_id)\n\tselect hash(a.source_name, '~', to_char(a.record_id))::number as FACT_PURCHASE_RECEIPTS_KEY\n\t\t, a.source_name as SOURCE_NAME, a.record_id as RECORD_ID\n\t\t\n\t\t, case when a.source_name = '' then -2\n\t\t\telse nvl(dss1.dim_source_system_key, -1)\n\t\t\tend::number as DIM_SOURCE_SYSTEM_KEY\n\t\t, a.dim_source_system_snkey as DIM_SOURCE_SYSTEM_SNKEY\n\t\t\n\t\t, nvl(dd1.dim_date_key, -1)::number as ACCOUNTING_DATE_DIM_DATE_KEY\n\t\t, a.accounting_date_dim_date_snkey as ACCOUNTING_DATE_DIM_DATE_SNKEY\n\t\t, nvl(dd2.dim_date_key, -1)::number as INVENTORY_DATE_DIM_DATE_KEY\n\t\t, a.inventory_date_dim_date_snkey as INVENTORY_DATE_DIM_DATE_SNKEY\n\t\t, nvl(dd3.dim_date_key, -1)::number as PURCHASE_LINE_EXPECTED_DELIVERY_DATE_DIM_DATE_KEY\n\t\t, a.purchase_line_expected_delivery_date_dim_date_snkey as PURCHASE_LINE_EXPECTED_DELIVERY_DATE_DIM_DATE_SNKEY\n\t\t, nvl(dd4.dim_date_key, -1)::number as RECEIVED_DATE_DIM_DATE_KEY\n\t\t, a.received_date_dim_date_snkey as RECEIVED_DATE_DIM_DATE_SNKEY\n\t\t, nvl(dd5.dim_date_key, -1)::number as TARGET_DELIVERY_DATE_DIM_DATE_KEY\n\t\t, a.target_delivery_date_dim_date_snkey as TARGET_DELIVERY_DATE_DIM_DATE_SNKEY\n\t\t\n\t\t\n\t\t/***************************************************************************************************************************************************************\n\t\tNOTE: any set of KEY/SNKEY combinations that are set to -1 are due to this FACT table being part of \"wave 3\" while the DIM tables are \"wave 2\".\n\t\t\tWe cannot guarantee that any \"wave 2\" DIMs are going to be migrated at or near the same time as \"wave 3\" tables; therefore, these DIMs will be technical debt\n\t\t\tand will be fixed later.\n\t\t****************************************************************************************************************************************************************/\n\t\t, case when a.dim_currency_snkey = -2 then -2\n\t\t\t\telse nvl(dcurr1.dim_currency_key, -1)\n\t\t\tend::number as DIM_CURRENCY_KEY\n\t\t, a.dim_currency_snkey as DIM_CURRENCY_SNKEY\n\t\t, case when a.dim_default_dimension_snkey = -2 then -2\n\t\t\t\telse nvl(ddim1.dim_default_dimension_key, -1)\n\t\t\tend::number as DIM_DEFAULT_DIMENSION_KEY\n\t\t, a.dim_default_dimension_snkey as DIM_DEFAULT_DIMENSION_SNKEY\n\t\t, case when a.dim_delivery_mode_snkey = -2 then -2\n\t\t\t\telse nvl(ddm1.dim_delivery_mode_key, -1)\n\t\t\tend::number as DIM_DELIVERY_MODE_KEY\n\t\t, a.dim_delivery_mode_snkey as DIM_DELIVERY_MODE_SNKEY\n\t\t, case when a.dim_intra_stat_transaction_code_snkey = -2 then -2\n\t\t\t\telse nvl(distc1.dim_intra_stat_transaction_code_key, -1)\n\t\t\tend::number as DIM_INTRA_STAT_TRANSACTION_CODE_KEY\n\t\t, a.dim_intra_stat_transaction_code_snkey as DIM_INTRA_STAT_TRANSACTION_CODE_SNKEY\n\t\t, case when a.dim_inventory_snkey = -2 then -2\n\t\t\t\telse nvl(dinv1.dim_inventory_key, -1)\n\t\t\tend::number as DIM_INVENTORY_KEY\n\t\t, case when a.dim_inventory_snkey = -2 then -2\n\t\t\t\telse a.dim_inventory_snkey\n\t\t\tend::number as DIM_INVENTORY_SNKEY\n\t\t, case when a.dim_item_snkey = -2 then -2\n\t\t\t\telse nvl(dit1.dim_item_key, -1)\n\t\t\tend::number as DIM_ITEM_KEY\n\t\t, a.dim_item_snkey as DIM_ITEM_SNKEY\n\t\t, case when a.dim_legal_entity_snkey = -2 then -2\n\t\t\t\telse nvl(dle1.dim_legal_entity_key, -1)\n\t\t\tend::number as DIM_LEGAL_ENTITY_KEY\n\t\t, a.dim_legal_entity_snkey as DIM_LEGAL_ENTITY_SNKEY\n\t\t, case when a.dim_location_snkey = -2 then -2\n\t\t\t\telse nvl(dl1.dim_location_key, -1)\n\t\t\tend::number as DIM_LOCATION_KEY\n\t\t, case when a.dim_location_snkey = -2 then -2\n\t\t\t\telse a.dim_location_snkey\n\t\t\tend::number as DIM_LOCATION_SNKEY\n\t\t, case when a.DIM_PROCUREMENT_CATEGORY_SNKEY= -2 then -2\n\t\t\t\telse nvl(dspc1.DIM_SALES_PROCUREMENT_CATEGORY_KEY, -1)\n\t\t\tend::number as DIM_PROCUREMENT_CATEGORY_KEY\n\t\t, a.dim_procurement_category_snkey as DIM_PROCUREMENT_CATEGORY_SNKEY\n\t\t, case when a.dim_purchase_order_snkey = -2 then -2\n\t\t\t\telse nvl(dpo1.dim_purchase_order_key, -1)\n\t\t\tend::number as DIM_PURCHASE_ORDER_KEY\n\t\t, a.dim_purchase_order_snkey as DIM_PURCHASE_ORDER_SNKEY\n\t\t, case when a.dim_return_reason_snkey = -2 then -2\n\t\t\t\telse nvl(drr1.dim_return_reason_key, -1)\n\t\t\tend::number as DIM_RETURN_REASON_KEY\n\t\t, a.dim_return_reason_snkey as DIM_RETURN_REASON_SNKEY\n\t\t, case when a.dim_unit_of_measure_inventory_snkey = -2 then -2\n\t\t\t\telse nvl(duomi1.dim_unit_of_measure_key, -1)\n\t\t\tend::number as DIM_UNIT_OF_MEASURE_INVENTORY_KEY\n\t\t, a.dim_unit_of_measure_inventory_snkey as DIM_UNIT_OF_MEASURE_INVENTORY_SNKEY\n\t\t, case when a.dim_unit_of_measure_purchase_snkey = -2 then -2\n\t\t\t\telse nvl(duomp1.dim_unit_of_measure_key, -1)\n\t\t\tend::number as DIM_UNIT_OF_MEASURE_PURCHASE_KEY\n\t\t, a.dim_unit_of_measure_purchase_snkey as DIM_UNIT_OF_MEASURE_PURCHASE_SNKEY\n\t\t, case when a.dim_vendor_invoice_snkey = -2 then -2\n\t\t\t\telse nvl(dvi1.dim_vendor_key, -1)\n\t\t\tend::number as DIM_VENDOR_INVOICE_KEY\n\t\t, a.dim_vendor_invoice_snkey as DIM_VENDOR_INVOICE_SNKEY\n\t\t, case when a.dim_vendor_order_snkey = -2 then -2\n\t\t\t\telse nvl(dvo1.dim_vendor_key, -1)\n\t\t\tend::number as DIM_VENDOR_ORDER_KEY\n\t\t, a.dim_vendor_order_snkey as DIM_VENDOR_ORDER_SNKEY\n\t\t, case when a.dim_worker_orderer_snkey = -2 then -2\n\t\t\t\telse nvl(dwo1.dim_worker_key, -1)\n\t\t\tend::number as DIM_WORKER_ORDERER_KEY\n\t\t, a.dim_worker_orderer_snkey as DIM_WORKER_ORDERER_SNKEY\n\t\t, case when a.dim_worker_requester_snkey = -2 then -2\n\t\t\t\telse nvl(dwr1.dim_worker_key, -1)\n\t\t\tend::number as DIM_WORKER_REQUESTER_KEY\n\t\t, a.dim_worker_requester_snkey as DIM_WORKER_REQUESTER_SNKEY\n\t\t, a.currency_code as CURRENCY_CODE, a.default_dimension as DEFAULT_DIMENSION, a.delivery_mode_id as DELIVERY_MODE_ID, a.intra_stat_transaction_code as INTRA_STAT_TRANSACTION_CODE, a.inventory_dimension_id as INVENTORY_DIMENSION_ID, a.item_id as ITEM_ID, a.record_id_location as RECORD_ID_LOCATION, a.procurement_category as PROCUREMENT_CATEGORY, a.return_reason_id as RETURN_REASON_ID, a.unit_of_measure_code_inventory as UNIT_OF_MEASURE_CODE_INVENTORY, a.unit_of_measure_code_purchase as UNIT_OF_MEASURE_CODE_PURCHASE, a.vendor_account_id_invoice as VENDOR_ACCOUNT_ID_INVOICE, a.vendor_account_id_order as VENDOR_ACCOUNT_ID_ORDER, a.record_id_orderer as RECORD_ID_ORDERER, a.record_id_requester as RECORD_ID_REQUESTER, a.asset_transaction_type as ASSET_TRANSACTION_TYPE, a.delivery_type as DELIVERY_TYPE, a.document_status as DOCUMENT_STATUS, a.is_stocked_product as IS_STOCKED_PRODUCT, a.purchase_line_status as PURCHASE_LINE_STATUS, a.purchase_header_status as PURCHASE_HEADER_STATUS, a.purchase_type as PURCHASE_TYPE, a.accounting_date as ACCOUNTING_DATE, a.inventory_date as INVENTORY_DATE, a.purchase_line_expected_delivery_date as PURCHASE_LINE_EXPECTED_DELIVERY_DATE, a.received_date as RECEIVED_DATE, a.target_delivery_date as TARGET_DELIVERY_DATE, a.inventory_transaction_id as INVENTORY_TRANSACTION_ID, a.legal_entity as LEGAL_ENTITY, a.purchase_order_id as PURCHASE_ORDER_ID, a.purchase_receipt_id as PURCHASE_RECEIPT_ID, a.line_number as LINE_NUMBER, a.purchase_line_number as PURCHASE_LINE_NUMBER, a.qty_inventory_unit as QTY_INVENTORY_UNIT, a.inventory_unit as INVENTORY_UNIT, a.qty_purchase_unit as QTY_PURCHASE_UNIT, a.purchase_unit as PURCHASE_UNIT, a.net_amount_transaction_currency as NET_AMOUNT_TRANSACTION_CURRENCY\n\t\t, hash(a.source_name, '~', to_char(a.record_id), '~', a.currency_code, '~', a.default_dimension, '~', a.delivery_mode_id, '~', a.intra_stat_transaction_code, '~', a.inventory_dimension_id, '~', a.item_id, '~', to_char(a.record_id_location), '~', to_char(a.procurement_category), '~', a.return_reason_id, '~', a.unit_of_measure_code_inventory, '~', a.unit_of_measure_code_purchase, '~', a.vendor_account_id_invoice, '~', a.vendor_account_id_order, '~', to_char(a.record_id_orderer), '~', to_char(a.record_id_requester), '~', a.asset_transaction_type, '~', a.delivery_type, '~', a.document_status, '~', a.is_stocked_product, '~', a.purchase_line_status, '~', a.purchase_header_status, '~', a.purchase_type, '~', to_char(a.accounting_date, 'yyyymmdd'), '~', to_char(a.inventory_date, 'yyyymmdd'), '~', to_char(a.purchase_line_expected_delivery_date, 'yyyymmdd'), '~', to_char(a.received_date, 'yyyymmdd'), '~', to_char(a.target_delivery_date, 'yyyymmdd'), '~', a.inventory_transaction_id, '~', a.legal_entity, '~', a.purchase_order_id, '~', a.purchase_receipt_id, '~', to_char(a.line_number), '~', to_char(a.purchase_line_number), '~', to_char(a.qty_inventory_unit), '~', a.inventory_unit, '~', to_char(a.qty_purchase_unit), '~', a.purchase_unit, '~', to_char(a.net_amount_transaction_currency))::number as HK_HASH_KEY\n\t\t, a.hk_source_name as HK_SOURCE_NAME\n\t\t, false::boolean as HK_SOFT_DELETE_FLAG\n\t\t, a.hk_source_created_timestamp as HK_SOURCE_CREATED_TIMESTAMP, a.hk_source_last_updated_timestamp as HK_SOURCE_LAST_UPDATED_TIMESTAMP, a.hk_created_job_run_id as HK_CREATED_JOB_RUN_ID, a.hk_last_updated_job_run_id as HK_LAST_UPDATED_JOB_RUN_ID\n\t\t, current_timestamp::timestamp_tz as HK_CREATED_TIMESTAMP\n\t\t, current_timestamp::timestamp_tz as HK_LAST_UPDATED_TIMESTAMP\n\t\t, uuid_string()::varchar as HK_WAREHOUSE_ID\n\t\n\tfrom (select 'AXNALA'::varchar as SOURCE_NAME\n\t\t\t, nvl(b.recordid, 0)::number(38, 0) as RECORD_ID\n\t\t\t\n\t\t\t, nvl(b.currencycode, '')::varchar as CURRENCY_CODE\n\t\t\t, nvl(b.defaultdimension, '')::varchar as DEFAULT_DIMENSION\n\t\t\t, nvl(b.deliverymodeid, '')::varchar as DELIVERY_MODE_ID\n\t\t\t, nvl(b.intrastattransactioncode, '')::varchar as INTRA_STAT_TRANSACTION_CODE\n\t\t\t, nvl(b.inventorydimensionid, '')::varchar as INVENTORY_DIMENSION_ID\n\t\t\t, nvl(b.itemid, '')::varchar as ITEM_ID\n\t\t\t, nvl(b.recordidlocation, 0)::number(38, 0) as RECORD_ID_LOCATION\n\t\t\t, nvl(b.procurementcategory, 0)::number(38, 0) as PROCUREMENT_CATEGORY\n\t\t\t, nvl(b.returnreasonid, '')::varchar as RETURN_REASON_ID\n\t\t\t, nvl(b.unitofmeasurecodeinventory, '')::varchar as UNIT_OF_MEASURE_CODE_INVENTORY\n\t\t\t, nvl(b.unitofmeasurecodepurchase, '')::varchar as UNIT_OF_MEASURE_CODE_PURCHASE\n\t\t\t, nvl(b.vendoraccountidinvoice, '')::varchar as VENDOR_ACCOUNT_ID_INVOICE\n\t\t\t, nvl(b.vendoraccountidorder, '')::varchar as VENDOR_ACCOUNT_ID_ORDER\n\t\t\t, nvl(b.recordidorderer, 0)::number(38, 0) as RECORD_ID_ORDERER\n\t\t\t, nvl(b.recordidrequester, 0)::number(38, 0) as RECORD_ID_REQUESTER\n\t\t\t, nvl(b.assettransactiontype, '')::varchar as ASSET_TRANSACTION_TYPE\n\t\t\t, nvl(b.deliverytype, '')::varchar as DELIVERY_TYPE\n\t\t\t, nvl(b.documentstatus, '')::varchar as DOCUMENT_STATUS\n\t\t\t, nvl(b.isstockedproduct, '')::varchar as IS_STOCKED_PRODUCT\n\t\t\t, nvl(b.purchaselinestatus, '')::varchar as PURCHASE_LINE_STATUS\n\t\t\t, nvl(b.purchaseheaderstatus, '')::varchar as PURCHASE_HEADER_STATUS\n\t\t\t, nvl(b.purchasetype, '')::varchar as PURCHASE_TYPE\n\t\t\t\n\t\t\t, case when nvl(b.accountingdate, '1900-01-01') in ('1900-01-01') then '1950-01-01'\n\t\t\t\t\twhen b.accountingdate < dd1.min_date_value then '1951-12-31'\n\t\t\t\t\twhen b.accountingdate > dd1.max_date_value then '9951-12-31'\n\t\t\t\telse b.accountingdate\n\t\t\t\tend::date as ACCOUNTING_DATE\n\t\t\t, case when nvl(b.inventorydate, '1900-01-01') in ('1900-01-01') then '1950-01-01'\n\t\t\t\t\twhen b.inventorydate < dd1.min_date_value then '1951-12-31'\n\t\t\t\t\twhen b.inventorydate > dd1.max_date_value then '9951-12-31'\n\t\t\t\telse b.inventorydate\n\t\t\t\tend::date as INVENTORY_DATE\n\t\t\t, case when nvl(b.purchaselineexpecteddeliverydate, '1900-01-01') in ('1900-01-01') then '1950-01-01'\n\t\t\t\t\twhen b.purchaselineexpecteddeliverydate < dd1.min_date_value then '1951-12-31'\n\t\t\t\t\twhen b.purchaselineexpecteddeliverydate > dd1.max_date_value then '9951-12-31'\n\t\t\t\telse b.purchaselineexpecteddeliverydate\n\t\t\t\tend::date as PURCHASE_LINE_EXPECTED_DELIVERY_DATE\n\t\t\t, case when nvl(b.receiveddate, '1900-01-01') in ('1900-01-01') then '1950-01-01'\n\t\t\t\t\twhen b.receiveddate < dd1.min_date_value then '1951-12-31'\n\t\t\t\t\twhen b.receiveddate > dd1.max_date_value then '9951-12-31'\n\t\t\t\telse b.receiveddate\n\t\t\t\tend::date as RECEIVED_DATE\n\t\t\t, case when nvl(b.targetdeliverydate, '1900-01-01') in ('1900-01-01') then '1950-01-01'\n\t\t\t\t\twhen b.targetdeliverydate < dd1.min_date_value then '1951-12-31'\n\t\t\t\t\twhen b.targetdeliverydate > dd1.max_date_value then '9951-12-31'\n\t\t\t\telse b.targetdeliverydate\n\t\t\t\tend::date as TARGET_DELIVERY_DATE\n\t\t\t\n\t\t\t, nvl(b.inventorytransactionid, '')::varchar as INVENTORY_TRANSACTION_ID\n\t\t\t, nvl(b.legalentity, '')::varchar as LEGAL_ENTITY\n\t\t\t, nvl(b.purchaseorderid, '')::varchar as PURCHASE_ORDER_ID\n\t\t\t, nvl(b.purchasereceiptid, '')::varchar as PURCHASE_RECEIPT_ID\n\t\t\t, nvl(b.linenumber, 0)::number(25, 16) as LINE_NUMBER\n\t\t\t, nvl(b.purchaselinenumber, 0)::number(38, 0) as PURCHASE_LINE_NUMBER\n\t\t\t, nvl(b.qtyinventoryunit, 0)::number(28, 16) as QTY_INVENTORY_UNIT\n\t\t\t, nvl(b.inventoryunit, '')::varchar as INVENTORY_UNIT\n\t\t\t, nvl(b.qtypurchaseunit, 0)::number(28, 16) as QTY_PURCHASE_UNIT\n\t\t\t, nvl(b.purchaseunit, '')::varchar as PURCHASE_UNIT\n\t\t\t, nvl(b.netamounttransactioncurrency, 0)::number(28, 16) as NET_AMOUNT_TRANSACTION_CURRENCY\n\t\t\t\n\t\t\t, nvl(b.dw_sourcecode, '')::varchar as HK_SOURCE_NAME\n\t\t\t, '1950-01-01 00:00:00'::timestamp_tz as HK_SOURCE_CREATED_TIMESTAMP\n\t\t\t, nvl(b.dw_timestamp, '1950-01-01 00:00:00')::timestamp_tz as HK_SOURCE_LAST_UPDATED_TIMESTAMP\n\t\t\t, '-1'::varchar as HK_CREATED_JOB_RUN_ID\n\t\t\t, nvl(b.dw_batch, '-1')::varchar as HK_LAST_UPDATED_JOB_RUN_ID\n\t\t\t\n\t\t\t, case when nvl(SOURCE_NAME, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME)\n\t\t\t\tend::number as DIM_SOURCE_SYSTEM_SNKEY\n\t\t\t, case when nvl(ACCOUNTING_DATE, '1950-01-01') = '1950-01-01' then -2\n\t\t\t\telse hash('', '~', to_char(ACCOUNTING_DATE, 'yyyymmdd'))\n\t\t\t\tend::number as ACCOUNTING_DATE_DIM_DATE_SNKEY\n\t\t\t, case when nvl(INVENTORY_DATE, '1950-01-01') = '1950-01-01' then -2\n\t\t\t\telse hash('', '~', to_char(INVENTORY_DATE, 'yyyymmdd'))\n\t\t\t\tend::number as INVENTORY_DATE_DIM_DATE_SNKEY\n\t\t\t, case when nvl(PURCHASE_LINE_EXPECTED_DELIVERY_DATE, '1950-01-01') = '1950-01-01' then -2\n\t\t\t\telse hash('', '~', to_char(PURCHASE_LINE_EXPECTED_DELIVERY_DATE, 'yyyymmdd'))\n\t\t\t\tend::number as PURCHASE_LINE_EXPECTED_DELIVERY_DATE_DIM_DATE_SNKEY\n\t\t\t, case when nvl(RECEIVED_DATE, '1950-01-01') = '1950-01-01' then -2\n\t\t\t\telse hash('', '~', to_char(RECEIVED_DATE, 'yyyymmdd'))\n\t\t\t\tend::number as RECEIVED_DATE_DIM_DATE_SNKEY\n\t\t\t, case when nvl(TARGET_DELIVERY_DATE, '1950-01-01') = '1950-01-01' then -2\n\t\t\t\telse hash('', '~', to_char(TARGET_DELIVERY_DATE, 'yyyymmdd'))\n\t\t\t\tend::number as TARGET_DELIVERY_DATE_DIM_DATE_SNKEY\n\t\t\t, case when nvl(CURRENCY_CODE, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', CURRENCY_CODE)\n\t\t\t\tend::number as DIM_CURRENCY_SNKEY\n\t\t\t, case when nvl(DEFAULT_DIMENSION, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', DEFAULT_DIMENSION)\n\t\t\t\tend::number as DIM_DEFAULT_DIMENSION_SNKEY\n\t\t\t, case when nvl(LEGAL_ENTITY, '') = '' or nvl(DELIVERY_MODE_ID, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY, '~', DELIVERY_MODE_ID)\n\t\t\t\tend::number as DIM_DELIVERY_MODE_SNKEY\n\t\t\t, case when nvl(LEGAL_ENTITY,'') = '' or nvl(INTRA_STAT_TRANSACTION_CODE,'') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY, '~', INTRA_STAT_TRANSACTION_CODE)\n\t\t\t\tend::number as DIM_INTRA_STAT_TRANSACTION_CODE_SNKEY\n\t\t\t, case when nvl(LEGAL_ENTITY, '') = '' or nvl(INVENTORY_DIMENSION_ID, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY, '~', INVENTORY_DIMENSION_ID)\n\t\t\t\tend::number as DIM_INVENTORY_SNKEY\n\t\t\t, case when nvl(LEGAL_ENTITY, '') = '' or nvl(ITEM_ID, '') = '' then -2\n\t\t\t\telse hash('', '~', LEGAL_ENTITY, '~', ITEM_ID)\t-- (NOTE: ITEM_KEY is unique across all source systems; therefore, this field will always be set to '')\n\t\t\t\tend::number as DIM_ITEM_SNKEY\n\t\t\t, case when nvl(LEGAL_ENTITY, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY)\n\t\t\t\tend::number as DIM_LEGAL_ENTITY_SNKEY\n\t\t\t, case when nvl(RECORD_ID_LOCATION, 0) = 0 then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', to_char(RECORD_ID_LOCATION))\n\t\t\t\tend::number as DIM_LOCATION_SNKEY\n\t\t\t, case when  nvl(PROCUREMENT_CATEGORY, 0) = 0 then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', to_char(PROCUREMENT_CATEGORY)) \n                end::number(38, 0) as DIM_PROCUREMENT_CATEGORY_SNKEY\n\t\t\t, case when nvl(LEGAL_ENTITY, '') = '' or nvl(PURCHASE_ORDER_ID, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY, '~', PURCHASE_ORDER_ID)\n\t\t\t\tend::number as DIM_PURCHASE_ORDER_SNKEY\n\t\t\t, case when nvl(LEGAL_ENTITY, '') = '' or nvl(RETURN_REASON_ID, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY, '~', RETURN_REASON_ID)\n\t\t\t\tend::number as DIM_RETURN_REASON_SNKEY\n\t\t\t, case when nvl(UNIT_OF_MEASURE_CODE_INVENTORY,'') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', UNIT_OF_MEASURE_CODE_INVENTORY)\n\t\t\t\tend::number as DIM_UNIT_OF_MEASURE_INVENTORY_SNKEY\n\t\t\t, case when nvl(UNIT_OF_MEASURE_CODE_PURCHASE,'') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', UNIT_OF_MEASURE_CODE_PURCHASE)\n\t\t\t\tend::number as DIM_UNIT_OF_MEASURE_PURCHASE_SNKEY\n\t\t\t, case when nvl(LEGAL_ENTITY,'') = '' or nvl(VENDOR_ACCOUNT_ID_INVOICE,'') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY, '~', VENDOR_ACCOUNT_ID_INVOICE)\n\t\t\t\tend::number as DIM_VENDOR_INVOICE_SNKEY\n\t\t\t, case when nvl(LEGAL_ENTITY,'') = '' or nvl(VENDOR_ACCOUNT_ID_ORDER,'') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY, '~', VENDOR_ACCOUNT_ID_ORDER)\n\t\t\t\tend::number as DIM_VENDOR_ORDER_SNKEY\n\t\t\t, case when nvl(RECORD_ID_ORDERER, 0) = 0 then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', to_char(RECORD_ID_ORDERER))\n\t\t\t\tend::number as DIM_WORKER_ORDERER_SNKEY\n\t\t\t, case when nvl(RECORD_ID_REQUESTER, 0) = 0 then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', to_char(RECORD_ID_REQUESTER))\n\t\t\t\tend::number as DIM_WORKER_REQUESTER_SNKEY\n\t\t\t\n\t\tfrom (select hk_source_name, hk_job_run_id, hk_created_timestamp, hk_warehouse_id, dw_id, currencykey, datasourcekey, defaultdimensionkey, deliverymodekey, intrastattransactioncodekey, inventorykey, itemkey, legalentitykey, locationkey, procurementcategorykey, purchaseorderkey, purchaseorderdetailskey, returnreasonkey, unitofmeasurepurchasekey, unitofmeasureinventorykey, vendorinvoicekey, vendorinvoicehistorykey, vendororderkey, vendororderhistorykey, workerordererkey, workerrequesterkey, accountingdate, inventorydate, purchaselineexpecteddeliverydate, receiveddate, targetdeliverydate, recordid, inventorytransactionid, legalentity, purchaseorderid, purchasereceiptid, linenumber, purchaselinenumber, qtyinventoryunit, inventoryunit, qtypurchaseunit, purchaseunit, netamounttransactioncurrency, incrementaltimestamp, currencycode, defaultdimension, deliverymodeid, intrastattransactioncode, inventorydimensionid, itemid, recordidlocation, procurementcategory, returnreasonid, unitofmeasurecodeinventory, unitofmeasurecodepurchase, vendoraccountidinvoice, vendoraccountidorder, recordidorderer, recordidrequester, assettransactiontype, deliverytype, documentstatus, isstockedproduct, purchaselinestatus, purchaseheaderstatus, purchasetype, dw_batch, dw_sourcecode, dw_timestamp\n\t\t\tfrom @{pipeline().globalParameters.environment}_raw.edw_dwh.FACTPURCHASERECEIPTS\n\t\t\t) b\n\t\t\tinner join (select min(date_value) as MIN_DATE_VALUE\n\t\t\t\t\t\t\t, max(date_value) as MAX_DATE_VALUE\n\t\t\t\t\t\tfrom global.DIM_DATE\n\t\t\t\t\t\twhere date_value not in ('1950-01-01', '1951-12-31', '9000-01-01', '9951-12-31')) dd1 on\n\t\t\t\t1=1\n\t\t) a\n\tleft join global.DIM_SOURCE_SYSTEM dss1 on\n\t\ta.dim_source_system_snkey = dss1.dim_source_system_snkey\n\tleft join global.DIM_DATE dd1 on\n\t\ta.accounting_date_dim_date_snkey = dd1.dim_date_snkey\n\tleft join global.DIM_DATE dd2 on\n\t\ta.inventory_date_dim_date_snkey = dd2.dim_date_snkey\n\tleft join global.DIM_DATE dd3 on\n\t\ta.purchase_line_expected_delivery_date_dim_date_snkey = dd3.dim_date_snkey\n\tleft join global.DIM_DATE dd4 on\n\t\ta.received_date_dim_date_snkey = dd4.dim_date_snkey\n\tleft join global.DIM_DATE dd5 on\n\t\ta.target_delivery_date_dim_date_snkey = dd5.dim_date_snkey\n\tleft join global.DIM_CURRENCY dcurr1 on\n\t\ta.dim_currency_snkey = dcurr1.dim_currency_snkey\n\tleft join global.DIM_DEFAULT_DIMENSION ddim1 on\n\t\ta.dim_default_dimension_snkey = ddim1.dim_default_dimension_snkey\n\tleft join global.DIM_DELIVERY_MODE ddm1 on\n\t\ta.dim_delivery_mode_snkey = ddm1.dim_delivery_mode_snkey\n\tleft join global.DIM_INTRA_STAT_TRANSACTION_CODE distc1 on\n\t\ta.dim_intra_stat_transaction_code_snkey = distc1.dim_intra_stat_transaction_code_snkey\n\tleft join global.DIM_INVENTORY dinv1 on\n\t\ta.dim_inventory_snkey = dinv1.dim_inventory_snkey\n\tleft join global.DIM_ITEM dit1 on\n\t\ta.dim_item_snkey = dit1.dim_item_snkey\n\tleft join global.DIM_LEGAL_ENTITY dle1 on\n\t\ta.dim_legal_entity_snkey = dle1.dim_legal_entity_snkey\n\tleft join global.DIM_LOCATION dl1 on\n\t\ta.dim_location_snkey = dl1.dim_location_snkey\n    left join global.DIM_SALES_PROCUREMENT_CATEGORY dspc1 on\n\t\ta.dim_procurement_category_snkey = dspc1.dim_sales_procurement_category_snkey\n\tleft join global.DIM_PURCHASE_ORDER dpo1 on\n\t\ta.dim_purchase_order_snkey = dpo1.dim_purchase_order_snkey\n\tleft join global.DIM_RETURN_REASON drr1 on\n\t\ta.dim_return_reason_snkey = drr1.dim_return_reason_snkey\n\tleft join global.DIM_UNIT_OF_MEASURE duomi1 on\n\t\ta.dim_unit_of_measure_inventory_snkey = duomi1.dim_unit_of_measure_snkey\n\tleft join global.DIM_UNIT_OF_MEASURE duomp1 on\n\t\ta.dim_unit_of_measure_purchase_snkey = duomp1.dim_unit_of_measure_snkey\n\tleft join global.DIM_VENDOR dvi1 on\n\t\ta.dim_vendor_invoice_snkey = dvi1.dim_vendor_snkey and\n\t\ta.received_date >= dvi1.hk_effective_start_timestamp and\n\t\ta.received_date < dvi1.hk_effective_end_timestamp\n\tleft join global.DIM_VENDOR dvo1 on\n\t\ta.dim_vendor_order_snkey = dvo1.dim_vendor_snkey and\n\t\ta.received_date >= dvo1.hk_effective_start_timestamp and\n\t\ta.received_date < dvo1.hk_effective_end_timestamp\n\tleft join global.DIM_WORKER dwo1 on\n\t\ta.dim_worker_orderer_snkey = dwo1.dim_worker_snkey\n\tleft join global.DIM_WORKER dwr1 on\n\t\ta.dim_worker_requester_snkey = dwr1.dim_worker_snkey\n;",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "FACTPURCHASERECEIPTS"
					},
					"p_temp_directory": {
						"type": "string",
						"defaultValue": "temp_files"
					},
					"p_tgt_schema_nm": {
						"type": "string",
						"defaultValue": "EDW_DWH"
					},
					"p_curate_table_name": {
						"type": "string",
						"defaultValue": "FACT_PURCHASE_RECEIPTS"
					}
				},
				"folder": {
					"name": "history_fact"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_edw_hist_fact_vendor_transactions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy from sqlserver to ADLS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT --TOP (100) \n\t   f1.DW_ID\n      ,f1.CASHDISCOUNTKEY\n      ,f1.CURRENCYKEY\n      ,f1.DEFAULTDIMENSIONKEY\n      ,f1.LEGALENTITYKEY\n      ,f1.REMITTANCELOCATIONKEY\n      ,f1.VENDORINVOICEKEY\n      ,f1.VENDORINVOICEHISTORYKEY\n      ,f1.VENDORPAYMENTMODEKEY\n      ,f1.VENDORPAYMENTSPECIFICATIONKEY\n      ,f1.VENDORTRANSACTIONDETAILSKEY\n      ,f1.WORKERAPPROVERKEY\n      ,f1.ALIGNEDDUEDATE\n      ,f1.APPROVEDDATE\n      ,f1.CLOSEDDATE\n      ,f1.DOCUMENTDATE\n      ,f1.DUEDATE\n      ,f1.LASTSETTLEMENTDATE\n      ,f1.TRANSACTIONDATE\n      ,f1.RECORDID  \n      ,f1.DOCUMENTNUMBER\n      ,f1.INVOICEID\n      ,f1.LEGALENTITY\n      ,f1.LASTSETTLEMENTVOUCHER\n      ,f1.VOUCHER\n      ,f1.AMOUNTTRANSACTIONCURRENCY\n      ,f1.AMOUNTCOMPANYCURRENCY\n      ,f1.SETTLEDAMOUNTTRANSACTIONCURRENCY\n      ,f1.SETTLEDAMOUNTCOMPANYCURRENCY\n      ,f1.SETTLEDAMOUNTREPORTINGCURRENCY\n      ,f1.INCREMENTALTIMESTAMP\n      ,f1.CHECKDATE\n      ,f1.PAYMENTTERMS\n      ,f1.INVOICEDATE\n      ,f1.DAYSOVERDUE\n      ,f1.TRANSRECIDSETTLED\n      ,f1.DAYSTOPAY\n      ,f1.INVOICESTATUS\n      ,f1.INVOICEFULLSTATUS\n\t  ,case when f1.VendorInvoiceKey in (-1, -2) then f2.ACCOUNTNUM else dvi1.VendorAccountID end as ACCOUNTNUM\n\t  ,case when f1.WORKERAPPROVERKEY in (-1, -2) then  f2.APPROVER else dwr1.recordid end as APPROVER\n\t  , case when f1.CASHDISCOUNTKEY in (-1, -2) then f2.CASHDISCCODE else dcd1.CashDiscountID end as CASHDISCCODE\n\t  ,case when f1.CurrencyKey in (-1, -2) then f2.currencycode else dcurr1.currencycode end as currencycode\n\t  ,cast(case when f1.defaultdimensionkey in (-1, -2) then f2.defaultdimension else dd1.defaultdimension end as varchar) as defaultdimension\n\t  ,f2.PAYMMODE\n\t  ,f2.PAYMSPEC\n\t  ,f2.REMITTANCELOCATION\n\t  ,dvtd1.TransactionType\n\t  ,dvtd1.IsApproved\n\t  ,dvtd1.IsReversal\n\t  ,f1.DW_BATCH\n      ,f1.DW_SOURCECODE\n      ,f1.DW_TIMESTAMP\n  FROM EDW_DWH.DBO.FACTVENDORTRANSACTIONS f1 with (nolock)\n\tleft join edw_hka.dbo.FACTVENDORTRANSACTIONS f2 with (nolock) on\n\t\tf1.dw_id = f2.DW_Id\n\tleft join EDW_DWH.dbo.DimCurrency dcurr1 with (nolock) on\n\t\tf1.CurrencyKey =dcurr1.CurrencyKey\n\tleft join EDW_DWH.dbo.DIMVENDOR dvi1 with (nolock) on\n\t\tf1.vendorinvoicekey = dvi1.vendorkey\n\tleft join dbo.DIMWORKER dwr1 with (nolock) on\n\t\tf1.WORKERAPPROVERKEY = dwr1.workerkey\n\tleft join dbo.DimCashDiscount dcd1 with (nolock) on\n\t\tf1.CashDiscountKey = dcd1.CashDiscountKey\n    left join edw_hka.dbo.DIMDEFAULTDIMENSION dd1 with (nolock) on\n\t\tf1.defaultdimensionkey = dd1.defaultdimensionkey\n\tleft join EDW_DWH.dbo.DimVendorTransactionDetails dvtd1 with (nolock) on\n\t\tf1.VENDORTRANSACTIONDETAILSKEY = dvtd1.VENDORTRANSACTIONDETAILSKEY",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_server",
								"type": "DatasetReference",
								"parameters": {
									"p_src_table_name": {
										"value": "@pipeline().parameters.p_src_table_nm",
										"type": "Expression"
									},
									"p_src_schema_name": {
										"value": "@pipeline().parameters.p_src_schema_nm",
										"type": "Expression"
									},
									"p_ls_serverName": {
										"value": "@pipeline().globalParameters.edw_sql_serverName",
										"type": "Expression"
									},
									"p_ls_dbName": {
										"value": "@pipeline().globalParameters.edw_sql_dbName",
										"type": "Expression"
									},
									"p_ls_sqlUsername": {
										"value": "@pipeline().globalParameters.sql_userName",
										"type": "Expression"
									},
									"p_ls_sqlPassword": {
										"value": "@pipeline().globalParameters.sql_password",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_parq_edw",
								"type": "DatasetReference",
								"parameters": {
									"p_root_system": {
										"value": "@pipeline().globalParameters.rootDir",
										"type": "Expression"
									},
									"p_directory": {
										"value": "@pipeline().parameters.p_temp_directory",
										"type": "Expression"
									},
									"p_file_name": {
										"value": "@concat(toUpper(pipeline().parameters.p_curate_table_name),'_HIST_',substring(string(utcNow()),0,4),'_',substring(string(utcNow()),5,2),'_',substring(string(utcNow()),8,2),'.snappy.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "ADLS to Snowflake RAW with HK columns",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy from sqlserver to ADLS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_load_edw_history",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"adlsSource": {
										"p_root_system": {
											"value": "@pipeline().globalParameters.rootDir",
											"type": "Expression"
										},
										"p_directory": {
											"value": "@pipeline().parameters.p_temp_directory",
											"type": "Expression"
										},
										"p_file_name": {
											"value": "@concat(toUpper(pipeline().parameters.p_curate_table_name),'_HIST_',substring(string(utcNow()),0,4),'_',substring(string(utcNow()),5,2),'_',substring(string(utcNow()),8,2),'.snappy.parquet')",
											"type": "Expression"
										}
									},
									"snowflakeRawTarget": {
										"p_tgt_table_name": {
											"value": "@pipeline().parameters.p_src_table_nm",
											"type": "Expression"
										},
										"p_tgt_schema_name": {
											"value": "@pipeline().parameters.p_tgt_schema_nm",
											"type": "Expression"
										},
										"p_ls_DbName": {
											"value": "@pipeline().globalParameters.snow_rawDb",
											"type": "Expression"
										},
										"p_ls_Env": {
											"value": "@pipeline().globalParameters.environment",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "IR-Snowflake-NALA",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "RAW to CURATE SP",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ADLS to Snowflake RAW with HK columns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_curateDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "truncate table GLOBAL.FACT_VENDOR_TRANSACTIONS;\n\nINSERT INTO GLOBAL.FACT_VENDOR_TRANSACTIONS (\nFACT_VENDOR_TRANSACTIONS_KEY,\nSOURCE_NAME,\nRECORD_ID,\nDIM_SOURCE_SYSTEM_KEY,\nDIM_SOURCE_SYSTEM_SNKEY,\nDIM_CASH_DISCOUNT_KEY,\nDIM_CASH_DISCOUNT_SNKEY,\nDIM_CURRENCY_KEY,\nDIM_CURRENCY_SNKEY,\nDIM_DEFAULT_DIMENSION_KEY,\nDIM_DEFAULT_DIMENSION_SNKEY,\nDIM_LEGAL_ENTITY_KEY,\nDIM_LEGAL_ENTITY_SNKEY,\nDIM_LOCATION_KEY,\nDIM_LOCATION_SNKEY,\nDIM_VENDOR_INVOICE_KEY,\nDIM_VENDOR_INVOICE_SNKEY,\nDIM_VENDOR_PAYMENT_MODE_KEY,\nDIM_VENDOR_PAYMENT_MODE_SNKEY,\nDIM_VENDOR_PAYMENT_SPECIFICATION_KEY,\nDIM_VENDOR_PAYMENT_SPECIFICATION_SNKEY,\n--DIM_VENDOR_TRANSACTION_DETAILS_KEY,\n--DIM_VENDOR_TRANSACTION_DETAILS_SNKEY,\nDIM_WORKER_APPROVER_KEY,\nDIM_WORKER_APPROVER_SNKEY,\nALIGNED_DUE_DATE_DIM_DATE_KEY,\nALIGNED_DUE_DATE_DIM_DATE_SNKEY,\nAPPROVED_DATE_DIM_DATE_KEY,\nAPPROVED_DATE_DIM_DATE_SNKEY,\nCLOSED_DATE_DIM_DATE_KEY,\nCLOSED_DATE_DIM_DATE_SNKEY,\nDOCUMENT_DATE_DIM_DATE_KEY,\nDOCUMENT_DATE_DIM_DATE_SNKEY,\nDUE_DATE_DIM_DATE_KEY,\nDUE_DATE_DIM_DATE_SNKEY,\nLAST_SETTLEMENT_DATE_DIM_DATE_KEY,\nLAST_SETTLEMENT_DATE_DIM_DATE_SNKEY,\nTRANSACTION_DATE_DIM_DATE_KEY,\nTRANSACTION_DATE_DIM_DATE_SNKEY,\nCHECK_DATE_DIM_DATE_KEY,\nCHECK_DATE_DIM_DATE_SNKEY,\nINVOICE_DATE_DIM_DATE_KEY,\nINVOICE_DATE_DIM_DATE_SNKEY,\nALIGNED_DUE_DATE,\nAPPROVED_DATE,\nCLOSED_DATE,\nDOCUMENT_DATE,\nDUE_DATE,\nLAST_SETTLEMENT_DATE,\nTRANSACTION_DATE,\nDOCUMENT_NUMBER,\nINVOICE_ID,\nLEGAL_ENTITY,\nLAST_SETTLEMENT_VOUCHER,\nVOUCHER,\nAMOUNT_TRANSACTION_CURRENCY,\nAMOUNT_COMPANY_CURRENCY,\nSETTLED_AMOUNT_TRANSACTION_CURRENCY,\nSETTLED_AMOUNT_COMPANY_CURRENCY,\nSETTLED_AMOUNT_REPORTING_CURRENCY,\nACCOUNT_NUMBER,\nAPPROVER,\nCASH_DISCOUNT_CODE,\nCURRENCY_CODE,\nDEFAULT_DIMENSION,\nPAYMENT_MODE,\nPAYMENT_SPECIFICATION,\nREMITTANCE_LOCATION,\nCHECK_DATE,\nPAYMENT_TERMS,\nINVOICE_DATE,\nDAYS_OVERDUE,\nSETTLED_TRANSACTION_RECORD_ID,\nDAYS_TO_PAY,\nINVOICE_STATUS,\nINVOICE_FULL_STATUS,\nTRANSACTION_TYPE,\nIS_APPROVED,\nIS_REVERSAL,\nHK_HASH_KEY,\nHK_SOURCE_NAME,\nHK_SOFT_DELETE_FLAG,\nHK_SOURCE_CREATED_TIMESTAMP,\nHK_SOURCE_LAST_UPDATED_TIMESTAMP,\nHK_CREATED_JOB_RUN_ID,\nHK_LAST_UPDATED_JOB_RUN_ID,\nHK_CREATED_TIMESTAMP,\nHK_LAST_UPDATED_TIMESTAMP,\nHK_WAREHOUSE_ID)\nSELECT hash(a.SOURCE_NAME, '~',to_char(a.RECORD_ID)) ::number as FACT_VENDOR_TRANSACTIONS_KEY\n    ,a.SOURCE_NAME\n    ,a.RECORD_ID\n    ,a.dim_source_system_snkey as DIM_SOURCE_SYSTEM_KEY\n    ,a.DIM_SOURCE_SYSTEM_SNKEY\n    ,case when a.DIM_CASH_DISCOUNT_SNKEY = -2 then -2\n\t\t\t\telse nvl(dcd1.DIM_CASH_DISCOUNT_KEY, -1)\n\t\t\tend::number as DIM_CASH_DISCOUNT_KEY\n    ,a.DIM_CASH_DISCOUNT_SNKEY\n    ,case when a.dim_currency_snkey = -2 then -2\n\t\t\t\telse nvl(dcurr1.dim_currency_key, -1)\n\t\t\tend::number as DIM_CURRENCY_KEY\n    ,a.DIM_CURRENCY_SNKEY\n\t, case when a.dim_default_dimension_snkey = -2 then -2\n\t\t\t\telse nvl(ddim1.dim_default_dimension_key, -1)\n\t\t\tend::number as DIM_DEFAULT_DIMENSION_KEY\n    ,a.DIM_DEFAULT_DIMENSION_SNKEY\n    , case when a.dim_legal_entity_snkey = -2 then -2\n\t\t\t\telse nvl(dle1.dim_legal_entity_key, -1)\n\t\t\tend::number as DIM_LEGAL_ENTITY_KEY\n    ,a.DIM_LEGAL_ENTITY_SNKEY\n    , case when a.dim_location_snkey = -2 then -2\n\t\t\t\telse nvl(dl1.dim_location_key, -1)\n\t\t\tend::number as DIM_LOCATION_KEY\n    ,a.DIM_LOCATION_SNKEY\n    , case when a.dim_vendor_invoice_snkey = -2 then -2\n\t\t\t\telse nvl(dvi1.dim_vendor_key, -1)\n\t   end::number as DIM_VENDOR_INVOICE_KEY\n    ,a.DIM_VENDOR_INVOICE_SNKEY  \n    ,case when a.DIM_VENDOR_PAYMENT_MODE_SNKEY = -2 then -2\n\t\t\t\telse nvl(dvpm1.DIM_VENDOR_PAYMENT_MODE_KEY, -1)\n\t   end::number as DIM_VENDOR_PAYMENT_MODE_KEY\n    ,a.DIM_VENDOR_PAYMENT_MODE_SNKEY\n    ,case when a.DIM_VENDOR_PAYMENT_SPECIFICATION_SNKEY = -2 then -2\n\t\t\t\telse nvl(dvps1.DIM_VENDOR_PAYMENT_SPECIFICATION_KEY, -1)\n\t   end::number as DIM_VENDOR_PAYMENT_SPECIFICATION_KEY\n    ,a.DIM_VENDOR_PAYMENT_SPECIFICATION_SNKEY\n   -- ,a.DIM_VENDOR_TRANSACTION_DETAILS_SNKEY AS DIM_VENDOR_TRANSACTION_DETAILS_KEY --junk dim\n   -- ,a.DIM_VENDOR_TRANSACTION_DETAILS_SNKEY\n    , case when a.DIM_WORKER_APPROVER_SNKEY = -2 then -2\n\t\t\t\telse nvl(dwa1.DIM_WORKER_KEY, -1)\n\t\t\tend::number as DIM_WORKER_APPROVER_KEY\n    ,a.DIM_WORKER_APPROVER_SNKEY\n    ,nvl(dd1.dim_date_key, -1)::number as ALIGNED_DUE_DATE_DIM_DATE_KEY\n    ,a.ALIGNED_DUE_DATE_DIM_DATE_SNKEY\n    ,nvl(dd2.dim_date_key, -1)::number as APPROVED_DATE_DIM_DATE_KEY\n    ,a.APPROVED_DATE_DIM_DATE_SNKEY\n    ,nvl(dd3.dim_date_key, -1)::number as CLOSED_DATE_DIM_DATE_KEY\n    ,a.CLOSED_DATE_DIM_DATE_SNKEY\n    ,nvl(dd4.dim_date_key, -1)::number as DOCUMENT_DATE_DIM_DATE_KEY\n    ,a.DOCUMENT_DATE_DIM_DATE_SNKEY\n    ,nvl(dd5.dim_date_key, -1)::number as DUE_DATE_DIM_DATE_KEY\n    ,a.DUE_DATE_DIM_DATE_SNKEY\n    ,nvl(dd6.dim_date_key, -1)::number as LAST_SETTLEMENT_DATE_DIM_DATE_KEY\n    ,a.LAST_SETTLEMENT_DATE_DIM_DATE_SNKEY\n    ,nvl(dd7.dim_date_key, -1)::number as TRANSACTION_DATE_DIM_DATE_KEY\n    ,a.TRANSACTION_DATE_DIM_DATE_SNKEY\n    ,nvl(dd8.dim_date_key, -1)::number as CHECK_DATE_DIM_DATE_KEY\n    ,a.CHECK_DATE_DIM_DATE_SNKEY\n    ,nvl(dd9.dim_date_key, -1)::number as INVOICE_DATE_DIM_DATE_KEY\n    ,a.INVOICE_DATE_DIM_DATE_SNKEY\n,a.ALIGNED_DUE_DATE\n,a.APPROVED_DATE\n,a.CLOSED_DATE\n,a.DOCUMENT_DATE\n,a.DUE_DATE\n,a.LAST_SETTLEMENT_DATE\n,a.TRANSACTION_DATE\n,a.DOCUMENT_NUMBER\n,a.INVOICE_ID\n,a.LEGAL_ENTITY\n,a.LAST_SETTLEMENT_VOUCHER\n,a.VOUCHER\n,a.AMOUNT_TRANSACTION_CURRENCY\n,a.AMOUNT_COMPANY_CURRENCY\n,a.SETTLED_AMOUNT_TRANSACTION_CURRENCY\n,a.SETTLED_AMOUNT_COMPANY_CURRENCY\n,a.SETTLED_AMOUNT_REPORTING_CURRENCY\n,a.ACCOUNT_NUMBER\n,a.APPROVER\n,a.CASH_DISCOUNT_CODE\n,a.CURRENCY_CODE\n,a.DEFAULT_DIMENSION\n,a.PAYMENT_MODE\n,a.PAYMENT_SPECIFICATION\n,a.REMITTANCE_LOCATION\n,a.CHECK_DATE\n,a.PAYMENT_TERMS\n,a.INVOICE_DATE\n,a.DAYS_OVERDUE\n,a.SETTLED_TRANSACTION_RECORD_ID\n,a.DAYS_TO_PAY\n,a.INVOICE_STATUS\n,a.INVOICE_FULL_STATUS\n,a.TRANSACTION_TYPE\n,a.IS_APPROVED\n,a.IS_REVERSAL\n,hash(a.source_name, '~', to_char(a.record_id), '~',to_char(a.aligned_due_date, 'yyyymmdd'), '~', to_char(a.approved_date, 'yyyymmdd'), '~', to_char(a.closed_date, 'yyyymmdd'), '~', to_char(a.document_date, 'yyyymmdd'), '~', to_char(a.due_date, 'yyyymmdd'), '~', to_char(a.last_settlement_date, 'yyyymmdd'), '~', to_char(a.transaction_date, 'yyyymmdd'), '~', a.document_number, '~', a.invoice_id, '~', a.legal_entity, '~', a.last_settlement_voucher, '~', a.voucher, '~', to_char(a.amount_transaction_currency), '~', to_char(a.amount_company_currency), '~', to_char(a.settled_amount_transaction_currency), '~', to_char(a.settled_amount_company_currency), '~', to_char(a.settled_amount_reporting_currency), '~', a.account_number, '~', to_char(a.approver), '~', a.cash_discount_code, '~', a.currency_code, '~', a.default_dimension, '~', a.payment_mode, '~', a.payment_specification, '~', to_char(a.remittance_location), '~', to_char(a.check_date, 'yyyymmdd'), '~', a.payment_terms, '~', to_char(a.invoice_date, 'yyyymmdd'), '~', to_char(a.days_overdue), '~', to_char(a.settled_transaction_record_id), '~', to_char(a.days_to_pay), '~', a.invoice_status, '~', a.invoice_full_status, '~', a.transaction_type, '~', a.is_approved, '~', a.is_reversal) AS HK_HASH_KEY\n\t\t, a.hk_source_name as HK_SOURCE_NAME\n\t\t, false::boolean as HK_SOFT_DELETE_FLAG\n\t\t, a.hk_source_created_timestamp as HK_SOURCE_CREATED_TIMESTAMP \n        , a.hk_source_last_updated_timestamp as HK_SOURCE_LAST_UPDATED_TIMESTAMP\n        , a.hk_created_job_run_id as HK_CREATED_JOB_RUN_ID\n        , a.hk_last_updated_job_run_id as HK_LAST_UPDATED_JOB_RUN_ID\n\t\t, current_timestamp::timestamp_tz as HK_CREATED_TIMESTAMP\n\t\t, current_timestamp::timestamp_tz as HK_LAST_UPDATED_TIMESTAMP\n\t\t, uuid_string()::varchar as HK_WAREHOUSE_ID\nFROM\n( SELECT     'AXNALA'::varchar as SOURCE_NAME\n            , nvl(LEGALENTITY, '') AS LEGAL_ENTITY \n            , nvl(RECORDID,0) AS RECORD_ID\n            , case when nvl(SOURCE_NAME, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME)\n\t\t\t\tend::number as DIM_SOURCE_SYSTEM_SNKEY\n            , case when LEGAL_ENTITY = '' or nvl(CASHDISCCODE, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY, '~', CASHDISCCODE)\n\t\t\t\tend::number as DIM_CASH_DISCOUNT_SNKEY\n\t\t\t, case when nvl(CURRENCYCODE, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', CURRENCYCODE)\n\t\t\t\tend::number as DIM_CURRENCY_SNKEY\n\t\t\t, case when nvl(DEFAULTDIMENSION, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', DEFAULTDIMENSION)\n\t\t\t\tend::number as DIM_DEFAULT_DIMENSION_SNKEY\n\t\t\t, case when nvl(LEGALENTITY, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGALENTITY)\n\t\t\t\tend::number as DIM_LEGAL_ENTITY_SNKEY\n\t\t\t, case when nvl(REMITTANCELOCATION, 0) = 0 then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', to_char(REMITTANCELOCATION))\n\t\t\t\tend::number as DIM_LOCATION_SNKEY\n\t\t\t, case when LEGAL_ENTITY = '' or nvl(ACCOUNTNUM,'') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY, '~', ACCOUNTNUM)\n\t\t\t\tend::number as DIM_VENDOR_INVOICE_SNKEY\n            , case when LEGAL_ENTITY = '' or nvl(PAYMMODE, '') = '' then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', LEGAL_ENTITY, '~', PAYMMODE)\n\t\t\t\tend::number as DIM_VENDOR_PAYMENT_MODE_SNKEY\n            , case when LEGAL_ENTITY = '' or  nvl(PAYMMODE, '') = '' OR nvl(PAYMSPEC, '') = '' then -2\n\t\t\t    else hash(SOURCE_NAME, '~', LEGAL_ENTITY, '~', PAYMMODE,'~', PAYMSPEC)\n\t\t\t\tend::number as DIM_VENDOR_PAYMENT_SPECIFICATION_SNKEY\n           /* , case when nvl(TRANSACTIONTYPE, '') = '' OR nvl(ISAPPROVED, '') = '' OR nvl(ISREVERSAL, '') = '' then -2\n\t\t\t    else hash(TRANSACTIONTYPE, '~', ISAPPROVED, '~', ISREVERSAL )\n\t\t\t    end::number as DIM_VENDOR_TRANSACTION_DETAILS_SNKEY*/\n\t\t\t, case when nvl(APPROVER, 0) = 0 then -2\n\t\t\t\telse hash(SOURCE_NAME, '~', to_char(APPROVER))\n\t\t\t\tend::number as DIM_WORKER_APPROVER_SNKEY\n \t\t\t, case when nvl(ALIGNEDDUEDATE, '1950-01-01') = '1950-01-01' then -2\n\t\t\t\telse hash('', '~', to_char(ALIGNEDDUEDATE, 'yyyymmdd'))\n\t\t\t\tend::number as ALIGNED_DUE_DATE_DIM_DATE_SNKEY\n \t\t\t, case when nvl(APPROVEDDATE, '1950-01-01') = '1950-01-01' then -2\n\t\t\t\telse hash('', '~', to_char(APPROVEDDATE, 'yyyymmdd'))\n\t\t\t\tend::number as APPROVED_DATE_DIM_DATE_SNKEY\n\t\t\t, case when nvl(CLOSEDDATE, '1950-01-01') = '1950-01-01' then -2\n\t\t\t\telse hash('', '~', to_char(CLOSEDDATE, 'yyyymmdd'))\n\t\t\t\tend::number as CLOSED_DATE_DIM_DATE_SNKEY\n\t\t\t, case when nvl(DOCUMENTDATE, '1950-01-01') = '1950-01-01' then -2\n\t\t\t\telse hash('', '~', to_char(DOCUMENTDATE, 'yyyymmdd'))\n\t\t\t\tend::number as DOCUMENT_DATE_DIM_DATE_SNKEY\n\t\t\t, case when nvl(DUEDATE, '1950-01-01') = '1950-01-01' then -2\n\t\t\t\telse hash('', '~', to_char(DUEDATE, 'yyyymmdd'))\n\t\t\t\tend::number as DUE_DATE_DIM_DATE_SNKEY\n\t\t\t, case when nvl(LASTSETTLEMENTDATE, '1950-01-01') = '1950-01-01' then -2\n\t\t\t\telse hash('', '~', to_char(LASTSETTLEMENTDATE, 'yyyymmdd'))\n\t\t\t\tend::number as LAST_SETTLEMENT_DATE_DIM_DATE_SNKEY\n\t\t\t, case when nvl(TRANSACTIONDATE, '1950-01-01') = '1950-01-01' then -2\n\t\t\t\telse hash('', '~', to_char(TRANSACTIONDATE, 'yyyymmdd'))\n\t\t\t\tend::number as TRANSACTION_DATE_DIM_DATE_SNKEY\n            , case when nvl(CHECKDATE, '1950-01-01') = '1950-01-01' then -2\n\t\t\t\telse hash('', '~', to_char(CHECKDATE, 'yyyymmdd'))\n\t\t\t\tend::number as CHECK_DATE_DIM_DATE_SNKEY\n            , case when nvl(INVOICEDATE, '1950-01-01') = '1950-01-01' then -2\n\t\t\t\telse hash('', '~', to_char(INVOICEDATE, 'yyyymmdd'))\n\t\t\t\tend::number as INVOICE_DATE_DIM_DATE_SNKEY\n        \t ,  nvl(ALIGNEDDUEDATE, '1950-01-01') AS ALIGNED_DUE_DATE \t\n\t         ,  nvl(APPROVEDDATE, '1950-01-01')  AS APPROVED_DATE \t\t \n\t         ,  nvl(CLOSEDDATE, '1950-01-01') AS CLOSED_DATE \t\t\t\t \n\t         ,  nvl(DOCUMENTDATE, '1950-01-01') AS DOCUMENT_DATE  \n\t         ,  nvl(DUEDATE, '1950-01-01') AS DUE_DATE \t\t\t\t\n\t         ,  nvl(LASTSETTLEMENTDATE, '1950-01-01') AS LAST_SETTLEMENT_DATE \t\t\n\t         ,  nvl(TRANSACTIONDATE, '1950-01-01') AS TRANSACTION_DATE \t\t\n\t       , nvl(b.documentnumber, '')::varchar as DOCUMENT_NUMBER\n           , nvl(b.INVOICEID, '')::varchar as INVOICE_ID\n           , nvl(b.LASTSETTLEMENTVOUCHER, '')::varchar as LAST_SETTLEMENT_VOUCHER\n           , nvl(b.VOUCHER, '')::varchar as VOUCHER\n           , nvl(b.AMOUNTTRANSACTIONCURRENCY, 0)::number(25,16) as AMOUNT_TRANSACTION_CURRENCY\n           , nvl(b.AMOUNTCOMPANYCURRENCY, 0)::number(25,16) as AMOUNT_COMPANY_CURRENCY\t\t\t\n           , nvl(b.SETTLEDAMOUNTTRANSACTIONCURRENCY, 0)::number(25,16) as SETTLED_AMOUNT_TRANSACTION_CURRENCY\n           , nvl(b.SETTLEDAMOUNTCOMPANYCURRENCY, 0)::number(25,16) as SETTLED_AMOUNT_COMPANY_CURRENCY\n           , nvl(b.SETTLEDAMOUNTREPORTINGCURRENCY, 0)::number(25,16) as SETTLED_AMOUNT_REPORTING_CURRENCY\n           , nvl(b.ACCOUNTNUM, '')::varchar as ACCOUNT_NUMBER \n           , nvl(b.APPROVER, 0)::number as APPROVER\n           , nvl(b.CASHDISCCODE, '')::varchar as CASH_DISCOUNT_CODE\t\n           , nvl(b.CURRENCYCODE, '')::varchar as CURRENCY_CODE\t\t\t\t\n           , nvl(b.DEFAULTDIMENSION, '')::varchar as DEFAULT_DIMENSION\n           , nvl(b.PAYMMODE, '')::varchar as PAYMENT_MODE\n           , nvl(b.PAYMSPEC, '')::varchar as PAYMENT_SPECIFICATION\n           , nvl(b.REMITTANCELOCATION, 0)::number as REMITTANCE_LOCATION\n           , nvl(b.CHECKDATE, '1950-01-01')::date as CHECK_DATE\n           , nvl(b.PAYMENTTERMS, '')::varchar as PAYMENT_TERMS\n           , nvl(b.INVOICEDATE, '1950-01-01')::date as INVOICE_DATE \n           , nvl(b.DAYSOVERDUE, 0)::number as DAYS_OVERDUE\n           , nvl(b.TRANSRECIDSETTLED, 0)::number as SETTLED_TRANSACTION_RECORD_ID\n           , nvl(b.DAYSTOPAY, 0)::number as DAYS_TO_PAY\n           , nvl(b.INVOICESTATUS , '')::varchar as INVOICE_STATUS\n           , nvl(b.INVOICEFULLSTATUS, '')::varchar as INVOICE_FULL_STATUS\n           , nvl(b.TRANSACTIONTYPE, '')::varchar as TRANSACTION_TYPE\n           , nvl(b.ISAPPROVED, '')::varchar as IS_APPROVED\n           , nvl(b.ISREVERSAL, '')::varchar as IS_REVERSAL\n            , nvl(b.dw_sourcecode, '')::varchar as HK_SOURCE_NAME\n\t\t\t, '1950-01-01 00:00:00'::timestamp_tz as HK_SOURCE_CREATED_TIMESTAMP\n\t\t\t, nvl(b.dw_timestamp, '1950-01-01 00:00:00')::timestamp_tz as HK_SOURCE_LAST_UPDATED_TIMESTAMP\n\t\t\t, '-1'::varchar as HK_CREATED_JOB_RUN_ID\n\t\t\t, nvl(b.dw_batch, '-1')::varchar as HK_LAST_UPDATED_JOB_RUN_ID\n  FROM\t\n\t(SELECT\n\tHK_SOURCE_NAME \t\t\t,\n\tHK_JOB_RUN_ID \t\t\t,\n\tHK_CREATED_TIMESTAMP \t,\n\tHK_WAREHOUSE_ID \t\t,\n\tDW_ID \t\t\t\t\t,\n\tALIGNEDDUEDATE \t\t\t,\n\tAPPROVEDDATE \t\t\t,\n\tCLOSEDDATE \t\t\t\t,\n\tDOCUMENTDATE \t\t\t,\n\tDUEDATE \t\t\t\t,\n\tLASTSETTLEMENTDATE \t\t,\n\tTRANSACTIONDATE \t\t,\n\tRECORDID \t\t\t\t,\n\tDOCUMENTNUMBER \t\t\t,\n\tINVOICEID \t\t\t\t,\n\tLEGALENTITY \t\t\t,\n\tLASTSETTLEMENTVOUCHER \t,\n\tVOUCHER \t\t\t\t,\n\tAMOUNTTRANSACTIONCURRENCY \t,\n\tAMOUNTCOMPANYCURRENCY \t\t,\n\tSETTLEDAMOUNTTRANSACTIONCURRENCY \t,\n\tSETTLEDAMOUNTCOMPANYCURRENCY \t\t,\n\tSETTLEDAMOUNTREPORTINGCURRENCY \t\t,\n\tINCREMENTALTIMESTAMP \t\t\t\t,\n\tCHECKDATE ,\n\tPAYMENTTERMS ,\n\tINVOICEDATE ,\n\tDAYSOVERDUE ,\n\tTRANSRECIDSETTLED ,\n\tDAYSTOPAY,\n\tINVOICESTATUS ,\n\tINVOICEFULLSTATUS ,\n\tACCOUNTNUM ,\n\tAPPROVER ,\n\tCASHDISCCODE ,\n\tCURRENCYCODE ,\n\tDEFAULTDIMENSION ,\n\tPAYMMODE ,\n\tPAYMSPEC ,\n\tREMITTANCELOCATION ,\t\n\tTRANSACTIONTYPE ,\n\tISAPPROVED\t,\n\tISREVERSAL ,\n\tDW_BATCH ,\n\tDW_SOURCECODE ,\n\tDW_TIMESTAMP \n\tFROM @{pipeline().globalParameters.environment}_RAW.EDW_DWH.FACTVENDORTRANSACTIONS )b\n    \t\t\tinner join (select min(date_value) as MIN_DATE_VALUE\n\t\t\t\t\t\t\t, max(date_value) as MAX_DATE_VALUE\n\t\t\t\t\t\tfrom global.DIM_DATE\n\t\t\t\t\t\twhere date_value not in ('1950-01-01', '1951-12-31', '9000-01-01', '9951-12-31')) dd1 on 1=1 ) a\n\tleft join global.DIM_SOURCE_SYSTEM dss1 on\n\t\ta.dim_source_system_snkey = dss1.dim_source_system_snkey\n    left join global.DIM_CASH_DISCOUNT dcd1 on\n\t\ta.dim_cash_discount_snkey = dcd1.dim_cash_discount_snkey\n\tleft join global.DIM_CURRENCY dcurr1 on\n\t\ta.dim_currency_snkey = dcurr1.dim_currency_snkey    \n    left join global.DIM_DEFAULT_DIMENSION ddim1 on\n\t\ta.dim_default_dimension_snkey = ddim1.dim_default_dimension_snkey\n\tleft join global.DIM_LEGAL_ENTITY dle1 on\n\t\ta.dim_legal_entity_snkey = dle1.dim_legal_entity_snkey\n\tleft join global.DIM_LOCATION dl1 on\n\t\ta.dim_location_snkey = dl1.dim_location_snkey\n\tleft join global.DIM_VENDOR dvi1 on\n\t    a.dim_vendor_invoice_snkey = dvi1.dim_vendor_snkey and\n\t    a.INVOICE_DATE >= dvi1.hk_effective_start_timestamp and\n\t\ta.INVOICE_DATE < dvi1.hk_effective_end_timestamp\n    left join global.DIM_VENDOR_PAYMENT_MODE dvpm1 on\n\t\ta.DIM_VENDOR_PAYMENT_MODE_SNKEY = dvpm1.DIM_VENDOR_PAYMENT_MODE_SNKEY\n    left join global.DIM_VENDOR_PAYMENT_SPECIFICATION dvps1 on\n\t\ta.DIM_VENDOR_PAYMENT_SPECIFICATION_SNKEY = dvps1.DIM_VENDOR_PAYMENT_SPECIFICATION_SNKEY\n\tleft join global.DIM_WORKER dwa1 on\n\t\ta.dim_worker_approver_snkey = dwa1.dim_worker_snkey\n\tleft join global.DIM_DATE dd1 on\n\t\ta.aligned_due_date_dim_date_snkey = dd1.dim_date_snkey\n\tleft join global.DIM_DATE dd2 on\n\t\ta.approved_date_dim_date_snkey = dd2.dim_date_snkey\n\tleft join global.DIM_DATE dd3 on\n\t\ta.closed_date_dim_date_snkey = dd3.dim_date_snkey\n\tleft join global.DIM_DATE dd4 on\n\t\ta.document_date_dim_date_snkey = dd4.dim_date_snkey\n\tleft join global.DIM_DATE dd5 on\n\t\ta.due_date_dim_date_snkey = dd5.dim_date_snkey\n\tleft join global.DIM_DATE dd6 on\n\t\ta.last_settlement_date_dim_date_snkey = dd6.dim_date_snkey\n\tleft join global.DIM_DATE dd7 on\n\t\ta.transaction_date_dim_date_snkey = dd7.dim_date_snkey\n    left join global.DIM_DATE dd8 on\n\t\ta.check_date_dim_date_snkey = dd8.dim_date_snkey\n    left join global.DIM_DATE dd9 on\n\t\ta.invoice_date_dim_date_snkey = dd9.dim_date_snkey;",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "FACTVENDORTRANSACTIONS"
					},
					"p_temp_directory": {
						"type": "string",
						"defaultValue": "temp_files"
					},
					"p_tgt_schema_nm": {
						"type": "string",
						"defaultValue": "EDW_DWH"
					},
					"p_curate_table_name": {
						"type": "string",
						"defaultValue": "FACT_VENDOR_TRANSACTIONS"
					}
				},
				"folder": {
					"name": "history_fact"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_facts_accounts_payable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "trigger_pbi_refresh_accounts_payable",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "sp_fact_vendor_transactions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_pbi_partition_or_full",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_table_nm": "'FACT_VENDOR_TRANSACTIONS'",
								"p_tgt_audit_table_nm": "PBI_SNOWFLAKE_BRIDGE",
								"p_tgt_audit_schema_nm": "CONTROL",
								"p_webhook_url": "https://tempursealyinc.webhook.office.com/webhookb2/7aa89678-96e1-4bbf-a53a-a4ed05939336@7c6c07f6-1ef4-4368-8d5d-4686d15efd79/IncomingWebhook/1f396bf192aa4302972d1f5c14725f25/4c6968dc-2ec8-4f99-b936-1206cdf30aeb/V2vDldglQPzQI47CZ3209z8qtSZGI1r-cu5HdjDC-h_dk1",
								"p_dataset_nm": "Accounts Payable Gold Dataset",
								"p_web_body_fullrefresh": {
									"value": "@createArray('{\n  \"type\": \"full\",\n  \"commitMode\": \"transactional\",\n  \"applyRefreshPolicy\": \"true\"\n}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "sp_fact_vendor_transactions",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_pbi_refresh_stored_procedure",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_tgt_curate_table_nm": "FACT_VENDOR_TRANSACTIONS"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "pbi_dataset_refresh_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2024-10-21T13:36:39Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_facts_accounts_receivable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "trigger_pbi_refresh_accounts_receivable",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_pbi_partition_or_full",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_table_nm": "'FACT_CUSTOMER_TRANSACTIONS', 'FACT_CUSTOMER_SETTLEMENTS'",
								"p_tgt_audit_table_nm": "PBI_SNOWFLAKE_BRIDGE",
								"p_tgt_audit_schema_nm": "CONTROL",
								"p_webhook_url": "https://tempursealyinc.webhook.office.com/webhookb2/7aa89678-96e1-4bbf-a53a-a4ed05939336@7c6c07f6-1ef4-4368-8d5d-4686d15efd79/IncomingWebhook/b090202d98d94f709dcf172e529f9ca8/4c6968dc-2ec8-4f99-b936-1206cdf30aeb/V2AAqCyEWcFGO6dBo1MqsxkiRAye611vs8iOTNHSsNo1s1",
								"p_dataset_nm": "Accounts Receivable Gold Dataset",
								"p_web_body_fullrefresh": {
									"value": "@createArray('{\n  \"type\": \"full\",\n  \"commitMode\": \"transactional\",\n  \"applyRefreshPolicy\": \"true\"\n}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "pbi_dataset_refresh_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2024-10-21T13:36:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_facts_finance')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "sp_fact_tax_transactions",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_pbi_refresh_stored_procedure",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_tgt_curate_table_nm": "FACT_TAX_TRANSACTIONS"
							}
						}
					},
					{
						"name": "sp_fact_general_ledger",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_pbi_refresh_stored_procedure",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_tgt_curate_table_nm": "FACT_GENERAL_LEDGER"
							}
						}
					},
					{
						"name": "sp_fact_budget_transactions",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_pbi_refresh_stored_procedure",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_tgt_curate_table_nm": "FACT_BUDGET_TRANSACTIONS"
							}
						}
					},
					{
						"name": "trigger_pbi_refresh_finance",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "sp_fact_tax_transactions",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "sp_fact_general_ledger",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "sp_fact_budget_transactions",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "sp_fact_ledger_journal_transactions",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "sp_dim_ledger_dimension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_pbi_partition_or_full",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_table_nm": "'FACT_BUDGET_TRANSACTIONS', 'FACT_GENERAL_LEDGER', 'FACT_LEDGER_JOURNAL_TRANSACTIONS', 'FACT_TAX_TRANSACTIONS','DIM_LEDGER_DIMENSION'",
								"p_tgt_audit_table_nm": "PBI_SNOWFLAKE_BRIDGE",
								"p_tgt_audit_schema_nm": "CONTROL",
								"p_webhook_url": "https://tempursealyinc.webhook.office.com/webhookb2/7aa89678-96e1-4bbf-a53a-a4ed05939336@7c6c07f6-1ef4-4368-8d5d-4686d15efd79/IncomingWebhook/655f7f4529e842778d78509333314831/4c6968dc-2ec8-4f99-b936-1206cdf30aeb/V2nHZu1l5IKfBJmdjzHNFQI2gjV8lMyTEEHoz7gowAlao1",
								"p_dataset_nm": "Finance Gold Dataset",
								"p_web_body_fullrefresh": {
									"value": "@createArray('{\n  \"type\": \"full\",\n  \"commitMode\": \"transactional\",\n  \"applyRefreshPolicy\": \"true\"\n}')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "sp_fact_ledger_journal_transactions",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_pbi_refresh_stored_procedure",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_tgt_curate_table_nm": "FACT_LEDGER_JOURNAL_TRANSACTIONS"
							}
						}
					},
					{
						"name": "sp_dim_ledger_dimension",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_pbi_refresh_stored_procedure",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_tgt_curate_table_nm": "DIM_LEDGER_DIMENSION"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "pbi_dataset_refresh_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2024-11-13T05:19:41Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_facts_inventory')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "sp_fact_inventory_journal",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_pbi_refresh_stored_procedure",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_tgt_curate_table_nm": "FACT_INVENTORY_JOURNAL"
							}
						}
					},
					{
						"name": "sp_fact_inventory_transactions",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_pbi_refresh_stored_procedure",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_tgt_curate_table_nm": "FACT_INVENTORY_TRANSACTIONS"
							}
						}
					},
					{
						"name": "trigger_pbi_inventory",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "sp_fact_inventory_journal",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "sp_fact_inventory_transactions",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "sp_dim_ledger_dimension",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "sp_dim_inventory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_pbi_partitions_inventory",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_table_nm": "'FACT_INVENTORY_JOURNAL', 'FACT_INVENTORY_TRANSACTIONS','DIM_INVENTORY','DIM_LEDGER_DIMENSION'",
								"p_tgt_audit_table_nm": "\nPBI_SNOWFLAKE_BRIDGE",
								"p_tgt_audit_schema_nm": "CONTROL",
								"p_dataset_nm": "Inventory Gold Dataset",
								"p_webhook_url": "https://tempursealyinc.webhook.office.com/webhookb2/7aa89678-96e1-4bbf-a53a-a4ed05939336@7c6c07f6-1ef4-4368-8d5d-4686d15efd79/IncomingWebhook/4905165a872141dc9be9b4991b7739d7/4c6968dc-2ec8-4f99-b936-1206cdf30aeb/V2d9v5N5gZ39UfJ-QCw-OHTE5bVzIK1i4mYRICBbCrt381",
								"p_web_body_fullrefresh": {
									"value": "@createArray('{\n    \"type\": \"full\",\n    \"objects\": [\n        {\n            \"database\": \"Inventory Gold Dataset\",\n            \"table\": \"Inventory Journal\"\n        }\n        ,{\n            \"database\": \"Inventory Gold Dataset\",\n            \"table\": \"Company\"\n        }\n        ,{\n            \"database\": \"Inventory Gold Dataset\",\n            \"table\": \"Date\"\n        }\n        ,{\n            \"database\": \"Inventory Gold Dataset\",\n            \"table\": \"Items\"\n        }\n        ,{\n            \"database\": \"Inventory Gold Dataset\",\n            \"table\": \"Inventory Transaction Details\"\n        }\n        ,{\n            \"database\": \"Inventory Gold Dataset\",\n            \"table\": \"Currency\"\n        }\n        ,{\n            \"database\": \"Inventory Gold Dataset\",\n            \"table\": \"Default Dimension\"\n        }\n        \n        ,{\n            \"database\": \"Inventory Gold Dataset\",\n            \"table\": \"User Info\"\n        }\n        ,{\n            \"database\": \"Inventory Gold Dataset\",\n            \"table\": \"Inventory Journal Details\"\n        }\n\t\t,{\n            \"database\": \"Inventory Gold Dataset\",\n            \"table\": \"Inventory Journal Transactions\"\n        }\n    ],\n    \"applyRefreshPolicy\": \"true\"\n}',\n'{\n    \"type\": \"full\",\n    \"objects\": [\n        {\n            \"database\": \"Inventory Gold Dataset\",\n            \"table\": \"Ledger Dimension\"\n        },\n        {\n            \"database\": \"Inventory Gold Dataset\",\n            \"table\": \"Inventory\"\n        },\n        {\n            \"database\": \"Inventory Gold Dataset\",\n            \"table\": \"Receiving Inventory\"\n        }\n    ],\n    \"applyRefreshPolicy\": \"true\"\n}')",
									"type": "Expression"
								},
								"p_fn_app_url": {
									"value": "https://invpartitiondtu.azurewebsites.net/api/Dailyrun?code=quleFU4VQP1uHREYa2CwQAAyappqD2FfbY3r-IUiD-Z-AzFuh82B1w%3D%3D",
									"type": "Expression"
								},
								"p_server_nm": "powerbi://api.powerbi.com/v1.0/myorg/MDW%20Inventory%20Dev"
							}
						}
					},
					{
						"name": "sp_dim_ledger_dimension",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_pbi_refresh_stored_procedure",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_tgt_curate_table_nm": "DIM_LEDGER_DIMENSION"
							}
						}
					},
					{
						"name": "sp_dim_inventory",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_pbi_refresh_stored_procedure",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_tgt_curate_table_nm": "DIM_INVENTORY"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "pbi_dataset_refresh_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2024-11-13T05:19:41Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_facts_operations')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "sp_fact_production_journal",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_pbi_refresh_stored_procedure",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_tgt_curate_table_nm": "FACT_PRODUCTION_JOURNAL"
							}
						}
					},
					{
						"name": "trigger_pbi_refresh_operations",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "sp_fact_production_journal",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_pbi_partition_or_full",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_table_nm": "'FACT_PRODUCTION_JOURNAL'",
								"p_tgt_audit_table_nm": "PBI_SNOWFLAKE_BRIDGE",
								"p_tgt_audit_schema_nm": "CONTROL",
								"p_webhook_url": "https://tempursealyinc.webhook.office.com/webhookb2/7aa89678-96e1-4bbf-a53a-a4ed05939336@7c6c07f6-1ef4-4368-8d5d-4686d15efd79/IncomingWebhook/140271dc998c4d27a423766fdc4da3a7/4c6968dc-2ec8-4f99-b936-1206cdf30aeb/V2lNcpG2AdfMwjOpgofm3KfaqvkrDAeluaSXRj5koRGxc1",
								"p_dataset_nm": "Operations Gold Dataset",
								"p_web_body_fullrefresh": {
									"value": "@createArray('{\n  \"type\": \"full\",\n  \"commitMode\": \"transactional\",\n  \"applyRefreshPolicy\": \"true\"\n}')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "pbi_dataset_refresh_pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2024-10-21T13:36:39Z"
			},
			"dependsOn": []
		}
	]
}