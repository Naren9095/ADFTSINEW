{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "mdw-df-nala-dev"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_returndispositioncode_to_dim_return_disposition')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": "select \r\nrdc1.DATAAREAID as DATAAREAID,\r\nrdc1.DISPOSITIONCODEID as DISPOSITIONCODEID,\r\nrdc1.DESCRIPTION as DESCRIPTION,\r\nrdc1.DISPOSITIONACTION as DISPOSITIONACTION,\r\ntet1.ENUMVALUELABEL as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_DISPOSITIONACTION\r\nfrom\r\ndbo.RETURNDISPOSITIONCODE rdc1\r\nleft join (select ENUMNAME, ENUMVALUE\r\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\r\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\r\n\t\twhere ENUMNAME = 'DispositionAction'\r\n\t\tgroup by ENUMNAME, ENUMVALUE) tet1 on\r\n\trdc1.DISPOSITIONACTION = tet1.ENUMVALUE",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DISPOSITIONCODEID",
																"type": "String"
															},
															"sink": {
																"name": "DISPOSITIONCODEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DISPOSITIONACTION",
																"type": "Int32"
															},
															"sink": {
																"name": "DISPOSITIONACTION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_DISPOSITIONACTION",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_DISPOSITIONACTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('select \nrdc1.dataareaid as DATAAREAID,\nrdc1.dispositioncodeid as DISPOSITIONCODEID,\nrdc1.description as DESCRIPTION,\nrdc1.dispositionaction as DISPOSITIONACTION,\ntet1.ENUMVALUELABEL as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_DISPOSITIONACTION\nfrom ' \n,pipeline().globalParameters.d365_dbName,'.','returndispositioncode rdc1\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvalue) as ENUMVALUELABEL\n\t\tfrom  ' \n,pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n\t\twhere enumname = ''DispositionAction''\n\t\tgroup by enumname, enumvalue) tet1 on\n\trdc1.dispositionaction = tet1.enumvalue')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DISPOSITIONCODEID",
																"type": "String"
															},
															"sink": {
																"name": "DISPOSITIONCODEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DISPOSITIONACTION",
																"type": "Int32"
															},
															"sink": {
																"name": "DISPOSITIONACTION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_DISPOSITIONACTION",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_DISPOSITIONACTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "RETURNDISPOSITIONCODE"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "RETURNDISPOSITIONCODE"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_RETURN_DISPOSITION"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T10:58:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_returnreasoncode_to_dim_return_reason')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_retail_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_retail_d365",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select\nrrc1.DATAAREAID\n,rrc1.REASONCODEID\n,rrc1.DESCRIPTION\n,rrc1.REASONCODEGROUPID\n,rrcg1.DESCRIPTION as DESCRIPTION_CODEGROUP\nfrom\ndbo.RETURNREASONCODE rrc1\nleft join dbo.RETURNREASONCODEGROUP rrcg1 on\n    rrc1.DATAAREAID = rrcg1.DATAAREAID and\n    rrc1.REASONCODEGROUPID = rrcg1.REASONCODEGROUPID",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "REASONCODEID",
																"type": "String"
															},
															"sink": {
																"name": "REASONCODEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "REASONCODEGROUPID",
																"type": "String"
															},
															"sink": {
																"name": "REASONCODEGROUPID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DESCRIPTION_CODEGROUP",
																"type": "String"
															},
															"sink": {
																"name": "DESCRIPTION_CODEGROUP",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "2",
									"activities": [
										{
											"name": "sql_retail_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select\nrrc1.DATAAREAID\n,rrc1.REASONCODEID\n,rrc1.DESCRIPTION\n,rrc1.REASONCODEGROUPID\n,rrcg1.DESCRIPTION as DESCRIPTION_CODEGROUP\nfrom\ndbo.RETURNREASONCODE rrc1\nleft join dbo.RETURNREASONCODEGROUP rrcg1 on\n    rrc1.DATAAREAID = rrcg1.DATAAREAID and\n    rrc1.REASONCODEGROUPID = rrcg1.REASONCODEGROUPID",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "REASONCODEID",
																"type": "String"
															},
															"sink": {
																"name": "REASONCODEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "REASONCODEGROUPID",
																"type": "String"
															},
															"sink": {
																"name": "REASONCODEGROUPID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DESCRIPTION_CODEGROUP",
																"type": "String"
															},
															"sink": {
																"name": "DESCRIPTION_CODEGROUP",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.retail_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.retail_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "sql_retail_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_retail_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_retail_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_retail_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_retail_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_retail_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_retail_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "sql_retail_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_retail_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "d365_to_raw",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "WarehouseSource",
											"additionalColumns": [
												{
													"name": "HK_SOURCE_NAME",
													"value": {
														"value": "@pipeline().parameters.p_src_nm",
														"type": "Expression"
													}
												},
												{
													"name": "HK_JOB_RUN_ID",
													"value": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													}
												},
												{
													"name": "LAST_MODIFIED_DATE",
													"value": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "@concat('select\nrrc1.dataareaid as DATAAREAID\n,rrc1.reasoncodeid as REASONCODEID\n,rrc1.description as DESCRIPTION\n,rrc1.reasoncodegroupid as REASONCODEGROUPID\n,rrcg1.description as DESCRIPTION_CODEGROUP\nfrom ',pipeline().globalParameters.d365_dbName,'.','returnreasoncode rrc1\nleft join ',pipeline().globalParameters.d365_dbName,'.','returnreasoncodegroup rrcg1 on\n    rrc1.dataareaid = rrcg1.dataareaid and\n    rrc1.reasoncodegroupid = rrcg1.reasoncodegroupid\n    where rrc1.dataareaid is not null')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeSink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "ls_blob_storage",
												"type": "LinkedServiceReference"
											},
											"path": {
												"value": "@pipeline().globalParameters.rootDir",
												"type": "Expression"
											},
											"enableCompression": true
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "HK_SOURCE_NAME",
														"type": "String"
													},
													"sink": {
														"name": "HK_SOURCE_NAME",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "HK_JOB_RUN_ID",
														"type": "String"
													},
													"sink": {
														"name": "HK_JOB_RUN_ID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DATAAREAID",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DATAAREAID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "REASONCODEID",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "REASONCODEID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DESCRIPTION",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DESCRIPTION",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "REASONCODEGROUPID",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "REASONCODEGROUPID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DESCRIPTION_CODEGROUP",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DESCRIPTION_CODEGROUP",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "LAST_MODIFIED_DATE",
														"type": "String"
													},
													"sink": {
														"name": "LATEST_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "TIMESTAMP_TZ"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_fabric_wh",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_snowflake",
											"type": "DatasetReference",
											"parameters": {
												"p_tgt_table_name": {
													"value": "@pipeline().parameters.p_tgt_raw_table_nm",
													"type": "Expression"
												},
												"p_tgt_schema_name": {
													"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
													"type": "Expression"
												},
												"p_ls_DbName": {
													"value": "@pipeline().globalParameters.snow_rawDb",
													"type": "Expression"
												},
												"p_ls_Env": {
													"value": "@pipeline().globalParameters.environment",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "d365_raw_load_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "d365_to_raw",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('d365_to_raw').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('d365_to_raw').Error['message']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('d365_to_raw').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('d365_to_raw').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "d365_load_to_raw_fail",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "d365_raw_load_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('d365_to_raw').Error['message']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "RETURNREASONCODE"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "RETURNREASONCODE"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_RETURN_REASON"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"pipeline_start_time": {
						"type": "String"
					},
					"pipeline_end_time": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T11:19:33Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_salesorigin_to_dim_sales_origin')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_retail_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_retail_d365",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select  so1.dataareaid as DATAAREAID, \nso1.originid as ORIGINID, \nso1.description as DESCRIPTION, \nso1.ebcmarkupallowed as EBCMARKUPALLOWED \nfrom dbo.salesorigin so1",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ORIGINID",
																"type": "String"
															},
															"sink": {
																"name": "ORIGINID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "EBCMARKUPALLOWED",
																"type": "Int32"
															},
															"sink": {
																"name": "EBCMARKUPALLOWED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "2",
									"activities": [
										{
											"name": "sql_retail_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select  so1.DATAAREAID, so1.ORIGINID, so1.DESCRIPTION, NULL as EBCMARKUPALLOWED from dbo.SALESORIGIN so1",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ORIGINID",
																"type": "String"
															},
															"sink": {
																"name": "ORIGINID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "EBCMARKUPALLOWED",
																"type": "Int32"
															},
															"sink": {
																"name": "EBCMARKUPALLOWED",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.retail_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.retail_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "sql_retail_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_retail_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_retail_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_retail_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_retail_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_retail_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_retail_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "sql_retail_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_retail_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "d365_to_raw",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "WarehouseSource",
											"additionalColumns": [
												{
													"name": "HK_SOURCE_NAME",
													"value": {
														"value": "@pipeline().parameters.p_src_nm",
														"type": "Expression"
													}
												},
												{
													"name": "HK_JOB_RUN_ID",
													"value": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													}
												},
												{
													"name": "LAST_MODIFIED_DATE",
													"value": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "@concat('select  so1.dataareaid as DATAAREAID, \nso1.originid as ORIGINID, \nso1.description as DESCRIPTION, \nso1.ebcmarkupallowed as EBCMARKUPALLOWED \nfrom ',pipeline().globalParameters.d365_dbName,'.',toLower(pipeline().parameters.p_src_table_nm),' so1')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeSink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "ls_blob_storage",
												"type": "LinkedServiceReference"
											},
											"path": {
												"value": "@pipeline().globalParameters.rootDir",
												"type": "Expression"
											},
											"enableCompression": true
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "HK_SOURCE_NAME",
														"type": "String"
													},
													"sink": {
														"name": "HK_SOURCE_NAME",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "HK_JOB_RUN_ID",
														"type": "String"
													},
													"sink": {
														"name": "HK_JOB_RUN_ID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DATAAREAID",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DATAAREAID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "ORIGINID",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "ORIGINID",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "DESCRIPTION",
														"type": "String",
														"physicalType": "nvarchar"
													},
													"sink": {
														"name": "DESCRIPTION",
														"type": "String",
														"physicalType": "VARCHAR"
													}
												},
												{
													"source": {
														"name": "EBCMARKUPALLOWED",
														"type": "Int64",
														"physicalType": "bigint"
													},
													"sink": {
														"name": "EBCMARKUPALLOWED",
														"type": "Int64",
														"physicalType": "NUMBER"
													}
												},
												{
													"source": {
														"name": "LAST_MODIFIED_DATE",
														"type": "String"
													},
													"sink": {
														"name": "LATEST_MODIFIEDDATETIME",
														"type": "DateTime",
														"physicalType": "TIMESTAMP_TZ"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_fabric_wh",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_snowflake",
											"type": "DatasetReference",
											"parameters": {
												"p_tgt_table_name": {
													"value": "@pipeline().parameters.p_tgt_raw_table_nm",
													"type": "Expression"
												},
												"p_tgt_schema_name": {
													"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
													"type": "Expression"
												},
												"p_ls_DbName": {
													"value": "@pipeline().globalParameters.snow_rawDb",
													"type": "Expression"
												},
												"p_ls_Env": {
													"value": "@pipeline().globalParameters.environment",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "d365_raw_load_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "d365_to_raw",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('d365_to_raw').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('d365_to_raw').Error['message']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('d365_to_raw').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('d365_to_raw').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "d365_load_to_raw_fail",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "d365_raw_load_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('d365_to_raw').Error['message']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "SALESORIGIN"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "SALESORIGIN"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_SALES_ORIGIN"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"pipeline_start_time": {
						"type": "String"
					},
					"pipeline_end_time": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-04T17:19:28Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_salespool_to_dim_sales_pool')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": "SELECT\r\nsp1.dataareaid as DATAAREAID\r\n,sp1.salespoolid as SALESPOOLID\r\n,sp1.name as NAME\r\nFROM dbo.SALESPOOL sp1",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SALESPOOLID",
																"type": "String"
															},
															"sink": {
																"name": "SALESPOOLID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('SELECT\nsp1.dataareaid as DATAAREAID\n,sp1.salespoolid as SALESPOOLID\n,sp1.name as NAME\nFROM ' \n,pipeline().globalParameters.d365_dbName,'.','salespool sp1')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SALESPOOLID",
																"type": "String"
															},
															"sink": {
																"name": "SALESPOOLID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "SALESPOOL"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "SALESPOOL"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_SALES_POOL"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T10:58:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_shipcarriertable_to_dim_shipping_carrier')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": "select \r\nsct1.DATAAREAID as DATAAREAID,\r\nsct1.CARRIERID as CARRIERID,\r\nsct1.CARRIERNAME as CARRIERNAME,\r\nsct1.CARRIERSERVICEDESCRIPTION as CARRIERSERVICEDESCRIPTION,\r\nscc1.CARRIERNAME as SHIPCARRIERCOMPANY_CARRIERNAME,\r\nscc1.ANCILLARYCHARGE as SHIPCARRIERCOMPANY_ANCILLARYCHARGE,\r\nscc1.CORECHARGE as SHIPCARRIERCOMPANY_CORECHARGE,\r\nscc1.FUELSURCHAGE as SHIPCARRIERCOMPANY_FUELSURCHAGE,\r\nscc1.HANDLINGCHARGE as SHIPCARRIERCOMPANY_HANDLINGCHARGE,\r\nscca1.CARRIERNAME as SHIPCARRIERCOMPANYACCOUNTS_CARRIERNAME,\r\nscca1.ACCOUNTNUMBER as SHIPCARRIERCOMPANYACCOUNTS_ACCOUNTNUMBER,\r\nscca1.CURRENCYCODE as SHIPCARRIERCOMPANYACCOUNTS_CURRENCYCODE,\r\nc1.TXT as CURRENCY_TXT,\r\nmt1.TXT as MARKUPTABLE1_TXT,\r\nmt2.TXT as MARKUPTABLE2_TXT,\r\nmt3.TXT as MARKUPTABLE3_TXT,\r\nmt4.TXT as MARKUPTABLE4_TXT\r\nfrom\r\ndbo.SHIPCARRIERTABLE sct1\r\nleft join dbo.SHIPCARRIERCOMPANY scc1 on\r\n\tsct1.DATAAREAID = scc1.DATAAREAID and\r\n\tsct1.CARRIERNAME = scc1.CARRIERNAME\r\nleft join dbo.SHIPCARRIERCOMPANYACCOUNTS scca1 on\r\n\tscc1.DATAAREAID = scca1.DATAAREAID and\r\n\tscc1.CARRIERNAME = scca1.CARRIERNAME\r\nleft join dbo.CURRENCY c1 on\r\n\tscca1.CURRENCYCODE = c1.CURRENCYCODE\r\nleft join dbo.MARKUPTABLE mt1 on\r\n\tmt1.MODULETYPE = 1 and\r\n\tscc1.DATAAREAID = mt1.DATAAREAID and\r\n\tscc1.ANCILLARYCHARGE = mt1.MARKUPCODE\r\nleft join dbo.MARKUPTABLE mt2 on\r\n\tmt2.MODULETYPE = 1 and\r\n\tscc1.DATAAREAID = mt2.DATAAREAID and\r\n\tscc1.CORECHARGE = mt2.MARKUPCODE\r\nleft join dbo.MARKUPTABLE mt3 on\r\n\tmt3.MODULETYPE = 1 and\r\n\tscc1.DATAAREAID = mt3.DATAAREAID and\r\n\tscc1.FUELSURCHAGE = mt3.MARKUPCODE\r\nleft join dbo.MARKUPTABLE mt4 on\r\n\tmt4.MODULETYPE = 1 and\r\n\tscc1.DATAAREAID = mt4.DATAAREAID and\r\n\tscc1.HANDLINGCHARGE = mt4.MARKUPCODE",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CARRIERID",
																"type": "String"
															},
															"sink": {
																"name": "CARRIERID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CARRIERNAME",
																"type": "String"
															},
															"sink": {
																"name": "CARRIERNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CARRIERSERVICEDESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "CARRIERSERVICEDESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SHIPCARRIERCOMPANY_CARRIERNAME",
																"type": "String"
															},
															"sink": {
																"name": "SHIPCARRIERCOMPANY_CARRIERNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SHIPCARRIERCOMPANY_ANCILLARYCHARGE",
																"type": "String"
															},
															"sink": {
																"name": "SHIPCARRIERCOMPANY_ANCILLARYCHARGE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SHIPCARRIERCOMPANY_CORECHARGE",
																"type": "String"
															},
															"sink": {
																"name": "SHIPCARRIERCOMPANY_CORECHARGE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SHIPCARRIERCOMPANY_FUELSURCHAGE",
																"type": "String"
															},
															"sink": {
																"name": "SHIPCARRIERCOMPANY_FUELSURCHAGE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SHIPCARRIERCOMPANY_HANDLINGCHARGE",
																"type": "String"
															},
															"sink": {
																"name": "SHIPCARRIERCOMPANY_HANDLINGCHARGE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SHIPCARRIERCOMPANYACCOUNTS_CARRIERNAME",
																"type": "String"
															},
															"sink": {
																"name": "SHIPCARRIERCOMPANYACCOUNTS_CARRIERNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SHIPCARRIERCOMPANYACCOUNTS_ACCOUNTNUMBER",
																"type": "String"
															},
															"sink": {
																"name": "SHIPCARRIERCOMPANYACCOUNTS_ACCOUNTNUMBER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SHIPCARRIERCOMPANYACCOUNTS_CURRENCYCODE",
																"type": "String"
															},
															"sink": {
																"name": "SHIPCARRIERCOMPANYACCOUNTS_CURRENCYCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CURRENCY_TXT",
																"type": "String"
															},
															"sink": {
																"name": "CURRENCY_TXT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "MARKUPTABLE1_TXT",
																"type": "String"
															},
															"sink": {
																"name": "MARKUPTABLE1_TXT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "MARKUPTABLE2_TXT",
																"type": "String"
															},
															"sink": {
																"name": "MARKUPTABLE2_TXT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "MARKUPTABLE3_TXT",
																"type": "String"
															},
															"sink": {
																"name": "MARKUPTABLE3_TXT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "MARKUPTABLE4_TXT",
																"type": "String"
															},
															"sink": {
																"name": "MARKUPTABLE4_TXT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('select \nsct1.dataareaid as DATAAREAID,\nsct1.carriercode as CARRIERID,\nsct1.carriercode as CARRIERNAME,\nsct1.name as CARRIERSERVICEDESCRIPTION,\nsct1.carriercode as SHIPCARRIERCOMPANY_CARRIERNAME,\n'''' AS SHIPCARRIERCOMPANY_ANCILLARYCHARGE,\n''''  AS SHIPCARRIERCOMPANY_CORECHARGE,\n'''' AS SHIPCARRIERCOMPANY_FUELSURCHAGE,\n''''  AS SHIPCARRIERCOMPANY_HANDLINGCHARGE,\n''''  AS SHIPCARRIERCOMPANYACCOUNTS_CARRIERNAME,\n'''' AS SHIPCARRIERCOMPANYACCOUNTS_ACCOUNTNUMBER,\n'''' AS SHIPCARRIERCOMPANYACCOUNTS_CURRENCYCODE,\n'''' AS CURRENCY_TXT,\n'''' AS MARKUPTABLE1_TXT,\n'''' AS MARKUPTABLE2_TXT,\n'''' AS MARKUPTABLE3_TXT,\n'''' AS MARKUPTABLE4_TXT\nfrom '\n,pipeline().globalParameters.d365_dbName,'.','tmscarrier sct1 \nwhere [IsDelete] <> 1\nor [IsDelete] is  null')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CARRIERID",
																"type": "String"
															},
															"sink": {
																"name": "CARRIERID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CARRIERNAME",
																"type": "String"
															},
															"sink": {
																"name": "CARRIERNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CARRIERSERVICEDESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "CARRIERSERVICEDESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SHIPCARRIERCOMPANY_CARRIERNAME",
																"type": "String"
															},
															"sink": {
																"name": "SHIPCARRIERCOMPANY_CARRIERNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SHIPCARRIERCOMPANY_ANCILLARYCHARGE",
																"type": "String"
															},
															"sink": {
																"name": "SHIPCARRIERCOMPANY_ANCILLARYCHARGE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SHIPCARRIERCOMPANY_CORECHARGE",
																"type": "String"
															},
															"sink": {
																"name": "SHIPCARRIERCOMPANY_CORECHARGE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SHIPCARRIERCOMPANY_FUELSURCHAGE",
																"type": "String"
															},
															"sink": {
																"name": "SHIPCARRIERCOMPANY_FUELSURCHAGE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SHIPCARRIERCOMPANY_HANDLINGCHARGE",
																"type": "String"
															},
															"sink": {
																"name": "SHIPCARRIERCOMPANY_HANDLINGCHARGE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SHIPCARRIERCOMPANYACCOUNTS_CARRIERNAME",
																"type": "String"
															},
															"sink": {
																"name": "SHIPCARRIERCOMPANYACCOUNTS_CARRIERNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SHIPCARRIERCOMPANYACCOUNTS_ACCOUNTNUMBER",
																"type": "String"
															},
															"sink": {
																"name": "SHIPCARRIERCOMPANYACCOUNTS_ACCOUNTNUMBER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SHIPCARRIERCOMPANYACCOUNTS_CURRENCYCODE",
																"type": "String"
															},
															"sink": {
																"name": "SHIPCARRIERCOMPANYACCOUNTS_CURRENCYCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CURRENCY_TXT",
																"type": "String"
															},
															"sink": {
																"name": "CURRENCY_TXT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "MARKUPTABLE1_TXT",
																"type": "String"
															},
															"sink": {
																"name": "MARKUPTABLE1_TXT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "MARKUPTABLE2_TXT",
																"type": "String"
															},
															"sink": {
																"name": "MARKUPTABLE2_TXT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "MARKUPTABLE3_TXT",
																"type": "String"
															},
															"sink": {
																"name": "MARKUPTABLE3_TXT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "MARKUPTABLE4_TXT",
																"type": "String"
															},
															"sink": {
																"name": "MARKUPTABLE4_TXT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "SHIPCARRIERTABLE"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "SHIPCARRIERTABLE"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_SHIPPING_CARRIER"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T10:58:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_smmcampaigntable_to_dim_campaign')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prev_max_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')\n\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_to_raw_nala",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('SELECT\n    sct1.dataareaid as DATAAREAID\n, sct1.campaignid as CAMPAIGNID\n, sct1.campaigndate as CAMPAIGNDATE\n, sct1.campaignenddate as CAMPAIGNENDDATE\n, sct1.campaignfollowupdate as CAMPAIGNFOLLOWUPDATE\n, sct1.campaignname as CAMPAIGNNAME\n, sct1.campaignrespworker as CAMPAIGNRESPWORKER\n, sct1.description as DESCRIPTION\n, sct1.campaignstatus as CAMPAIGNSTATUS\n, sct1.modifieddatetime as MODIFIEDDATETIME\n, hw1.person as HCMWORKER_PERSON\n, hw1.modifieddatetime as HCMWORKER_MODIFIEDDATETIME\n, dpt1.name as DIRPARTYTABLE_NAME\n, dpt1.modifieddatetime as DIRPARTYTABLE_MODIFIEDDATETIME\n, tet1.enumvaluelabel as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_CAMPAIGNSTATUS\n,(SELECT MAX(LastUpdateDate)\nFROM ( \t\t\t\tVALUES\n        (sct1.MODIFIEDDATETIME),\n        ( isnull( hw1.modifieddatetime, ''1950-01-01'' )),\n        ( isnull( dpt1.modifieddatetime, ''1950-01-01'' ))) AS UpdateDate(LastUpdateDate)\n) AS LATEST_MODIFIEDDATETIME \nFROM\n    dbo.SMMCAMPAIGNTABLE sct1\n    left join dbo.HCMWORKER hw1 on\n\tsct1.CAMPAIGNRESPWORKER = hw1.RECID\n    left join dbo.DIRPARTYTABLE dpt1 on\n\thw1.PERSON = dpt1.RECID\n    left join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n    from dbo.TIMEXTENDERENUMTABLE\n    where ENUMNAME = ''smmCampaignStatus''\n    group by ENUMNAME, ENUMVALUE) tet1 on\n\tsct1.CAMPAIGNSTATUS = tet1.ENUMVALUE\n    where (SELECT MAX(LastUpdateDate)\nFROM ( \t\t\t\tVALUES\n        (sct1.MODIFIEDDATETIME),\n        ( isnull( hw1.modifieddatetime, ''1950-01-01'' )),\n        ( isnull( dpt1.modifieddatetime, ''1950-01-01'' ))) AS UpdateDate(LastUpdateDate)\n) >','''',variables('v_prev_max_timestamp'),'''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CAMPAIGNID",
																"type": "String"
															},
															"sink": {
																"name": "CAMPAIGNID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CAMPAIGNDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "CAMPAIGNDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "CAMPAIGNENDDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "CAMPAIGNENDDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "CAMPAIGNFOLLOWUPDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "CAMPAIGNFOLLOWUPDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "CAMPAIGNNAME",
																"type": "String"
															},
															"sink": {
																"name": "CAMPAIGNNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CAMPAIGNRESPWORKER",
																"type": "Int64"
															},
															"sink": {
																"name": "CAMPAIGNRESPWORKER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CAMPAIGNSTATUS",
																"type": "Int32"
															},
															"sink": {
																"name": "CAMPAIGNSTATUS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "HCMWORKER_PERSON",
																"type": "Int64"
															},
															"sink": {
																"name": "HCMWORKER_PERSON",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "HCMWORKER_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "HCMWORKER_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DIRPARTYTABLE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "DIRPARTYTABLE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DIRPARTYTABLE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "DIRPARTYTABLE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_CAMPAIGNSTATUS",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_CAMPAIGNSTATUS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_to_raw_nala",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_to_raw_nala').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_to_raw_nala').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_to_raw_nala').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_to_raw_nala').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_to_raw_nala').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_to_raw_d365",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('SELECT\n    sct1.dataareaid as DATAAREAID\n, sct1.campaignid as CAMPAIGNID\n, sct1.campaigndate as CAMPAIGNDATE\n, sct1.campaignenddate as CAMPAIGNENDDATE\n, sct1.campaignfollowupdate as CAMPAIGNFOLLOWUPDATE\n, sct1.campaignname as CAMPAIGNNAME\n, sct1.campaignrespworker as CAMPAIGNRESPWORKER\n, sct1.description as DESCRIPTION\n, sct1.campaignstatus as CAMPAIGNSTATUS\n, sct1.modifieddatetime as MODIFIEDDATETIME\n, hw1.person as HCMWORKER_PERSON\n, hw1.modifieddatetime as HCMWORKER_MODIFIEDDATETIME\n, dpt1.name as DIRPARTYTABLE_NAME\n, dpt1.modifieddatetime as DIRPARTYTABLE_MODIFIEDDATETIME\n, tet1.ENUMVALUELABEL as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_CAMPAIGNSTATUS\n,(SELECT MAX(LastUpdateDate)\nFROM ( \t\t\t\tValues \n        (sct1.modifieddatetime),\n        ( isnull( hw1.modifieddatetime, ''1950-01-01'')),\n        ( isnull( dpt1.modifieddatetime, ''1950-01-01'' ))) AS UpdateDate(LastUpdateDate)\n) AS LATEST_MODIFIEDDATETIME \nFROM ' \n,pipeline().globalParameters.d365_dbName,'.','smmcampaigntable sct1\n    left join ' \n,pipeline().globalParameters.d365_dbName,'.','hcmworker hw1 on\n\tsct1.campaignrespworker = hw1.recid\n    left join ' \n,pipeline().globalParameters.d365_dbName,'.','dirpartytable dpt1 on\n\thw1.person = dpt1.recid\n    left join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as ENUMVALUELABEL\n    from ' \n,pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n    where enumname = ''smmcampaignstatus''\n    group by enumname, enumvalue) tet1 on\n\tsct1.campaignstatus = tet1.enumvalue\n    where (SELECT MAX(LastUpdateDate)\nFROM ( VALUES\n        (sct1.modifieddatetime),\n        ( isnull( hw1.modifieddatetime, ''1950-01-01'' )),\n        ( isnull( dpt1.modifieddatetime, ''1950-01-01'' ))) AS UpdateDate(LastUpdateDate)\n) > ','''',variables('v_prev_max_timestamp'),'''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CAMPAIGNID",
																"type": "String"
															},
															"sink": {
																"name": "CAMPAIGNID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CAMPAIGNDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "CAMPAIGNDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "CAMPAIGNENDDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "CAMPAIGNENDDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "CAMPAIGNFOLLOWUPDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "CAMPAIGNFOLLOWUPDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "CAMPAIGNNAME",
																"type": "String"
															},
															"sink": {
																"name": "CAMPAIGNNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CAMPAIGNRESPWORKER",
																"type": "Int64"
															},
															"sink": {
																"name": "CAMPAIGNRESPWORKER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CAMPAIGNSTATUS",
																"type": "Int32"
															},
															"sink": {
																"name": "CAMPAIGNSTATUS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "HCMWORKER_PERSON",
																"type": "Int64"
															},
															"sink": {
																"name": "HCMWORKER_PERSON",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "HCMWORKER_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "HCMWORKER_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DIRPARTYTABLE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "DIRPARTYTABLE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DIRPARTYTABLE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "DIRPARTYTABLE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_CAMPAIGNSTATUS",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_CAMPAIGNSTATUS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_to_raw_d365",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_to_raw_d365').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_to_raw_d365').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_to_raw_d365').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_to_raw_d365').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_to_raw_d365').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_CAMPAIGN"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "SMMCAMPAIGNTABLE"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "SMMCAMPAIGNTABLE"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prev_max_timestamp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-04T13:47:58Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_soft_and_hard_delete')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "hard and soft deletes from AX source to Snowflake target",
				"activities": [
					{
						"name": "ForEach_sourcescripts",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lkp_raw_soft_hard_deletes_axnala",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lkp_raw_soft_hard_deletes_axnala').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 5,
							"activities": [
								{
									"name": "sql_nala_to_raw",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Truncate_Target_Staging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"additionalColumns": [
												{
													"name": "HK_SOURCE_NAME",
													"value": {
														"value": "@pipeline().parameters.p_src_nm",
														"type": "Expression"
													}
												},
												{
													"name": "HK_JOB_RUN_ID",
													"value": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "@concat('select ', item().PK_SRC_COLS, ',''' , item().RAW_TABLE, ''' as RAW_TABLE,''',item().TARGET_TABLE,''' as TARGET_TABLE,''',item().PK_TGT_COLS,''' as PK_TGT_COLS, ''',item().PK_CURATE_COLS,''' as PK_CURATE_COLS from ',  item().SOURCE_TABLE,' with (NOLOCK)')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SnowflakeSink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "ls_blob_storage",
												"type": "LinkedServiceReference"
											},
											"path": {
												"value": "@pipeline().globalParameters.rootDir",
												"type": "Expression"
											},
											"enableCompression": true
										},
										"enableSkipIncompatibleRow": false,
										"translator": {
											"value": "@json(item().MAPPING)",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "ds_sql_server",
											"type": "DatasetReference",
											"parameters": {
												"p_src_table_name": {
													"value": "@item().SOURCE_TABLE",
													"type": "Expression"
												},
												"p_src_schema_name": {
													"value": "@pipeline().parameters.p_src_schema_nm",
													"type": "Expression"
												},
												"p_ls_serverName": {
													"value": "@pipeline().globalParameters.nala_sql_serverName",
													"type": "Expression"
												},
												"p_ls_dbName": {
													"value": "@pipeline().globalParameters.nala_sql_dbName",
													"type": "Expression"
												},
												"p_ls_sqlUsername": {
													"value": "@pipeline().globalParameters.sql_userName",
													"type": "Expression"
												},
												"p_ls_sqlPassword": {
													"value": "@pipeline().globalParameters.sql_password",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_snowflake",
											"type": "DatasetReference",
											"parameters": {
												"p_tgt_table_name": {
													"value": "@item().RAW_TABLE",
													"type": "Expression"
												},
												"p_tgt_schema_name": {
													"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
													"type": "Expression"
												},
												"p_ls_DbName": {
													"value": "@pipeline().globalParameters.snow_rawDb",
													"type": "Expression"
												},
												"p_ls_Env": {
													"value": "@pipeline().globalParameters.environment",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "raw_load_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "sql_nala_to_raw",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('sql_nala_to_raw').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('sql_nala_to_raw').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "sql_nala_load_to_raw_fail",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "raw_load_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('sql_nala_to_raw').Error['message']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								},
								{
									"name": "raw_to_curate_sp_call",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "sql_nala_to_raw",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "ls_snowflake",
										"type": "LinkedServiceReference",
										"parameters": {
											"ls_DbName": {
												"value": "@pipeline().globalParameters.snow_auditDb",
												"type": "Expression"
											},
											"ls_Env": {
												"value": "@pipeline().globalParameters.environment",
												"type": "Expression"
											}
										}
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',item().TASK_NAME,'''',',',pipeline().parameters.p_src_code,')')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "raw_to_curate_sp_call",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId,-1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').Error['message']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "pipeline_execution_notification",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "pp_stored_procedure_failure_notification",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "pp_adf_pipeline_notification",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"subscription": {
															"value": "@pipeline().globalParameters.subscriptionId",
															"type": "Expression"
														},
														"resourceGroup": {
															"value": "@pipeline().globalParameters.resourceGroup",
															"type": "Expression"
														},
														"runId": {
															"value": "@coalesce(pipeline().RunId, -1)",
															"type": "Expression"
														},
														"name": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"triggerTime": {
															"value": "@pipeline().TriggerTime",
															"type": "Expression"
														},
														"status": {
															"value": "@toUpper('failed')",
															"type": "Expression"
														},
														"message": {
															"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
															"type": "Expression"
														},
														"executionEndTime": {
															"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
															"type": "Expression"
														},
														"runDuration": {
															"value": "@activity('raw_to_curate_sp_call').Duration",
															"type": "Expression"
														},
														"teamWebhookUrl": {
															"value": "@pipeline().globalParameters.teamsWebhookUrl",
															"type": "Expression"
														},
														"notificationTime": {
															"value": "@utcNow()",
															"type": "Expression"
														},
														"taskName": {
															"value": "@pipeline().parameters.p_tgt_curate_table_nm",
															"type": "Expression"
														},
														"taskStepNumber": {
															"value": "@pipeline().parameters.p_src_code",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "curate_load_failure",
												"type": "Fail",
												"dependsOn": [
													{
														"activity": "pp_stored_procedure_failure_notification",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"message": {
														"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
														"type": "Expression"
													},
													"errorCode": "500"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "stored_procedure_success_notification",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "pp_adf_pipeline_notification",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"subscription": {
															"value": "@pipeline().globalParameters.subscriptionId",
															"type": "Expression"
														},
														"resourceGroup": {
															"value": "@pipeline().globalParameters.resourceGroup",
															"type": "Expression"
														},
														"runId": {
															"value": "@coalesce(pipeline().RunId, -1)",
															"type": "Expression"
														},
														"name": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"triggerTime": {
															"value": "@pipeline().TriggerTime",
															"type": "Expression"
														},
														"status": {
															"value": "@activity('raw_to_curate_sp_call').Status",
															"type": "Expression"
														},
														"message": {
															"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
															"type": "Expression"
														},
														"executionEndTime": {
															"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
															"type": "Expression"
														},
														"runDuration": {
															"value": "@activity('raw_to_curate_sp_call').Duration",
															"type": "Expression"
														},
														"teamWebhookUrl": {
															"value": "@pipeline().globalParameters.teamsWebhookUrl",
															"type": "Expression"
														},
														"notificationTime": {
															"value": "@utcNow()",
															"type": "Expression"
														},
														"taskName": {
															"value": "@pipeline().parameters.p_tgt_curate_table_nm",
															"type": "Expression"
														},
														"taskStepNumber": {
															"value": "@pipeline().parameters.p_src_code",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "Truncate_Target_Staging",
									"description": "Truncate the target table in RAW database to clear old rows",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "ls_snowflake",
										"type": "LinkedServiceReference",
										"parameters": {
											"ls_DbName": {
												"value": "@pipeline().globalParameters.snow_rawDb",
												"type": "Expression"
											},
											"ls_Env": {
												"value": "@pipeline().globalParameters.environment",
												"type": "Expression"
											}
										}
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('TRUNCATE TABLE ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm,'.',item().RAW_TABLE)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "lkp_raw_soft_hard_deletes_axnala",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select * from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.',pipeline().parameters.p_control_schema_nm, '.', pipeline().parameters.p_control_table_nm,' where SOURCE_NAME = ','''',pipeline().parameters.p_src_nm,'''')",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_control_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_control_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_auditDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_control_table_nm": {
						"type": "string",
						"defaultValue": "V_SOFT_HARD_DELETES_CONTROL"
					},
					"p_control_schema_nm": {
						"type": "string",
						"defaultValue": "CONTROL"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					},
					"p_tgt_curate_table_nm": {
						"type": "string"
					}
				},
				"variables": {
					"p_mapping": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-04T13:47:58Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_tammerchandisingevent_to_dim_merchandising_event')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prv_max_upd_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select \ntme1.DATAAREAID as DATAAREAID,\ntme1.MERCHANDISINGEVENTID as MERCHANDISINGEVENTID,\ntme1.DESCRIPTION as DESCRIPTION,\ntme1.CLAIMPAYTYPE as CLAIMPAYTYPE,\ntme1.MERCHEVENTTYPE as MERCHEVENTTYPE,\ntme1.MERCHANDISINGEVENTCATEGORY as MERCHANDISINGEVENTCATEGORY,\ntme1.MODIFIEDDATETIME as MODIFIEDDATETIME,\ntmet1.DESCRIPTION as TAMMERCHANDISINGEVENTTYPE_DESCRIPTION,\ntet1.ENUMVALUELABEL as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_CLAIMPAYTYPE,\ntet2.ENUMVALUELABEL as TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_MERCHANDISINGEVENTCATEGORY,\n(SELECT MAX(LastUpdateDate) FROM (VALUES (tme1.MODIFIEDDATETIME)) AS UpdateDate(LastUpdateDate)) AS LATEST_MODIFIEDDATETIME\nfrom\ndbo.TAMMERCHANDISINGEVENT tme1\nleft join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\n\t\twhere ENUMNAME = 'MCRClaimPayType'\n\t\tgroup by ENUMNAME, ENUMVALUE) tet1 on\n\ttme1.CLAIMPAYTYPE = tet1.ENUMVALUE\nleft join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\n\t\twhere ENUMNAME = 'MCRMerchandisingEventCategory'\n\t\tgroup by ENUMNAME, ENUMVALUE) tet2 on\n\ttme1.MERCHANDISINGEVENTCATEGORY = tet2.ENUMVALUE\nleft join dbo.TAMMERCHANDISINGEVENTTYPE tmet1 on\n\ttme1.DATAAREAID = tmet1.DATAAREAID and\n\ttme1.MERCHEVENTTYPE = tmet1.TAMMERCHEVENTTYPE\nwhere (SELECT MAX(LastUpdateDate) FROM (VALUES (tme1.MODIFIEDDATETIME)) AS UpdateDate(LastUpdateDate)) > '@{variables('v_prv_max_upd_timestamp')}'",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "MERCHANDISINGEVENTID",
																"type": "String"
															},
															"sink": {
																"name": "MERCHANDISINGEVENTID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CLAIMPAYTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "CLAIMPAYTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MERCHEVENTTYPE",
																"type": "String"
															},
															"sink": {
																"name": "MERCHEVENTTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "MERCHANDISINGEVENTCATEGORY",
																"type": "Int32"
															},
															"sink": {
																"name": "MERCHANDISINGEVENTCATEGORY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TAMMERCHANDISINGEVENTTYPE_DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "TAMMERCHANDISINGEVENTTYPE_DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_CLAIMPAYTYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_CLAIMPAYTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_MERCHANDISINGEVENTCATEGORY",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_MERCHANDISINGEVENTCATEGORY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('select \r\ntme1.dataareaid as DATAAREAID,\r\ntme1.merchandisingeventid as MERCHANDISINGEVENTID,\r\ntme1.description as DESCRIPTION,\r\ntme1.claimpaytype as CLAIMPAYTYPE,\r\ntme1.mercheventtype as MERCHEVENTTYPE,\r\ntme1.merchandisingeventcategory as MERCHANDISINGEVENTCATEGORY,\r\ntme1.modifieddatetime as MODIFIEDDATETIME,\r\ntmet1.description as TAMMERCHANDISINGEVENTTYPE_DESCRIPTION,\r\ntet1.enumvaluelabel as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_CLAIMPAYTYPE,\r\ntet2.ENUMVALUELABEL as TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_MERCHANDISINGEVENTCATEGORY,\r\n(SELECT MAX(LastUpdateDate) FROM (VALUES (tme1.modifieddatetime)) AS UpdateDate(LastUpdateDate)) AS LATEST_MODIFIEDDATETIME\r\nfrom '\r\n,pipeline().globalParameters.d365_dbName,'.','tammerchandisingevent tme1\r\nleft join (select enumname, enumvalue\r\n\t\t\t, max(enumvaluelabel) as enumvaluelabel\r\n\t\tfrom '\r\n,pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\r\n\t\twhere enumname = ''MCRClaimPayType''\r\n\t\tgroup by enumname, enumvalue) tet1 on\r\n\ttme1.claimpaytype = tet1.enumvalue\r\nleft join (select enumname, enumvalue\r\n\t\t\t, max(enumvaluelabel) as ENUMVALUELABEL\r\n\t\tfrom '\r\n,pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\r\n\t\twhere enumname = ''MCRMerchandisingEventCategory''\r\n\t\tgroup by enumname, enumvalue) tet2 on\r\n\ttme1.merchandisingeventcategory = tet2.enumvalue\r\nleft join '\r\n,pipeline().globalParameters.d365_dbName,'.','tammerchandisingeventtype tmet1 on\r\n\ttme1.dataareaid = tmet1.dataareaid and\r\n\ttme1.mercheventtype = tmet1.tammercheventtype\r\nwhere (SELECT MAX(LastUpdateDate) \r\nFROM (VALUES (tme1.modifieddatetime)) AS UpdateDate(LastUpdateDate)) > ','''',variables('v_prv_max_upd_timestamp'),'''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "MERCHANDISINGEVENTID",
																"type": "String"
															},
															"sink": {
																"name": "MERCHANDISINGEVENTID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CLAIMPAYTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "CLAIMPAYTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MERCHEVENTTYPE",
																"type": "String"
															},
															"sink": {
																"name": "MERCHEVENTTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "MERCHANDISINGEVENTCATEGORY",
																"type": "Int32"
															},
															"sink": {
																"name": "MERCHANDISINGEVENTCATEGORY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TAMMERCHANDISINGEVENTTYPE_DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "TAMMERCHANDISINGEVENTTYPE_DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_CLAIMPAYTYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_CLAIMPAYTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_MERCHANDISINGEVENTCATEGORY",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_MERCHANDISINGEVENTCATEGORY",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_MERCHANDISING_EVENT"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "TAMMERCHANDISINGEVENT"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "TAMMERCHANDISINGEVENT"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prv_max_upd_timestamp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T10:51:02Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_taxgroupheading_to_dim_tax_group')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": "SELECT\r\ntgh1.dataareaid as DATAAREAID\r\n,tgh1.taxgroup as TAXGROUP\r\n,tgh1.taxgroupname as TAXGROUPNAME\r\nFROM dbo.TAXGROUPHEADING tgh1",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TAXGROUP",
																"type": "String"
															},
															"sink": {
																"name": "TAXGROUP",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TAXGROUPNAME",
																"type": "String"
															},
															"sink": {
																"name": "TAXGROUPNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('SELECT\ntgh1.dataareaid as DATAAREAID\n,tgh1.taxgroup as TAXGROUP\n,tgh1.taxgroupname as TAXGROUPNAME\nFROM ' \n,pipeline().globalParameters.d365_dbName,'.','taxgroupheading tgh1')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TAXGROUP",
																"type": "String"
															},
															"sink": {
																"name": "TAXGROUP",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TAXGROUPNAME",
																"type": "String"
															},
															"sink": {
																"name": "TAXGROUPNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "TAXGROUPHEADING"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "TAXGROUPHEADING"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_TAX_GROUP"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T10:58:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_taxitemgroupheading_to_dim_tax_item_group')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": "select \r\ntigh1.DATAAREAID as DATAAREAID,\r\ntigh1.TAXITEMGROUP as TAXITEMGROUP,\r\ntigh1.NAME as NAME,\r\ntigh1.EUSALESLISTTYPE as EUSALESLISTTYPE,\r\ntet1.ENUMVALUELABEL as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_EUSALESLISTTYPE\r\nfrom\r\ndbo.TAXITEMGROUPHEADING tigh1\r\nleft join (select ENUMNAME, ENUMVALUE\r\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\r\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\r\n\t\twhere ENUMNAME = 'EuSalesListType'\r\n\t\tgroup by ENUMNAME, ENUMVALUE) tet1 on\r\n\ttigh1.EUSALESLISTTYPE = tet1.ENUMVALUE",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TAXITEMGROUP",
																"type": "String"
															},
															"sink": {
																"name": "TAXITEMGROUP",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "EUSALESLISTTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "EUSALESLISTTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_EUSALESLISTTYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_EUSALESLISTTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('select \ntigh1.dataareaid as DATAAREAID,\ntigh1.taxitemgroup as TAXITEMGROUP,\ntigh1.name as NAME,\ntigh1.eusaleslisttype as EUSALESLISTTYPE,\ntet1.ENUMVALUELABEL as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_EUSALESLISTTYPE\nfrom ' \n,pipeline().globalParameters.d365_dbName,'.','taxitemgroupheading tigh1\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as ENUMVALUELABEL\n\t\tfrom ' \n,pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n\t\twhere enumname = ''EuSalesListType''\n\t\tgroup by enumname, enumvalue) tet1 on\n\ttigh1.eusaleslisttype = tet1.enumvalue')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TAXITEMGROUP",
																"type": "String"
															},
															"sink": {
																"name": "TAXITEMGROUP",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "EUSALESLISTTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "EUSALESLISTTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_EUSALESLISTTYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_EUSALESLISTTYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "TAXITEMGROUPHEADING"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "TAXITEMGROUPHEADING"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_TAX_ITEM_GROUP"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T10:58:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_taxtable_to_dim_tax')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prev_max_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')\n\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_to_raw_nala",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "SELECT\ntt1.DATAAREAID,\ntt1.TAXCODE,\ntt1.TAXNAME,\ntt1.TAXPERIOD,\ntt1.TAXACCOUNTGROUP,\ntt1.MODIFIEDDATETIME\nfrom\ndbo.TAXTABLE tt1\nwhere\nconvert(varchar(25), isnull(tt1.MODIFIEDDATETIME, '1950-01-01'), 120)\n> '@{variables('v_prev_max_timestamp')}'",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TAXCODE",
																"type": "String"
															},
															"sink": {
																"name": "TAXCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TAXNAME",
																"type": "String"
															},
															"sink": {
																"name": "TAXNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TAXPERIOD",
																"type": "String"
															},
															"sink": {
																"name": "TAXPERIOD",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TAXACCOUNTGROUP",
																"type": "String"
															},
															"sink": {
																"name": "TAXACCOUNTGROUP",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_to_raw_nala",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_to_raw_nala').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_to_raw_nala').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_to_raw_nala').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_to_raw_nala').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_to_raw_nala').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_to_raw_d365",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@Concat('SELECT\ntt1.dataareaid as DATAAREAID,\ntt1.taxcode AS TAXCODE,\nCase When tt1.taxname Is Null\n\tThen ''''\n\tElse tt1.taxname\n\tEnd as TAXNAME,\ntt1.taxperiod as TAXPERIOD,\ntt1.taxaccountgroup As TAXACCOUNTGROUP,\ntt1.modifieddatetime As MODIFIEDDATETIME\nFrom '\n,pipeline().globalParameters.d365_dbName,'.','taxtable tt1\nwhere convert(varchar(25), isnull(tt1.modifieddatetime, ''1950-01-01''), 120)\n > ','''',variables('v_prev_max_timestamp'),'''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TAXCODE",
																"type": "String"
															},
															"sink": {
																"name": "TAXCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TAXNAME",
																"type": "String"
															},
															"sink": {
																"name": "TAXNAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TAXPERIOD",
																"type": "String"
															},
															"sink": {
																"name": "TAXPERIOD",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TAXACCOUNTGROUP",
																"type": "String"
															},
															"sink": {
																"name": "TAXACCOUNTGROUP",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_to_raw_d365",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_to_raw_d365').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_to_raw_d365').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_to_raw_d365').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_to_raw_d365').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_to_raw_d365').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_TAX"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "TAXTABLE"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "TAXTABLE"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prev_max_timestamp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-04T13:47:58Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_unionall_export_consensus_forcast_to_fact_weekly_forecast')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": "select '740' as DATAAREAID,CUSTOMER_NUMBER,LOCATION,ITEM_CONFIG,SUB_CHANNEL_NUMBER,ITEM_NUMBER,CONFORECAST_WEEK,LOADDATE,CONSENSUS_FORECAST from dbo.Export_Consensus_Forecast_Weekly\r\nunion\r\nselect '415' as DATAAREAID,CUSTOMER_NUMBER,LOCATION,ITEM_CONFIG,SUB_CHANNEL_NUMBER,ITEM_NUMBER,CONFORECAST_WEEK,LOADDATE,CONSENSUS_FORECAST from dbo.Export_Consensus_Forecast_Weekly_Sealy",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CUSTOMER_NUMBER",
																"type": "String"
															},
															"sink": {
																"name": "CUSTOMER_NUMBER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LOCATION",
																"type": "String"
															},
															"sink": {
																"name": "LOCATION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ITEM_CONFIG",
																"type": "String"
															},
															"sink": {
																"name": "ITEM_CONFIG",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SUB_CHANNEL_NUMBER",
																"type": "String"
															},
															"sink": {
																"name": "SUB_CHANNEL_NUMBER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ITEM_NUMBER",
																"type": "String"
															},
															"sink": {
																"name": "ITEM_NUMBER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CONFORECAST_WEEK",
																"type": "DateTime"
															},
															"sink": {
																"name": "CONFORECAST_WEEK",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "LOADDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "LOADDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "CONSENSUS_FORECAST",
																"type": "Double"
															},
															"sink": {
																"name": "CONSENSUS_FORECAST",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.arkieva_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.arkieva_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "Export_Consensus_Forecast_Weekly"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "EXPORTCONSENSUSFORECASTWEEKLY"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "FACT_WEEKLY_FORECAST"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T10:58:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_unionall_export_forcast_to_dim_arkieva_customer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": "select CUSTOMER_NUMBER,CUSTOMER, '740' as DATAAREAID from dbo.Export_Consensus_Forecast_Monthly\r\nunion\r\nselect CUSTOMER_NUMBER,CUSTOMER, '740' as DATAAREAID from dbo.Export_Consensus_Forecast_Weekly\r\nunion\r\nselect CUSTOMER_NUMBER,CUSTOMER, '415' as DATAAREAID from dbo.Export_Consensus_Forecast_Monthly_Sealy\r\nunion\r\nselect CUSTOMER_NUMBER,CUSTOMER, '415' as DATAAREAID from dbo.Export_Consensus_Forecast_Weekly_Sealy",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CUSTOMER_NUMBER",
																"type": "String"
															},
															"sink": {
																"name": "CUSTOMER_NUMBER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CUSTOMER",
																"type": "String"
															},
															"sink": {
																"name": "CUSTOMER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.arkieva_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.arkieva_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "Export_Consensus_Forecast_Monthly"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "ARKIEVA_CUSTOMER"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_ARKIEVA_CUSTOMER"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T10:58:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_unionall_export_forcast_to_fact_monthly_wmape')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": "select LOCATION,ITEM_CONFIG,ITEM_NUMBER,CONFORECAST_MONTH,LOADDATE,WMAPE,'740' as DATAAREAID from dbo.Export_Consensus_Forecast_Monthly_WMAPE\r\nunion\r\nselect LOCATION,ITEM_CONFIG,ITEM_NUMBER,CONFORECAST_MONTH,LOADDATE,WMAPE,'415' as DATAAREAID from dbo.Export_Consensus_Forecast_Monthly_WMAPE_Sealy",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LOCATION",
																"type": "String"
															},
															"sink": {
																"name": "LOCATION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ITEM_CONFIG",
																"type": "String"
															},
															"sink": {
																"name": "ITEM_CONFIG",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ITEM_NUMBER",
																"type": "String"
															},
															"sink": {
																"name": "ITEM_NUMBER",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CONFORECAST_MONTH",
																"type": "DateTime"
															},
															"sink": {
																"name": "CONFORECAST_MONTH",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "LOADDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "LOADDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "WMAPE",
																"type": "Double"
															},
															"sink": {
																"name": "WMAPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.arkieva_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.arkieva_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "Export_Consensus_Forecast_Monthly_WMAPE"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "EXPORTCONSENSUSFORECASTMONTHLYWMAPE"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "FACT_MONTHLY_WMAPE"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T10:58:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_unitofmeasure_to_dim_unit_of_measure')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "lkp_raw_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_raw_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prev_max_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_raw_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')\n\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_to_raw_nala",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "SELECT\nuom1.symbol as SYMBOL\n,uom1.recid as RECID\n,uom1.systemofunits as SYSTEMOFUNITS\n,uom1.unitofmeasureclass as UNITOFMEASURECLASS\n,uom1.modifieddatetime as MODIFIEDDATETIME\n,uomt1.description as UNITOFMEASURETRANSLATION_DESCRIPTION\n,uomt1.modifieddatetime as UNITOFMEASURETRANSLATION_MODIFIEDDATETIME\n,tet1.enumvaluelabel as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_SYSTEMOFUNITS\n,tet2.enumvaluelabel as TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_UNITOFMEASURECLASS\n,(SELECT MAX(LastUpdateDate)\nFROM ( \t\t\t\tVALUES\n        (uom1.modifieddatetime),\n        ( isnull( uomt1.modifieddatetime, '1950-01-01' ))) AS UpdateDate(LastUpdateDate)\n) AS LATEST_MODIFIEDDATETIME \nFROM\ndbo.UNITOFMEASURE uom1\nleft join dbo.UNITOFMEASURETRANSLATION uomt1 on\n\tuomt1.LANGUAGEID = 'en-us' and\n\tuom1.RECID = uomt1.UNITOFMEASURE\nleft join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\n\t\twhere ENUMNAME = 'UnitofMeasureSystemofUnits'\n\t\tgroup by ENUMNAME, ENUMVALUE) tet1 on\n\tuom1.SYSTEMOFUNITS = tet1.ENUMVALUE\nleft join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\n\t\twhere ENUMNAME = 'UnitofMeasureClass'\n\t\tgroup by ENUMNAME, ENUMVALUE) tet2 on\n\tuom1.SYSTEMOFUNITS = tet2.ENUMVALUE where (SELECT MAX(LastUpdateDate)\nFROM ( \t\t\t\tVALUES\n        (uom1.modifieddatetime),\n        ( isnull( uomt1.modifieddatetime, '1950-01-01' ))) AS UpdateDate(LastUpdateDate)\n) > '@{variables('v_prev_max_timestamp')}' ",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SYMBOL",
																"type": "String"
															},
															"sink": {
																"name": "SYMBOL",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "Int64"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "SYSTEMOFUNITS",
																"type": "Int32"
															},
															"sink": {
																"name": "SYSTEMOFUNITS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "UNITOFMEASURECLASS",
																"type": "Int32"
															},
															"sink": {
																"name": "UNITOFMEASURECLASS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "UNITOFMEASURETRANSLATION_DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "UNITOFMEASURETRANSLATION_DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "UNITOFMEASURETRANSLATION_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "UNITOFMEASURETRANSLATION_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_SYSTEMOFUNITS",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_SYSTEMOFUNITS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_UNITOFMEASURECLASS",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_UNITOFMEASURECLASS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_to_raw_nala",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_to_raw_nala').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_to_raw_nala').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_to_raw_nala').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_to_raw_nala').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_to_raw_nala').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_to_raw_d365",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('SELECT\nuom1.symbol as SYMBOL\n,uom1.recid as RECID\n,uom1.systemofunits as SYSTEMOFUNITS\n,uom1.unitofmeasureclass as UNITOFMEASURECLASS\n,uom1.modifieddatetime as MODIFIEDDATETIME\n,uomt1.description as UNITOFMEASURETRANSLATION_DESCRIPTION\n,uomt1.modifieddatetime as UNITOFMEASURETRANSLATION_MODIFIEDDATETIME\n,tet1.ENUMVALUELABEL as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_SYSTEMOFUNITS\n,tet2.ENUMVALUELABEL as TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_UNITOFMEASURECLASS\n,(SELECT MAX(LastUpdateDate)\nFROM ( \t\t\t\tVALUES\n        (uom1.modifieddatetime),\n        ( isnull( uomt1.modifieddatetime, ''1950-01-01'' ))) AS UpdateDate(LastUpdateDate)\n) AS LATEST_MODIFIEDDATETIME \nFrom '\n,pipeline().globalParameters.d365_dbName,'.','unitofmeasure uom1\nleft join '\n,pipeline().globalParameters.d365_dbName,'.','unitofmeasuretranslation uomt1 on\n\tuomt1.languageid = ''en-us'' and\n\tuom1.recid = uomt1.unitofmeasure\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as ENUMVALUELABEL\n\t\tfrom '\n,pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n\t\twhere enumname  = ''UnitofMeasureSystemofUnits''\n\t\tgroup by enumname, enumvalue) tet1 on\n\tuom1.systemofunits = tet1.enumvalue\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as ENUMVALUELABEL\n\t\tfrom '\n,pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n\t\twhere enumname = ''UnitofMeasureClass''\n\t\tgroup by enumname, enumvalue) tet2 on\n\tuom1.systemofunits = tet2.enumvalue where (SELECT MAX(LastUpdateDate)\nFROM ( \t\t\t\tVALUES\n        (uom1.modifieddatetime),\n        ( isnull( uomt1.modifieddatetime, ''1950-01-01'' ))) AS UpdateDate(LastUpdateDate))\t> ','''',variables('v_prev_max_timestamp'),'''')\t\t\n",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SYMBOL",
																"type": "String"
															},
															"sink": {
																"name": "SYMBOL",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "Int64"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "SYSTEMOFUNITS",
																"type": "Int32"
															},
															"sink": {
																"name": "SYSTEMOFUNITS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "UNITOFMEASURECLASS",
																"type": "Int32"
															},
															"sink": {
																"name": "UNITOFMEASURECLASS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "UNITOFMEASURETRANSLATION_DESCRIPTION",
																"type": "String"
															},
															"sink": {
																"name": "UNITOFMEASURETRANSLATION_DESCRIPTION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "UNITOFMEASURETRANSLATION_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "UNITOFMEASURETRANSLATION_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_SYSTEMOFUNITS",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_SYSTEMOFUNITS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_UNITOFMEASURECLASS",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_UNITOFMEASURECLASS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_to_raw_d365",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_to_raw_d365').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_to_raw_d365').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_to_raw_d365').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_to_raw_d365').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_to_raw_d365').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_UNIT_OF_MEASURE"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "UNITOFMEASURE"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "UNITOFMEASURE"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prev_max_timestamp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-04T13:47:58Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_userinfo_to_dim_user_info')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": "select \r\nui1.ID,\r\nui1.NAME,\r\nui1.ENABLE\r\nfrom\r\ndbo.USERINFO ui1\r\ninner join (select RECID\r\n, row_number() over (partition by ID order by RECVERSION desc) as ROW_NUM\r\nfrom dbo.USERINFO) ui2 on\r\nui2.ROW_NUM = 1 and\r\nui1.RECID = ui2.RECID",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ID",
																"type": "String"
															},
															"sink": {
																"name": "ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ENABLE",
																"type": "Int32"
															},
															"sink": {
																"name": "ENABLE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"description": "user info ",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('select \nui1.Id as ID,\nui1.name as NAME,\nui1.enable as ENABLE\nfrom ',pipeline().globalParameters.d365_dbName,'.','userinfo ui1\ninner join (select recid\n, row_number() over (partition by Id order by recversion desc) as row_num\nfrom ',pipeline().globalParameters.d365_dbName,'.','userinfo) ui2 on\nui2.row_num = 1 and\nui1.recid = ui2.recid')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ID",
																"type": "String"
															},
															"sink": {
																"name": "ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ENABLE",
																"type": "Int32"
															},
															"sink": {
																"name": "ENABLE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "USERINFO"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "USERINFO"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_USER_INFO"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T10:58:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_userinfo_to_dim_user_info_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala_d365",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId, -1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala_d365",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": "select \r\nui1.ID,\r\nui1.NAME,\r\nui1.ENABLE\r\nfrom\r\ndbo.USERINFO ui1\r\ninner join (select RECID\r\n, row_number() over (partition by ID order by RECVERSION desc) as ROW_NUM\r\nfrom dbo.USERINFO) ui2 on\r\nui2.ROW_NUM = 1 and\r\nui1.RECID = ui2.RECID",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ID",
																"type": "String"
															},
															"sink": {
																"name": "ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ENABLE",
																"type": "Int32"
															},
															"sink": {
																"name": "ENABLE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LAST_MODIFIED_DATE",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('select \r\nui1.Id,\r\nui1.name,\r\nui1.enable\r\n--SELECT *\r\nfrom ',pipeline().globalParameters.d365_dbName,'.','userinfo ui1\r\ninner join (select recid\r\n, row_number() over (partition by Id order by recversion desc) as row_num\r\nfrom ',pipeline().globalParameters.d365_dbName,'.','userinfo) ui2 on\r\nui2.row_num = 1 and\r\nui1.recid = ui2.recid')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ID",
																"type": "String"
															},
															"sink": {
																"name": "ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ENABLE",
																"type": "Int32"
															},
															"sink": {
																"name": "ENABLE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LAST_MODIFIED_DATE",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "USERINFO"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "USERINFO"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_USER_INFO"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-06-03T10:58:13Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_vendinvoicetrans_to_fact_purchase_invoices')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "switch_nala",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "vendinvoicetrans_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId,-1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select\n    vit1.RECID as RECID,\n    vit1.INVENTDIMID as INVENTDIMID,\n    vit1.ITEMID as ITEMID,\n    vit1.CURRENCYCODE as CURRENCYCODE,\n    vit1.DEFAULTDIMENSION as DEFAULTDIMENSION,\n    vit1.NUMBERSEQUENCEGROUP as NUMBERSEQUENCEGROUP,\n    vit1.PURCHID as PURCHID,\n    vit1.INVOICEID as INVOICEID,\n    vit1.INVOICEDATE as INVOICEDATE,\n    vit1.TRANSACTIONCODE as TRANSACTIONCODE,\n    vit1.DELIVERYPOSTALADDRESS as DELIVERYPOSTALADDRESS,\n    vit1.PROCUREMENTCATEGORY as PROCUREMENTCATEGORY,\n    vit1.TAXITEMGROUP as TAXITEMGROUP,\n    vit1.PURCHUNIT as PURCHUNIT,\n    vit1.INVENTDATE as INVENTDATE,\n    vit1.INVENTTRANSID as INVENTTRANSID,\n    vit1.DATAAREAID as DATAAREAID,\n    vit1.ORIGPURCHID as ORIGPURCHID,\n    vit1.LINENUM as LINENUM,\n    vit1.PURCHASELINELINENUMBER as PURCHASELINELINENUMBER,\n    vit1.QTY as QTY,\n    vit1.INVENTQTY as INVENTQTY,\n    vit1.PRICEUNIT as PRICEUNIT,\n    vit1.PURCHPRICE as PURCHPRICE,\n    vit1.LINEAMOUNTMST as LINEAMOUNTMST,\n    vit1.LINEAMOUNT as LINEAMOUNT,\n    vit1.TAXAMOUNT as TAXAMOUNT,\n    vit1.MODIFIEDDATETIME as MODIFIEDDATETIME,\n    id1.CONFIGID as INVENTDIM1_CONFIGID,\n    id1.INVENTSITEID as INVENTDIM1_INVENTSITEID,\n    id1.MODIFIEDDATETIME as INVENTDIM1_MODIFIEDDATETIME,\n    tet1.ENUMVALUELABEL as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PRICETYPE,\n    tet2.ENUMVALUELABEL as TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_ASSET_TRANSACTION_TYPE,\n    tet3.ENUMVALUELABEL as TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_DELIVERY_TYPE,\n    tet4.ENUMVALUELABEL as TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_DOCUMENT_STATUS,\n    tet5.ENUMVALUELABEL as TIMEXTENDERENUMTABLE5_ENUMVALUELABEL_PURCH_LINE_STATUS,\n    tet6.ENUMVALUELABEL as TIMEXTENDERENUMTABLE6_ENUMVALUELABEL_PURCH_HEADER_STATUS,\n    tet7.ENUMVALUELABEL as TIMEXTENDERENUMTABLE7_ENUMVALUELABEL_PURCHASE_TYPE,\n    null as INVENTITEMPRICE1_STANDARDCOST,\n    cast(null as DATE) as INVENTITEMPRICE1_ACTIVATIONDATE,\n    cast(null as DATETIME) as INVENTITEMPRICE1_CREATEDDATETIME,\n    cast(null as DATETIME) as INVENTITEMPRICE1_MODIFIEDDATETIME,\n    null as INVENTITEMPRICE2_STANDARDCOST,\n    cast(null as DATE) as INVENTITEMPRICE2_ACTIVATIONDATE,\n    cast(null as DATETIME) as INVENTITEMPRICE2_CREATEDDATETIME,\n    cast(null as DATETIME) as INVENTITEMPRICE2_MODIFIEDDATETIME,\n    null as INVENTITEMPRICE3_STANDARDCOST,\n    cast(null as DATE) as INVENTITEMPRICE3_ACTIVATIONDATE,\n    cast(null as DATETIME) as INVENTITEMPRICE3_CREATEDDATETIME,\n    cast(null as DATETIME) as INVENTITEMPRICE3_MODIFIEDDATETIME,\n    null as INVENTITEMPRICE4_STANDARDCOST,\n    cast(null as DATE) as INVENTITEMPRICE4_ACTIVATIONDATE,\n    cast(null as DATETIME) as INVENTITEMPRICE4_CREATEDDATETIME,\n    cast(null as DATETIME) as INVENTITEMPRICE4_MODIFIEDDATETIME,\n    cij1.DLVMODE as VENDINVOICEJOUR_DLVMODE,\n    cij1.INVOICEACCOUNT as VENDINVOICEJOUR_INVOICEACCOUNT,\n    cij1.ORDERACCOUNT as VENDINVOICEJOUR_ORDERACCOUNT,\n    cij1.MODIFIEDDATETIME as VENDINVOICEJOUR_MODIFIEDDATETIME,\n    pt1.RETURNREASONCODEID as PURCHTABLE_RETURNREASONCODEID,\n    pt1.WORKERPURCHPLACER as PURCHTABLE_WORKERPURCHPLACER,\n    pt1.REQUESTER as PURCHTABLE_REQUESTER,\n    pt1.DOCUMENTSTATUS as PURCHTABLE_DOCUMENTSTATUS,\n    pt1.PURCHSTATUS as PURCHTABLE_PURCHSTATUS,\n    pt1.MODIFIEDDATETIME as PURCHTABLE_MODIFIEDDATETIME,\n    itm1.UNITID as INVENTTABLEMODULE_UNITID,\n    itm1.MODIFIEDDATETIME as INVENTTABLEMODULE_MODIFIEDDATETIME,\n    pl1.ASSETTRANSTYPEPURCH as PURCHLINE_ASSETTRANSTYPEPURCH,\n    pl1.DELIVERYTYPE as PURCHLINE_DELIVERYTYPE,\n    pl1.STOCKEDPRODUCT as PURCHLINE_STOCKEDPRODUCT,\n    pl1.PURCHSTATUS as PURCHLINE_PURCHSTATUS,\n    pl1.PURCHASETYPE as PURCHLINE_PURCHASETYPE,\n    pl1.MODIFIEDDATETIME as PURCHLINE_MODIFIEDDATETIME,\n    (\n        SELECT\n            MAX(LastUpdateDate)\n        FROM\n            (\n                VALUES\n                    (vit1.MODIFIEDDATETIME),\n                    (isnull (id1.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull (cij1.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull (pt1.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull (itm1.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull (pl1.MODIFIEDDATETIME, '1950-01-01'))\n            ) AS UpdateDate (LastUpdateDate)\n    ) AS LATEST_MODIFIEDDATETIME\nfrom\n    dbo.VENDINVOICETRANS vit1\n    left join dbo.INVENTDIM id1 on vit1.DATAAREAID = id1.DATAAREAID\n    and vit1.INVENTDIMID = id1.INVENTDIMID\n    left join dbo.PURCHLINE pl1 on vit1.DATAAREAID = pl1.DATAAREAID\n    and vit1.INVENTTRANSID = pl1.INVENTTRANSID\n    left join dbo.PURCHTABLE pt1 on vit1.DATAAREAID = pt1.DATAAREAID\n    and vit1.ORIGPURCHID = pt1.PURCHID\n    left join (\n        select\n            ENUMNAME,\n            ENUMVALUE,\n            max(ENUMVALUELABEL) as ENUMVALUELABEL\n        from\n            dbo.TIMEXTENDERENUMTABLE\n        where\n            ENUMNAME = 'CostingVersionPriceType'\n        group by\n            ENUMNAME,\n            ENUMVALUE\n    ) tet1 on 0 = tet1.ENUMVALUE\n    left join (\n        select\n            ENUMNAME,\n            ENUMVALUE,\n            max(ENUMVALUELABEL) as ENUMVALUELABEL\n        from\n            dbo.TIMEXTENDERENUMTABLE\n        where\n            ENUMNAME = 'AssetTransTypePurch'\n        group by\n            ENUMNAME,\n            ENUMVALUE\n    ) tet2 on pl1.ASSETTRANSTYPEPURCH = tet2.ENUMVALUE\n    left join (\n        select\n            ENUMNAME,\n            ENUMVALUE,\n            max(ENUMVALUELABEL) as ENUMVALUELABEL\n        from\n            dbo.TIMEXTENDERENUMTABLE\n        where\n            ENUMNAME = 'TradeLineDlvType'\n        group by\n            ENUMNAME,\n            ENUMVALUE\n    ) tet3 on pl1.DELIVERYTYPE = tet3.ENUMVALUE\n    left join (\n        select\n            ENUMNAME,\n            ENUMVALUE,\n            max(ENUMVALUELABEL) as ENUMVALUELABEL\n        from\n            dbo.TIMEXTENDERENUMTABLE\n        where\n            ENUMNAME = 'DocumentStatus'\n        group by\n            ENUMNAME,\n            ENUMVALUE\n    ) tet4 on pt1.DOCUMENTSTATUS = tet4.ENUMVALUE\n    left join (\n        select\n            ENUMNAME,\n            ENUMVALUE,\n            max(ENUMVALUELABEL) as ENUMVALUELABEL\n        from\n            dbo.TIMEXTENDERENUMTABLE\n        where\n            ENUMNAME = 'PurchStatus'\n        group by\n            ENUMNAME,\n            ENUMVALUE\n    ) tet5 on pl1.PURCHSTATUS = tet5.ENUMVALUE\n    left join (\n        select\n            ENUMNAME,\n            ENUMVALUE,\n            max(ENUMVALUELABEL) as ENUMVALUELABEL\n        from\n            dbo.TIMEXTENDERENUMTABLE\n        where\n            ENUMNAME = 'PurchStatus'\n        group by\n            ENUMNAME,\n            ENUMVALUE\n    ) tet6 on pt1.PURCHSTATUS = tet6.ENUMVALUE\n    left join (\n        select\n            ENUMNAME,\n            ENUMVALUE,\n            max(ENUMVALUELABEL) as ENUMVALUELABEL\n        from\n            dbo.TIMEXTENDERENUMTABLE\n        where\n            ENUMNAME = 'PurchaseType'\n        group by\n            ENUMNAME,\n            ENUMVALUE\n    ) tet7 on pl1.PURCHASETYPE = tet7.ENUMVALUE\n    left join (\n        select\n            DATAAREAID,\n            NUMBERSEQUENCEGROUP,\n            PURCHID,\n            INVOICEDATE,\n            INVOICEID,\n            DLVMODE,\n            INVOICEACCOUNT,\n            ORDERACCOUNT,\n            MODIFIEDDATETIME\n        from\n            dbo.VENDINVOICEJOUR vij10\n            inner join (\n                select\n                    RECID,\n                    row_number() over (\n                        partition by\n                            DATAAREAID,\n                            NUMBERSEQUENCEGROUP,\n                            PURCHID,\n                            INVOICEDATE,\n                            INVOICEID\n                        order by\n                            MODIFIEDDATETIME desc\n                    ) as ROW_NUM\n                from\n                    dbo.VENDINVOICEJOUR\n            ) vij11 on vij11.ROW_NUM = 1\n            and vij10.RECID = vij11.RECID\n    ) cij1 on vit1.DATAAREAID = cij1.DATAAREAID\n    and vit1.NUMBERSEQUENCEGROUP = cij1.NUMBERSEQUENCEGROUP\n    and vit1.PURCHID = cij1.PURCHID\n    and vit1.INVOICEDATE = cij1.INVOICEDATE\n    and vit1.INVOICEID = cij1.INVOICEID\n    left join dbo.INVENTTABLEMODULE itm1 on itm1.MODULETYPE = 0\n    and vit1.DATAAREAID = itm1.DATAAREAID\n    and vit1.ITEMID = itm1.ITEMID;",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"preCopyScript": {
														"value": "@concat('TRUNCATE TABLE ',pipeline().parameters.p_tgt_raw_schema_nm,'.',pipeline().parameters.p_tgt_raw_table_nm)",
														"type": "Expression"
													},
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "Int64"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTDIMID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTDIMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ITEMID",
																"type": "String"
															},
															"sink": {
																"name": "ITEMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CURRENCYCODE",
																"type": "String"
															},
															"sink": {
																"name": "CURRENCYCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DEFAULTDIMENSION",
																"type": "Int64"
															},
															"sink": {
																"name": "DEFAULTDIMENSION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "NUMBERSEQUENCEGROUP",
																"type": "String"
															},
															"sink": {
																"name": "NUMBERSEQUENCEGROUP",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PURCHID",
																"type": "String"
															},
															"sink": {
																"name": "PURCHID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVOICEID",
																"type": "String"
															},
															"sink": {
																"name": "INVOICEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVOICEDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVOICEDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TRANSACTIONCODE",
																"type": "String"
															},
															"sink": {
																"name": "TRANSACTIONCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DELIVERYPOSTALADDRESS",
																"type": "Int64"
															},
															"sink": {
																"name": "DELIVERYPOSTALADDRESS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PROCUREMENTCATEGORY",
																"type": "Int64"
															},
															"sink": {
																"name": "PROCUREMENTCATEGORY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TAXITEMGROUP",
																"type": "String"
															},
															"sink": {
																"name": "TAXITEMGROUP",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PURCHUNIT",
																"type": "String"
															},
															"sink": {
																"name": "PURCHUNIT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTTRANSID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTTRANSID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ORIGPURCHID",
																"type": "String"
															},
															"sink": {
																"name": "ORIGPURCHID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LINENUM",
																"type": "Decimal"
															},
															"sink": {
																"name": "LINENUM",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHASELINELINENUMBER",
																"type": "Int64"
															},
															"sink": {
																"name": "PURCHASELINELINENUMBER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "QTY",
																"type": "Decimal"
															},
															"sink": {
																"name": "QTY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTQTY",
																"type": "Decimal"
															},
															"sink": {
																"name": "INVENTQTY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PRICEUNIT",
																"type": "Decimal"
															},
															"sink": {
																"name": "PRICEUNIT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHPRICE",
																"type": "Decimal"
															},
															"sink": {
																"name": "PURCHPRICE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LINEAMOUNTMST",
																"type": "Decimal"
															},
															"sink": {
																"name": "LINEAMOUNTMST",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LINEAMOUNT",
																"type": "Decimal"
															},
															"sink": {
																"name": "LINEAMOUNT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TAXAMOUNT",
																"type": "Decimal"
															},
															"sink": {
																"name": "TAXAMOUNT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTDIM1_CONFIGID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTDIM1_CONFIGID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDIM1_INVENTSITEID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTDIM1_INVENTSITEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDIM1_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTDIM1_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PRICETYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PRICETYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_ASSET_TRANSACTION_TYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_ASSET_TRANSACTION_TYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_DELIVERY_TYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_DELIVERY_TYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_DOCUMENT_STATUS",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_DOCUMENT_STATUS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE5_ENUMVALUELABEL_PURCH_LINE_STATUS",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE5_ENUMVALUELABEL_PURCH_LINE_STATUS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE6_ENUMVALUELABEL_PURCH_HEADER_STATUS",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE6_ENUMVALUELABEL_PURCH_HEADER_STATUS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE7_ENUMVALUELABEL_PURCHASE_TYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE7_ENUMVALUELABEL_PURCHASE_TYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE1_STANDARDCOST",
																"type": "Int32"
															},
															"sink": {
																"name": "INVENTITEMPRICE1_STANDARDCOST",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE1_ACTIVATIONDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTITEMPRICE1_ACTIVATIONDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE1_CREATEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTITEMPRICE1_CREATEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE1_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTITEMPRICE1_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE2_STANDARDCOST",
																"type": "Int32"
															},
															"sink": {
																"name": "INVENTITEMPRICE2_STANDARDCOST",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE2_ACTIVATIONDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTITEMPRICE2_ACTIVATIONDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE2_CREATEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTITEMPRICE2_CREATEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE2_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTITEMPRICE2_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE3_STANDARDCOST",
																"type": "Int32"
															},
															"sink": {
																"name": "INVENTITEMPRICE3_STANDARDCOST",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE3_ACTIVATIONDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTITEMPRICE3_ACTIVATIONDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE3_CREATEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTITEMPRICE3_CREATEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE3_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTITEMPRICE3_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE4_STANDARDCOST",
																"type": "Int32"
															},
															"sink": {
																"name": "INVENTITEMPRICE4_STANDARDCOST",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE4_ACTIVATIONDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTITEMPRICE4_ACTIVATIONDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE4_CREATEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTITEMPRICE4_CREATEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE4_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTITEMPRICE4_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "VENDINVOICEJOUR_DLVMODE",
																"type": "String"
															},
															"sink": {
																"name": "VENDINVOICEJOUR_DLVMODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "VENDINVOICEJOUR_INVOICEACCOUNT",
																"type": "String"
															},
															"sink": {
																"name": "VENDINVOICEJOUR_INVOICEACCOUNT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "VENDINVOICEJOUR_ORDERACCOUNT",
																"type": "String"
															},
															"sink": {
																"name": "VENDINVOICEJOUR_ORDERACCOUNT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "VENDINVOICEJOUR_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "VENDINVOICEJOUR_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_RETURNREASONCODEID",
																"type": "String"
															},
															"sink": {
																"name": "PURCHTABLE_RETURNREASONCODEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_WORKERPURCHPLACER",
																"type": "Int64"
															},
															"sink": {
																"name": "PURCHTABLE_WORKERPURCHPLACER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_REQUESTER",
																"type": "Int64"
															},
															"sink": {
																"name": "PURCHTABLE_REQUESTER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_DOCUMENTSTATUS",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHTABLE_DOCUMENTSTATUS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_PURCHSTATUS",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHTABLE_PURCHSTATUS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "PURCHTABLE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTTABLEMODULE_UNITID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTTABLEMODULE_UNITID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTTABLEMODULE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTTABLEMODULE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_ASSETTRANSTYPEPURCH",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHLINE_ASSETTRANSTYPEPURCH",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_DELIVERYTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHLINE_DELIVERYTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_STOCKEDPRODUCT",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHLINE_STOCKEDPRODUCT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_PURCHSTATUS",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHLINE_PURCHSTATUS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_PURCHASETYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHLINE_PURCHASETYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "PURCHLINE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification_1",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "vendinvoicetrans_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId,-1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('vendinvoicetrans_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('vendinvoicetrans_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('vendinvoicetrans_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('vendinvoicetrans_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail_1",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification_1",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('vendinvoicetrans_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										},
										{
											"name": "vendinvoicetrans_standardcost_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId,-1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select\n    vit1.STANDARDCOST_SOURCE as STANDARDCOST_SOURCE,\n    vit1.RECID as RECID,\n    vit1.DATAAREAID as DATAAREAID,\n    vit1.ITEMID as ITEMID,\n    vit1.CONFIGID as INVENTDIM_CONFIGID,\n    vit1.INVENTSITEID as INVENTDIM_INVENTSITEID,\n    vit1.MODIFIEDDATETIME as INVENTITEMPRICE_MODIFIEDDATETIME,\n    vit1.ACTIVATIONDATE as INVENTITEMPRICE_ACTIVATIONDATE,\n    vit1.CREATEDDATETIME as INVENTITEMPRICE_CREATEDDATETIME,\n    vit1.STANDARDCOST as INVENTITEMPRICE_STANDARDCOST,\n    CURRENT_TIMESTAMP as LATEST_MODIFIEDDATETIME\nfrom\n    (\n        select\n            iip1.STANDARDCOST_SOURCE,\n            iip1.RECID,\n            iip1.DATAAREAID,\n            iip1.ITEMID,\n            iip1.CONFIGID,\n            iip1.INVENTSITEID,\n            iip1.MODIFIEDDATETIME,\n            iip1.ACTIVATIONDATE,\n            iip1.CREATEDDATETIME,\n            iip1.STANDARDCOST\n        from\n            (\n                select\n                    'iip1' as STANDARDCOST_SOURCE,\n                    vit11.RECID,\n                    vit11.DATAAREAID,\n                    vit11.ITEMID,\n                    id11.CONFIGID,\n                    id11.INVENTSITEID,\n                    iip11.MODIFIEDDATETIME,\n                    iip11.ACTIVATIONDATE,\n                    iip11.CREATEDDATETIME,\n                    (\n                        (\n                            iip11.PRICE / isnull (nullif(iip11.PRICEUNIT, 0), 1)\n                        ) + (\n                            iip11.MARKUP / isnull (nullif(iip11.PRICEQTY, 0), 1)\n                        )\n                    ) as STANDARDCOST,\n                    row_number() over (\n                        partition by\n                            vit11.RECID,\n                            vit11.DATAAREAID,\n                            vit11.ITEMID,\n                            id11.CONFIGID,\n                            id11.INVENTSITEID\n                        order by\n                            iip11.ACTIVATIONDATE desc,\n                            iip11.MODIFIEDDATETIME desc\n                    ) as ROW_NUM\n                from\n                    dbo.VENDINVOICETRANS vit11\n                    inner join dbo.INVENTDIM id11 on vit11.DATAAREAID = id11.DATAAREAID\n                    and vit11.INVENTDIMID = id11.INVENTDIMID\n                    inner join (\n                        select\n                            iip111.DATAAREAID,\n                            iip111.ITEMID,\n                            id111.CONFIGID,\n                            id111.INVENTSITEID,\n                            iip111.MODIFIEDDATETIME,\n                            iip111.ACTIVATIONDATE,\n                            iip111.CREATEDDATETIME,\n                            iip111.PRICE,\n                            iip111.PRICEUNIT,\n                            iip111.MARKUP,\n                            iip111.PRICEQTY\n                        from\n                            dbo.INVENTITEMPRICE iip111\n                            inner join dbo.INVENTDIM id111 on iip111.DATAAREAID = id111.DATAAREAID\n                            and iip111.INVENTDIMID = id111.INVENTDIMID\n                        where\n                            iip111.PRICETYPE = 0\n                    ) iip11 on vit11.DATAAREAID = iip11.DATAAREAID\n                    and vit11.ITEMID = iip11.ITEMID\n                    and id11.CONFIGID = iip11.CONFIGID\n                    and id11.INVENTSITEID = iip11.INVENTSITEID\n                    and vit11.INVOICEDATE >= iip11.ACTIVATIONDATE\n            ) iip1\n        where\n            iip1.ROW_NUM = 1\n        union all\n        select\n            iip2.STANDARDCOST_SOURCE,\n            iip2.RECID,\n            iip2.DATAAREAID,\n            iip2.ITEMID,\n            null as CONFIGID,\n            iip2.INVENTSITEID,\n            iip2.MODIFIEDDATETIME,\n            iip2.ACTIVATIONDATE,\n            iip2.CREATEDDATETIME,\n            iip2.STANDARDCOST\n        from\n            (\n                select\n                    'iip2' as STANDARDCOST_SOURCE,\n                    cit21.RECID,\n                    cit21.DATAAREAID,\n                    cit21.ITEMID,\n                    id21.INVENTSITEID,\n                    iip21.MODIFIEDDATETIME,\n                    iip21.ACTIVATIONDATE,\n                    iip21.CREATEDDATETIME,\n                    (\n                        (\n                            iip21.PRICE / isnull (nullif(iip21.PRICEUNIT, 0), 1)\n                        ) + (\n                            iip21.MARKUP / isnull (nullif(iip21.PRICEQTY, 0), 1)\n                        )\n                    ) as STANDARDCOST,\n                    row_number() over (\n                        partition by\n                            cit21.RECID,\n                            cit21.DATAAREAID,\n                            cit21.ITEMID,\n                            id21.INVENTSITEID\n                        order by\n                            iip21.ACTIVATIONDATE desc,\n                            iip21.MODIFIEDDATETIME desc\n                    ) as ROW_NUM\n                from\n                    dbo.VENDINVOICETRANS cit21\n                    inner join dbo.INVENTDIM id21 on cit21.DATAAREAID = id21.DATAAREAID\n                    and cit21.INVENTDIMID = id21.INVENTDIMID\n                    inner join (\n                        select\n                            iip211.DATAAREAID,\n                            iip211.ITEMID,\n                            id211.INVENTSITEID,\n                            iip211.MODIFIEDDATETIME,\n                            iip211.ACTIVATIONDATE,\n                            iip211.CREATEDDATETIME,\n                            iip211.PRICE,\n                            iip211.PRICEUNIT,\n                            iip211.MARKUP,\n                            iip211.PRICEQTY\n                        from\n                            dbo.INVENTITEMPRICE iip211\n                            inner join dbo.INVENTDIM id211 on iip211.DATAAREAID = id211.DATAAREAID\n                            and iip211.INVENTDIMID = id211.INVENTDIMID\n                        where\n                            iip211.PRICETYPE = 0\n                    ) iip21 on cit21.DATAAREAID = iip21.DATAAREAID\n                    and cit21.ITEMID = iip21.ITEMID\n                    and id21.INVENTSITEID = iip21.INVENTSITEID\n                    and cit21.INVOICEDATE >= iip21.ACTIVATIONDATE\n            ) iip2\n        where\n            iip2.ROW_NUM = 1\n        union all\n        select\n            iip3.STANDARDCOST_SOURCE,\n            iip3.RECID,\n            iip3.DATAAREAID,\n            iip3.ITEMID,\n            iip3.CONFIGID,\n            null as INVENTSITEID,\n            iip3.MODIFIEDDATETIME,\n            iip3.ACTIVATIONDATE,\n            iip3.CREATEDDATETIME,\n            iip3.STANDARDCOST\n        from\n            (\n                select\n                    'iip3' as STANDARDCOST_SOURCE,\n                    cit31.RECID,\n                    cit31.DATAAREAID,\n                    cit31.ITEMID,\n                    id31.CONFIGID,\n                    iip31.MODIFIEDDATETIME,\n                    iip31.ACTIVATIONDATE,\n                    iip31.CREATEDDATETIME,\n                    (\n                        (\n                            iip31.PRICE / isnull (nullif(iip31.PRICEUNIT, 0), 1)\n                        ) + (\n                            iip31.MARKUP / isnull (nullif(iip31.PRICEQTY, 0), 1)\n                        )\n                    ) as STANDARDCOST,\n                    row_number() over (\n                        partition by\n                            cit31.RECID,\n                            cit31.DATAAREAID,\n                            cit31.ITEMID,\n                            id31.CONFIGID\n                        order by\n                            iip31.ACTIVATIONDATE desc,\n                            iip31.MODIFIEDDATETIME desc\n                    ) as ROW_NUM\n                from\n                    dbo.VENDINVOICETRANS cit31\n                    inner join dbo.INVENTDIM id31 on cit31.DATAAREAID = id31.DATAAREAID\n                    and cit31.INVENTDIMID = id31.INVENTDIMID\n                    inner join (\n                        select\n                            iip311.DATAAREAID,\n                            iip311.ITEMID,\n                            id311.CONFIGID,\n                            iip311.MODIFIEDDATETIME,\n                            iip311.ACTIVATIONDATE,\n                            iip311.CREATEDDATETIME,\n                            iip311.PRICE,\n                            iip311.PRICEUNIT,\n                            iip311.MARKUP,\n                            iip311.PRICEQTY\n                        from\n                            dbo.INVENTITEMPRICE iip311\n                            inner join dbo.INVENTDIM id311 on iip311.DATAAREAID = id311.DATAAREAID\n                            and iip311.INVENTDIMID = id311.INVENTDIMID\n                        where\n                            iip311.PRICETYPE = 0\n                    ) iip31 on cit31.DATAAREAID = iip31.DATAAREAID\n                    and cit31.ITEMID = iip31.ITEMID\n                    and id31.CONFIGID = iip31.CONFIGID\n                    and cit31.INVOICEDATE >= iip31.ACTIVATIONDATE\n            ) iip3\n        where\n            iip3.ROW_NUM = 1\n        union all\n        select\n            iip4.STANDARDCOST_SOURCE,\n            iip4.RECID,\n            iip4.DATAAREAID,\n            iip4.ITEMID,\n            null as CONFIGID,\n            null as INVENTSITEID,\n            iip4.MODIFIEDDATETIME,\n            iip4.ACTIVATIONDATE,\n            iip4.CREATEDDATETIME,\n            iip4.STANDARDCOST\n        from\n            (\n                select\n                    'iip4' as STANDARDCOST_SOURCE,\n                    cit41.RECID,\n                    cit41.DATAAREAID,\n                    cit41.ITEMID,\n                    iip41.MODIFIEDDATETIME,\n                    iip41.ACTIVATIONDATE,\n                    iip41.CREATEDDATETIME,\n                    (\n                        (\n                            iip41.PRICE / isnull (nullif(iip41.PRICEUNIT, 0), 1)\n                        ) + (\n                            iip41.MARKUP / isnull (nullif(iip41.PRICEQTY, 0), 1)\n                        )\n                    ) as STANDARDCOST,\n                    row_number() over (\n                        partition by\n                            cit41.RECID,\n                            cit41.DATAAREAID,\n                            cit41.ITEMID\n                        order by\n                            iip41.ACTIVATIONDATE desc,\n                            iip41.MODIFIEDDATETIME desc\n                    ) as ROW_NUM\n                from\n                    dbo.VENDINVOICETRANS cit41\n                    inner join dbo.INVENTDIM id41 on cit41.DATAAREAID = id41.DATAAREAID\n                    and cit41.INVENTDIMID = id41.INVENTDIMID\n                    inner join (\n                        select\n                            iip411.DATAAREAID,\n                            iip411.ITEMID,\n                            iip411.MODIFIEDDATETIME,\n                            iip411.ACTIVATIONDATE,\n                            iip411.CREATEDDATETIME,\n                            iip411.PRICE,\n                            iip411.PRICEUNIT,\n                            iip411.MARKUP,\n                            iip411.PRICEQTY\n                        from\n                            dbo.INVENTITEMPRICE iip411\n                            inner join dbo.INVENTDIM id411 on iip411.DATAAREAID = id411.DATAAREAID\n                            and iip411.INVENTDIMID = id411.INVENTDIMID\n                        where\n                            iip411.PRICETYPE = 0\n                    ) iip41 on cit41.DATAAREAID = iip41.DATAAREAID\n                    and cit41.ITEMID = iip41.ITEMID\n                    and cit41.INVOICEDATE >= iip41.ACTIVATIONDATE\n            ) iip4\n        where\n            iip4.ROW_NUM = 1\n    ) vit1",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"preCopyScript": {
														"value": "@concat('TRUNCATE TABLE ',pipeline().parameters.p_tgt_raw_schema_nm,'.',pipeline().parameters.p_tgt_raw_table_nm_2)",
														"type": "Expression"
													},
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "STANDARDCOST_SOURCE",
																"type": "String"
															},
															"sink": {
																"name": "STANDARDCOST_SOURCE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "Int64"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ITEMID",
																"type": "String"
															},
															"sink": {
																"name": "ITEMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDIM_CONFIGID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTDIM_CONFIGID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDIM_INVENTSITEID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTDIM_INVENTSITEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTITEMPRICE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE_ACTIVATIONDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTITEMPRICE_ACTIVATIONDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE_CREATEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTITEMPRICE_CREATEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE_STANDARDCOST",
																"type": "Decimal"
															},
															"sink": {
																"name": "INVENTITEMPRICE_STANDARDCOST",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm_2",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification_2",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "vendinvoicetrans_standardcost_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId,-1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('vendinvoicetrans_standardcost_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('vendinvoicetrans_standardcost_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('vendinvoicetrans_standardcost_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('vendinvoicetrans_standardcost_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail_2",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification_2",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('vendinvoicetrans_standardcost_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "vendinvoicetrans_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId,-1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": "select\r\n    vit1.recid AS RECID,\r\n    vit1.inventdimid AS INVENTDIMID,\r\n    vit1.itemid AS ITEMID,\r\n    vit1.currencycode AS CURRENCYCODE,\r\n    vit1.defaultdimension AS DEFAULTDIMENSION,\r\n    vit1.numbersequencegroup AS NUMBERSEQUENCEGROUP,\r\n    vit1.purchid AS PURCHID,\r\n    vit1.invoiceid AS INVOICEID,\r\n    vit1.invoicedate AS INVOICEDATE,\r\n    vit1.transactioncode AS TRANSACTIONCODE,\r\n    vit1.deliverypostaladdress AS DELIVERYPOSTALADDRESS,\r\n    vit1.procurementcategory AS PROCUREMENTCATEGORY,\r\n    vit1.taxitemgroup AS TAXITEMGROUP,\r\n    vit1.purchunit AS PURCHUNIT,\r\n    vit1.inventdate AS INVENTDATE,\r\n    vit1.inventtransid AS INVENTTRANSID,\r\n    vit1.dataareaid AS DATAAREAID,\r\n    vit1.origpurchid AS ORIGPURCHID,\r\n    vit1.linenum AS LINENUM,\r\n    vit1.purchaselinelinenumber AS PURCHASELINELINENUMBER,\r\n    vit1.qty AS QTY,\r\n    vit1.inventqty AS INVENTQTY,\r\n    vit1.priceunit AS PRICEUNIT,\r\n    vit1.purchprice AS PURCHPRICE,\r\n    vit1.lineamountmst AS LINEAMOUNTMST,\r\n    vit1.lineamount AS LINEAMOUNT,\r\n    vit1.taxamount AS TAXAMOUNT,\r\n    vit1.modifieddatetime AS MODIFIEDDATETIME,\r\n    id1.configid AS INVENTDIM1_CONFIGID,\r\n    id1.inventsiteid AS INVENTDIM1_INVENTSITEID,\r\n    id1.modifieddatetime AS INVENTDIM1_MODIFIEDDATETIME,\r\n    tet1.enumvaluelabel AS TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PRICETYPE,\r\n    tet2.enumvaluelabel AS TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_ASSET_TRANSACTION_TYPE,\r\n    tet3.enumvaluelabel AS TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_DELIVERY_TYPE,\r\n    tet4.enumvaluelabel AS TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_DOCUMENT_STATUS,\r\n    tet5.enumvaluelabel AS TIMEXTENDERENUMTABLE5_ENUMVALUELABEL_PURCH_LINE_STATUS,\r\n    tet6.enumvaluelabel AS TIMEXTENDERENUMTABLE6_ENUMVALUELABEL_PURCH_HEADER_STATUS,\r\n    tet7.enumvaluelabel AS TIMEXTENDERENUMTABLE7_ENUMVALUELABEL_PURCHASE_TYPE,\r\n    null AS INVENTITEMPRICE1_STANDARDCOST,\r\n    cast(null as date) AS INVENTITEMPRICE1_ACTIVATIONDATE,\r\n    cast(null as datetime) AS INVENTITEMPRICE1_CREATEDDATETIME,\r\n    cast(null as datetime) AS INVENTITEMPRICE1_MODIFIEDDATETIME,\r\n    null AS INVENTITEMPRICE2_STANDARDCOST,\r\n    cast(null as date) AS INVENTITEMPRICE2_ACTIVATIONDATE,\r\n    cast(null as datetime) AS INVENTITEMPRICE2_CREATEDDATETIME,\r\n    cast(null AS DATETIME) AS INVENTITEMPRICE2_MODIFIEDDATETIME,\r\n    null AS INVENTITEMPRICE3_STANDARDCOST,\r\n    cast(null as date) AS INVENTITEMPRICE3_ACTIVATIONDATE,\r\n    cast(null as datetime) AS INVENTITEMPRICE3_CREATEDDATETIME,\r\n    cast(null as datetime) AS INVENTITEMPRICE3_MODIFIEDDATETIME,\r\n    null AS INVENTITEMPRICE4_STANDARDCOST,\r\n    cast(null as date) AS INVENTITEMPRICE4_ACTIVATIONDATE,\r\n    cast(null as datetime) AS INVENTITEMPRICE4_CREATEDDATETIME,\r\n    cast(null as datetime) AS INVENTITEMPRICE4_MODIFIEDDATETIME,\r\n    cij1.dlvmode AS VENDINVOICEJOUR_DLVMODE,\r\n    cij1.invoiceaccount AS VENDINVOICEJOUR_INVOICEACCOUNT,\r\n    cij1.orderaccount AS VENDINVOICEJOUR_ORDERACCOUNT,\r\n    cij1.modifieddatetime AS VENDINVOICEJOUR_MODIFIEDDATETIME,\r\n    pt1.returnreasoncodeid AS PURCHTABLE_RETURNREASONCODEID,\r\n    pt1.workerpurchplacer AS PURCHTABLE_WORKERPURCHPLACER,\r\n    pt1.requester AS PURCHTABLE_REQUESTER,\r\n    pt1.documentstatus AS PURCHTABLE_DOCUMENTSTATUS,\r\n    pt1.purchstatus AS PURCHTABLE_PURCHSTATUS,\r\n    pt1.modifieddatetime AS PURCHTABLE_MODIFIEDDATETIME,\r\n    itm1.unitid AS INVENTTABLEMODULE_UNITID,\r\n    itm1.modifieddatetime AS INVENTTABLEMODULE_MODIFIEDDATETIME,\r\n    pl1.assettranstypepurch AS PURCHLINE_ASSETTRANSTYPEPURCH,\r\n    pl1.deliverytype AS PURCHLINE_DELIVERYTYPE,\r\n    pl1.stockedproduct AS PURCHLINE_STOCKEDPRODUCT,\r\n    pl1.purchstatus AS PURCHLINE_PURCHSTATUS,\r\n    pl1.purchasetype AS PURCHLINE_PURCHASETYPE,\r\n    pl1.modifieddatetime AS PURCHLINE_MODIFIEDDATETIME,\r\n    (\r\n        select\r\n            max(lastupdatedate)\r\n        from\r\n            (\r\n                values\r\n                    (vit1.modifieddatetime),\r\n                    (isnull (id1.modifieddatetime, '1950-01-01')),\r\n                    (isnull (cij1.modifieddatetime, '1950-01-01')),\r\n                    (isnull (pt1.modifieddatetime, '1950-01-01')),\r\n                    (isnull (itm1.modifieddatetime, '1950-01-01')),\r\n                    (isnull (pl1.modifieddatetime, '1950-01-01'))\r\n            ) as updatedate (lastupdatedate)\r\n    ) AS LATEST_MODIFIEDDATETIME\r\nfrom\r\n    dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.vendinvoicetrans vit1\r\n    left join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.inventdim id1 on vit1.dataareaid = id1.dataareaid\r\n\t\tAND vit1.inventdimid = id1.inventdimid\r\n    left join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.purchline pl1 on vit1.dataareaid = pl1.dataareaid\r\n\t\tAND vit1.inventtransid = pl1.inventtransid\r\n    left join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.purchtable pt1 on vit1.dataareaid = pt1.dataareaid\r\n\t\tAND vit1.origpurchid = pt1.purchid\r\n    left join (\r\n        select\r\n            enumname,\r\n            enumvalue,\r\n            max(enumvaluelabel) as enumvaluelabel\r\n        from\r\n            dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\r\n        where\r\n            enumname = 'costingversionpricetype'\r\n        group by\r\n            enumname,\r\n            enumvalue\r\n    ) tet1 on 0 = tet1.enumvalue\r\n    left join (\r\n        select\r\n            enumname,\r\n            enumvalue,\r\n            max(enumvaluelabel) as enumvaluelabel\r\n        from\r\n            dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\r\n        where\r\n            enumname = 'assettranstypepurch'\r\n        group by\r\n            enumname,\r\n            enumvalue\r\n    ) tet2 on pl1.assettranstypepurch = tet2.enumvalue\r\n    left join (\r\n        select\r\n            enumname,\r\n            enumvalue,\r\n            max(enumvaluelabel) as enumvaluelabel\r\n        from\r\n            dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\r\n        where\r\n            enumname = 'tradelinedlvtype'\r\n        group by\r\n            enumname,\r\n            enumvalue\r\n    ) tet3 on pl1.deliverytype = tet3.enumvalue\r\n    left join (\r\n        select\r\n            enumname,\r\n            enumvalue,\r\n            max(enumvaluelabel) as enumvaluelabel\r\n        from\r\n            dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\r\n        where\r\n            enumname = 'documentstatus'\r\n        group by\r\n            enumname,\r\n            enumvalue\r\n    ) tet4 on pt1.documentstatus = tet4.enumvalue\r\n    left join (\r\n        select\r\n            enumname,\r\n            enumvalue,\r\n            max(enumvaluelabel) as enumvaluelabel\r\n        from\r\n            dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\r\n        where\r\n            enumname = 'purchstatus'\r\n        group by\r\n            enumname,\r\n            enumvalue\r\n    ) tet5 on pl1.purchstatus = tet5.enumvalue\r\n    left join (\r\n        select\r\n            enumname,\r\n            enumvalue,\r\n            max(enumvaluelabel) as enumvaluelabel\r\n        from\r\n            dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\r\n        where\r\n            enumname = 'purchstatus'\r\n        group by\r\n            enumname,\r\n            enumvalue\r\n    ) tet6 on pt1.purchstatus = tet6.enumvalue\r\n    left join (\r\n        select\r\n            enumname,\r\n            enumvalue,\r\n            max(enumvaluelabel) as enumvaluelabel\r\n        from\r\n            dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.timextenderenumtable\r\n        where\r\n            enumname = 'purchasetype'\r\n        group by\r\n            enumname,\r\n            enumvalue\r\n    ) tet7 on pl1.purchasetype = tet7.enumvalue\r\n    left join (\r\n        select\r\n            dataareaid,\r\n            numbersequencegroup,\r\n            purchid,\r\n            invoicedate,\r\n            invoiceid,\r\n            dlvmode,\r\n            invoiceaccount,\r\n            orderaccount,\r\n            modifieddatetime\r\n        from\r\n            dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.vendinvoicejour vij10\r\n            inner join (\r\n                select\r\n                    recid,\r\n                    row_number() over (\r\n                        partition by\r\n                            dataareaid,\r\n                            numbersequencegroup,\r\n                            purchid,\r\n                            invoicedate,\r\n                            invoiceid\r\n                        order by\r\n                            modifieddatetime desc\r\n                    ) as row_num\r\n                from\r\n                    dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.vendinvoicejour\r\n            ) vij11 on vij11.row_num = 1\r\n            and vij10.recid = vij11.recid\r\n    ) cij1 on vit1.dataareaid = cij1.dataareaid\r\n\t\tAND vit1.numbersequencegroup = cij1.numbersequencegroup\r\n\t\tAND vit1.purchid = cij1.purchid\r\n\t\tAND vit1.invoicedate = cij1.invoicedate\r\n\t\tAND vit1.invoiceid = cij1.invoiceid\r\n    left join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.inventtablemodule itm1 on itm1.moduletype = 0\r\n\t\tAND vit1.dataareaid = itm1.dataareaid\r\n\t\tAND vit1.itemid = itm1.itemid\r\n\t;",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"preCopyScript": {
														"value": "@concat('TRUNCATE TABLE ',pipeline().parameters.p_tgt_raw_schema_nm,'.',pipeline().parameters.p_tgt_raw_table_nm)",
														"type": "Expression"
													},
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "Int64"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTDIMID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTDIMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ITEMID",
																"type": "String"
															},
															"sink": {
																"name": "ITEMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "CURRENCYCODE",
																"type": "String"
															},
															"sink": {
																"name": "CURRENCYCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DEFAULTDIMENSION",
																"type": "Int64"
															},
															"sink": {
																"name": "DEFAULTDIMENSION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "NUMBERSEQUENCEGROUP",
																"type": "String"
															},
															"sink": {
																"name": "NUMBERSEQUENCEGROUP",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PURCHID",
																"type": "String"
															},
															"sink": {
																"name": "PURCHID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVOICEID",
																"type": "String"
															},
															"sink": {
																"name": "INVOICEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVOICEDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVOICEDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TRANSACTIONCODE",
																"type": "String"
															},
															"sink": {
																"name": "TRANSACTIONCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DELIVERYPOSTALADDRESS",
																"type": "Int64"
															},
															"sink": {
																"name": "DELIVERYPOSTALADDRESS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PROCUREMENTCATEGORY",
																"type": "Int64"
															},
															"sink": {
																"name": "PROCUREMENTCATEGORY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TAXITEMGROUP",
																"type": "String"
															},
															"sink": {
																"name": "TAXITEMGROUP",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PURCHUNIT",
																"type": "String"
															},
															"sink": {
																"name": "PURCHUNIT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTTRANSID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTTRANSID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ORIGPURCHID",
																"type": "String"
															},
															"sink": {
																"name": "ORIGPURCHID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LINENUM",
																"type": "Decimal"
															},
															"sink": {
																"name": "LINENUM",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHASELINELINENUMBER",
																"type": "Int64"
															},
															"sink": {
																"name": "PURCHASELINELINENUMBER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "QTY",
																"type": "Decimal"
															},
															"sink": {
																"name": "QTY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTQTY",
																"type": "Decimal"
															},
															"sink": {
																"name": "INVENTQTY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PRICEUNIT",
																"type": "Decimal"
															},
															"sink": {
																"name": "PRICEUNIT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHPRICE",
																"type": "Decimal"
															},
															"sink": {
																"name": "PURCHPRICE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LINEAMOUNTMST",
																"type": "Decimal"
															},
															"sink": {
																"name": "LINEAMOUNTMST",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LINEAMOUNT",
																"type": "Decimal"
															},
															"sink": {
																"name": "LINEAMOUNT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TAXAMOUNT",
																"type": "Decimal"
															},
															"sink": {
																"name": "TAXAMOUNT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTDIM1_CONFIGID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTDIM1_CONFIGID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDIM1_INVENTSITEID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTDIM1_INVENTSITEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDIM1_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTDIM1_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PRICETYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_PRICETYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_ASSET_TRANSACTION_TYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_ASSET_TRANSACTION_TYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_DELIVERY_TYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_DELIVERY_TYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_DOCUMENT_STATUS",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_DOCUMENT_STATUS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE5_ENUMVALUELABEL_PURCH_LINE_STATUS",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE5_ENUMVALUELABEL_PURCH_LINE_STATUS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE6_ENUMVALUELABEL_PURCH_HEADER_STATUS",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE6_ENUMVALUELABEL_PURCH_HEADER_STATUS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE7_ENUMVALUELABEL_PURCHASE_TYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE7_ENUMVALUELABEL_PURCHASE_TYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE1_STANDARDCOST",
																"type": "Int32"
															},
															"sink": {
																"name": "INVENTITEMPRICE1_STANDARDCOST",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE1_ACTIVATIONDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTITEMPRICE1_ACTIVATIONDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE1_CREATEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTITEMPRICE1_CREATEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE1_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTITEMPRICE1_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE2_STANDARDCOST",
																"type": "Int32"
															},
															"sink": {
																"name": "INVENTITEMPRICE2_STANDARDCOST",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE2_ACTIVATIONDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTITEMPRICE2_ACTIVATIONDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE2_CREATEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTITEMPRICE2_CREATEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE2_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTITEMPRICE2_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE3_STANDARDCOST",
																"type": "Int32"
															},
															"sink": {
																"name": "INVENTITEMPRICE3_STANDARDCOST",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE3_ACTIVATIONDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTITEMPRICE3_ACTIVATIONDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE3_CREATEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTITEMPRICE3_CREATEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE3_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTITEMPRICE3_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE4_STANDARDCOST",
																"type": "Int32"
															},
															"sink": {
																"name": "INVENTITEMPRICE4_STANDARDCOST",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE4_ACTIVATIONDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTITEMPRICE4_ACTIVATIONDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE4_CREATEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTITEMPRICE4_CREATEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE4_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTITEMPRICE4_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "VENDINVOICEJOUR_DLVMODE",
																"type": "String"
															},
															"sink": {
																"name": "VENDINVOICEJOUR_DLVMODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "VENDINVOICEJOUR_INVOICEACCOUNT",
																"type": "String"
															},
															"sink": {
																"name": "VENDINVOICEJOUR_INVOICEACCOUNT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "VENDINVOICEJOUR_ORDERACCOUNT",
																"type": "String"
															},
															"sink": {
																"name": "VENDINVOICEJOUR_ORDERACCOUNT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "VENDINVOICEJOUR_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "VENDINVOICEJOUR_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_RETURNREASONCODEID",
																"type": "String"
															},
															"sink": {
																"name": "PURCHTABLE_RETURNREASONCODEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_WORKERPURCHPLACER",
																"type": "Int64"
															},
															"sink": {
																"name": "PURCHTABLE_WORKERPURCHPLACER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_REQUESTER",
																"type": "Int64"
															},
															"sink": {
																"name": "PURCHTABLE_REQUESTER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_DOCUMENTSTATUS",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHTABLE_DOCUMENTSTATUS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_PURCHSTATUS",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHTABLE_PURCHSTATUS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "PURCHTABLE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTTABLEMODULE_UNITID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTTABLEMODULE_UNITID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTTABLEMODULE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTTABLEMODULE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_ASSETTRANSTYPEPURCH",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHLINE_ASSETTRANSTYPEPURCH",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_DELIVERYTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHLINE_DELIVERYTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_STOCKEDPRODUCT",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHLINE_STOCKEDPRODUCT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_PURCHSTATUS",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHLINE_PURCHSTATUS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_PURCHASETYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHLINE_PURCHASETYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "PURCHLINE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification_1",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "vendinvoicetrans_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId,-1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('vendinvoicetrans_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('vendinvoicetrans_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('vendinvoicetrans_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('vendinvoicetrans_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail_1",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification_1",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('vendinvoicetrans_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										},
										{
											"name": "vendinvoicetrans_standardcost_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId,-1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": "select\r\n    vit1.standardcost_source as STANDARDCOST_SOURCE,\r\n    vit1.recid as RECID,\r\n    vit1.dataareaid as DATAAREAID,\r\n    vit1.itemid as ITEMID,\r\n    vit1.configid as INVENTDIM_CONFIGID,\r\n    vit1.inventsiteid as INVENTDIM_INVENTSITEID,\r\n    vit1.modifieddatetime as INVENTITEMPRICE_MODIFIEDDATETIME,\r\n    vit1.activationdate as INVENTITEMPRICE_ACTIVATIONDATE,\r\n    vit1.createddatetime as INVENTITEMPRICE_CREATEDDATETIME,\r\n    vit1.standardcost as INVENTITEMPRICE_STANDARDCOST,\r\n    current_timestamp as LATEST_MODIFIEDDATETIME\r\nfrom\r\n    (\r\n        select\r\n            iip1.standardcost_source,\r\n            iip1.recid,\r\n            iip1.dataareaid,\r\n            iip1.itemid,\r\n            iip1.configid,\r\n            iip1.inventsiteid,\r\n            iip1.modifieddatetime,\r\n            iip1.activationdate,\r\n            iip1.createddatetime,\r\n            iip1.standardcost\r\n        from\r\n            (\r\n                select\r\n                    'iip1' as standardcost_source,\r\n                    vit11.recid,\r\n                    vit11.dataareaid,\r\n                    vit11.itemid,\r\n                    id11.configid,\r\n                    id11.inventsiteid,\r\n                    iip11.modifieddatetime,\r\n                    iip11.activationdate,\r\n                    iip11.createddatetime,\r\n                    (\r\n                        (\r\n                            iip11.price / isnull (nullif(iip11.priceunit, 0), 1)\r\n                        ) + (\r\n                            iip11.markup / isnull (nullif(iip11.priceqty, 0), 1)\r\n                        )\r\n                    ) as standardcost,\r\n                    row_number() over (\r\n                        partition by\r\n                            vit11.recid,\r\n                            vit11.dataareaid,\r\n                            vit11.itemid,\r\n                            id11.configid,\r\n                            id11.inventsiteid\r\n                        order by\r\n                            iip11.activationdate desc,\r\n                            iip11.modifieddatetime desc\r\n                    ) as row_num\r\n                from\r\n                    dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.vendinvoicetrans vit11\r\n                    inner join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.inventdim id11 on vit11.dataareaid = id11.dataareaid\r\n\t\t\t\t\t\tand vit11.inventdimid = id11.inventdimid\r\n                    inner join (\r\n                        select\r\n                            iip111.dataareaid,\r\n                            iip111.itemid,\r\n                            id111.configid,\r\n                            id111.inventsiteid,\r\n                            iip111.modifieddatetime,\r\n                            iip111.activationdate,\r\n                            iip111.createddatetime,\r\n                            iip111.price,\r\n                            iip111.priceunit,\r\n                            iip111.markup,\r\n                            iip111.priceqty\r\n                        from\r\n                            dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.inventitemprice iip111\r\n                            inner join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.inventdim id111 on iip111.dataareaid = id111.dataareaid\r\n\t\t\t\t\t\t\t\tand iip111.inventdimid = id111.inventdimid\r\n                        where\r\n                            iip111.pricetype = 0\r\n                    ) iip11 on vit11.dataareaid = iip11.dataareaid\r\n                    and vit11.itemid = iip11.itemid\r\n                    and id11.configid = iip11.configid\r\n                    and id11.inventsiteid = iip11.inventsiteid\r\n                    and vit11.invoicedate >= iip11.activationdate\r\n            ) iip1\r\n        where\r\n            iip1.row_num = 1\r\n        union all\r\n        select\r\n            iip2.standardcost_source,\r\n            iip2.recid,\r\n            iip2.dataareaid,\r\n            iip2.itemid,\r\n            null as configid,\r\n            iip2.inventsiteid,\r\n            iip2.modifieddatetime,\r\n            iip2.activationdate,\r\n            iip2.createddatetime,\r\n            iip2.standardcost\r\n        from\r\n            (\r\n                select\r\n                    'iip2' as standardcost_source,\r\n                    cit21.recid,\r\n                    cit21.dataareaid,\r\n                    cit21.itemid,\r\n                    id21.inventsiteid,\r\n                    iip21.modifieddatetime,\r\n                    iip21.activationdate,\r\n                    iip21.createddatetime,\r\n                    (\r\n                        (\r\n                            iip21.price / isnull (nullif(iip21.priceunit, 0), 1)\r\n                        ) + (\r\n                            iip21.markup / isnull (nullif(iip21.priceqty, 0), 1)\r\n                        )\r\n                    ) as standardcost,\r\n                    row_number() over (\r\n                        partition by\r\n                            cit21.recid,\r\n                            cit21.dataareaid,\r\n                            cit21.itemid,\r\n                            id21.inventsiteid\r\n                        order by\r\n                            iip21.activationdate desc,\r\n                            iip21.modifieddatetime desc\r\n                    ) as row_num\r\n                from\r\n                    dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.vendinvoicetrans cit21\r\n                    inner join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.inventdim id21 on cit21.dataareaid = id21.dataareaid\r\n\t\t\t\t\t\tand cit21.inventdimid = id21.inventdimid\r\n                    inner join (\r\n                        select\r\n                            iip211.dataareaid,\r\n                            iip211.itemid,\r\n                            id211.inventsiteid,\r\n                            iip211.modifieddatetime,\r\n                            iip211.activationdate,\r\n                            iip211.createddatetime,\r\n                            iip211.price,\r\n                            iip211.priceunit,\r\n                            iip211.markup,\r\n                            iip211.priceqty\r\n                        from\r\n                            dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.inventitemprice iip211\r\n                            inner join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.inventdim id211 on iip211.dataareaid = id211.dataareaid\r\n\t\t\t\t\t\t\t\tand iip211.inventdimid = id211.inventdimid\r\n                        where\r\n                            iip211.pricetype = 0\r\n                    ) iip21 on cit21.dataareaid = iip21.dataareaid\r\n                    and cit21.itemid = iip21.itemid\r\n                    and id21.inventsiteid = iip21.inventsiteid\r\n                    and cit21.invoicedate >= iip21.activationdate\r\n            ) iip2\r\n        where\r\n            iip2.row_num = 1\r\n        union all\r\n        select\r\n            iip3.standardcost_source,\r\n            iip3.recid,\r\n            iip3.dataareaid,\r\n            iip3.itemid,\r\n            iip3.configid,\r\n            null as inventsiteid,\r\n            iip3.modifieddatetime,\r\n            iip3.activationdate,\r\n            iip3.createddatetime,\r\n            iip3.standardcost\r\n        from\r\n            (\r\n                select\r\n                    'iip3' as standardcost_source,\r\n                    cit31.recid,\r\n                    cit31.dataareaid,\r\n                    cit31.itemid,\r\n                    id31.configid,\r\n                    iip31.modifieddatetime,\r\n                    iip31.activationdate,\r\n                    iip31.createddatetime,\r\n                    (\r\n                        (\r\n                            iip31.price / isnull (nullif(iip31.priceunit, 0), 1)\r\n                        ) + (\r\n                            iip31.markup / isnull (nullif(iip31.priceqty, 0), 1)\r\n                        )\r\n                    ) as standardcost,\r\n                    row_number() over (\r\n                        partition by\r\n                            cit31.recid,\r\n                            cit31.dataareaid,\r\n                            cit31.itemid,\r\n                            id31.configid\r\n                        order by\r\n                            iip31.activationdate desc,\r\n                            iip31.modifieddatetime desc\r\n                    ) as row_num\r\n                from\r\n                    dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.vendinvoicetrans cit31\r\n                    inner join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.inventdim id31 on cit31.dataareaid = id31.dataareaid\r\n\t\t\t\t\t\tand cit31.inventdimid = id31.inventdimid\r\n                    inner join (\r\n                        select\r\n                            iip311.dataareaid,\r\n                            iip311.itemid,\r\n                            id311.configid,\r\n                            iip311.modifieddatetime,\r\n                            iip311.activationdate,\r\n                            iip311.createddatetime,\r\n                            iip311.price,\r\n                            iip311.priceunit,\r\n                            iip311.markup,\r\n                            iip311.priceqty\r\n                        from\r\n                            dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.inventitemprice iip311\r\n                            inner join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.inventdim id311 on iip311.dataareaid = id311.dataareaid\r\n\t\t\t\t\t\t\t\tand iip311.inventdimid = id311.inventdimid\r\n                        where\r\n                            iip311.pricetype = 0\r\n                    ) iip31 on cit31.dataareaid = iip31.dataareaid\r\n                    and cit31.itemid = iip31.itemid\r\n                    and id31.configid = iip31.configid\r\n                    and cit31.invoicedate >= iip31.activationdate\r\n            ) iip3\r\n        where\r\n            iip3.row_num = 1\r\n        union all\r\n        select\r\n            iip4.standardcost_source,\r\n            iip4.recid,\r\n            iip4.dataareaid,\r\n            iip4.itemid,\r\n            null as configid,\r\n            null as inventsiteid,\r\n            iip4.modifieddatetime,\r\n            iip4.activationdate,\r\n            iip4.createddatetime,\r\n            iip4.standardcost\r\n        from\r\n            (\r\n                select\r\n                    'iip4' as standardcost_source,\r\n                    cit41.recid,\r\n                    cit41.dataareaid,\r\n                    cit41.itemid,\r\n                    iip41.modifieddatetime,\r\n                    iip41.activationdate,\r\n                    iip41.createddatetime,\r\n                    (\r\n                        (\r\n                            iip41.price / isnull (nullif(iip41.priceunit, 0), 1)\r\n                        ) + (\r\n                            iip41.markup / isnull (nullif(iip41.priceqty, 0), 1)\r\n                        )\r\n                    ) as standardcost,\r\n                    row_number() over (\r\n                        partition by\r\n                            cit41.recid,\r\n                            cit41.dataareaid,\r\n                            cit41.itemid\r\n                        order by\r\n                            iip41.activationdate desc,\r\n                            iip41.modifieddatetime desc\r\n                    ) as row_num\r\n                from\r\n                    dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.vendinvoicetrans cit41\r\n                    inner join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.inventdim id41 on cit41.dataareaid = id41.dataareaid\r\n\t\t\t\t\t\tand cit41.inventdimid = id41.inventdimid\r\n                    inner join (\r\n                        select\r\n                            iip411.dataareaid,\r\n                            iip411.itemid,\r\n                            iip411.modifieddatetime,\r\n                            iip411.activationdate,\r\n                            iip411.createddatetime,\r\n                            iip411.price,\r\n                            iip411.priceunit,\r\n                            iip411.markup,\r\n                            iip411.priceqty\r\n                        from\r\n                            dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.inventitemprice iip411\r\n                            inner join dataverse_nalatst_cds2_workspace_unqe092999b0ee2ee1190466045bda8c.dbo.inventdim id411 on iip411.dataareaid = id411.dataareaid\r\n\t\t\t\t\t\t\t\tand iip411.inventdimid = id411.inventdimid\r\n                        where\r\n                            iip411.pricetype = 0\r\n                    ) iip41 on cit41.dataareaid = iip41.dataareaid\r\n                    and cit41.itemid = iip41.itemid\r\n                    and cit41.invoicedate >= iip41.activationdate\r\n            ) iip4\r\n        where\r\n            iip4.row_num = 1\r\n    ) vit1",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"preCopyScript": {
														"value": "@concat('TRUNCATE TABLE ',pipeline().parameters.p_tgt_raw_schema_nm,'.',pipeline().parameters.p_tgt_raw_table_nm_2)",
														"type": "Expression"
													},
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "STANDARDCOST_SOURCE",
																"type": "String"
															},
															"sink": {
																"name": "STANDARDCOST_SOURCE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "Int64"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ITEMID",
																"type": "String"
															},
															"sink": {
																"name": "ITEMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDIM_CONFIGID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTDIM_CONFIGID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDIM_INVENTSITEID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTDIM_INVENTSITEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTITEMPRICE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE_ACTIVATIONDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTITEMPRICE_ACTIVATIONDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE_CREATEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTITEMPRICE_CREATEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTITEMPRICE_STANDARDCOST",
																"type": "Decimal"
															},
															"sink": {
																"name": "INVENTITEMPRICE_STANDARDCOST",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm_2",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification_2",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "vendinvoicetrans_standardcost_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId,-1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('vendinvoicetrans_standardcost_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('vendinvoicetrans_standardcost_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('vendinvoicetrans_standardcost_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('vendinvoicetrans_standardcost_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail_2",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification_2",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('vendinvoicetrans_standardcost_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "default_wait",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 10
									}
								}
							]
						}
					},
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId,-1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "VENDINVOICETRANS"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "FACT_PURCHASE_INVOICES"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "VENDINVOICETRANS"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					},
					"p_tgt_raw_table_nm_2": {
						"type": "string",
						"defaultValue": "VENDINVOICETRANS_STANDARDCOST"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_vendpackingsliptrans_to_fact_purchase_receipts')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lkp_curate_last_modified_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SnowflakeSource",
								"query": {
									"value": "@concat('select max(to_varchar(LATEST_MODIFIEDDATETIME::timestamp, ''','yyyy-mm-dd hh24:mi:ss',''')) as max_date from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm, '.', pipeline().parameters.p_tgt_raw_table_nm)",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "SnowflakeExportCopyCommand"
								}
							},
							"dataset": {
								"referenceName": "ds_snowflake",
								"type": "DatasetReference",
								"parameters": {
									"p_tgt_table_name": {
										"value": "@pipeline().parameters.p_tgt_raw_table_nm",
										"type": "Expression"
									},
									"p_tgt_schema_name": {
										"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
										"type": "Expression"
									},
									"p_ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"p_ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "set_last_modified_date",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "lkp_curate_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "v_prv_max_upd_timestamp",
							"value": {
								"value": "@coalesce(activity('lkp_curate_last_modified_date').output.firstRow.max_date, '1950-01-01 00:00:00')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_auditDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId,-1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "switch_nala",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "set_last_modified_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId,-1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "select \nvpst1.RECID,\nvpst1.CURRENCYCODE_W,\nvpst1.DEFAULTDIMENSION,\nvpst1.VENDPACKINGSLIPJOUR,\nvpst1.TRANSACTIONCODE,\nvpst1.INVENTDIMID,\nvpst1.ITEMID,\nvpst1.PROCUREMENTCATEGORY,\nvpst1.PURCHUNIT,\nvpst1.ORIGPURCHID,\nvpst1.ACCOUNTINGDATE,\nvpst1.INVENTDATE,\nvpst1.PURCHASELINEEXPECTEDDELIVERYDATE,\nvpst1.DELIVERYDATE,\nvpst1.INVENTTRANSID,\nvpst1.DATAAREAID,\nreplace(vpst1.PACKINGSLIPID,'\\','\\\\') as PACKINGSLIPID,\nvpst1.LINENUM,\nvpst1.PURCHASELINELINENUMBER,\nvpst1.INVENTQTY,\nvpst1.QTY,\nvpst1.LINEAMOUNT_W,\nvpst1.MODIFIEDDATETIME,\nvpsj1.DLVMODE as VENDPACKINGSLIPJOUR_DLVMODE,\nvpsj1.DELIVERYPOSTALADDRESS as VENDPACKINGSLIPJOUR_DELIVERYPOSTALADDRESS,\nvpsj1.INVOICEACCOUNT as VENDPACKINGSLIPJOUR_INVOICEACCOUNT,\nvpsj1.ORDERACCOUNT as VENDPACKINGSLIPJOUR_ORDERACCOUNT,\nvpsj1.MODIFIEDDATETIME as VENDPACKINGSLIPJOUR_MODIFIEDDATETIME,\npt1.RETURNREASONCODEID as PURCHTABLE_RETURNREASONCODEID,\npt1.WORKERPURCHPLACER as PURCHTABLE_WORKERPURCHPLACER,\npt1.REQUESTER as PURCHTABLE_REQUESTER,\npt1.DOCUMENTSTATUS as PURCHTABLE_DOCUMENTSTATUS,\npt1.PURCHSTATUS as PURCHTABLE_PURCHSTATUS,\npt1.DELIVERYDATE as PURCHTABLE_DELIVERYDATE,\npt1.MODIFIEDDATETIME as PURCHTABLE_MODIFIEDDATETIME,\nitm1.UNITID as INVENTTABLEMODULE_UNITID,\nitm1.MODIFIEDDATETIME as INVENTTABLEMODULE_MODIFIEDDATETIME,\npl1.ASSETTRANSTYPEPURCH as PURCHLINE_ASSETTRANSTYPEPURCH,\npl1.DELIVERYTYPE as PURCHLINE_DELIVERYTYPE,\npl1.STOCKEDPRODUCT as PURCHLINE_STOCKEDPRODUCT,\npl1.PURCHSTATUS as PURCHLINE_PURCHSTATUS,\npl1.PURCHASETYPE as PURCHLINE_PURCHASETYPE,\npl1.MODIFIEDDATETIME as PURCHLINE_MODIFIEDDATETIME,\ntet1.ENUMVALUELABEL as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_ASSET_TRANSACTION_TYPE,\ntet2.ENUMVALUELABEL as TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_DELIVERY_TYPE,\ntet3.ENUMVALUELABEL as TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_DOCUMENT_STATUS,\ntet4.ENUMVALUELABEL as TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_PURCH_LINE_STATUS,\ntet5.ENUMVALUELABEL as TIMEXTENDERENUMTABLE5_ENUMVALUELABEL_PURCH_HEADER_STATUS,\ntet6.ENUMVALUELABEL as TIMEXTENDERENUMTABLE6_ENUMVALUELABEL_PURCHASE_TYPE,\n(\n        SELECT\n            MAX(LastUpdateDate)\n        FROM\n            (\n                VALUES\n                    (vpst1.MODIFIEDDATETIME),\n                    (isnull (vpsj1.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull (pt1.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull (itm1.MODIFIEDDATETIME, '1950-01-01')),\n                    (\n                        isnull (\n                            pl1.MODIFIEDDATETIME,\n                            '1950-01-01'\n                        )\n                    )\n            ) AS UpdateDate (LastUpdateDate)\n    ) AS LATEST_MODIFIEDDATETIME\nfrom dbo.VENDPACKINGSLIPTRANS vpst1\nleft join dbo.VENDPACKINGSLIPJOUR vpsj1 on\n\tvpst1.VENDPACKINGSLIPJOUR = vpsj1.RECID\nleft join dbo.PURCHTABLE pt1 on\n\tvpst1.DATAAREAID = pt1.DATAAREAID and\n\tvpst1.ORIGPURCHID = pt1.PURCHID\nleft join dbo.INVENTTABLEMODULE itm1 on\n\titm1.MODULETYPE = 0 and\n\tvpst1.DATAAREAID = itm1.DATAAREAID and\n\tvpst1.ITEMID = itm1.ITEMID\nleft join dbo.PURCHLINE pl1 on\n\tvpst1.DATAAREAID = pl1.DATAAREAID and\n\tvpst1.INVENTTRANSID = pl1.INVENTTRANSID\nleft join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\n\t\twhere ENUMNAME = 'AssetTransTypePurch'\n\t\tgroup by ENUMNAME, ENUMVALUE) tet1 on\n\tpl1.ASSETTRANSTYPEPURCH = tet1.ENUMVALUE\nleft join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\n\t\twhere ENUMNAME = 'TradeLineDlvType'\n\t\tgroup by ENUMNAME, ENUMVALUE) tet2 on\n\tpl1.DELIVERYTYPE = tet2.ENUMVALUE\nleft join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\n\t\twhere ENUMNAME = 'DocumentStatus'\n\t\tgroup by ENUMNAME, ENUMVALUE) tet3 on\n\tpt1.DOCUMENTSTATUS = tet3.ENUMVALUE\nleft join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\n\t\twhere ENUMNAME = 'PurchStatus'\n\t\tgroup by ENUMNAME, ENUMVALUE) tet4 on\n\tpl1.PURCHSTATUS = tet4.ENUMVALUE\nleft join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\n\t\twhere ENUMNAME = 'PurchStatus'\n\t\tgroup by ENUMNAME, ENUMVALUE) tet5 on\n\tpt1.PURCHSTATUS = tet5.ENUMVALUE\nleft join (select ENUMNAME, ENUMVALUE\n\t\t\t, max(ENUMVALUELABEL) as ENUMVALUELABEL\n\t\tfrom dbo.TIMEXTENDERENUMTABLE\n\t\twhere ENUMNAME = 'PurchaseType'\n\t\tgroup by ENUMNAME, ENUMVALUE) tet6 on\n\tpl1.PURCHASETYPE = tet6.ENUMVALUE\nwhere\n(\n        SELECT\n            MAX(LastUpdateDate)\n        FROM\n            (\n                VALUES\n                    (vpst1.MODIFIEDDATETIME),\n                    (isnull (vpsj1.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull (pt1.MODIFIEDDATETIME, '1950-01-01')),\n                    (isnull (itm1.MODIFIEDDATETIME, '1950-01-01')),\n                    (\n                        isnull (\n                            pl1.MODIFIEDDATETIME,\n                            '1950-01-01'\n                        )\n                    )\n            ) AS UpdateDate (LastUpdateDate)\n    ) >  '@{variables('v_prv_max_upd_timestamp')}'",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "Int64"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "CURRENCYCODE_W",
																"type": "String"
															},
															"sink": {
																"name": "CURRENCYCODE_W",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DEFAULTDIMENSION",
																"type": "Int64"
															},
															"sink": {
																"name": "DEFAULTDIMENSION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "VENDPACKINGSLIPJOUR",
																"type": "Int64"
															},
															"sink": {
																"name": "VENDPACKINGSLIPJOUR",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TRANSACTIONCODE",
																"type": "String"
															},
															"sink": {
																"name": "TRANSACTIONCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDIMID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTDIMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ITEMID",
																"type": "String"
															},
															"sink": {
																"name": "ITEMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PROCUREMENTCATEGORY",
																"type": "Int64"
															},
															"sink": {
																"name": "PROCUREMENTCATEGORY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHUNIT",
																"type": "String"
															},
															"sink": {
																"name": "PURCHUNIT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ORIGPURCHID",
																"type": "String"
															},
															"sink": {
																"name": "ORIGPURCHID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ACCOUNTINGDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "ACCOUNTINGDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "PURCHASELINEEXPECTEDDELIVERYDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "PURCHASELINEEXPECTEDDELIVERYDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DELIVERYDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "DELIVERYDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTTRANSID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTTRANSID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PACKINGSLIPID",
																"type": "String"
															},
															"sink": {
																"name": "PACKINGSLIPID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LINENUM",
																"type": "Decimal"
															},
															"sink": {
																"name": "LINENUM",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHASELINELINENUMBER",
																"type": "Int64"
															},
															"sink": {
																"name": "PURCHASELINELINENUMBER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTQTY",
																"type": "Decimal"
															},
															"sink": {
																"name": "INVENTQTY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "QTY",
																"type": "Decimal"
															},
															"sink": {
																"name": "QTY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LINEAMOUNT_W",
																"type": "Decimal"
															},
															"sink": {
																"name": "LINEAMOUNT_W",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "VENDPACKINGSLIPJOUR_DLVMODE",
																"type": "String"
															},
															"sink": {
																"name": "VENDPACKINGSLIPJOUR_DLVMODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "VENDPACKINGSLIPJOUR_DELIVERYPOSTALADDRESS",
																"type": "Int64"
															},
															"sink": {
																"name": "VENDPACKINGSLIPJOUR_DELIVERYPOSTALADDRESS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "VENDPACKINGSLIPJOUR_INVOICEACCOUNT",
																"type": "String"
															},
															"sink": {
																"name": "VENDPACKINGSLIPJOUR_INVOICEACCOUNT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "VENDPACKINGSLIPJOUR_ORDERACCOUNT",
																"type": "String"
															},
															"sink": {
																"name": "VENDPACKINGSLIPJOUR_ORDERACCOUNT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "VENDPACKINGSLIPJOUR_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "VENDPACKINGSLIPJOUR_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_RETURNREASONCODEID",
																"type": "String"
															},
															"sink": {
																"name": "PURCHTABLE_RETURNREASONCODEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_WORKERPURCHPLACER",
																"type": "Int64"
															},
															"sink": {
																"name": "PURCHTABLE_WORKERPURCHPLACER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_REQUESTER",
																"type": "Int64"
															},
															"sink": {
																"name": "PURCHTABLE_REQUESTER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_DOCUMENTSTATUS",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHTABLE_DOCUMENTSTATUS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_PURCHSTATUS",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHTABLE_PURCHSTATUS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_DELIVERYDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "PURCHTABLE_DELIVERYDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "PURCHTABLE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTTABLEMODULE_UNITID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTTABLEMODULE_UNITID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTTABLEMODULE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTTABLEMODULE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_ASSETTRANSTYPEPURCH",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHLINE_ASSETTRANSTYPEPURCH",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_DELIVERYTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHLINE_DELIVERYTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_STOCKEDPRODUCT",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHLINE_STOCKEDPRODUCT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_PURCHSTATUS",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHLINE_PURCHSTATUS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_PURCHASETYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHLINE_PURCHASETYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "PURCHLINE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_ASSET_TRANSACTION_TYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_ASSET_TRANSACTION_TYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_DELIVERY_TYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_DELIVERY_TYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_DOCUMENT_STATUS",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_DOCUMENT_STATUS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_PURCH_LINE_STATUS",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_PURCH_LINE_STATUS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE5_ENUMVALUELABEL_PURCH_HEADER_STATUS",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE5_ENUMVALUELABEL_PURCH_HEADER_STATUS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE6_ENUMVALUELABEL_PURCHASE_TYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE6_ENUMVALUELABEL_PURCHASE_TYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId,-1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId,-1)",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('select \nvpst1.recid AS RECID,\nvpst1.currencycode_w AS CURRENCYCODE_W,\nvpst1.defaultdimension AS DEFAULTDIMENSION,\nvpst1.vendpackingslipjour AS VENDPACKINGSLIPJOUR,\nvpst1.transactioncode AS TRANSACTIONCODE,\nvpst1.inventdimid AS INVENTDIMID,\nvpst1.itemid AS ITEMID,\nvpst1.procurementcategory AS PROCUREMENTCATEGORY,\nvpst1.purchunit AS PURCHUNIT,\nvpst1.origpurchid AS ORIGPURCHID,\nvpst1.accountingdate AS ACCOUNTINGDATE,\nvpst1.inventdate AS INVENTDATE,\nvpst1.purchaselineexpecteddeliverydate AS PURCHASELINEEXPECTEDDELIVERYDATE,\nvpst1.deliverydate AS DELIVERYDATE,\nvpst1.inventtransid AS INVENTTRANSID,\nvpst1.dataareaid AS DATAAREAID,\nreplace(vpst1.packingslipid,''\\'',''\\\\'') as PACKINGSLIPID,\nvpst1.linenum AS LINENUM,\nvpst1.purchaselinelinenumber AS PURCHASELINELINENUMBER,\nvpst1.inventqty AS INVENTQTY,\nvpst1.qty AS QTY,\nvpst1.lineamount_w AS LINEAMOUNT_W,\nvpst1.modifieddatetime AS MODIFIEDDATETIME,\nvpsj1.dlvmode as VENDPACKINGSLIPJOUR_DLVMODE,\nvpsj1.deliverypostaladdress as VENDPACKINGSLIPJOUR_DELIVERYPOSTALADDRESS,\nvpsj1.invoiceaccount as VENDPACKINGSLIPJOUR_INVOICEACCOUNT,\nvpsj1.orderaccount as VENDPACKINGSLIPJOUR_ORDERACCOUNT,\nvpsj1.modifieddatetime as VENDPACKINGSLIPJOUR_MODIFIEDDATETIME,\npt1.returnreasoncodeid as PURCHTABLE_RETURNREASONCODEID,\npt1.workerpurchplacer as PURCHTABLE_WORKERPURCHPLACER,\npt1.requester as PURCHTABLE_REQUESTER,\npt1.documentstatus as PURCHTABLE_DOCUMENTSTATUS,\npt1.purchstatus as PURCHTABLE_PURCHSTATUS,\npt1.deliverydate as PURCHTABLE_DELIVERYDATE,\npt1.modifieddatetime as PURCHTABLE_MODIFIEDDATETIME,\nitm1.unitid as INVENTTABLEMODULE_UNITID,\nitm1.modifieddatetime as INVENTTABLEMODULE_MODIFIEDDATETIME,\npl1.assettranstypepurch as PURCHLINE_ASSETTRANSTYPEPURCH,\npl1.deliverytype as PURCHLINE_DELIVERYTYPE,\npl1.stockedproduct as PURCHLINE_STOCKEDPRODUCT,\npl1.purchstatus as PURCHLINE_PURCHSTATUS,\npl1.purchasetype as PURCHLINE_PURCHASETYPE,\npl1.modifieddatetime as PURCHLINE_MODIFIEDDATETIME,\ntet1.enumvaluelabel as TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_ASSET_TRANSACTION_TYPE,\ntet2.enumvaluelabel as TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_DELIVERY_TYPE,\ntet3.enumvaluelabel as TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_DOCUMENT_STATUS,\ntet4.enumvaluelabel as TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_PURCH_LINE_STATUS,\ntet5.enumvaluelabel as TIMEXTENDERENUMTABLE5_ENUMVALUELABEL_PURCH_HEADER_STATUS,\ntet6.enumvaluelabel as TIMEXTENDERENUMTABLE6_ENUMVALUELABEL_PURCHASE_TYPE,\n(\n        select\n            max(lastupdatedate)\n        from\n            (\n                values\n                    (vpst1.modifieddatetime),\n                    (isnull (vpsj1.modifieddatetime, ''1950-01-01'')),\n                    (isnull (pt1.modifieddatetime, ''1950-01-01'')),\n                    (isnull (itm1.modifieddatetime, ''1950-01-01'')),\n                    (\n                        isnull (\n                            pl1.modifieddatetime,\n                            ''1950-01-01''\n                        )\n                    )\n            ) as updatedate (lastupdatedate)\n    ) as LATEST_MODIFIEDDATETIME\nfrom ',pipeline().globalParameters.d365_dbName,'.','vendpackingsliptrans vpst1\nleft join ',pipeline().globalParameters.d365_dbName,'.','vendpackingslipjour vpsj1 on\n\tvpst1.vendpackingslipjour = vpsj1.recid\nleft join ',pipeline().globalParameters.d365_dbName,'.','purchtable pt1 on\n\tvpst1.dataareaid = pt1.dataareaid and\n\tvpst1.origpurchid = pt1.purchid\nleft join ',pipeline().globalParameters.d365_dbName,'.','inventtablemodule itm1 on\n\titm1.moduletype = 0 and\n\tvpst1.dataareaid = itm1.dataareaid and\n\tvpst1.itemid = itm1.itemid\nleft join ',pipeline().globalParameters.d365_dbName,'.','purchline pl1 on\n\tvpst1.dataareaid = pl1.dataareaid and\n\tvpst1.inventtransid = pl1.inventtransid\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as enumvaluelabel\n\t\tfrom ',pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n\t\twhere enumname = ''assettranstypepurch''\n\t\tgroup by enumname, enumvalue) tet1 on\n\tpl1.assettranstypepurch = tet1.enumvalue\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as enumvaluelabel\n\t\tfrom ',pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n\t\twhere enumname = ''tradelinedlvtype''\n\t\tgroup by enumname, enumvalue) tet2 on\n\tpl1.deliverytype = tet2.enumvalue\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as enumvaluelabel\n\t\tfrom ',pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n\t\twhere enumname = ''documentstatus''\n\t\tgroup by enumname, enumvalue) tet3 on\n\tpt1.documentstatus = tet3.enumvalue\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as enumvaluelabel\n\t\tfrom ',pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n\t\twhere enumname = ''purchstatus''\n\t\tgroup by enumname, enumvalue) tet4 on\n\tpl1.purchstatus = tet4.enumvalue\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as enumvaluelabel\n\t\tfrom ',pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n\t\twhere enumname = ''purchstatus''\n\t\tgroup by enumname, enumvalue) tet5 on\n\tpt1.purchstatus = tet5.enumvalue\nleft join (select enumname, enumvalue\n\t\t\t, max(enumvaluelabel) as enumvaluelabel\n\t\tfrom ',pipeline().globalParameters.d365_dbName,'.','timextenderenumtable\n\t\twhere enumname = ''purchasetype''\n\t\tgroup by enumname, enumvalue) tet6 on\n\tpl1.purchasetype = tet6.enumvalue\nwhere\n(\n        select\n            max(lastupdatedate)\n        from\n            (\n                values\n                    (vpst1.modifieddatetime),\n                    (isnull (vpsj1.modifieddatetime, ''1950-01-01'')),\n                    (isnull (pt1.modifieddatetime, ''1950-01-01'')),\n                    (isnull (itm1.modifieddatetime, ''1950-01-01'')),\n                    (\n                        isnull (\n                            pl1.modifieddatetime,\n                            ''1950-01-01''\n                        )\n                    )\n            ) as updatedate (lastupdatedate)\n    ) > ','''',variables('v_prv_max_upd_timestamp'),'''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "RECID",
																"type": "Int64"
															},
															"sink": {
																"name": "RECID",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "CURRENCYCODE_W",
																"type": "String"
															},
															"sink": {
																"name": "CURRENCYCODE_W",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DEFAULTDIMENSION",
																"type": "Int64"
															},
															"sink": {
																"name": "DEFAULTDIMENSION",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "VENDPACKINGSLIPJOUR",
																"type": "Int64"
															},
															"sink": {
																"name": "VENDPACKINGSLIPJOUR",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "TRANSACTIONCODE",
																"type": "String"
															},
															"sink": {
																"name": "TRANSACTIONCODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTDIMID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTDIMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ITEMID",
																"type": "String"
															},
															"sink": {
																"name": "ITEMID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PROCUREMENTCATEGORY",
																"type": "Int64"
															},
															"sink": {
																"name": "PROCUREMENTCATEGORY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHUNIT",
																"type": "String"
															},
															"sink": {
																"name": "PURCHUNIT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ORIGPURCHID",
																"type": "String"
															},
															"sink": {
																"name": "ORIGPURCHID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "ACCOUNTINGDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "ACCOUNTINGDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "PURCHASELINEEXPECTEDDELIVERYDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "PURCHASELINEEXPECTEDDELIVERYDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "DELIVERYDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "DELIVERYDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTTRANSID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTTRANSID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PACKINGSLIPID",
																"type": "String"
															},
															"sink": {
																"name": "PACKINGSLIPID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LINENUM",
																"type": "Decimal"
															},
															"sink": {
																"name": "LINENUM",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHASELINELINENUMBER",
																"type": "Int64"
															},
															"sink": {
																"name": "PURCHASELINELINENUMBER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "INVENTQTY",
																"type": "Decimal"
															},
															"sink": {
																"name": "INVENTQTY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "QTY",
																"type": "Decimal"
															},
															"sink": {
																"name": "QTY",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "LINEAMOUNT_W",
																"type": "Decimal"
															},
															"sink": {
																"name": "LINEAMOUNT_W",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "VENDPACKINGSLIPJOUR_DLVMODE",
																"type": "String"
															},
															"sink": {
																"name": "VENDPACKINGSLIPJOUR_DLVMODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "VENDPACKINGSLIPJOUR_DELIVERYPOSTALADDRESS",
																"type": "Int64"
															},
															"sink": {
																"name": "VENDPACKINGSLIPJOUR_DELIVERYPOSTALADDRESS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "VENDPACKINGSLIPJOUR_INVOICEACCOUNT",
																"type": "String"
															},
															"sink": {
																"name": "VENDPACKINGSLIPJOUR_INVOICEACCOUNT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "VENDPACKINGSLIPJOUR_ORDERACCOUNT",
																"type": "String"
															},
															"sink": {
																"name": "VENDPACKINGSLIPJOUR_ORDERACCOUNT",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "VENDPACKINGSLIPJOUR_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "VENDPACKINGSLIPJOUR_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_RETURNREASONCODEID",
																"type": "String"
															},
															"sink": {
																"name": "PURCHTABLE_RETURNREASONCODEID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_WORKERPURCHPLACER",
																"type": "Int64"
															},
															"sink": {
																"name": "PURCHTABLE_WORKERPURCHPLACER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_REQUESTER",
																"type": "Int64"
															},
															"sink": {
																"name": "PURCHTABLE_REQUESTER",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_DOCUMENTSTATUS",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHTABLE_DOCUMENTSTATUS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_PURCHSTATUS",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHTABLE_PURCHSTATUS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_DELIVERYDATE",
																"type": "DateTime"
															},
															"sink": {
																"name": "PURCHTABLE_DELIVERYDATE",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "PURCHTABLE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "PURCHTABLE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "INVENTTABLEMODULE_UNITID",
																"type": "String"
															},
															"sink": {
																"name": "INVENTTABLEMODULE_UNITID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "INVENTTABLEMODULE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "INVENTTABLEMODULE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_ASSETTRANSTYPEPURCH",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHLINE_ASSETTRANSTYPEPURCH",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_DELIVERYTYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHLINE_DELIVERYTYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_STOCKEDPRODUCT",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHLINE_STOCKEDPRODUCT",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_PURCHSTATUS",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHLINE_PURCHSTATUS",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_PURCHASETYPE",
																"type": "Int32"
															},
															"sink": {
																"name": "PURCHLINE_PURCHASETYPE",
																"type": "Int64"
															}
														},
														{
															"source": {
																"name": "PURCHLINE_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "PURCHLINE_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_ASSET_TRANSACTION_TYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE1_ENUMVALUELABEL_ASSET_TRANSACTION_TYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_DELIVERY_TYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE2_ENUMVALUELABEL_DELIVERY_TYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_DOCUMENT_STATUS",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE3_ENUMVALUELABEL_DOCUMENT_STATUS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_PURCH_LINE_STATUS",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE4_ENUMVALUELABEL_PURCH_LINE_STATUS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE5_ENUMVALUELABEL_PURCH_HEADER_STATUS",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE5_ENUMVALUELABEL_PURCH_HEADER_STATUS",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "TIMEXTENDERENUMTABLE6_ENUMVALUELABEL_PURCHASE_TYPE",
																"type": "String"
															},
															"sink": {
																"name": "TIMEXTENDERENUMTABLE6_ENUMVALUELABEL_PURCHASE_TYPE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId,-1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "default_wait",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 10
									}
								}
							]
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "VENDPACKINGSLIPTRANS"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "FACT_PURCHASE_RECEIPTS"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "VENDPACKINGSLIPTRANS"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"variables": {
					"v_prv_max_upd_timestamp": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pp_ax_vendpaymmodespec_to_dim_vendor_payment_specification')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "switch_nala",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.p_src_code",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "1",
									"activities": [
										{
											"name": "sql_nala_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "SqlServerSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LATEST_MODIFIEDDATETIME",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": "select\r\n\tvpms1.DATAAREAID as DATAAREAID,\r\n\tvpms1.PAYMMODE as PAYMMODE,\r\n\tvpms1.SPECIFICATION as SPECIFICATION,\r\n\tvpms1.NAME as NAME\r\nfrom\r\n\tdbo.VENDPAYMMODESPEC vpms1;",
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PAYMMODE",
																"type": "String"
															},
															"sink": {
																"name": "PAYMMODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SPECIFICATION",
																"type": "String"
															},
															"sink": {
																"name": "SPECIFICATION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													]
												}
											},
											"inputs": [
												{
													"referenceName": "ds_sql_server",
													"type": "DatasetReference",
													"parameters": {
														"p_src_table_name": {
															"value": "@pipeline().parameters.p_src_table_nm",
															"type": "Expression"
														},
														"p_src_schema_name": {
															"value": "@pipeline().parameters.p_src_schema_nm",
															"type": "Expression"
														},
														"p_ls_serverName": {
															"value": "@pipeline().globalParameters.nala_sql_serverName",
															"type": "Expression"
														},
														"p_ls_dbName": {
															"value": "@pipeline().globalParameters.nala_sql_dbName",
															"type": "Expression"
														},
														"p_ls_sqlUsername": {
															"value": "@pipeline().globalParameters.sql_userName",
															"type": "Expression"
														},
														"p_ls_sqlPassword": {
															"value": "@pipeline().globalParameters.sql_password",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "nala_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_nala_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_nala_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_nala_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_nala_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_nala_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_nala_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "nala_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_nala_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								},
								{
									"value": "3",
									"activities": [
										{
											"name": "sql_d365_to_raw",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "WarehouseSource",
													"additionalColumns": [
														{
															"name": "HK_SOURCE_NAME",
															"value": {
																"value": "@pipeline().parameters.p_src_nm",
																"type": "Expression"
															}
														},
														{
															"name": "HK_JOB_RUN_ID",
															"value": {
																"value": "@coalesce(pipeline().RunId, -1)",
																"type": "Expression"
															}
														},
														{
															"name": "LATEST_MODIFIEDDATETIME",
															"value": {
																"value": "@pipeline().TriggerTime",
																"type": "Expression"
															}
														}
													],
													"sqlReaderQuery": {
														"value": "@concat('select\n\tvpms1.dataareaid as DATAAREAID,\n\tvpms1.paymmode as PAYMMODE,\n\tvpms1.specification as SPECIFICATION,\n\tvpms1.name as NAME\nfrom \n\t',pipeline().globalParameters.d365_dbName,'.','vendpaymmodespec vpms1;')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "SnowflakeSink",
													"importSettings": {
														"type": "SnowflakeImportCopyCommand"
													}
												},
												"enableStaging": true,
												"stagingSettings": {
													"linkedServiceName": {
														"referenceName": "ls_blob_storage",
														"type": "LinkedServiceReference"
													},
													"path": {
														"value": "@pipeline().globalParameters.rootDir",
														"type": "Expression"
													},
													"enableCompression": true
												},
												"translator": {
													"type": "TabularTranslator",
													"mappings": [
														{
															"source": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															},
															"sink": {
																"name": "HK_SOURCE_NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															},
															"sink": {
																"name": "HK_JOB_RUN_ID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "DATAAREAID",
																"type": "String"
															},
															"sink": {
																"name": "DATAAREAID",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "PAYMMODE",
																"type": "String"
															},
															"sink": {
																"name": "PAYMMODE",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "SPECIFICATION",
																"type": "String"
															},
															"sink": {
																"name": "SPECIFICATION",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "NAME",
																"type": "String"
															},
															"sink": {
																"name": "NAME",
																"type": "String"
															}
														},
														{
															"source": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "String"
															},
															"sink": {
																"name": "LATEST_MODIFIEDDATETIME",
																"type": "DateTime"
															}
														}
													],
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "ds_fabric_wh",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "ds_snowflake",
													"type": "DatasetReference",
													"parameters": {
														"p_tgt_table_name": {
															"value": "@pipeline().parameters.p_tgt_raw_table_nm",
															"type": "Expression"
														},
														"p_tgt_schema_name": {
															"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
															"type": "Expression"
														},
														"p_ls_DbName": {
															"value": "@pipeline().globalParameters.snow_rawDb",
															"type": "Expression"
														},
														"p_ls_Env": {
															"value": "@pipeline().globalParameters.environment",
															"type": "Expression"
														}
													}
												}
											]
										},
										{
											"name": "d365_raw_load_failure_notification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "sql_d365_to_raw",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "pp_adf_pipeline_notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"subscription": {
														"value": "@pipeline().globalParameters.subscriptionId",
														"type": "Expression"
													},
													"resourceGroup": {
														"value": "@pipeline().globalParameters.resourceGroup",
														"type": "Expression"
													},
													"runId": {
														"value": "@coalesce(pipeline().RunId, -1)",
														"type": "Expression"
													},
													"name": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													},
													"triggerTime": {
														"value": "@pipeline().TriggerTime",
														"type": "Expression"
													},
													"status": {
														"value": "@activity('sql_d365_to_raw').Status",
														"type": "Expression"
													},
													"message": {
														"value": "@replace(replace(replace(activity('sql_d365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
														"type": "Expression"
													},
													"executionEndTime": {
														"value": "@activity('sql_d365_to_raw').ExecutionEndTime",
														"type": "Expression"
													},
													"runDuration": {
														"value": "@activity('sql_d365_to_raw').Duration",
														"type": "Expression"
													},
													"teamWebhookUrl": {
														"value": "@pipeline().globalParameters.teamsWebhookUrl",
														"type": "Expression"
													},
													"notificationTime": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "sql_d365_load_to_raw_fail",
											"type": "Fail",
											"dependsOn": [
												{
													"activity": "d365_raw_load_failure_notification",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"message": {
													"value": "@activity('sql_d365_to_raw').Error['message']",
													"type": "Expression"
												},
												"errorCode": "500"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "raw_to_curate_sp_call",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "switch_nala",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_snowflake",
							"type": "LinkedServiceReference",
							"parameters": {
								"ls_DbName": {
									"value": "@pipeline().globalParameters.snow_rawDb",
									"type": "Expression"
								},
								"ls_Env": {
									"value": "@pipeline().globalParameters.environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',pipeline().parameters.p_tgt_curate_table_nm,'''',',',pipeline().parameters.p_src_code,')')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "pipeline_execution_notification",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "pp_stored_procedure_failure_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@toUpper('failed')",
												"type": "Expression"
											},
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "curate_load_failure",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "pp_stored_procedure_failure_notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
											"type": "Expression"
										},
										"errorCode": "500"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "stored_procedure_success_notification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pp_adf_pipeline_notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@pipeline().globalParameters.subscriptionId",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@pipeline().globalParameters.resourceGroup",
												"type": "Expression"
											},
											"runId": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": {
												"value": "@activity('raw_to_curate_sp_call').Status",
												"type": "Expression"
											},
											"message": {
												"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
												"type": "Expression"
											},
											"executionEndTime": {
												"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
												"type": "Expression"
											},
											"runDuration": {
												"value": "@activity('raw_to_curate_sp_call').Duration",
												"type": "Expression"
											},
											"teamWebhookUrl": {
												"value": "@pipeline().globalParameters.teamsWebhookUrl",
												"type": "Expression"
											},
											"notificationTime": {
												"value": "@utcNow()",
												"type": "Expression"
											},
											"taskName": {
												"value": "@pipeline().parameters.p_tgt_curate_table_nm",
												"type": "Expression"
											},
											"taskStepNumber": {
												"value": "@pipeline().parameters.p_src_code",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "stored_procedure_failure_notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "raw_to_curate_sp_call",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pp_adf_pipeline_notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"subscription": {
									"value": "@pipeline().globalParameters.subscriptionId",
									"type": "Expression"
								},
								"resourceGroup": {
									"value": "@pipeline().globalParameters.resourceGroup",
									"type": "Expression"
								},
								"runId": {
									"value": "@coalesce(pipeline().RunId,-1)",
									"type": "Expression"
								},
								"name": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"triggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								},
								"status": {
									"value": "@activity('raw_to_curate_sp_call').Status",
									"type": "Expression"
								},
								"message": {
									"value": "@activity('raw_to_curate_sp_call').Error['message']",
									"type": "Expression"
								},
								"executionEndTime": {
									"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
									"type": "Expression"
								},
								"runDuration": {
									"value": "@activity('raw_to_curate_sp_call').Duration",
									"type": "Expression"
								},
								"teamWebhookUrl": {
									"value": "@pipeline().globalParameters.teamsWebhookUrl",
									"type": "Expression"
								},
								"notificationTime": {
									"value": "@utcNow()",
									"type": "Expression"
								},
								"taskName": {
									"value": "@pipeline().parameters.p_tgt_curate_table_nm",
									"type": "Expression"
								},
								"taskStepNumber": {
									"value": "@pipeline().parameters.p_src_code",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_table_nm": {
						"type": "string",
						"defaultValue": "VENDPAYMMODESPEC"
					},
					"p_src_schema_nm": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"p_tgt_raw_table_nm": {
						"type": "string",
						"defaultValue": "VENDPAYMMODESPEC"
					},
					"p_tgt_raw_schema_nm": {
						"type": "string",
						"defaultValue": "AX_NALA"
					},
					"p_tgt_curate_table_nm": {
						"type": "string",
						"defaultValue": "DIM_VENDOR_PAYMENT_SPECIFICATION"
					},
					"p_tgt_curate_schema_nm": {
						"type": "string",
						"defaultValue": "GLOBAL"
					},
					"p_src_nm": {
						"type": "string",
						"defaultValue": "AXNALA"
					},
					"p_src_code": {
						"type": "string",
						"defaultValue": "1"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}