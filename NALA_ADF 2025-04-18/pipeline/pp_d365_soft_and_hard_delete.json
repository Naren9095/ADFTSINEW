{
	"name": "pp_d365_soft_and_hard_delete",
	"properties": {
		"description": "hard and soft deletes from AX source to Snowflake target",
		"activities": [
			{
				"name": "ForEach_sourcescripts",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "lkp_raw_soft_hard_deletes_axnala",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('lkp_raw_soft_hard_deletes_axnala').output.value",
						"type": "Expression"
					},
					"isSequential": false,
					"batchCount": 5,
					"activities": [
						{
							"name": "sql_D365_to_raw",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Truncate_Target_Staging",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "WarehouseSource",
									"additionalColumns": [
										{
											"name": "HK_SOURCE_NAME",
											"value": {
												"value": "@pipeline().parameters.p_src_nm",
												"type": "Expression"
											}
										},
										{
											"name": "HK_JOB_RUN_ID",
											"value": {
												"value": "@coalesce(pipeline().RunId, -1)",
												"type": "Expression"
											}
										}
									],
									"sqlReaderQuery": {
										"value": "@concat('select ', item().PK_SRC_COLS, ',''' , item().RAW_TABLE, ''' as RAW_TABLE,''',item().TARGET_TABLE,''' as TARGET_TABLE,''',item().PK_TGT_COLS,''' as PK_TGT_COLS, ''',item().PK_CURATE_COLS,''' as PK_CURATE_COLS from ', pipeline().globalParameters.d365_dbName,'.', item().SOURCE_TABLE,'  where IsDelete is null;') ",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "SnowflakeSink",
									"importSettings": {
										"type": "SnowflakeImportCopyCommand"
									}
								},
								"enableStaging": true,
								"stagingSettings": {
									"linkedServiceName": {
										"referenceName": "ls_blob_storage",
										"type": "LinkedServiceReference"
									},
									"path": {
										"value": "@pipeline().globalParameters.rootDir",
										"type": "Expression"
									},
									"enableCompression": true
								},
								"enableSkipIncompatibleRow": false,
								"translator": {
									"value": "@json(item().MAPPING)",
									"type": "Expression"
								}
							},
							"inputs": [
								{
									"referenceName": "ds_fabric_wh",
									"type": "DatasetReference"
								}
							],
							"outputs": [
								{
									"referenceName": "ds_snowflake",
									"type": "DatasetReference",
									"parameters": {
										"p_tgt_table_name": {
											"value": "@item().RAW_TABLE",
											"type": "Expression"
										},
										"p_tgt_schema_name": {
											"value": "@pipeline().parameters.p_tgt_raw_schema_nm",
											"type": "Expression"
										},
										"p_ls_DbName": {
											"value": "@pipeline().globalParameters.snow_rawDb",
											"type": "Expression"
										},
										"p_ls_Env": {
											"value": "@pipeline().globalParameters.environment",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "raw_load_failure_notification",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "sql_D365_to_raw",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "pp_adf_pipeline_notification",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"subscription": {
										"value": "@pipeline().globalParameters.subscriptionId",
										"type": "Expression"
									},
									"resourceGroup": {
										"value": "@pipeline().globalParameters.resourceGroup",
										"type": "Expression"
									},
									"runId": {
										"value": "@coalesce(pipeline().RunId, -1)",
										"type": "Expression"
									},
									"name": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"triggerTime": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"status": {
										"value": "@activity('sql_D365_to_raw').Status",
										"type": "Expression"
									},
									"message": {
										"value": "@replace(replace(replace(activity('sql_D365_to_raw').Error['message'], '\\','\\\\'), '''', ''), '\"' , '')",
										"type": "Expression"
									},
									"executionEndTime": {
										"value": "@activity('sql_D365_to_raw').ExecutionEndTime",
										"type": "Expression"
									},
									"runDuration": {
										"value": "@activity('sql_D365_to_raw').Duration",
										"type": "Expression"
									},
									"teamWebhookUrl": {
										"value": "@pipeline().globalParameters.teamsWebhookUrl",
										"type": "Expression"
									},
									"notificationTime": {
										"value": "@utcNow()",
										"type": "Expression"
									},
									"taskName": {
										"value": "@pipeline().parameters.p_tgt_curate_table_nm",
										"type": "Expression"
									},
									"taskStepNumber": {
										"value": "@pipeline().parameters.p_src_code",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "sql_nala_load_to_raw_fail",
							"type": "Fail",
							"dependsOn": [
								{
									"activity": "raw_load_failure_notification",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"message": {
									"value": "@activity('sql_D365_to_raw').Error['message']",
									"type": "Expression"
								},
								"errorCode": "500"
							}
						},
						{
							"name": "raw_to_curate_sp_call",
							"type": "Script",
							"dependsOn": [
								{
									"activity": "sql_D365_to_raw",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "ls_snowflake",
								"type": "LinkedServiceReference",
								"parameters": {
									"ls_DbName": {
										"value": "@pipeline().globalParameters.snow_auditDb",
										"type": "Expression"
									},
									"ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "Query",
										"text": {
											"value": "@concat('CALL ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.CONTROL.SP_TASK_INITIALIZE(','''',pipeline().RunId,'''',',','''',pipeline().globalParameters.environment,'''',',','''',item().TASK_NAME,'''',',',pipeline().parameters.p_src_code,')')",
											"type": "Expression"
										}
									}
								],
								"scriptBlockExecutionTimeout": "02:00:00"
							}
						},
						{
							"name": "stored_procedure_failure_notification",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "raw_to_curate_sp_call",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "pp_adf_pipeline_notification",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"subscription": {
										"value": "@pipeline().globalParameters.subscriptionId",
										"type": "Expression"
									},
									"resourceGroup": {
										"value": "@pipeline().globalParameters.resourceGroup",
										"type": "Expression"
									},
									"runId": {
										"value": "@coalesce(pipeline().RunId,-1)",
										"type": "Expression"
									},
									"name": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"triggerTime": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"status": {
										"value": "@activity('raw_to_curate_sp_call').Status",
										"type": "Expression"
									},
									"message": {
										"value": "@activity('raw_to_curate_sp_call').Error['message']",
										"type": "Expression"
									},
									"executionEndTime": {
										"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
										"type": "Expression"
									},
									"runDuration": {
										"value": "@activity('raw_to_curate_sp_call').Duration",
										"type": "Expression"
									},
									"teamWebhookUrl": {
										"value": "@pipeline().globalParameters.teamsWebhookUrl",
										"type": "Expression"
									},
									"notificationTime": {
										"value": "@utcNow()",
										"type": "Expression"
									},
									"taskName": {
										"value": "@pipeline().parameters.p_tgt_curate_table_nm",
										"type": "Expression"
									},
									"taskStepNumber": {
										"value": "@pipeline().parameters.p_src_code",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "pipeline_execution_notification",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "stored_procedure_failure_notification",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@if(equals(activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE'],'TRUE'),bool('TRUE'), bool('FALSE'))",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "pp_stored_procedure_failure_notification",
										"type": "ExecutePipeline",
										"dependsOn": [],
										"policy": {
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "pp_adf_pipeline_notification",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"subscription": {
													"value": "@pipeline().globalParameters.subscriptionId",
													"type": "Expression"
												},
												"resourceGroup": {
													"value": "@pipeline().globalParameters.resourceGroup",
													"type": "Expression"
												},
												"runId": {
													"value": "@coalesce(pipeline().RunId, -1)",
													"type": "Expression"
												},
												"name": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"triggerTime": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"status": {
													"value": "@toUpper('failed')",
													"type": "Expression"
												},
												"message": {
													"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
													"type": "Expression"
												},
												"executionEndTime": {
													"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
													"type": "Expression"
												},
												"runDuration": {
													"value": "@activity('raw_to_curate_sp_call').Duration",
													"type": "Expression"
												},
												"teamWebhookUrl": {
													"value": "@pipeline().globalParameters.teamsWebhookUrl",
													"type": "Expression"
												},
												"notificationTime": {
													"value": "@utcNow()",
													"type": "Expression"
												},
												"taskName": "@pipeline().parameters.p_tgt_curate_table_nm",
												"taskStepNumber": {
													"value": "@pipeline().parameters.p_src_code",
													"type": "Expression"
												}
											}
										}
									},
									{
										"name": "curate_load_failure",
										"type": "Fail",
										"dependsOn": [
											{
												"activity": "pp_stored_procedure_failure_notification",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"userProperties": [],
										"typeProperties": {
											"message": {
												"value": "@activity('raw_to_curate_sp_call').output.resultSets[0].rows[0]['SP_TASK_INITIALIZE']",
												"type": "Expression"
											},
											"errorCode": "500"
										}
									}
								],
								"ifTrueActivities": [
									{
										"name": "stored_procedure_success_notification",
										"type": "ExecutePipeline",
										"dependsOn": [],
										"policy": {
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "pp_adf_pipeline_notification",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"subscription": {
													"value": "@pipeline().globalParameters.subscriptionId",
													"type": "Expression"
												},
												"resourceGroup": {
													"value": "@pipeline().globalParameters.resourceGroup",
													"type": "Expression"
												},
												"runId": {
													"value": "@coalesce(pipeline().RunId, -1)",
													"type": "Expression"
												},
												"name": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"triggerTime": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"status": {
													"value": "@activity('raw_to_curate_sp_call').Status",
													"type": "Expression"
												},
												"message": {
													"value": "@concat(pipeline().parameters.p_tgt_curate_table_nm, ' is successfully loaded')",
													"type": "Expression"
												},
												"executionEndTime": {
													"value": "@activity('raw_to_curate_sp_call').ExecutionEndTime",
													"type": "Expression"
												},
												"runDuration": {
													"value": "@activity('raw_to_curate_sp_call').Duration",
													"type": "Expression"
												},
												"teamWebhookUrl": {
													"value": "@pipeline().globalParameters.teamsWebhookUrl",
													"type": "Expression"
												},
												"notificationTime": {
													"value": "@utcNow()",
													"type": "Expression"
												},
												"taskName": {
													"value": "@pipeline().parameters.p_tgt_curate_table_nm",
													"type": "Expression"
												},
												"taskStepNumber": {
													"value": "@pipeline().parameters.p_src_code",
													"type": "Expression"
												}
											}
										}
									}
								]
							}
						},
						{
							"name": "Truncate_Target_Staging",
							"description": "Truncate the target table in RAW database to clear old rows",
							"type": "Script",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "ls_snowflake",
								"type": "LinkedServiceReference",
								"parameters": {
									"ls_DbName": {
										"value": "@pipeline().globalParameters.snow_rawDb",
										"type": "Expression"
									},
									"ls_Env": {
										"value": "@pipeline().globalParameters.environment",
										"type": "Expression"
									}
								}
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "Query",
										"text": {
											"value": "@concat('TRUNCATE TABLE ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_rawDb,'.',pipeline().parameters.p_tgt_raw_schema_nm,'.',item().RAW_TABLE)",
											"type": "Expression"
										}
									}
								],
								"scriptBlockExecutionTimeout": "02:00:00"
							}
						}
					]
				}
			},
			{
				"name": "lkp_raw_soft_hard_deletes_axnala",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SnowflakeSource",
						"query": {
							"value": "@concat('select * from ',pipeline().globalParameters.environment,'_',pipeline().globalParameters.snow_auditDb,'.',pipeline().parameters.p_control_schema_nm, '.', pipeline().parameters.p_control_table_nm,' where SOURCE_NAME = ','''',pipeline().parameters.p_src_nm,'''')",
							"type": "Expression"
						},
						"exportSettings": {
							"type": "SnowflakeExportCopyCommand"
						}
					},
					"dataset": {
						"referenceName": "ds_snowflake",
						"type": "DatasetReference",
						"parameters": {
							"p_tgt_table_name": {
								"value": "@pipeline().parameters.p_control_table_nm",
								"type": "Expression"
							},
							"p_tgt_schema_name": {
								"value": "@pipeline().parameters.p_control_schema_nm",
								"type": "Expression"
							},
							"p_ls_DbName": {
								"value": "@pipeline().globalParameters.snow_auditDb",
								"type": "Expression"
							},
							"p_ls_Env": {
								"value": "@pipeline().globalParameters.environment",
								"type": "Expression"
							}
						}
					},
					"firstRowOnly": false
				}
			}
		],
		"parameters": {
			"p_src_nm": {
				"type": "string",
				"defaultValue": "D365"
			},
			"p_control_table_nm": {
				"type": "string",
				"defaultValue": "V_SOFT_HARD_DELETES_CONTROL"
			},
			"p_control_schema_nm": {
				"type": "string",
				"defaultValue": "CONTROL"
			},
			"p_src_schema_nm": {
				"type": "string",
				"defaultValue": "dbo"
			},
			"p_tgt_raw_schema_nm": {
				"type": "string",
				"defaultValue": "D365"
			},
			"p_src_code": {
				"type": "string",
				"defaultValue": "3"
			},
			"p_tgt_curate_table_nm": {
				"type": "string"
			}
		},
		"variables": {
			"p_mapping": {
				"type": "String"
			}
		},
		"annotations": [],
		"lastPublishTime": "2024-06-04T13:47:58Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}